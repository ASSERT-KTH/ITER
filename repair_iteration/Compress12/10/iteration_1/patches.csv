bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(entryOffset  >  entrySize)  {  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  if(entryOffset  >  entrySize)  {  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryOffset  >  entrySize)  {	  if(entrySize    >    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
2	[BUG]  [BUGGY]  if(entrySize  <  entryOffset)  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  if(entrySize  <  entryOffset)  {  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  entryOffset)  {	  if(entrySize    >    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
3	[BUG]  [BUGGY]  if(entrySize  >  entryOffset  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  if(entrySize  >  entryOffset  ||  hasHitEOF)  {  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  >  entryOffset  ||  hasHitEOF)  {	  if(entrySize    >    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
4	[BUG]  [BUGGY]  if(entrySize  >  entryOffset  +  1)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  if(entrySize  >  entryOffset  +  1)  {  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  >  entryOffset  +  1)  {	  if(entrySize    >    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
5	[BUG]  [BUGGY]  if(entrySize  >  entryOffset.length)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  if(entrySize  >  entryOffset.length)  {  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  >  entryOffset.length)  {	  if(entrySize    >    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
6	[BUG]  [BUGGY]  if(entryOffset  <  entrySize)  {  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  if(entryOffset  <  entrySize)  {  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryOffset  <  entrySize)  {	  if(entryOffset    ==    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
7	[BUG]  [BUGGY]  if(entrySize  ==  entryOffset)  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  if(entrySize  ==  entryOffset)  {  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  ==  entryOffset)  {	  if(entryOffset    ==    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
8	[BUG]  [BUGGY]  if(entryOffset  >=  entrySize)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  if(entryOffset  >=  entrySize)  {  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryOffset  >=  entrySize)  {	  if(entryOffset    ==    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
9	[BUG]  [BUGGY]  if(entrySize  ==  0)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  if(entrySize  ==  0)  {  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  ==  0)  {	  if(entryOffset    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
10	[BUG]  [BUGGY]  if(entrySize  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  if(entrySize  <  =  0)  {  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  0)  {	  if(entryOffset    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
11	[BUG]  [BUGGY]  if(entrySize  >=  0)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  if(entrySize  >=  0)  {  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  >=  0)  {	  if(entryOffset    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
12	[BUG]  [BUGGY]  if(entryOffset  <  0)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  if(entryOffset  <  0)  {  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryOffset  <  0)  {	  if(entryOffset    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
13	[BUG]  [BUGGY]  if(entrySize!=  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  if(entrySize!=  entryOffset)  {  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize!=  entryOffset)  {	  if(entryOffset!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
14	[BUG]  [BUGGY]  if(entrySize  >>  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  if(entrySize  >>  entryOffset)  {  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  >>  entryOffset)  {	  if(entryOffset!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
15	[BUG]  [BUGGY]  if(entrySize  +  entryOffset  >=  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  if(entrySize  +  entryOffset  >=  hasHitEOF)  {  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  +  entryOffset  >=  hasHitEOF)  {	  if(entrySize    >=    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
16	[BUG]  [BUGGY]  if(entrySize  +  entryOffset  >  entryOffset)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  if(entrySize  +  entryOffset  >  entryOffset)  {  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  +  entryOffset  >  entryOffset)  {	  if(entrySize    >=    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
17	[BUG]  [BUGGY]  if(entrySize  ==  null)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  if(entrySize  ==  null)  {  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  ==  null)  {	  if(currEntry    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
18	[BUG]  [BUGGY]  if(entryOffset  <  =  entrySize)  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  if(entryOffset  <  =  entrySize)  {  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryOffset  <  =  entrySize)  {	  if(entrySize    <    =    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
19	[BUG]  [BUGGY]  if(entrySize  <  =  entryOffset  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  if(entrySize  <  =  entryOffset  ||  hasHitEOF)  {  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  entryOffset  ||  hasHitEOF)  {	  if(entrySize    <    =    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
20	[BUG]  [BUGGY]  if(entrySize  <  =  entryOffset  +  1)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  if(entrySize  <  =  entryOffset  +  1)  {  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  entryOffset  +  1)  {	  if(entrySize    <    =    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
21	[BUG]  [BUGGY]  if(entrySize  <  entryOffset  ||  entrySize  <  =  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  if(entrySize  <  entryOffset  ||  entrySize  <  =  entryOffset)  {  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  entryOffset  ||  entrySize  <  =  entryOffset)  {	  if(entrySize    <    =    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
22	[BUG]  [BUGGY]  if(entrySize  <  =  entryOffset  ||  entrySize  <  =  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  if(entrySize  <  =  entryOffset  ||  entrySize  <  =  entryOffset)  {  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  entryOffset  ||  entrySize  <  =  entryOffset)  {	  if(entrySize    <    =    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
23	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry();  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry();  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =  getNextTarEntry();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
24	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(longName);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(longName);  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =  getNextTarEntry(longName);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
25	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  return  currEntry;  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  return  currEntry;  }  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  return  currEntry;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
26	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry  ==  null)  {  return  currEntry;  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry  ==  null)  {  return  currEntry;  }  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry  ==  null)  {  return  currEntry;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
27	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.currEntry.getValue();  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.currEntry.getValue();  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)this.currEntry.getValue();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
28	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  throw  new  RuntimeException( " ");  }  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  throw  new  RuntimeException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
29	[BUG]  [BUGGY]  TarBuffer  buffer  =  getNextTarEntry();  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  TarBuffer  buffer  =  getNextTarEntry();  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarBuffer  buffer  =  getNextTarEntry();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
30	[BUG]  [BUGGY]  if(entrySize!=  0)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  if(entrySize!=  0)  {  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize!=  0)  {	  if(entryOffset!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
31	[BUG]  [BUGGY]  if(entryOffset  >=  0)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  if(entryOffset  >=  0)  {  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryOffset  >=  0)  {	  if(entryOffset!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
32	[BUG]  [BUGGY]  if(entrySize  <  =  BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  if(entrySize  <  =  BUFFER_SIZE)  {  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  BUFFER_SIZE)  {	  if(entrySize    <    =    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
33	[BUG]  [BUGGY]  if(entrySize  <  =  LAST_ENTRY_SIZE)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  if(entrySize  <  =  LAST_ENTRY_SIZE)  {  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  LAST_ENTRY_SIZE)  {	  if(entrySize    <    =    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
34	[BUG]  [BUGGY]  if(entrySize  <  =  EntryOffset.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  if(entrySize  <  =  EntryOffset.MIN_VALUE)  {  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  EntryOffset.MIN_VALUE)  {	  if(entrySize    <    =    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
35	[BUG]  [BUGGY]  if(entrySize  <  =  EntryOffset.BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  if(entrySize  <  =  EntryOffset.BUFFER_SIZE)  {  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  EntryOffset.BUFFER_SIZE)  {	  if(entrySize    <    =    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
36	[BUG]  [BUGGY]  if(entrySize  >=  null)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  if(entrySize  >=  null)  {  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  >=  null)  {	  if(entryOffset    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
37	[BUG]  [BUGGY]  TarBuffer  buffer  =  getNextTarEntry(longName);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  TarBuffer  buffer  =  getNextTarEntry(longName);  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarBuffer  buffer  =  getNextTarEntry(longName);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
38	[BUG]  [BUGGY]  int  entryOffset  =  getEntryOffset();  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  int  entryOffset  =  getEntryOffset();  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	int  entryOffset  =  getEntryOffset();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
39	[BUG]  [BUGGY]  TarBuffer  buffer  =  new  TarBuffer();  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  TarBuffer  buffer  =  new  TarBuffer();  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarBuffer  buffer  =  new  TarBuffer();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
40	[BUG]  [BUGGY]  long  entryOffset  =  getHitEOF();  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  long  entryOffset  =  getHitEOF();  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	long  entryOffset  =  getHitEOF();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
41	[BUG]  [BUGGY]  if(entrySize  >  0)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  if(entrySize  >  0)  {  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  >  0)  {	  if(entryOffset!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
42	[BUG]  [BUGGY]  if(entrySize  >>  0)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  if(entrySize  >>  0)  {  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  >>  0)  {	  if(entryOffset!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
43	[BUG]  [BUGGY]  if(entrySize  +  entryOffset)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  if(entrySize  +  entryOffset)  {  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  +  entryOffset)  {	  if(entrySize    >=    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
44	[BUG]  [BUGGY]  if(entrySize  *  entryOffset)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  if(entrySize  *  entryOffset)  {  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  *  entryOffset)  {	  if(entrySize    >=    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
45	[BUG]  [BUGGY]  if(entryOffset  >  0)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  if(entryOffset  >  0)  {  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryOffset  >  0)  {	  if(entryOffset    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
46	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  if(currEntry  ==  null  ||  hasHitEOF)  {  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(currEntry  ==  null  ||  hasHitEOF)  {	  if(currEntry    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
47	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  entryOffset  <  0)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  if(currEntry  ==  null  ||  entryOffset  <  0)  {  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(currEntry  ==  null  ||  entryOffset  <  0)  {	  if(currEntry    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
48	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  entrySize  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  if(currEntry  ==  null  ||  entrySize  <  =  0)  {  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(currEntry  ==  null  ||  entrySize  <  =  0)  {	  if(currEntry    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
49	[BUG]  [BUGGY]  if(entrySize!=  null)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  if(entrySize!=  null)  {  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize!=  null)  {	  if(entryOffset!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
50	[BUG]  [BUGGY]  if(entrySize  <  =  EntrySize)  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  if(entrySize  <  =  EntrySize)  {  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  EntrySize)  {	  if(entrySize    <    =    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
51	[BUG]  [BUGGY]  if(entrySize  <  =  EntrySize.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  if(entrySize  <  =  EntrySize.MIN_VALUE)  {  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  EntrySize.MIN_VALUE)  {	  if(entrySize    <    =    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
52	[BUG]  [BUGGY]  if(entrySize  <  =  EntrySize.BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  if(entrySize  <  =  EntrySize.BUFFER_SIZE)  {  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  EntrySize.BUFFER_SIZE)  {	  if(entrySize    <    =    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
53	[BUG]  [BUGGY]  if(entrySize  <  =  EntrySize.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  if(entrySize  <  =  EntrySize.MAX_VALUE)  {  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  EntrySize.MAX_VALUE)  {	  if(entrySize    <    =    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
54	[BUG]  [BUGGY]  if(entrySize  >  entryOffset,  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  if(entrySize  >  entryOffset,  hasHitEOF)  {  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  >  entryOffset,  hasHitEOF)  {	  if(entrySize    >    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
55	[BUG]  [BUGGY]  Integer  entryOffset  =  getHitEOF();  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  Integer  entryOffset  =  getHitEOF();  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	Integer  entryOffset  =  getHitEOF();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
56	[BUG]  [BUGGY]  long  entrySize  =  getHitEOF();  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  long  entrySize  =  getHitEOF();  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	long  entrySize  =  getHitEOF();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
57	[BUG]  [BUGGY]  long  entryOffset  =  getEntryOffset();  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  long  entryOffset  =  getEntryOffset();  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	long  entryOffset  =  getEntryOffset();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
58	[BUG]  [BUGGY]  byte[]  buf  =  buffer.getBytes( "UTF-8 ");  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  buf  =  buffer.getBytes( "UTF-8 ");  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	byte[]  buf  =  buffer.getBytes( "UTF-8 ");	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
59	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntryOffset();  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  Integer  entryOffset  =  getEntryOffset();  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	Integer  entryOffset  =  getEntryOffset();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
60	[BUG]  [BUGGY]  if(entrySize  +  entryOffset  >  entrySize)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  if(entrySize  +  entryOffset  >  entrySize)  {  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  +  entryOffset  >  entrySize)  {	  if(entrySize    >=    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
61	[BUG]  [BUGGY]  if(entrySize  +  entryOffset  <  entryOffset)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  if(entrySize  +  entryOffset  <  entryOffset)  {  [BUGGY]    long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  +  entryOffset  <  entryOffset)  {	  if(entrySize    >=    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
