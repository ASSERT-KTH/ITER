bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(entryOffset  +  entrySize)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entryOffset  +  entrySize)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryOffset  +  entrySize)  {	  if(entrySize    +    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
2	[BUG]  [BUGGY]  if(entrySize  +  entryOffset  <  SMALL_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  +  entryOffset  <  SMALL_BUFFER_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  +  entryOffset  <  SMALL_BUFFER_SIZE)  {	  if(entrySize    +    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
3	[BUG]  [BUGGY]  if(entrySize  -  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  -  entryOffset)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  -  entryOffset)  {	  if(entrySize    +    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
4	[BUG]  [BUGGY]  if(entrySize  +  entryOffset  <  =  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  +  entryOffset  <  =  entryOffset)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  +  entryOffset  <  =  entryOffset)  {	  if(entrySize    +    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
5	[BUG]  [BUGGY]  if(entrySize  +  entryOffset  >  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  +  entryOffset  >  hasHitEOF)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  +  entryOffset  >  hasHitEOF)  {	  if(entrySize    +    entryOffset    >=    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
6	[BUG]  [BUGGY]  if(entryOffset  +  entrySize  >=  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entryOffset  +  entrySize  >=  hasHitEOF)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryOffset  +  entrySize  >=  hasHitEOF)  {	  if(entrySize    +    entryOffset    >=    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
7	[BUG]  [BUGGY]  if(entrySize  *  entryOffset  >=  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  *  entryOffset  >=  hasHitEOF)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  *  entryOffset  >=  hasHitEOF)  {	  if(entrySize    +    entryOffset    >=    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
8	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  >=  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  -  entryOffset  >=  hasHitEOF)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  -  entryOffset  >=  hasHitEOF)  {	  if(entrySize    +    entryOffset    >=    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
9	[BUG]  [BUGGY]  if(entrySize  +  entryOffset  <  =  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  +  entryOffset  <  =  hasHitEOF)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  +  entryOffset  <  =  hasHitEOF)  {	  if(entrySize    +    entryOffset    >=    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
10	[BUG]  [BUGGY]  if(entrySize  +  entryOffset  ==  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  +  entryOffset  ==  hasHitEOF)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  +  entryOffset  ==  hasHitEOF)  {	  if(entrySize    +    entryOffset    >=    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
11	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextHitEOF();  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarArchiveEntry  currEntry  =  getNextHitEOF();  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =  getNextHitEOF();	  TarArchiveEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
12	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(entryOffset);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(entryOffset);  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =  getNextTarEntry(entryOffset);	  TarArchiveEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
13	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentTarEntry();  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentTarEntry();  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =  getCurrentTarEntry();	  TarArchiveEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
14	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(null);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(null);  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =  getNextTarEntry(null);	  TarArchiveEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
15	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextFileEntry();  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarArchiveEntry  currEntry  =  getNextFileEntry();  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =  getNextFileEntry();	  TarArchiveEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
16	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)getNextEntry();  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)getNextEntry();  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)getNextEntry();	  TarArchiveEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
17	[BUG]  [BUGGY]  if(entryOffset  +  entrySize  >  entrySize)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entryOffset  +  entrySize  >  entrySize)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryOffset  +  entrySize  >  entrySize)  {	  if(entrySize    +    entryOffset    >    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
18	[BUG]  [BUGGY]  if(entrySize  +  entryOffset  <  entrySize)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  +  entryOffset  <  entrySize)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  +  entryOffset  <  entrySize)  {	  if(entrySize    +    entryOffset    >    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
19	[BUG]  [BUGGY]  if(entrySize  +  entryOffset  >=  entrySize)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  +  entryOffset  >=  entrySize)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  +  entryOffset  >=  entrySize)  {	  if(entrySize    +    entryOffset    >    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
20	[BUG]  [BUGGY]  if(entrySize  +  entryOffset  <  =  entrySize)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  +  entryOffset  <  =  entrySize)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  +  entryOffset  <  =  entrySize)  {	  if(entrySize    +    entryOffset    >    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
21	[BUG]  [BUGGY]  if(entrySize  +  entryOffset  >  MAX_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  +  entryOffset  >  MAX_BUFFER_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  +  entryOffset  >  MAX_BUFFER_SIZE)  {	  if(entrySize    +    entryOffset    >    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
22	[BUG]  [BUGGY]  if(entrySize  <  EntrySize.BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  EntrySize.BUFFER_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  EntrySize.BUFFER_SIZE)  {	  if(entrySize    <    =    EntrySize.BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
23	[BUG]  [BUGGY]  if(entryOffset  <  =  EntrySize.BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entryOffset  <  =  EntrySize.BUFFER_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryOffset  <  =  EntrySize.BUFFER_SIZE)  {	  if(entrySize    <    =    EntrySize.BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
24	[BUG]  [BUGGY]  if(entrySize  <  entryOffset  ||  entrySize  <  =  EntrySize.BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  entryOffset  ||  entrySize  <  =  EntrySize.BUFFER_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  entryOffset  ||  entrySize  <  =  EntrySize.BUFFER_SIZE)  {	  if(entrySize    <    =    EntrySize.BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
25	[BUG]  [BUGGY]  if(entrySize  <  EntrySize.BUFFER_SIZE  ||  entryOffset  <  =  EntrySize.BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  EntrySize.BUFFER_SIZE  ||  entryOffset  <  =  EntrySize.BUFFER_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  EntrySize.BUFFER_SIZE  ||  entryOffset  <  =  EntrySize.BUFFER_SIZE)  {	  if(entrySize    <    =    EntrySize.BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
26	[BUG]  [BUGGY]  if(entrySize  <  EntrySize.BUFFER_SIZE  ||  entryOffset  >  EntrySize.BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  EntrySize.BUFFER_SIZE  ||  entryOffset  >  EntrySize.BUFFER_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  EntrySize.BUFFER_SIZE  ||  entryOffset  >  EntrySize.BUFFER_SIZE)  {	  if(entrySize    <    =    EntrySize.BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
27	[BUG]  [BUGGY]  if(entryOffset  ==  null  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entryOffset  ==  null  ||  hasHitEOF)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryOffset  ==  null  ||  hasHitEOF)  {	  if(currEntry    ==    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
28	[BUG]  [BUGGY]  if(entryOffset  ==  0  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entryOffset  ==  0  ||  hasHitEOF)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryOffset  ==  0  ||  hasHitEOF)  {	  if(currEntry    ==    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
29	[BUG]  [BUGGY]  if(currEntry!=  null  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(currEntry!=  null  ||  hasHitEOF)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(currEntry!=  null  ||  hasHitEOF)  {	  if(currEntry    ==    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
30	[BUG]  [BUGGY]  if(entrySize  ==  0  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  ==  0  ||  hasHitEOF)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  ==  0  ||  hasHitEOF)  {	  if(currEntry    ==    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
31	[BUG]  [BUGGY]  if(entrySize  ==  null  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  ==  null  ||  hasHitEOF)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  ==  null  ||  hasHitEOF)  {	  if(currEntry    ==    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
32	[BUG]  [BUGGY]  if(entryOffset  ==  entrySize  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entryOffset  ==  entrySize  ||  hasHitEOF)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryOffset  ==  entrySize  ||  hasHitEOF)  {	  if(currEntry    ==    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
33	[BUG]  [BUGGY]  int  entryOffset  =  getEntryOffset()  -  1;  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  int  entryOffset  =  getEntryOffset()  -  1;  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	int  entryOffset  =  getEntryOffset()  -  1;	  int    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
34	[BUG]  [BUGGY]  int  entryOffset  =  getEntryOffset()  +  1;  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  int  entryOffset  =  getEntryOffset()  +  1;  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	int  entryOffset  =  getEntryOffset()  +  1;	  int    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
35	[BUG]  [BUGGY]  short  entryOffset  =  getEntryOffset();  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  short  entryOffset  =  getEntryOffset();  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	short  entryOffset  =  getEntryOffset();	  int    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
36	[BUG]  [BUGGY]  Long  entryOffset  =  getEntryOffset();  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  Long  entryOffset  =  getEntryOffset();  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	Long  entryOffset  =  getEntryOffset();	  int    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
37	[BUG]  [BUGGY]  int  entryOffset  =  getEntryOffset()  -  2;  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  int  entryOffset  =  getEntryOffset()  -  2;  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	int  entryOffset  =  getEntryOffset()  -  2;	  int    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
38	[BUG]  [BUGGY]  TarBuffer  buffer  =  getNextEntry();  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarBuffer  buffer  =  getNextEntry();  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarBuffer  buffer  =  getNextEntry();	  TarBuffer    buffer    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
39	[BUG]  [BUGGY]  TarBuffer  buffer  =  getNextArchiveEntry();  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarBuffer  buffer  =  getNextArchiveEntry();  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarBuffer  buffer  =  getNextArchiveEntry();	  TarBuffer    buffer    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
40	[BUG]  [BUGGY]  TarBuffer  buffer  =(TarBuffer)getNextEntry();  [CE]  illegal  start  of  type  [FE]                                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarBuffer  buffer  =(TarBuffer)getNextEntry();  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarBuffer  buffer  =(TarBuffer)getNextEntry();	  TarBuffer    buffer    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
41	[BUG]  [BUGGY]  TarBuffer  buffer  =  getNextTarEntry(null);  [CE]  illegal  start  of  type  [FE]                                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarBuffer  buffer  =  getNextTarEntry(null);  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarBuffer  buffer  =  getNextTarEntry(null);	  TarBuffer    buffer    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
42	[BUG]  [BUGGY]  TarBuffer  buffer  =  getNextByteBuffer();  [CE]  illegal  start  of  type  [FE]                                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarBuffer  buffer  =  getNextByteBuffer();  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarBuffer  buffer  =  getNextByteBuffer();	  TarBuffer    buffer    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
43	[BUG]  [BUGGY]  TarBuffer  buffer  =  getNextHitEOF();  [CE]  illegal  start  of  type  [FE]                                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarBuffer  buffer  =  getNextHitEOF();  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarBuffer  buffer  =  getNextHitEOF();	  TarBuffer    buffer    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
44	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry  ==  null)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry  ==  null)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry  ==  null)  {  throw  new  RuntimeException( " ");  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
45	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentTarEntry();  if(currEntry!=  null)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentTarEntry();  if(currEntry!=  null)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =  getCurrentTarEntry();  if(currEntry!=  null)  {  throw  new  RuntimeException( " ");  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
46	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	final  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  throw  new  RuntimeException( " ");  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
47	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextHitEOF();  if(currEntry!=  null)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  type  [FE]                                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarArchiveEntry  currEntry  =  getNextHitEOF();  if(currEntry!=  null)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =  getNextHitEOF();  if(currEntry!=  null)  {  throw  new  RuntimeException( " ");  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
48	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  this.getNextTarEntry();  if(currEntry!=  null)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  type  [FE]                                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarArchiveEntry  currEntry  =  this.getNextTarEntry();  if(currEntry!=  null)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =  this.getNextTarEntry();  if(currEntry!=  null)  {  throw  new  RuntimeException( " ");  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
49	[BUG]  [BUGGY]  if(entrySize  <  entryOffset  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  entryOffset  ||  hasHitEOF)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  entryOffset  ||  hasHitEOF)  {	  if(entrySize    <    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
50	[BUG]  [BUGGY]  if(entrySize  <  entryOffset  +  1)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  entryOffset  +  1)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  entryOffset  +  1)  {	  if(entrySize    <    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
51	[BUG]  [BUGGY]  if(entryOffset  +  entrySize  >  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entryOffset  +  entrySize  >  entryOffset)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryOffset  +  entrySize  >  entryOffset)  {	  if(entrySize    +    entryOffset    >    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
52	[BUG]  [BUGGY]  if(entrySize  +  entryOffset  >=  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  +  entryOffset  >=  entryOffset)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  +  entryOffset  >=  entryOffset)  {	  if(entrySize    +    entryOffset    >    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
53	[BUG]  [BUGGY]  if(entrySize  *  entryOffset  >  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  *  entryOffset  >  entryOffset)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  *  entryOffset  >  entryOffset)  {	  if(entrySize    +    entryOffset    >    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
54	[BUG]  [BUGGY]  if(entrySize  +  entryOffset  >  entryOffset.length)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  +  entryOffset  >  entryOffset.length)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  +  entryOffset  >  entryOffset.length)  {	  if(entrySize    +    entryOffset    >    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
55	[BUG]  [BUGGY]  if(entryOffset  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entryOffset  <  =  0)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryOffset  <  =  0)  {	  if(entryOffset    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
56	[BUG]  [BUGGY]  long  entryOffset  =  getHitEOF()  -  1;  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  long  entryOffset  =  getHitEOF()  -  1;  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	long  entryOffset  =  getHitEOF()  -  1;	  long    entryOffset    =    getHitEOF();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
57	[BUG]  [BUGGY]  long  entryOffset  =  getHitEOF()  +  1;  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  long  entryOffset  =  getHitEOF()  +  1;  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	long  entryOffset  =  getHitEOF()  +  1;	  long    entryOffset    =    getHitEOF();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
58	[BUG]  [BUGGY]  long  entryOffset  =  getHitEOF().length;  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  long  entryOffset  =  getHitEOF().length;  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	long  entryOffset  =  getHitEOF().length;	  long    entryOffset    =    getHitEOF();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
59	[BUG]  [BUGGY]  long  entryOffset  =  getHitEOF()  /  2;  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  long  entryOffset  =  getHitEOF()  /  2;  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	long  entryOffset  =  getHitEOF()  /  2;	  long    entryOffset    =    getHitEOF();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
60	[BUG]  [BUGGY]  long  entryOffset  =  getEntrySize();  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  long  entryOffset  =  getEntrySize();  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	long  entryOffset  =  getEntrySize();	  long    entryOffset    =    getHitEOF();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
61	[BUG]  [BUGGY]  if(entrySize  ==  null  ||  entryOffset  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  ==  null  ||  entryOffset  <  =  0)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  ==  null  ||  entryOffset  <  =  0)  {	  if(currEntry    ==    null    ||    entrySize    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
62	[BUG]  [BUGGY]  if(entryOffset  ==  null  ||  entrySize  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entryOffset  ==  null  ||  entrySize  <  =  0)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryOffset  ==  null  ||  entrySize  <  =  0)  {	  if(currEntry    ==    null    ||    entrySize    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
63	[BUG]  [BUGGY]  if(entryOffset  ==  entrySize  ||  entrySize  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entryOffset  ==  entrySize  ||  entrySize  <  =  0)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryOffset  ==  entrySize  ||  entrySize  <  =  0)  {	  if(currEntry    ==    null    ||    entrySize    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
64	[BUG]  [BUGGY]  if(entrySize  ==  null  ||  entrySize  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  ==  null  ||  entrySize  <  =  0)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  ==  null  ||  entrySize  <  =  0)  {	  if(currEntry    ==    null    ||    entrySize    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
65	[BUG]  [BUGGY]  if(entrySize  ==  0  ||  entrySize  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  ==  0  ||  entrySize  <  =  0)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  ==  0  ||  entrySize  <  =  0)  {	  if(currEntry    ==    null    ||    entrySize    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
66	[BUG]  [BUGGY]  if(entrySize  <  =  0  ||  currEntry  ==  null)  {  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  =  0  ||  currEntry  ==  null)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  0  ||  currEntry  ==  null)  {	  if(currEntry    ==    null    ||    entrySize    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
67	[BUG]  [BUGGY]  if(entrySize  +  entryOffset  <  0)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  +  entryOffset  <  0)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  +  entryOffset  <  0)  {	  if(entrySize    +    entryOffset    <    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
68	[BUG]  [BUGGY]  if(entryOffset  +  entrySize  <  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entryOffset  +  entrySize  <  entryOffset)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryOffset  +  entrySize  <  entryOffset)  {	  if(entrySize    +    entryOffset    <    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
69	[BUG]  [BUGGY]  if(entrySize  *  entryOffset  <  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  *  entryOffset  <  entryOffset)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  *  entryOffset  <  entryOffset)  {	  if(entrySize    +    entryOffset    <    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
70	[BUG]  [BUGGY]  TarBuffer  buffer  =  new  TarBuffer(lengthName);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarBuffer  buffer  =  new  TarBuffer(lengthName);  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarBuffer  buffer  =  new  TarBuffer(lengthName);	  TarBuffer    buffer    =    new    TarBuffer();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
71	[BUG]  [BUGGY]  TarBuffer  buffer  =  new  TarBuffer(256);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarBuffer  buffer  =  new  TarBuffer(256);  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarBuffer  buffer  =  new  TarBuffer(256);	  TarBuffer    buffer    =    new    TarBuffer();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
72	[BUG]  [BUGGY]  TarBuffer  buffer  =  new  TarBuffer(64);  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarBuffer  buffer  =  new  TarBuffer(64);  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarBuffer  buffer  =  new  TarBuffer(64);	  TarBuffer    buffer    =    new    TarBuffer();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
73	[BUG]  [BUGGY]  TarBuffer  buffer  =  new  TarBuffer(32);  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarBuffer  buffer  =  new  TarBuffer(32);  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarBuffer  buffer  =  new  TarBuffer(32);	  TarBuffer    buffer    =    new    TarBuffer();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
74	[BUG]  [BUGGY]  TarBuffer  buffer  =  new  TarBuffer(length);  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarBuffer  buffer  =  new  TarBuffer(length);  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarBuffer  buffer  =  new  TarBuffer(length);	  TarBuffer    buffer    =    new    TarBuffer();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
75	[BUG]  [BUGGY]  TarBuffer  buffer  =  new  TarBuffer(100);  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarBuffer  buffer  =  new  TarBuffer(100);  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarBuffer  buffer  =  new  TarBuffer(100);	  TarBuffer    buffer    =    new    TarBuffer();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
76	[BUG]  [BUGGY]  if(entrySize  <  EntryOffset.BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  EntryOffset.BUFFER_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  EntryOffset.BUFFER_SIZE)  {	  if(entrySize    <    =    EntryOffset.BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
77	[BUG]  [BUGGY]  if(entryOffset  <  =  EntryOffset.BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entryOffset  <  =  EntryOffset.BUFFER_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryOffset  <  =  EntryOffset.BUFFER_SIZE)  {	  if(entrySize    <    =    EntryOffset.BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
78	[BUG]  [BUGGY]  if(entrySize  <  entryOffset.BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  entryOffset.BUFFER_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  entryOffset.BUFFER_SIZE)  {	  if(entrySize    <    =    EntryOffset.BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
79	[BUG]  [BUGGY]  if(entrySize  >=  EntryOffset.BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  >=  EntryOffset.BUFFER_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  >=  EntryOffset.BUFFER_SIZE)  {	  if(entrySize    <    =    EntryOffset.BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
80	[BUG]  [BUGGY]  if(entryOffset  <  entrySize  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entryOffset  <  entrySize  ||  hasHitEOF)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryOffset  <  entrySize  ||  hasHitEOF)  {	  if(entrySize    <    =    entryOffset    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
81	[BUG]  [BUGGY]  if(entrySize  <  =  entryOffset  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  =  entryOffset  &&  hasHitEOF)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  entryOffset  &&  hasHitEOF)  {	  if(entrySize    <    =    entryOffset    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
82	[BUG]  [BUGGY]  if(entrySize  >=  entryOffset  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  >=  entryOffset  ||  hasHitEOF)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  >=  entryOffset  ||  hasHitEOF)  {	  if(entrySize    <    =    entryOffset    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
83	[BUG]  [BUGGY]  if(entryOffset  <  =  entrySize  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entryOffset  <  =  entrySize  ||  hasHitEOF)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryOffset  <  =  entrySize  ||  hasHitEOF)  {	  if(entrySize    <    =    entryOffset    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
84	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(longName,  false);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(longName,  false);  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =  getNextTarEntry(longName,  false);	  TarArchiveEntry    currEntry    =    getNextTarEntry(longName);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
85	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(longName,  true);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(longName,  true);  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =  getNextTarEntry(longName,  true);	  TarArchiveEntry    currEntry    =    getNextTarEntry(longName);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
86	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(longName,  entryOffset);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(longName,  entryOffset);  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =  getNextTarEntry(longName,  entryOffset);	  TarArchiveEntry    currEntry    =    getNextTarEntry(longName);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
87	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(getHitEOF());  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(getHitEOF());  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =  getNextTarEntry(getHitEOF());	  TarArchiveEntry    currEntry    =    getNextTarEntry(longName);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
88	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(longName,  0);  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(longName,  0);  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =  getNextTarEntry(longName,  0);	  TarArchiveEntry    currEntry    =    getNextTarEntry(longName);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
89	[BUG]  [BUGGY]  if(entrySize  <  =  0  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  =  0  ||  hasHitEOF)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  0  ||  hasHitEOF)  {	  if(entrySize    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
90	[BUG]  [BUGGY]  if(entrySize  <  =  0  ||  entryOffset  ==  BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  =  0  ||  entryOffset  ==  BUFFER_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  0  ||  entryOffset  ==  BUFFER_SIZE)  {	  if(entrySize    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
91	[BUG]  [BUGGY]  if(entrySize  <  =  0  ||  entryOffset  >=  BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  =  0  ||  entryOffset  >=  BUFFER_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  0  ||  entryOffset  >=  BUFFER_SIZE)  {	  if(entrySize    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
92	[BUG]  [BUGGY]  if(entrySize  <  =  0  ||  entryOffset  >  BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  =  0  ||  entryOffset  >  BUFFER_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  0  ||  entryOffset  >  BUFFER_SIZE)  {	  if(entrySize    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
93	[BUG]  [BUGGY]  if(entrySize  <  =  0  ||  entryOffset  >  entrySize)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  =  0  ||  entryOffset  >  entrySize)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  0  ||  entryOffset  >  entrySize)  {	  if(entrySize    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
94	[BUG]  [BUGGY]  if(entrySize  >  entryOffset.length  -  1)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  >  entryOffset.length  -  1)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  >  entryOffset.length  -  1)  {	  if(entrySize    >    entryOffset.length)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
95	[BUG]  [BUGGY]  if(entrySize  <  entryOffset.length)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  entryOffset.length)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  entryOffset.length)  {	  if(entrySize    >    entryOffset.length)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
96	[BUG]  [BUGGY]  if(entryOffset  >  entrySize.length)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entryOffset  >  entrySize.length)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryOffset  >  entrySize.length)  {	  if(entrySize    >    entryOffset.length)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
97	[BUG]  [BUGGY]  if(entrySize  >  entryOffset.length  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  >  entryOffset.length  ||  hasHitEOF)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  >  entryOffset.length  ||  hasHitEOF)  {	  if(entrySize    >    entryOffset.length)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
98	[BUG]  [BUGGY]  if(entrySize  >  entryOffset.length  +  1)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  >  entryOffset.length  +  1)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  >  entryOffset.length  +  1)  {	  if(entrySize    >    entryOffset.length)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
99	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  return  currEntry;  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  return  currEntry;  }  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	final  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  return  currEntry;  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
100	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextHitEOF();  if(currEntry!=  null)  {  return  currEntry;  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarArchiveEntry  currEntry  =  getNextHitEOF();  if(currEntry!=  null)  {  return  currEntry;  }  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =  getNextHitEOF();  if(currEntry!=  null)  {  return  currEntry;  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
101	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  this.getNextTarEntry();  if(currEntry!=  null)  {  return  currEntry;  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarArchiveEntry  currEntry  =  this.getNextTarEntry();  if(currEntry!=  null)  {  return  currEntry;  }  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =  this.getNextTarEntry();  if(currEntry!=  null)  {  return  currEntry;  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
102	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextEntry();  if(currEntry!=  null)  {  return  currEntry;  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarArchiveEntry  currEntry  =  getNextEntry();  if(currEntry!=  null)  {  return  currEntry;  }  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =  getNextEntry();  if(currEntry!=  null)  {  return  currEntry;  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
103	[BUG]  [BUGGY]  if(entryOffset  >  entrySize  +  1)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entryOffset  >  entrySize  +  1)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryOffset  >  entrySize  +  1)  {	  if(entrySize    >    entryOffset    +    1)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
104	[BUG]  [BUGGY]  if(entrySize  >  entryOffset  +  1  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  >  entryOffset  +  1  ||  hasHitEOF)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  >  entryOffset  +  1  ||  hasHitEOF)  {	  if(entrySize    >    entryOffset    +    1)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
105	[BUG]  [BUGGY]  if(entrySize  >  entryOffset  +  1  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  >  entryOffset  +  1  &&  hasHitEOF)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  >  entryOffset  +  1  &&  hasHitEOF)  {	  if(entrySize    >    entryOffset    +    1)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
106	[BUG]  [BUGGY]  if(entrySize  >  entryOffset  +  2)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  >  entryOffset  +  2)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  >  entryOffset  +  2)  {	  if(entrySize    >    entryOffset    +    1)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
107	[BUG]  [BUGGY]  if(entrySize  >  0  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  >  0  ||  hasHitEOF)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  >  0  ||  hasHitEOF)  {	  if(entrySize    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
108	[BUG]  [BUGGY]  if(entryOffset  >=  null)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entryOffset  >=  null)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryOffset  >=  null)  {	  if(entrySize    >=    null)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
109	[BUG]  [BUGGY]  if(entrySize  <  entryOffset  ||  entrySize  <  =  BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  entryOffset  ||  entrySize  <  =  BUFFER_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  entryOffset  ||  entrySize  <  =  BUFFER_SIZE)  {	  if(entrySize    <    entryOffset    ||    entrySize    <    =    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
110	[BUG]  [BUGGY]  if(entrySize  <  entryOffset  ||  entrySize  >  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  entryOffset  ||  entrySize  >  entryOffset)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  entryOffset  ||  entrySize  >  entryOffset)  {	  if(entrySize    <    entryOffset    ||    entrySize    <    =    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
111	[BUG]  [BUGGY]  if(entrySize  <  entryOffset  &&  entrySize  <  =  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  entryOffset  &&  entrySize  <  =  entryOffset)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  entryOffset  &&  entrySize  <  =  entryOffset)  {	  if(entrySize    <    entryOffset    ||    entrySize    <    =    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
112	[BUG]  [BUGGY]  if(entrySize  <  entryOffset  ||  entrySize  <  =  MAX_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  entryOffset  ||  entrySize  <  =  MAX_BUFFER_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  entryOffset  ||  entrySize  <  =  MAX_BUFFER_SIZE)  {	  if(entrySize    <    entryOffset    ||    entrySize    <    =    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
113	[BUG]  [BUGGY]  if(entrySize  >  entryOffset  ||  entrySize  <  =  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  >  entryOffset  ||  entrySize  <  =  entryOffset)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  >  entryOffset  ||  entrySize  <  =  entryOffset)  {	  if(entrySize    <    entryOffset    ||    entrySize    <    =    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
114	[BUG]  [BUGGY]  if(entrySize  <  entryOffset  ||  entrySize  <  =  HIT_EOF)  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  entryOffset  ||  entrySize  <  =  HIT_EOF)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  entryOffset  ||  entrySize  <  =  HIT_EOF)  {	  if(entrySize    <    entryOffset    ||    entrySize    <    =    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
115	[BUG]  [BUGGY]  if(entrySize  <  LAST_ENTRY_SIZE)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  LAST_ENTRY_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  LAST_ENTRY_SIZE)  {	  if(entrySize    <    =    LAST_ENTRY_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
116	[BUG]  [BUGGY]  if(entryOffset  <  =  LAST_ENTRY_SIZE)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entryOffset  <  =  LAST_ENTRY_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryOffset  <  =  LAST_ENTRY_SIZE)  {	  if(entrySize    <    =    LAST_ENTRY_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
117	[BUG]  [BUGGY]  if(entrySize  <  =  LAST_ENTRY_SIZE  ||  entryOffset  >  BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  =  LAST_ENTRY_SIZE  ||  entryOffset  >  BUFFER_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  LAST_ENTRY_SIZE  ||  entryOffset  >  BUFFER_SIZE)  {	  if(entrySize    <    =    LAST_ENTRY_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
118	[BUG]  [BUGGY]  if(entrySize  <  LAST_ENTRY_SIZE  ||  entryOffset  <  =  LAST_ENTRY_SIZE)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  LAST_ENTRY_SIZE  ||  entryOffset  <  =  LAST_ENTRY_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  LAST_ENTRY_SIZE  ||  entryOffset  <  =  LAST_ENTRY_SIZE)  {	  if(entrySize    <    =    LAST_ENTRY_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
119	[BUG]  [BUGGY]  if(entrySize  <  LAST_ENTRY_SIZE  ||  entryOffset  >  BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  LAST_ENTRY_SIZE  ||  entryOffset  >  BUFFER_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  LAST_ENTRY_SIZE  ||  entryOffset  >  BUFFER_SIZE)  {	  if(entrySize    <    =    LAST_ENTRY_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
120	[BUG]  [BUGGY]  if(entrySize  <  =  EntryOffset)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  =  EntryOffset)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  EntryOffset)  {	  if(entrySize    <    =    EntrySize)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
121	[BUG]  [BUGGY]  if(entrySize  <  EntrySize)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  EntrySize)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  EntrySize)  {	  if(entrySize    <    =    EntrySize)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
122	[BUG]  [BUGGY]  if(entryOffset  <  =  EntrySize)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entryOffset  <  =  EntrySize)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryOffset  <  =  EntrySize)  {	  if(entrySize    <    =    EntrySize)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
123	[BUG]  [BUGGY]  if(entrySize  <  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  0)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  0)  {	  if(entryOffset    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
124	[BUG]  [BUGGY]  if(entrySize  <  EntrySize.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  EntrySize.MAX_VALUE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  EntrySize.MAX_VALUE)  {	  if(entrySize    <    =    EntrySize.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
125	[BUG]  [BUGGY]  if(entrySize  <  EntrySize.MIN_VALUE  ||  entrySize  <  =  EntrySize.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  EntrySize.MIN_VALUE  ||  entrySize  <  =  EntrySize.MAX_VALUE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  EntrySize.MIN_VALUE  ||  entrySize  <  =  EntrySize.MAX_VALUE)  {	  if(entrySize    <    =    EntrySize.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
126	[BUG]  [BUGGY]  if(entrySize  <  EntrySize.MAX_VALUE  ||  entryOffset  >  EntrySize.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  EntrySize.MAX_VALUE  ||  entryOffset  >  EntrySize.MAX_VALUE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  EntrySize.MAX_VALUE  ||  entryOffset  >  EntrySize.MAX_VALUE)  {	  if(entrySize    <    =    EntrySize.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
127	[BUG]  [BUGGY]  if(entrySize  <  entryOffset  ||  entrySize  <  =  EntrySize.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  entryOffset  ||  entrySize  <  =  EntrySize.MAX_VALUE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  entryOffset  ||  entrySize  <  =  EntrySize.MAX_VALUE)  {	  if(entrySize    <    =    EntrySize.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
128	[BUG]  [BUGGY]  if(entrySize  <  EntrySize.MAX_VALUE  ||  entryOffset  <  EntrySize.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  EntrySize.MAX_VALUE  ||  entryOffset  <  EntrySize.MAX_VALUE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  EntrySize.MAX_VALUE  ||  entryOffset  <  EntrySize.MAX_VALUE)  {	  if(entrySize    <    =    EntrySize.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
129	[BUG]  [BUGGY]  if(entryOffset  <  =  EntrySize.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entryOffset  <  =  EntrySize.MAX_VALUE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryOffset  <  =  EntrySize.MAX_VALUE)  {	  if(entrySize    <    =    EntrySize.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
130	[BUG]  [BUGGY]  if(entrySize  <  EntrySize.MAX_VALUE  ||  entryOffset  <  =  EntrySize.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  EntrySize.MAX_VALUE  ||  entryOffset  <  =  EntrySize.MAX_VALUE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  EntrySize.MAX_VALUE  ||  entryOffset  <  =  EntrySize.MAX_VALUE)  {	  if(entrySize    <    =    EntrySize.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
131	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entryOffset  <  0  ||  hasHitEOF)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryOffset  <  0  ||  hasHitEOF)  {	  if(entryOffset    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
132	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  entrySize  >  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entryOffset  <  0  ||  entrySize  >  entryOffset)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryOffset  <  0  ||  entrySize  >  entryOffset)  {	  if(entryOffset    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
133	[BUG]  [BUGGY]  if(entryOffset  >  entrySize,  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entryOffset  >  entrySize,  hasHitEOF)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryOffset  >  entrySize,  hasHitEOF)  {	  if(entrySize    >    entryOffset,    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
134	[BUG]  [BUGGY]  if(entrySize  <  entryOffset,  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  entryOffset,  hasHitEOF)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  entryOffset,  hasHitEOF)  {	  if(entrySize    >    entryOffset,    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
135	[BUG]  [BUGGY]  if(entrySize  >  entryOffset,  hasHitEOF  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  >  entryOffset,  hasHitEOF  ||  hasHitEOF)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  >  entryOffset,  hasHitEOF  ||  hasHitEOF)  {	  if(entrySize    >    entryOffset,    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
136	[BUG]  [BUGGY]  if(entrySize  <  =  entryOffset,  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  =  entryOffset,  hasHitEOF)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  entryOffset,  hasHitEOF)  {	  if(entrySize    >    entryOffset,    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
137	[BUG]  [BUGGY]  if(entrySize  >=  entryOffset,  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  >=  entryOffset,  hasHitEOF)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  >=  entryOffset,  hasHitEOF)  {	  if(entrySize    >    entryOffset,    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
138	[BUG]  [BUGGY]  if(entryOffset  <  entrySize,  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entryOffset  <  entrySize,  hasHitEOF)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryOffset  <  entrySize,  hasHitEOF)  {	  if(entrySize    >    entryOffset,    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
139	[BUG]  [BUGGY]  long  entryOffset  =  getEntryOffset()  -  1;  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  long  entryOffset  =  getEntryOffset()  -  1;  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	long  entryOffset  =  getEntryOffset()  -  1;	  long    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
140	[BUG]  [BUGGY]  long  entryOffset  =  getEntryOffset()  +  1;  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  long  entryOffset  =  getEntryOffset()  +  1;  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	long  entryOffset  =  getEntryOffset()  +  1;	  long    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
141	[BUG]  [BUGGY]  long  entryOffset  =  getEntryOffset()  -  2;  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  long  entryOffset  =  getEntryOffset()  -  2;  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	long  entryOffset  =  getEntryOffset()  -  2;	  long    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
142	[BUG]  [BUGGY]  long  entryOffset  =  getEntryOffset()  /  2;  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  long  entryOffset  =  getEntryOffset()  /  2;  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	long  entryOffset  =  getEntryOffset()  /  2;	  long    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
143	[BUG]  [BUGGY]  long  entryOffset  =  getNextEntryOffset();  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  long  entryOffset  =  getNextEntryOffset();  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	long  entryOffset  =  getNextEntryOffset();	  long    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
144	[BUG]  [BUGGY]  long  entryOffset  =  getTarEntryOffset();  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  long  entryOffset  =  getTarEntryOffset();  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	long  entryOffset  =  getTarEntryOffset();	  long    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
145	[BUG]  [BUGGY]  long  entrySize  =  getHitEOF()  +  1;  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  long  entrySize  =  getHitEOF()  +  1;  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	long  entrySize  =  getHitEOF()  +  1;	  long    entrySize    =    getHitEOF();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
146	[BUG]  [BUGGY]  long  entrySize  =  getHitEOF()  -  1;  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  long  entrySize  =  getHitEOF()  -  1;  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	long  entrySize  =  getHitEOF()  -  1;	  long    entrySize    =    getHitEOF();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
147	[BUG]  [BUGGY]  long  entrySize  =  getEntryOffset();  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  long  entrySize  =  getEntryOffset();  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	long  entrySize  =  getEntryOffset();	  long    entrySize    =    getHitEOF();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
148	[BUG]  [BUGGY]  long  entrySize  =  getHitEOF()  /  BUFFER_SIZE;  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  long  entrySize  =  getHitEOF()  /  BUFFER_SIZE;  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	long  entrySize  =  getHitEOF()  /  BUFFER_SIZE;	  long    entrySize    =    getHitEOF();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
149	[BUG]  [BUGGY]  long  entrySize  =  getHitEOF().length;  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  long  entrySize  =  getHitEOF().length;  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	long  entrySize  =  getHitEOF().length;	  long    entrySize    =    getHitEOF();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
150	[BUG]  [BUGGY]  int  entrySize  =  getHitEOF();  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  int  entrySize  =  getHitEOF();  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	int  entrySize  =  getHitEOF();	  long    entrySize    =    getHitEOF();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
151	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.currEntry.getKey();  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.currEntry.getKey();  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)this.currEntry.getKey();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)this.currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
152	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.currEntry.clone();  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.currEntry.clone();  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)this.currEntry.clone();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)this.currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
153	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.currEntry.getNext();  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.currEntry.getNext();  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)this.currEntry.getNext();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)this.currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
154	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.currEntry.getValue()  +  1;  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.currEntry.getValue()  +  1;  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)this.currEntry.getValue()  +  1;	  TarArchiveEntry    currEntry    =(TarArchiveEntry)this.currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
155	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.currEntry.getValue()  -  1;  [CE]  illegal  start  of  type  [FE]                                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.currEntry.getValue()  -  1;  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)this.currEntry.getValue()  -  1;	  TarArchiveEntry    currEntry    =(TarArchiveEntry)this.currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
156	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.currEntry.getValue()  /  2;  [CE]  illegal  start  of  type  [FE]                                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.currEntry.getValue()  /  2;  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)this.currEntry.getValue()  /  2;	  TarArchiveEntry    currEntry    =(TarArchiveEntry)this.currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
157	[BUG]  [BUGGY]  if(entrySize  <  EntryOffset.MIN_VALUE  ||  entrySize  >  EntryOffset.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  EntryOffset.MIN_VALUE  ||  entrySize  >  EntryOffset.MIN_VALUE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  EntryOffset.MIN_VALUE  ||  entrySize  >  EntryOffset.MIN_VALUE)  {	  if(entrySize    <    =    EntryOffset.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
158	[BUG]  [BUGGY]  if(entrySize  <  EntryOffset.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  EntryOffset.MIN_VALUE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  EntryOffset.MIN_VALUE)  {	  if(entrySize    <    =    EntryOffset.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
159	[BUG]  [BUGGY]  if(entrySize  <  EntryOffset.MIN_VALUE  ||  entrySize  >  EntryOffset.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  EntryOffset.MIN_VALUE  ||  entrySize  >  EntryOffset.MAX_VALUE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  EntryOffset.MIN_VALUE  ||  entrySize  >  EntryOffset.MAX_VALUE)  {	  if(entrySize    <    =    EntryOffset.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
160	[BUG]  [BUGGY]  if(entrySize  <  EntryOffset.MIN_VALUE  ||  entryOffset  >  EntryOffset.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  EntryOffset.MIN_VALUE  ||  entryOffset  >  EntryOffset.MIN_VALUE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  EntryOffset.MIN_VALUE  ||  entryOffset  >  EntryOffset.MIN_VALUE)  {	  if(entrySize    <    =    EntryOffset.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
161	[BUG]  [BUGGY]  if(entrySize  <  EntryOffset.MIN_VALUE  ||  entryOffset  >  EntryOffset.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  EntryOffset.MIN_VALUE  ||  entryOffset  >  EntryOffset.MAX_VALUE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  EntryOffset.MIN_VALUE  ||  entryOffset  >  EntryOffset.MAX_VALUE)  {	  if(entrySize    <    =    EntryOffset.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
162	[BUG]  [BUGGY]  if(entryOffset  <  =  EntryOffset.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entryOffset  <  =  EntryOffset.MIN_VALUE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryOffset  <  =  EntryOffset.MIN_VALUE)  {	  if(entrySize    <    =    EntryOffset.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
163	[BUG]  [BUGGY]  if(entryOffset  <  =  EntryOffset.MIN_VALUE  ||  entrySize  >  EntryOffset.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entryOffset  <  =  EntryOffset.MIN_VALUE  ||  entrySize  >  EntryOffset.MAX_VALUE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryOffset  <  =  EntryOffset.MIN_VALUE  ||  entrySize  >  EntryOffset.MAX_VALUE)  {	  if(entrySize    <    =    EntryOffset.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
164	[BUG]  [BUGGY]  Integer  entryOffset  =  getHitEOF()  -  1;  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  Integer  entryOffset  =  getHitEOF()  -  1;  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	Integer  entryOffset  =  getHitEOF()  -  1;	  Integer    entryOffset    =    getHitEOF();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
165	[BUG]  [BUGGY]  Integer  entryOffset  =  getHitEOF()  +  1;  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  Integer  entryOffset  =  getHitEOF()  +  1;  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	Integer  entryOffset  =  getHitEOF()  +  1;	  Integer    entryOffset    =    getHitEOF();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
166	[BUG]  [BUGGY]  Long  entryOffset  =  getHitEOF();  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  Long  entryOffset  =  getHitEOF();  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	Long  entryOffset  =  getHitEOF();	  Integer    entryOffset    =    getHitEOF();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
167	[BUG]  [BUGGY]  Integer  entryOffset  =  getHitEOF().length;  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  Integer  entryOffset  =  getHitEOF().length;  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	Integer  entryOffset  =  getHitEOF().length;	  Integer    entryOffset    =    getHitEOF();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
168	[BUG]  [BUGGY]  Integer  entryOffset  =  getHitEOF()  /  2;  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  Integer  entryOffset  =  getHitEOF()  /  2;  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	Integer  entryOffset  =  getHitEOF()  /  2;	  Integer    entryOffset    =    getHitEOF();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
169	[BUG]  [BUGGY]  byte[]  buf  =  this.buffer.getBytes( "UTF-8 ");  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  buf  =  this.buffer.getBytes( "UTF-8 ");  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	byte[]  buf  =  this.buffer.getBytes( "UTF-8 ");	  byte[]    buf    =    buffer.getBytes(   "UTF-8   ");    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
170	[BUG]  [BUGGY]  byte[]  buf  =  buffer.getBytes( ".UTF-8 ");  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  buf  =  buffer.getBytes( ".UTF-8 ");  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	byte[]  buf  =  buffer.getBytes( ".UTF-8 ");	  byte[]    buf    =    buffer.getBytes(   "UTF-8   ");    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
171	[BUG]  [BUGGY]  byte[]  buf  =  buffer.getBytes( ",UTF-8 ");  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  buf  =  buffer.getBytes( ",UTF-8 ");  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	byte[]  buf  =  buffer.getBytes( ",UTF-8 ");	  byte[]    buf    =    buffer.getBytes(   "UTF-8   ");    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
172	[BUG]  [BUGGY]  byte[]  buf  =  getBuffer().getBytes( "UTF-8 ");  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  buf  =  getBuffer().getBytes( "UTF-8 ");  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	byte[]  buf  =  getBuffer().getBytes( "UTF-8 ");	  byte[]    buf    =    buffer.getBytes(   "UTF-8   ");    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
173	[BUG]  [BUGGY]  byte[]  buf  =  buffer.getBytes( "UTF-8 ",  longName);  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  buf  =  buffer.getBytes( "UTF-8 ",  longName);  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	byte[]  buf  =  buffer.getBytes( "UTF-8 ",  longName);	  byte[]    buf    =    buffer.getBytes(   "UTF-8   ");    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
174	[BUG]  [BUGGY]  if(entrySize  <  =  entryOffset  &&  entrySize  <  =  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  =  entryOffset  &&  entrySize  <  =  entryOffset)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  entryOffset  &&  entrySize  <  =  entryOffset)  {	  if(entrySize    <    =    entryOffset    ||    entrySize    <    =    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
175	[BUG]  [BUGGY]  if(entrySize  <  =  entryOffset  ||  entrySize  >  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  =  entryOffset  ||  entrySize  >  entryOffset)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  entryOffset  ||  entrySize  >  entryOffset)  {	  if(entrySize    <    =    entryOffset    ||    entrySize    <    =    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
176	[BUG]  [BUGGY]  if(entrySize  <  =  entryOffset  ||  entrySize  <  =  BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  =  entryOffset  ||  entrySize  <  =  BUFFER_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  entryOffset  ||  entrySize  <  =  BUFFER_SIZE)  {	  if(entrySize    <    =    entryOffset    ||    entrySize    <    =    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
177	[BUG]  [BUGGY]  if(entryOffset  <  =  entrySize  ||  entrySize  <  =  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entryOffset  <  =  entrySize  ||  entrySize  <  =  entryOffset)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryOffset  <  =  entrySize  ||  entrySize  <  =  entryOffset)  {	  if(entrySize    <    =    entryOffset    ||    entrySize    <    =    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
178	[BUG]  [BUGGY]  if(entryOffset  <  entrySize  ||  entrySize  <  =  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entryOffset  <  entrySize  ||  entrySize  <  =  entryOffset)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryOffset  <  entrySize  ||  entrySize  <  =  entryOffset)  {	  if(entrySize    <    =    entryOffset    ||    entrySize    <    =    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
179	[BUG]  [BUGGY]  if(entrySize  <  =  entryOffset  ||  entrySize  <  =  MAX_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  =  entryOffset  ||  entrySize  <  =  MAX_BUFFER_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  entryOffset  ||  entrySize  <  =  MAX_BUFFER_SIZE)  {	  if(entrySize    <    =    entryOffset    ||    entrySize    <    =    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
180	[BUG]  [BUGGY]  TarBuffer  buffer  =  getNextTarEntry(lengthName);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarBuffer  buffer  =  getNextTarEntry(lengthName);  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarBuffer  buffer  =  getNextTarEntry(lengthName);	  TarBuffer    buffer    =    getNextTarEntry(longName);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
181	[BUG]  [BUGGY]  TarBuffer  buffer  =  getNextTarEntry(longName,  false);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarBuffer  buffer  =  getNextTarEntry(longName,  false);  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarBuffer  buffer  =  getNextTarEntry(longName,  false);	  TarBuffer    buffer    =    getNextTarEntry(longName);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
182	[BUG]  [BUGGY]  TarBuffer  buffer  =  getNextTarEntry(getHitEOF());  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarBuffer  buffer  =  getNextTarEntry(getHitEOF());  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarBuffer  buffer  =  getNextTarEntry(getHitEOF());	  TarBuffer    buffer    =    getNextTarEntry(longName);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
183	[BUG]  [BUGGY]  TarBuffer  buffer  =  getNextTarEntry(longName,  true);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarBuffer  buffer  =  getNextTarEntry(longName,  true);  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarBuffer  buffer  =  getNextTarEntry(longName,  true);	  TarBuffer    buffer    =    getNextTarEntry(longName);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
184	[BUG]  [BUGGY]  TarBuffer  buffer  =  getNextTarEntry(longName,  null);  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarBuffer  buffer  =  getNextTarEntry(longName,  null);  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarBuffer  buffer  =  getNextTarEntry(longName,  null);	  TarBuffer    buffer    =    getNextTarEntry(longName);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
185	[BUG]  [BUGGY]  TarBuffer  buffer  =  getNextTarEntry(longName,  0);  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarBuffer  buffer  =  getNextTarEntry(longName,  0);  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarBuffer  buffer  =  getNextTarEntry(longName,  0);	  TarBuffer    buffer    =    getNextTarEntry(longName);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
186	[BUG]  [BUGGY]  if(entrySize  <  =  SMALL_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  =  SMALL_BUFFER_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  SMALL_BUFFER_SIZE)  {	  if(entrySize    <    =    BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
187	[BUG]  [BUGGY]  if(entrySize  <  BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  BUFFER_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  BUFFER_SIZE)  {	  if(entrySize    <    =    BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
188	[BUG]  [BUGGY]  if(entryOffset  <  =  BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entryOffset  <  =  BUFFER_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryOffset  <  =  BUFFER_SIZE)  {	  if(entrySize    <    =    BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
189	[BUG]  [BUGGY]  if(entrySize  <  BUFFER_SIZE  ||  entryOffset  <  =  BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  BUFFER_SIZE  ||  entryOffset  <  =  BUFFER_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  BUFFER_SIZE  ||  entryOffset  <  =  BUFFER_SIZE)  {	  if(entrySize    <    =    BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
190	[BUG]  [BUGGY]  if(entrySize  <  =  SMALL_BUFFER_SIZE  ||  entryOffset  <  =  BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  =  SMALL_BUFFER_SIZE  ||  entryOffset  <  =  BUFFER_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  SMALL_BUFFER_SIZE  ||  entryOffset  <  =  BUFFER_SIZE)  {	  if(entrySize    <    =    BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
191	[BUG]  [BUGGY]  if(entrySize  <  =  SMALL_BUFFER_SIZE  ||  entrySize  <  =  BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  =  SMALL_BUFFER_SIZE  ||  entrySize  <  =  BUFFER_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  SMALL_BUFFER_SIZE  ||  entrySize  <  =  BUFFER_SIZE)  {	  if(entrySize    <    =    BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
192	[BUG]  [BUGGY]  if(entrySize  *  entryOffset  <  =  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  *  entryOffset  <  =  entryOffset)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  *  entryOffset  <  =  entryOffset)  {	  if(entrySize    *    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
193	[BUG]  [BUGGY]  if(entryOffset  *  entrySize)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entryOffset  *  entrySize)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryOffset  *  entrySize)  {	  if(entrySize    *    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
194	[BUG]  [BUGGY]  if(entrySize  *  entryOffset  +  skip)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  *  entryOffset  +  skip)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  *  entryOffset  +  skip)  {	  if(entrySize    *    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
195	[BUG]  [BUGGY]  if(entrySize  *  entryOffset  +  1)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  *  entryOffset  +  1)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  *  entryOffset  +  1)  {	  if(entrySize    *    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
196	[BUG]  [BUGGY]  if(entrySize  *  entryOffset  <  length)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  *  entryOffset  <  length)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  *  entryOffset  <  length)  {	  if(entrySize    *    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
197	[BUG]  [BUGGY]  if(entrySize  *  entryOffset  <  0)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  *  entryOffset  <  0)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  *  entryOffset  <  0)  {	  if(entrySize    *    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
198	[BUG]  [BUGGY]  if(entrySize  >  entryOffset  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  >  entryOffset  &&  hasHitEOF)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  >  entryOffset  &&  hasHitEOF)  {	  if(entrySize    >    entryOffset    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
199	[BUG]  [BUGGY]  if(entryOffset  >  entrySize  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entryOffset  >  entrySize  ||  hasHitEOF)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryOffset  >  entrySize  ||  hasHitEOF)  {	  if(entrySize    >    entryOffset    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
200	[BUG]  [BUGGY]  if(entrySize  >  entryOffset  -  1  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  >  entryOffset  -  1  ||  hasHitEOF)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  >  entryOffset  -  1  ||  hasHitEOF)  {	  if(entrySize    >    entryOffset    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
201	[BUG]  [BUGGY]  if(entryOffset  <  =  entrySize  +  1)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entryOffset  <  =  entrySize  +  1)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryOffset  <  =  entrySize  +  1)  {	  if(entrySize    <    =    entryOffset    +    1)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
202	[BUG]  [BUGGY]  if(entrySize  <  =  entryOffset  +  1  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  =  entryOffset  +  1  ||  hasHitEOF)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  entryOffset  +  1  ||  hasHitEOF)  {	  if(entrySize    <    =    entryOffset    +    1)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
203	[BUG]  [BUGGY]  if(entrySize  <  entryOffset  +  1  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  entryOffset  +  1  ||  hasHitEOF)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  entryOffset  +  1  ||  hasHitEOF)  {	  if(entrySize    <    =    entryOffset    +    1)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
204	[BUG]  [BUGGY]  if(entrySize  +  entryOffset  <  =  entryOffset  +  1)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  +  entryOffset  <  =  entryOffset  +  1)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  +  entryOffset  <  =  entryOffset  +  1)  {	  if(entrySize    <    =    entryOffset    +    1)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
205	[BUG]  [BUGGY]  if(entryOffset  <  entrySize  +  1)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entryOffset  <  entrySize  +  1)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryOffset  <  entrySize  +  1)  {	  if(entrySize    <    =    entryOffset    +    1)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
206	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry  ==  null)  {  return  currEntry;  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry  ==  null)  {  return  currEntry;  }  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	final  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry  ==  null)  {  return  currEntry;  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry    ==    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
207	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextHitEOF();  if(currEntry  ==  null)  {  return  currEntry;  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarArchiveEntry  currEntry  =  getNextHitEOF();  if(currEntry  ==  null)  {  return  currEntry;  }  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =  getNextHitEOF();  if(currEntry  ==  null)  {  return  currEntry;  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry    ==    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
208	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextFileEntry();  if(currEntry  ==  null)  {  return  currEntry;  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarArchiveEntry  currEntry  =  getNextFileEntry();  if(currEntry  ==  null)  {  return  currEntry;  }  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =  getNextFileEntry();  if(currEntry  ==  null)  {  return  currEntry;  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry    ==    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
209	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextEntry();  if(currEntry  ==  null)  {  return  currEntry;  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarArchiveEntry  currEntry  =  getNextEntry();  if(currEntry  ==  null)  {  return  currEntry;  }  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =  getNextEntry();  if(currEntry  ==  null)  {  return  currEntry;  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry    ==    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
210	[BUG]  [BUGGY]  if(entryOffset  ==  null  ||  entrySize  <  0)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entryOffset  ==  null  ||  entrySize  <  0)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryOffset  ==  null  ||  entrySize  <  0)  {	  if(currEntry    ==    null    ||    entryOffset    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
211	[BUG]  [BUGGY]  if(entryOffset  ==  entrySize  ||  entryOffset  <  0)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entryOffset  ==  entrySize  ||  entryOffset  <  0)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryOffset  ==  entrySize  ||  entryOffset  <  0)  {	  if(currEntry    ==    null    ||    entryOffset    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
212	[BUG]  [BUGGY]  if(entryOffset  ==  0  ||  entrySize  <  0)  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entryOffset  ==  0  ||  entrySize  <  0)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryOffset  ==  0  ||  entrySize  <  0)  {	  if(currEntry    ==    null    ||    entryOffset    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
213	[BUG]  [BUGGY]  if(entrySize  <  entryOffset  ||  entryOffset  <  0)  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  entryOffset  ||  entryOffset  <  0)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  entryOffset  ||  entryOffset  <  0)  {	  if(currEntry    ==    null    ||    entryOffset    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
214	[BUG]  [BUGGY]  if(entrySize  ==  null  ||  entryOffset  <  0)  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  ==  null  ||  entryOffset  <  0)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  ==  null  ||  entryOffset  <  0)  {	  if(currEntry    ==    null    ||    entryOffset    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
215	[BUG]  [BUGGY]  if(entryOffset  ==  0  ||  currEntry  ==  null)  {  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entryOffset  ==  0  ||  currEntry  ==  null)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryOffset  ==  0  ||  currEntry  ==  null)  {	  if(currEntry    ==    null    ||    entryOffset    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
216	[BUG]  [BUGGY]  if(entrySize  ==  entryOffset  ||  entryOffset  <  0)  {  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  ==  entryOffset  ||  entryOffset  <  0)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  ==  entryOffset  ||  entryOffset  <  0)  {	  if(currEntry    ==    null    ||    entryOffset    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
217	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntryOffset()  -  1;  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  Integer  entryOffset  =  getEntryOffset()  -  1;  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	Integer  entryOffset  =  getEntryOffset()  -  1;	  Integer    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
218	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntryOffset()  +  1;  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  Integer  entryOffset  =  getEntryOffset()  +  1;  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	Integer  entryOffset  =  getEntryOffset()  +  1;	  Integer    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
219	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntryOffset()  -  2;  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  Integer  entryOffset  =  getEntryOffset()  -  2;  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	Integer  entryOffset  =  getEntryOffset()  -  2;	  Integer    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
220	[BUG]  [BUGGY]  if(entrySize  <  EntrySize.MIN_VALUE  ||  entryOffset  >  EntrySize.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  EntrySize.MIN_VALUE  ||  entryOffset  >  EntrySize.MAX_VALUE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  EntrySize.MIN_VALUE  ||  entryOffset  >  EntrySize.MAX_VALUE)  {	  if(entrySize    <    =    EntrySize.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
221	[BUG]  [BUGGY]  if(entrySize  <  entryOffset  ||  entrySize  <  =  EntrySize.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  entryOffset  ||  entrySize  <  =  EntrySize.MIN_VALUE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  entryOffset  ||  entrySize  <  =  EntrySize.MIN_VALUE)  {	  if(entrySize    <    =    EntrySize.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
222	[BUG]  [BUGGY]  if(entrySize  <  EntrySize.MIN_VALUE  ||  entryOffset  >  EntrySize.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  EntrySize.MIN_VALUE  ||  entryOffset  >  EntrySize.MIN_VALUE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  EntrySize.MIN_VALUE  ||  entryOffset  >  EntrySize.MIN_VALUE)  {	  if(entrySize    <    =    EntrySize.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
223	[BUG]  [BUGGY]  if(entrySize  <  EntrySize.MIN_VALUE  ||  entrySize  >  EntrySize.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  EntrySize.MIN_VALUE  ||  entrySize  >  EntrySize.MAX_VALUE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  EntrySize.MIN_VALUE  ||  entrySize  >  EntrySize.MAX_VALUE)  {	  if(entrySize    <    =    EntrySize.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
224	[BUG]  [BUGGY]  if(entryOffset  <  =  EntrySize.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entryOffset  <  =  EntrySize.MIN_VALUE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryOffset  <  =  EntrySize.MIN_VALUE)  {	  if(entrySize    <    =    EntrySize.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
225	[BUG]  [BUGGY]  if(entrySize  <  EntrySize.MIN_VALUE  ||  entryOffset  <  =  EntrySize.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  EntrySize.MIN_VALUE  ||  entryOffset  <  =  EntrySize.MIN_VALUE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  EntrySize.MIN_VALUE  ||  entryOffset  <  =  EntrySize.MIN_VALUE)  {	  if(entrySize    <    =    EntrySize.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
226	[BUG]  [BUGGY]  if(entrySize  <  EntrySize.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  EntrySize.MIN_VALUE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  EntrySize.MIN_VALUE)  {	  if(entrySize    <    =    EntrySize.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
227	[BUG]  [BUGGY]  if(entrySize  <  =  EntryOffset.MIN_VALUE  ||  entrySize  >  EntryOffset.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  =  EntryOffset.MIN_VALUE  ||  entrySize  >  EntryOffset.MAX_VALUE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  EntryOffset.MIN_VALUE  ||  entrySize  >  EntryOffset.MAX_VALUE)  {	  if(entrySize    <    =    EntryOffset.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
228	[BUG]  [BUGGY]  if(entrySize  <  =  EntryOffset.MIN_VALUE  ||  entryOffset  >  entrySize)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  =  EntryOffset.MIN_VALUE  ||  entryOffset  >  entrySize)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  EntryOffset.MIN_VALUE  ||  entryOffset  >  entrySize)  {	  if(entrySize    <    =    EntryOffset.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
229	[BUG]  [BUGGY]  if(entrySize  >=  EntryOffset.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  >=  EntryOffset.MIN_VALUE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  >=  EntryOffset.MIN_VALUE)  {	  if(entrySize    <    =    EntryOffset.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
230	[BUG]  [BUGGY]  if(entrySize  <  =  entryOffset.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  =  entryOffset.MIN_VALUE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  entryOffset.MIN_VALUE)  {	  if(entrySize    <    =    EntryOffset.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
231	[BUG]  [BUGGY]  if(entrySize  >>  null)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  >>  null)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  >>  null)  {	  if(entrySize!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
232	[BUG]  [BUGGY]  if(entrySize  <  =  EntryOffset.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  =  EntryOffset.MAX_VALUE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  EntryOffset.MAX_VALUE)  {	  if(entryOffset    <    =    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
233	[BUG]  [BUGGY]  if(entrySize  >  EntryOffset.BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  >  EntryOffset.BUFFER_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  >  EntryOffset.BUFFER_SIZE)  {	  if(entrySize    <    =    EntryOffset.BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
234	[BUG]  [BUGGY]  if(entrySize  <  =  EntryOffset.STATE_OFFSET)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  =  EntryOffset.STATE_OFFSET)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  EntryOffset.STATE_OFFSET)  {	  if(entrySize    <    =    EntryOffset.BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
235	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(longName,  buffer);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(longName,  buffer);  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =  getNextTarEntry(longName,  buffer);	  TarArchiveEntry    currEntry    =    getNextTarEntry(longName);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
236	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(HitEOF);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(HitEOF);  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =  getNextTarEntry(HitEOF);	  TarArchiveEntry    currEntry    =    getNextTarEntry(longName);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
237	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.entry.getValue();  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.entry.getValue();  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)this.entry.getValue();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)this.currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
238	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.rawEntry.getValue();  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.rawEntry.getValue();  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)this.rawEntry.getValue();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)this.currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
239	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.chars.getValue();  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.chars.getValue();  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)this.chars.getValue();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)this.currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
240	[BUG]  [BUGGY]  if(entrySize  +  entryOffset  >  0)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  +  entryOffset  >  0)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  +  entryOffset  >  0)  {	  if(entrySize    +    entryOffset    >    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
241	[BUG]  [BUGGY]  if(entrySize  +  entryOffset  >  SMALL_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  +  entryOffset  >  SMALL_BUFFER_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  +  entryOffset  >  SMALL_BUFFER_SIZE)  {	  if(entrySize    +    entryOffset    >    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
242	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  >  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  -  entryOffset  >  entryOffset)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  -  entryOffset  >  entryOffset)  {	  if(entrySize    +    entryOffset    >    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
243	[BUG]  [BUGGY]  if(entrySize  +  entryOffset  >  length)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  +  entryOffset  >  length)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  +  entryOffset  >  length)  {	  if(entrySize    +    entryOffset    >    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
244	[BUG]  [BUGGY]  if(entrySize  /  entryOffset  >=  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  /  entryOffset  >=  hasHitEOF)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  /  entryOffset  >=  hasHitEOF)  {	  if(entrySize    +    entryOffset    >=    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
245	[BUG]  [BUGGY]  if(entryOffset  ==  0  ||  entrySize  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entryOffset  ==  0  ||  entrySize  <  =  0)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryOffset  ==  0  ||  entrySize  <  =  0)  {	  if(currEntry    ==    null    ||    entrySize    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
246	[BUG]  [BUGGY]  if(entrySize  >=  null  ||  entryOffset  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  >=  null  ||  entryOffset  <  =  0)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  >=  null  ||  entryOffset  <  =  0)  {	  if(currEntry    ==    null    ||    entrySize    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
247	[BUG]  [BUGGY]  if(entrySize  >=  null  ||  entrySize  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  >=  null  ||  entrySize  <  =  0)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  >=  null  ||  entrySize  <  =  0)  {	  if(currEntry    ==    null    ||    entrySize    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
248	[BUG]  [BUGGY]  if(entrySize  *  entryOffset  >  entrySize)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  *  entryOffset  >  entrySize)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  *  entryOffset  >  entrySize)  {	  if(entrySize    +    entryOffset    >    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
249	[BUG]  [BUGGY]  if(entrySize  >=  EntrySize.BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  >=  EntrySize.BUFFER_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  >=  EntrySize.BUFFER_SIZE)  {	  if(entrySize    <    =    EntrySize.BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
250	[BUG]  [BUGGY]  if(entrySize  >  EntrySize.BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  >  EntrySize.BUFFER_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  >  EntrySize.BUFFER_SIZE)  {	  if(entrySize    <    =    EntrySize.BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
251	[BUG]  [BUGGY]  TarBuffer  buffer  =  getNextTarEntry(HitEOF);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarBuffer  buffer  =  getNextTarEntry(HitEOF);  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarBuffer  buffer  =  getNextTarEntry(HitEOF);	  TarBuffer    buffer    =    getNextTarEntry(longName);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
252	[BUG]  [BUGGY]  if(entrySize  >=  LAST_ENTRY_SIZE)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  >=  LAST_ENTRY_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  >=  LAST_ENTRY_SIZE)  {	  if(entrySize    <    =    LAST_ENTRY_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
253	[BUG]  [BUGGY]  if(entrySize  <  =  LAST_ENTRY_SIZE  ||  entryOffset  >  LAST_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  =  LAST_ENTRY_SIZE  ||  entryOffset  >  LAST_BUFFER_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  LAST_ENTRY_SIZE  ||  entryOffset  >  LAST_BUFFER_SIZE)  {	  if(entrySize    <    =    LAST_ENTRY_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
254	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)getNextTarEntry();  if(currEntry!=  null)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)getNextTarEntry();  if(currEntry!=  null)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)getNextTarEntry();  if(currEntry!=  null)  {  throw  new  RuntimeException( " ");  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
255	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(null);  if(currEntry!=  null)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(null);  if(currEntry!=  null)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =  getNextTarEntry(null);  if(currEntry!=  null)  {  throw  new  RuntimeException( " ");  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
256	[BUG]  [BUGGY]  if(entrySize  >=  entryOffset  +  1)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  >=  entryOffset  +  1)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  >=  entryOffset  +  1)  {	  if(entrySize    <    =    entryOffset    +    1)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
257	[BUG]  [BUGGY]  if(entrySize  <  =  BUFFER_SIZE  ||  entrySize  <  =  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  =  BUFFER_SIZE  ||  entrySize  <  =  entryOffset)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  BUFFER_SIZE  ||  entrySize  <  =  entryOffset)  {	  if(entrySize    <    =    entryOffset    ||    entrySize    <    =    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
258	[BUG]  [BUGGY]  if(entrySize  <  =  entryOffset  +|  entrySize  <  =  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  =  entryOffset  +|  entrySize  <  =  entryOffset)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  entryOffset  +|  entrySize  <  =  entryOffset)  {	  if(entrySize    <    =    entryOffset    ||    entrySize    <    =    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
259	[BUG]  [BUGGY]  if(entrySize  <  =  entryOffset  ||  entrySize  >=  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  =  entryOffset  ||  entrySize  >=  entryOffset)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  entryOffset  ||  entrySize  >=  entryOffset)  {	  if(entrySize    <    =    entryOffset    ||    entrySize    <    =    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
260	[BUG]  [BUGGY]  if(entryOffset  <  =  entrySize  ||  entrySize  <  =  BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entryOffset  <  =  entrySize  ||  entrySize  <  =  BUFFER_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryOffset  <  =  entrySize  ||  entrySize  <  =  BUFFER_SIZE)  {	  if(entrySize    <    =    entryOffset    ||    entrySize    <    =    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
261	[BUG]  [BUGGY]  if(hasHitEOF)  {  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  return  currEntry;  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(hasHitEOF)  {  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  return  currEntry;  }  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(hasHitEOF)  {  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  return  currEntry;  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
262	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)getNextTarEntry();  if(currEntry!=  null)  {  return  currEntry;  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)getNextTarEntry();  if(currEntry!=  null)  {  return  currEntry;  }  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)getNextTarEntry();  if(currEntry!=  null)  {  return  currEntry;  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
263	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(null);  if(currEntry!=  null)  {  return  currEntry;  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(null);  if(currEntry!=  null)  {  return  currEntry;  }  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =  getNextTarEntry(null);  if(currEntry!=  null)  {  return  currEntry;  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
264	[BUG]  [BUGGY]  TarBuffer  buffer  =  new  TarBuffer(0);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarBuffer  buffer  =  new  TarBuffer(0);  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarBuffer  buffer  =  new  TarBuffer(0);	  TarBuffer    buffer    =    new    TarBuffer();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
265	[BUG]  [BUGGY]  TarBuffer  buffer  =  new  TarBuffer(512);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarBuffer  buffer  =  new  TarBuffer(512);  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarBuffer  buffer  =  new  TarBuffer(512);	  TarBuffer    buffer    =    new    TarBuffer();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
266	[BUG]  [BUGGY]  if(entrySize  >  entryOffset,  isEOF)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  >  entryOffset,  isEOF)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  >  entryOffset,  isEOF)  {	  if(entrySize    >    entryOffset,    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
267	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry().getValue();  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry().getValue();  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =  getNextTarEntry().getValue();	  TarArchiveEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
268	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)getNextTarEntry();  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)getNextTarEntry();  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)getNextTarEntry();	  TarArchiveEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
269	[BUG]  [BUGGY]  TarBuffer  buffer  =(TarBuffer)getNextTarEntry();  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarBuffer  buffer  =(TarBuffer)getNextTarEntry();  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarBuffer  buffer  =(TarBuffer)getNextTarEntry();	  TarBuffer    buffer    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
270	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntryOffset()  +  2;  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  Integer  entryOffset  =  getEntryOffset()  +  2;  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	Integer  entryOffset  =  getEntryOffset()  +  2;	  Integer    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
271	[BUG]  [BUGGY]  long  entrySize  =  getNextTarEntry();  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  long  entrySize  =  getNextTarEntry();  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	long  entrySize  =  getNextTarEntry();	  long    entrySize    =    getHitEOF();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
272	[BUG]  [BUGGY]  if(hasHitEOF)  {  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry  ==  null)  {  return  currEntry;  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(hasHitEOF)  {  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry  ==  null)  {  return  currEntry;  }  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(hasHitEOF)  {  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry  ==  null)  {  return  currEntry;  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry    ==    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
273	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)getNextTarEntry();  if(currEntry  ==  null)  {  return  currEntry;  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)getNextTarEntry();  if(currEntry  ==  null)  {  return  currEntry;  }  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)getNextTarEntry();  if(currEntry  ==  null)  {  return  currEntry;  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry    ==    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
274	[BUG]  [BUGGY]  if(entrySize  <  =  entryOffset.length)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  =  entryOffset.length)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  entryOffset.length)  {	  if(entrySize    >    entryOffset.length)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
275	[BUG]  [BUGGY]  if(entrySize  <  =  HITE_EOF)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  =  HITE_EOF)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  HITE_EOF)  {	  if(entrySize    <    =    EntrySize)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
276	[BUG]  [BUGGY]  if(entrySize  <  =  DEFAULT_TAR_ENTRY_SIZE)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  =  DEFAULT_TAR_ENTRY_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  DEFAULT_TAR_ENTRY_SIZE)  {	  if(entrySize    <    =    EntrySize)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
277	[BUG]  [BUGGY]  if(entrySize  <  =  EntrySize.MAX_VALUE  ||  entryOffset  >  entrySize.length)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  =  EntrySize.MAX_VALUE  ||  entryOffset  >  entrySize.length)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  EntrySize.MAX_VALUE  ||  entryOffset  >  entrySize.length)  {	  if(entrySize    <    =    EntrySize.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
278	[BUG]  [BUGGY]  if(entrySize  <  =  EntrySize.MAX_VALUE  ||  entryOffset  >  EntrySize.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  =  EntrySize.MAX_VALUE  ||  entryOffset  >  EntrySize.MAX_VALUE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  EntrySize.MAX_VALUE  ||  entryOffset  >  EntrySize.MAX_VALUE)  {	  if(entrySize    <    =    EntrySize.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
279	[BUG]  [BUGGY]  if(entrySize  <  =  EntrySize.MAX_VALUE  ||  entryOffset  >=  EntrySize.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  =  EntrySize.MAX_VALUE  ||  entryOffset  >=  EntrySize.MAX_VALUE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  EntrySize.MAX_VALUE  ||  entryOffset  >=  EntrySize.MAX_VALUE)  {	  if(entrySize    <    =    EntrySize.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
280	[BUG]  [BUGGY]  if(entrySize  >=  BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  >=  BUFFER_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  >=  BUFFER_SIZE)  {	  if(entrySize    <    =    BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
281	[BUG]  [BUGGY]  if(entrySize  <  BUFFER_SIZE  ||  entryOffset  >  SMALL_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  BUFFER_SIZE  ||  entryOffset  >  SMALL_BUFFER_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  BUFFER_SIZE  ||  entryOffset  >  SMALL_BUFFER_SIZE)  {	  if(entrySize    <    =    BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
282	[BUG]  [BUGGY]  if(entrySize  >  BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  >  BUFFER_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  >  BUFFER_SIZE)  {	  if(entrySize    <    =    BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
283	[BUG]  [BUGGY]  if(entrySize  <  =  entryOffset  +|  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  =  entryOffset  +|  hasHitEOF)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  entryOffset  +|  hasHitEOF)  {	  if(entrySize    <    =    entryOffset    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
284	[BUG]  [BUGGY]  if(entryOffset  <  entrySize  ||  entrySize  <  =  BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entryOffset  <  entrySize  ||  entrySize  <  =  BUFFER_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryOffset  <  entrySize  ||  entrySize  <  =  BUFFER_SIZE)  {	  if(entrySize    <    entryOffset    ||    entrySize    <    =    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
285	[BUG]  [BUGGY]  if(entrySize  <  entryOffset  ||  entrySize  >=  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  entryOffset  ||  entrySize  >=  entryOffset)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  entryOffset  ||  entrySize  >=  entryOffset)  {	  if(entrySize    <    entryOffset    ||    entrySize    <    =    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
286	[BUG]  [BUGGY]  if(entrySize  <  0  ||  entryOffset  <  0)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  0  ||  entryOffset  <  0)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  0  ||  entryOffset  <  0)  {	  if(currEntry    ==    null    ||    entryOffset    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
287	[BUG]  [BUGGY]  if(entrySize  >=  null  ||  entryOffset  <  0)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  >=  null  ||  entryOffset  <  0)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  >=  null  ||  entryOffset  <  0)  {	  if(currEntry    ==    null    ||    entryOffset    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
288	[BUG]  [BUGGY]  if(entrySize  >=  0  ||  entryOffset  <  0)  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  >=  0  ||  entryOffset  <  0)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  >=  0  ||  entryOffset  <  0)  {	  if(currEntry    ==    null    ||    entryOffset    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
289	[BUG]  [BUGGY]  if(entrySize  ==  0  ||  entryOffset  <  0)  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  ==  0  ||  entryOffset  <  0)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  ==  0  ||  entryOffset  <  0)  {	  if(currEntry    ==    null    ||    entryOffset    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
290	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(currEntry  ==  null  ||  currEntry.hasHitEOF)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(currEntry  ==  null  ||  currEntry.hasHitEOF)  {	  if(currEntry    ==    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
291	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  isEOF())  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(currEntry  ==  null  ||  isEOF())  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(currEntry  ==  null  ||  isEOF())  {	  if(currEntry    ==    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
292	[BUG]  [BUGGY]  if(entrySize  *  length)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  *  length)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  *  length)  {	  if(entrySize    *    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
293	[BUG]  [BUGGY]  if(entrySize  *  6  *  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  *  6  *  entryOffset)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  *  6  *  entryOffset)  {	  if(entrySize    *    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
294	[BUG]  [BUGGY]  if(entrySize  *  HITEOF)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  *  HITEOF)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  *  HITEOF)  {	  if(entrySize    *    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
295	[BUG]  [BUGGY]  byte[]  buf  =  buffer.getBytes( "UTF-8 ").toByteArray();  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  buf  =  buffer.getBytes( "UTF-8 ").toByteArray();  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	byte[]  buf  =  buffer.getBytes( "UTF-8 ").toByteArray();	  byte[]    buf    =    buffer.getBytes(   "UTF-8   ");    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
296	[BUG]  [BUGGY]  byte[]  buf  =  buffer.getBytes( "UTF-8 ").getBytes();  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  buf  =  buffer.getBytes( "UTF-8 ").getBytes();  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	byte[]  buf  =  buffer.getBytes( "UTF-8 ").getBytes();	  byte[]    buf    =    buffer.getBytes(   "UTF-8   ");    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
297	[BUG]  [BUGGY]  byte[]  buf  =  buffer.getBytes( "UTF-8 ").reset();  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  buf  =  buffer.getBytes( "UTF-8 ").reset();  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	byte[]  buf  =  buffer.getBytes( "UTF-8 ").reset();	  byte[]    buf    =    buffer.getBytes(   "UTF-8   ");    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
298	[BUG]  [BUGGY]  if(entrySize  <  =  EntrySize.MIN_VALUE  ||  entryOffset  >  EntrySize.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  =  EntrySize.MIN_VALUE  ||  entryOffset  >  EntrySize.MAX_VALUE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  EntrySize.MIN_VALUE  ||  entryOffset  >  EntrySize.MAX_VALUE)  {	  if(entrySize    <    =    EntrySize.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
299	[BUG]  [BUGGY]  if(entrySize  <  =  EntrySize.MIN_VALUE  ||  entryOffset  >  entrySize.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  =  EntrySize.MIN_VALUE  ||  entryOffset  >  entrySize.MAX_VALUE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  EntrySize.MIN_VALUE  ||  entryOffset  >  entrySize.MAX_VALUE)  {	  if(entrySize    <    =    EntrySize.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
300	[BUG]  [BUGGY]  if(entrySize  <  =  EntrySize.MIN_VALUE  ||  entryOffset  >  entrySize.length)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  =  EntrySize.MIN_VALUE  ||  entryOffset  >  entrySize.length)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  EntrySize.MIN_VALUE  ||  entryOffset  >  entrySize.length)  {	  if(entrySize    <    =    EntrySize.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
301	[BUG]  [BUGGY]  long  entryOffset  =  getNextTarEntry();  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  long  entryOffset  =  getNextTarEntry();  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	long  entryOffset  =  getNextTarEntry();	  long    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
302	[BUG]  [BUGGY]  if(entrySize  <  entryOffset  ||  entrySize  <  =  HIT_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  entryOffset  ||  entrySize  <  =  HIT_BUFFER_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  entryOffset  ||  entrySize  <  =  HIT_BUFFER_SIZE)  {	  if(entrySize    <    entryOffset    ||    entrySize    <    =    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
303	[BUG]  [BUGGY]  if(entrySize  +  entryOffset  >  entryLimit)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  +  entryOffset  >  entryLimit)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  +  entryOffset  >  entryLimit)  {	  if(entrySize    +    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
304	[BUG]  [BUGGY]  TarBuffer  buffer  =  getNextTarEntry(longName,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarBuffer  buffer  =  getNextTarEntry(longName,  hasHitEOF);  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarBuffer  buffer  =  getNextTarEntry(longName,  hasHitEOF);	  TarBuffer    buffer    =    getNextTarEntry(longName);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
305	[BUG]  [BUGGY]  if(entrySize  /  entryOffset  >  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  /  entryOffset  >  entryOffset)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  /  entryOffset  >  entryOffset)  {	  if(entrySize    +    entryOffset    >    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
306	[BUG]  [BUGGY]  if(entryOffset  <  EntrySize)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entryOffset  <  EntrySize)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryOffset  <  EntrySize)  {	  if(entryOffset    <    =    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
307	[BUG]  [BUGGY]  if(entrySize  >  EntrySize.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  >  EntrySize.MAX_VALUE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  >  EntrySize.MAX_VALUE)  {	  if(entrySize    <    =    EntrySize.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
308	[BUG]  [BUGGY]  if(entrySize  <  =  EntrySize.MAX_VALUE  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  =  EntrySize.MAX_VALUE  ||  hasHitEOF)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  EntrySize.MAX_VALUE  ||  hasHitEOF)  {	  if(entrySize    <    =    EntrySize.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
309	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  entrySize  >  MAX_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entryOffset  <  0  ||  entrySize  >  MAX_BUFFER_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryOffset  <  0  ||  entrySize  >  MAX_BUFFER_SIZE)  {	  if(entryOffset    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
310	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  entrySize  >  SMALL_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entryOffset  <  0  ||  entrySize  >  SMALL_BUFFER_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryOffset  <  0  ||  entrySize  >  SMALL_BUFFER_SIZE)  {	  if(entryOffset    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
311	[BUG]  [BUGGY]  if(entrySize  <  =  entryOffset  +  entryOffset  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  =  entryOffset  +  entryOffset  ||  hasHitEOF)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  entryOffset  +  entryOffset  ||  hasHitEOF)  {	  if(entrySize    <    =    entryOffset    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
312	[BUG]  [BUGGY]  if(entrySize  <  =  null)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  =  null)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  null)  {	  if(entrySize    >=    null)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
313	[BUG]  [BUGGY]  int  entryOffset  =  getHitEOF();  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  int  entryOffset  =  getHitEOF();  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	int  entryOffset  =  getHitEOF();	  Integer    entryOffset    =    getHitEOF();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
314	[BUG]  [BUGGY]  if(entrySize  <  =  EntryOffset.MIN_VALUE  ||  entryOffset  >  EntrySize.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  =  EntryOffset.MIN_VALUE  ||  entryOffset  >  EntrySize.MAX_VALUE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  EntryOffset.MIN_VALUE  ||  entryOffset  >  EntrySize.MAX_VALUE)  {	  if(entrySize    <    =    EntryOffset.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
315	[BUG]  [BUGGY]  if(entrySize  >  EntryOffset.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  >  EntryOffset.MIN_VALUE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  >  EntryOffset.MIN_VALUE)  {	  if(entrySize    <    =    EntryOffset.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
316	[BUG]  [BUGGY]  if(entrySize  <  =  EntryOffset.MIN_VALUE  ||  entryOffset  >  MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  =  EntryOffset.MIN_VALUE  ||  entryOffset  >  MAX_VALUE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  EntryOffset.MIN_VALUE  ||  entryOffset  >  MAX_VALUE)  {	  if(entrySize    <    =    EntryOffset.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
317	[BUG]  [BUGGY]  long  entryOffset  =  getEntryOffset()  -  4;  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  long  entryOffset  =  getEntryOffset()  -  4;  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	long  entryOffset  =  getEntryOffset()  -  4;	  long    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
318	[BUG]  [BUGGY]  long  entrySize  =  getHitEOF(entryOffset);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  long  entrySize  =  getHitEOF(entryOffset);  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	long  entrySize  =  getHitEOF(entryOffset);	  long    entrySize    =    getHitEOF();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
319	[BUG]  [BUGGY]  if(entrySize  +  entryOffset!=  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  +  entryOffset!=  entryOffset)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  +  entryOffset!=  entryOffset)  {	  if(entrySize!=    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
320	[BUG]  [BUGGY]  if(entrySize  <  =  EntrySize.SMALL_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  =  EntrySize.SMALL_BUFFER_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  EntrySize.SMALL_BUFFER_SIZE)  {	  if(entrySize    <    =    EntrySize.BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
321	[BUG]  [BUGGY]  if(entrySize  <  =  EntrySize.STANDARD_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  =  EntrySize.STANDARD_BUFFER_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  EntrySize.STANDARD_BUFFER_SIZE)  {	  if(entrySize    <    =    EntrySize.BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
322	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  throw  new  RuntimeException( " "));  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  throw  new  RuntimeException( " "));  }  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  throw  new  RuntimeException( " "));  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
323	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  throw  new  RuntimeException( " ".);  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  throw  new  RuntimeException( " ".);  }  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry!=  null)  {  throw  new  RuntimeException( " ".);  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
324	[BUG]  [BUGGY]  TarBuffer  buffer  =  new  TarBuffer(length());  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarBuffer  buffer  =  new  TarBuffer(length());  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarBuffer  buffer  =  new  TarBuffer(length());	  TarBuffer    buffer    =    new    TarBuffer();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
325	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.currEntry.getData();  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.currEntry.getData();  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)this.currEntry.getData();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)this.currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
326	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.currEntry.getObject();  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.currEntry.getObject();  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)this.currEntry.getObject();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)this.currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
327	[BUG]  [BUGGY]  if(entrySize  *  BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  *  BUFFER_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  *  BUFFER_SIZE)  {	  if(entrySize    *    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
328	[BUG]  [BUGGY]  if(entrySize  *  HITEEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  *  HITEEOF)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  *  HITEEOF)  {	  if(entrySize    *    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
329	[BUG]  [BUGGY]  if(entrySize  <  =  LAST_ENTRY_SIZE  ||  entryOffset  >  MAX_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  =  LAST_ENTRY_SIZE  ||  entryOffset  >  MAX_BUFFER_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  LAST_ENTRY_SIZE  ||  entryOffset  >  MAX_BUFFER_SIZE)  {	  if(entrySize    <    =    LAST_ENTRY_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
330	[BUG]  [BUGGY]  if(entrySize  <  =  LAST_ENTRY_SIZE  ||  entryOffset  >  MAX_ENTRY_SIZE)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  =  LAST_ENTRY_SIZE  ||  entryOffset  >  MAX_ENTRY_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  LAST_ENTRY_SIZE  ||  entryOffset  >  MAX_ENTRY_SIZE)  {	  if(entrySize    <    =    LAST_ENTRY_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
331	[BUG]  [BUGGY]  if(entrySize  <  BUFFER_SIZE  ||  entryOffset  <  =  SMALL_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  BUFFER_SIZE  ||  entryOffset  <  =  SMALL_BUFFER_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  BUFFER_SIZE  ||  entryOffset  <  =  SMALL_BUFFER_SIZE)  {	  if(entrySize    <    =    BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
332	[BUG]  [BUGGY]  if(entrySize  >  EntrySize)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  >  EntrySize)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  >  EntrySize)  {	  if(entryOffset    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
333	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  -  entryOffset  <  entryOffset)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  -  entryOffset  <  entryOffset)  {	  if(entrySize    +    entryOffset    <    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
334	[BUG]  [BUGGY]  if(entrySize  +  entryOffset  <  length)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  +  entryOffset  <  length)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  +  entryOffset  <  length)  {	  if(entrySize    +    entryOffset    <    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
335	[BUG]  [BUGGY]  if(entrySize  >  EntryOffset)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  >  EntryOffset)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  >  EntryOffset)  {	  if(entrySize    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
336	[BUG]  [BUGGY]  if(entryLength  >  entrySize)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entryLength  >  entrySize)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryLength  >  entrySize)  {	  if(entryOffset    >    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
337	[BUG]  [BUGGY]  if(entryStart  >  entrySize)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entryStart  >  entrySize)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entryStart  >  entrySize)  {	  if(entryOffset    >    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
338	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(entryOffset);  if(currEntry!=  null)  {  return  currEntry;  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(entryOffset);  if(currEntry!=  null)  {  return  currEntry;  }  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =  getNextTarEntry(entryOffset);  if(currEntry!=  null)  {  return  currEntry;  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
339	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  createNextTarEntry();  if(currEntry!=  null)  {  return  currEntry;  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarArchiveEntry  currEntry  =  createNextTarEntry();  if(currEntry!=  null)  {  return  currEntry;  }  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =  createNextTarEntry();  if(currEntry!=  null)  {  return  currEntry;  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry!=    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
340	[BUG]  [BUGGY]  if(entrySize  <  =  0  ||  entrySize  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  =  0  ||  entrySize  <  =  0)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  0  ||  entrySize  <  =  0)  {	  if(currEntry    ==    null    ||    entrySize    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
341	[BUG]  [BUGGY]  if(entrySize  <  =  EntryOffset.STANDARD_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  =  EntryOffset.STANDARD_BUFFER_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  EntryOffset.STANDARD_BUFFER_SIZE)  {	  if(entrySize    <    =    EntryOffset.BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
342	[BUG]  [BUGGY]  TarBuffer  buffer  =  getNextTarEntry(entryOffset);  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarBuffer  buffer  =  getNextTarEntry(entryOffset);  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarBuffer  buffer  =  getNextTarEntry(entryOffset);	  TarBuffer    buffer    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
343	[BUG]  [BUGGY]  TarBuffer  buffer  =(TarBuffer)getNextHitEOF();  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarBuffer  buffer  =(TarBuffer)getNextHitEOF();  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarBuffer  buffer  =(TarBuffer)getNextHitEOF();	  TarBuffer    buffer    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
344	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntrySize();  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  Integer  entryOffset  =  getEntrySize();  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	Integer  entryOffset  =  getEntrySize();	  Integer    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
345	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry  ==  null  ||  currEntry.getName()!=  null)  {  return  currEntry;  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry  ==  null  ||  currEntry.getName()!=  null)  {  return  currEntry;  }  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =  getNextTarEntry();  if(currEntry  ==  null  ||  currEntry.getName()!=  null)  {  return  currEntry;  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry    ==    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
346	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextStandardEntry();  if(currEntry  ==  null)  {  return  currEntry;  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarArchiveEntry  currEntry  =  getNextStandardEntry();  if(currEntry  ==  null)  {  return  currEntry;  }  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =  getNextStandardEntry();  if(currEntry  ==  null)  {  return  currEntry;  }	  TarArchiveEntry    currEntry    =    getNextTarEntry();    if(currEntry    ==    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
347	[BUG]  [BUGGY]  if(entrySize  <  =  0  ||  entryOffset  <  0)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  =  0  ||  entryOffset  <  0)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  0  ||  entryOffset  <  0)  {	  if(currEntry    ==    null    ||    entryOffset    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
348	[BUG]  [BUGGY]  byte[]  buf  =  buffer.getBytes( "UTF-8 ",  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  buf  =  buffer.getBytes( "UTF-8 ",  hasHitEOF);  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	byte[]  buf  =  buffer.getBytes( "UTF-8 ",  hasHitEOF);	  byte[]    buf    =    buffer.getBytes(   "UTF-8   ");    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
349	[BUG]  [BUGGY]  byte[]  buf  =  buffer.getBytes( "UTF-16 ");  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  buf  =  buffer.getBytes( "UTF-16 ");  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	byte[]  buf  =  buffer.getBytes( "UTF-16 ");	  byte[]    buf    =    buffer.getBytes(   "UTF-8   ");    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
350	[BUG]  [BUGGY]  byte[]  buf  =  buffer.getBytes( "UTF8 ");  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  buf  =  buffer.getBytes( "UTF8 ");  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	byte[]  buf  =  buffer.getBytes( "UTF8 ");	  byte[]    buf    =    buffer.getBytes(   "UTF-8   ");    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
351	[BUG]  [BUGGY]  if(entrySize  +  entryOffset  >  EntrySize.length)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  +  entryOffset  >  EntrySize.length)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  +  entryOffset  >  EntrySize.length)  {	  if(entrySize    +    entryOffset    >    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
352	[BUG]  [BUGGY]  if(entry.length  +  entryOffset  >  entrySize)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entry.length  +  entryOffset  >  entrySize)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entry.length  +  entryOffset  >  entrySize)  {	  if(entrySize    +    entryOffset    >    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
353	[BUG]  [BUGGY]  if(entrySize  <  =  0  ||  entryOffset  >  MAX_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  =  0  ||  entryOffset  >  MAX_BUFFER_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  0  ||  entryOffset  >  MAX_BUFFER_SIZE)  {	  if(entrySize    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
354	[BUG]  [BUGGY]  if(entrySize  <  =  EntrySize.MIN_VALUE  ||  entryOffset  >  MAX_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  =  EntrySize.MIN_VALUE  ||  entryOffset  >  MAX_BUFFER_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  EntrySize.MIN_VALUE  ||  entryOffset  >  MAX_BUFFER_SIZE)  {	  if(entrySize    <    =    EntrySize.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
355	[BUG]  [BUGGY]  if(entrySize  <  =  EntrySize.MIN_VALUE  ||  entryOffset  >  BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  <  =  EntrySize.MIN_VALUE  ||  entryOffset  >  BUFFER_SIZE)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  <  =  EntrySize.MIN_VALUE  ||  entryOffset  >  BUFFER_SIZE)  {	  if(entrySize    <    =    EntrySize.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
356	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)getNextHitEOF();  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)getNextHitEOF();  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)getNextHitEOF();	  TarArchiveEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
357	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextHitEOF(entryOffset);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarArchiveEntry  currEntry  =  getNextHitEOF(entryOffset);  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =  getNextHitEOF(entryOffset);	  TarArchiveEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
358	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextRecordEntry();  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarArchiveEntry  currEntry  =  getNextRecordEntry();  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =  getNextRecordEntry();	  TarArchiveEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
359	[BUG]  [BUGGY]  if(entrySize  +  entryOffset  >  HITEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  +  entryOffset  >  HITEOF)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  +  entryOffset  >  HITEOF)  {	  if(entrySize    +    entryOffset    >=    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
360	[BUG]  [BUGGY]  int  entryOffset  =  getEntrySize();  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  int  entryOffset  =  getEntrySize();  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	int  entryOffset  =  getEntrySize();	  int    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
361	[BUG]  [BUGGY]  long  entryOffset  =  getTarOffset();  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  long  entryOffset  =  getTarOffset();  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	long  entryOffset  =  getTarOffset();	  long    entryOffset    =    getHitEOF();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
362	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(longName,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(longName,  hasHitEOF);  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	TarArchiveEntry  currEntry  =  getNextTarEntry(longName,  hasHitEOF);	  TarArchiveEntry    currEntry    =    getNextTarEntry(longName);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
363	[BUG]  [BUGGY]  if(entrySize  >  entryOffset  +  1,  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  >  entryOffset  +  1,  hasHitEOF)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  >  entryOffset  +  1,  hasHitEOF)  {	  if(entrySize    >    entryOffset,    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
364	[BUG]  [BUGGY]  if(entrySize  >  entryOffset  +  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  >  entryOffset  +  hasHitEOF)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  >  entryOffset  +  hasHitEOF)  {	  if(entrySize    >    entryOffset    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
365	[BUG]  [BUGGY]  if(entrySize  >  entryOffset  +  entryOffset  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(entrySize  >  entryOffset  +  entryOffset  ||  hasHitEOF)  {  [BUGGY]      long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  }  numToSkip  -=  skipped;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	177	177	1	replace	if(entrySize  >  entryOffset  +  entryOffset  ||  hasHitEOF)  {	  if(entrySize    >    entryOffset    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
