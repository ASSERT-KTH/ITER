bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  >  0  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  >  0  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  >  0  ||  buffer.isEOFRecord(headerBuf))  {	  }    else    if(headerBuf.isEOF()    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
2	[BUG]  [BUGGY]  }  else  if(headerBuf.length  >  0  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  >  0  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  >  0  ||  buffer.isEOFRecord(headerBuf))  {	  }    else    if(headerBuf.isEOF()    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
3	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  >  0  &&  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  >  0  &&  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  >  0  &&  buffer.isEOFRecord(headerBuf))  {	  }    else    if(headerBuf.isEOF()    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
4	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  ==  0  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  ==  0  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  ==  0  ||  buffer.isEOFRecord(headerBuf))  {	  }    else    if(headerBuf.isEOF()    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
5	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  headerBuf  =  buffer.readRecord();  if(headerBuf!=  null)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  if(headerBuf!=  null)  {  headerBuf  =  buffer.readRecord();  if(headerBuf!=  null)  {  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	if(headerBuf!=  null)  {  headerBuf  =  buffer.readRecord();  if(headerBuf!=  null)  {  hasHitEOF  =  true;  }	  if(headerBuf    ==    null)    {    headerBuf    =    buffer.readRecord();    if(headerBuf!=    null)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
6	[BUG]  [BUGGY]  headerBuf  =  buffer.readRecord();  if(headerBuf!=  null)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  headerBuf  =  buffer.readRecord();  if(headerBuf!=  null)  {  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	headerBuf  =  buffer.readRecord();  if(headerBuf!=  null)  {  hasHitEOF  =  true;  }	  if(headerBuf    ==    null)    {    headerBuf    =    buffer.readRecord();    if(headerBuf!=    null)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
7	[BUG]  [BUGGY]  HeaderBuf  =  buffer.readRecord();  if(headerBuf!=  null)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  HeaderBuf  =  buffer.readRecord();  if(headerBuf!=  null)  {  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	HeaderBuf  =  buffer.readRecord();  if(headerBuf!=  null)  {  hasHitEOF  =  true;  }	  if(headerBuf    ==    null)    {    headerBuf    =    buffer.readRecord();    if(headerBuf!=    null)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
8	[BUG]  [BUGGY]  HeaderBuffer  headerBuf  =  buffer.readRecord();  if(headerBuf!=  null)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  HeaderBuffer  headerBuf  =  buffer.readRecord();  if(headerBuf!=  null)  {  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	HeaderBuffer  headerBuf  =  buffer.readRecord();  if(headerBuf!=  null)  {  hasHitEOF  =  true;  }	  if(headerBuf    ==    null)    {    headerBuf    =    buffer.readRecord();    if(headerBuf!=    null)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
9	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  headerBuf  =  buffer.readRecord();  if(headerBuf  ==  null)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  if(headerBuf!=  null)  {  headerBuf  =  buffer.readRecord();  if(headerBuf  ==  null)  {  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	if(headerBuf!=  null)  {  headerBuf  =  buffer.readRecord();  if(headerBuf  ==  null)  {  hasHitEOF  =  true;  }	  if(headerBuf    ==    null)    {    headerBuf    =    buffer.readRecord();    if(headerBuf!=    null)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
10	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  ||  buffer.isEOF())  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  ||  buffer.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  ||  buffer.isEOF())  {	  }    else    if(buffer.isEOF()    ||    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
11	[BUG]  [BUGGY]  }  else  if(buffer.length  >  0  ||  buffer.isEOF())  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.length  >  0  ||  buffer.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.length  >  0  ||  buffer.isEOF())  {	  }    else    if(buffer.isEOF()    ||    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
12	[BUG]  [BUGGY]  }  else  if(buffer.isEOF()  ||  buffer.isEOF()  ||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOF()  ||  buffer.isEOF()  ||  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF()  ||  buffer.isEOF()  ||  headerBuf.length  >  0)  {	  }    else    if(buffer.isEOF()    ||    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
13	[BUG]  [BUGGY]  }  else  if(buffer.isEOF()  ||  buffer.isEOF()  ||  headerBuf.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOF()  ||  buffer.isEOF()  ||  headerBuf.length()  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF()  ||  buffer.isEOF()  ||  headerBuf.length()  ==  0)  {	  }    else    if(buffer.isEOF()    ||    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
14	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  ||  buffer.isEOF())  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  ||  buffer.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  ||  buffer.isEOF())  {	  }    else    if(buffer.isEOF()    ||    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
15	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer.getLength()  +  1))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer.getLength()  +  1))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer.getLength()  +  1))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer.getLength()))    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
16	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  >  0  ||  headerBuf.isEOFRecord(buffer.getLength()))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  >  0  ||  headerBuf.isEOFRecord(buffer.getLength()))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  >  0  ||  headerBuf.isEOFRecord(buffer.getLength()))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer.getLength()))    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
17	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  ||  headerBuf.isEOFRecord(buffer.getLength()))  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  ||  headerBuf.isEOFRecord(buffer.getLength()))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  ||  headerBuf.isEOFRecord(buffer.getLength()))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer.getLength()))    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
18	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer.getLength()  -  1))  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer.getLength()  -  1))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer.getLength()  -  1))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer.getLength()))    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
19	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  ==  0  ||  headerBuf.isEOFRecord(buffer.getLength()))  {  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  ==  0  ||  headerBuf.isEOFRecord(buffer.getLength()))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  ==  0  ||  headerBuf.isEOFRecord(buffer.getLength()))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer.getLength()))    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
20	[BUG]  [BUGGY]  }  else  if(buffer.isEOF()  ||  headerBuf.isEOFRecord(headerBuf.getLength()))  {  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOF()  ||  headerBuf.isEOFRecord(headerBuf.getLength()))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF()  ||  headerBuf.isEOFRecord(headerBuf.getLength()))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer.getLength()))    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
21	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.isEOF())  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.isEOF())  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    headerBuf.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
22	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf.isEOF())  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf.isEOF())  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    headerBuf.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
23	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOF()  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOF()  ||  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOF()  ||  hasHitEOF)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    headerBuf.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
24	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  headerBuf.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  headerBuf.length  <  =  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)&&  headerBuf.length  <  =  0)  {	  }    else    if(!buffer.isEOF(headerBuf)&&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
25	[BUG]  [BUGGY]  }  else  if(headerBuf.length  >  0  &&!buffer.isEOF(headerBuf)&&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  >  0  &&!buffer.isEOF(headerBuf)&&  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  >  0  &&!buffer.isEOF(headerBuf)&&  headerBuf.length  >  0)  {	  }    else    if(!buffer.isEOF(headerBuf)&&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
26	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  headerBuf.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  headerBuf.length  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)&&  headerBuf.length  ==  0)  {	  }    else    if(!buffer.isEOF(headerBuf)&&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
27	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  headerBuf.length  >=  0)  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  headerBuf.length  >=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)&&  headerBuf.length  >=  0)  {	  }    else    if(!buffer.isEOF(headerBuf)&&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
28	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  headerBuf.length!=  0)  {  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  headerBuf.length!=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)&&  headerBuf.length!=  0)  {	  }    else    if(!buffer.isEOF(headerBuf)&&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
29	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  headerBuf.length  >  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  headerBuf.length  >  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)&&  headerBuf.length  >  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {	  }    else    if(!buffer.isEOF(headerBuf)&&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
30	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }	  if(headerBuf    ==    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
31	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }	  if(headerBuf    ==    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
32	[BUG]  [BUGGY]  while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }	  if(headerBuf    ==    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
33	[BUG]  [BUGGY]  while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }	  if(headerBuf    ==    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
34	[BUG]  [BUGGY]  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  hasHitEOF  =  true;  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	hasHitEOF  =  true;	  if(headerBuf    ==    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
35	[BUG]  [BUGGY]  HeaderBuffer  headerBuf  =  buffer.readRecord();  [CE]  illegal  start  of  type  [FE]                                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  HeaderBuffer  headerBuf  =  buffer.readRecord();  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	HeaderBuffer  headerBuf  =  buffer.readRecord();	  if(headerBuf    ==    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
36	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  buffer.isEOF()  ||  headerBuf.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  buffer.isEOF()  ||  headerBuf.length  <  =  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)||  buffer.isEOF()  ||  headerBuf.length  <  =  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF()    ||    headerBuf.length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
37	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  &&  headerBuf.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  &&  headerBuf.length  <  =  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  &&  headerBuf.length  <  =  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF()    ||    headerBuf.length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
38	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  ||  headerBuf.length!=  0)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  ||  headerBuf.length!=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  ||  headerBuf.length!=  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF()    ||    headerBuf.length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
39	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  ||  headerBuf.length  >=  0)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  ||  headerBuf.length  >=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  ||  headerBuf.length  >=  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF()    ||    headerBuf.length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
40	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOF()  ||  headerBuf.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOF()  ||  headerBuf.length  <  =  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOF()  ||  headerBuf.length  <  =  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF()    ||    headerBuf.length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
41	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  buffer.isEOF()  ||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  buffer.isEOF()  ||  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)||  buffer.isEOF()  ||  headerBuf.length  >  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF()    ||    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
42	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOF()  ||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOF()  ||  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOF()  ||  headerBuf.length  >  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF()    ||    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
43	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  &&  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  &&  headerBuf.length  >  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF()    ||    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
44	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.isEOF()  ||  buffer.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.isEOF()  ||  buffer.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.isEOF()  ||  buffer.length  >  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF()    ||    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
45	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)&&  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)&&  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)&&  buffer.isEOFRecord(headerBuf))  {	  }    else    if(headerBuf.isEOFRecord(buffer)||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
46	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf.isEOFRecord(headerBuf))  {	  }    else    if(headerBuf.isEOFRecord(buffer)||    headerBuf.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
47	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer)||  headerBuf.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer)||  headerBuf.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer)||  headerBuf.isEOFRecord(headerBuf))  {	  }    else    if(headerBuf.isEOFRecord(buffer)||    headerBuf.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
48	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOFRecord(headerBuf))  {	  }    else    if(headerBuf.isEOFRecord(buffer)||    headerBuf.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
49	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF(buffer)||  headerBuf.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF(buffer)||  headerBuf.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF(buffer)||  headerBuf.isEOFRecord(headerBuf))  {	  }    else    if(headerBuf.isEOFRecord(buffer)||    headerBuf.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
50	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF(buffer)&&  headerBuf.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF(buffer)&&  headerBuf.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF(buffer)&&  headerBuf.isEOFRecord(headerBuf))  {	  }    else    if(headerBuf.isEOFRecord(buffer)||    headerBuf.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
51	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.isEOFRecord(bodyBuf))  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.isEOFRecord(bodyBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.isEOFRecord(bodyBuf))  {	  }    else    if(headerBuf.isEOFRecord(buffer)||    headerBuf.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
52	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  buffer.isEOF()  ||  headerBuf.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  buffer.isEOF()  ||  headerBuf.length()  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)||  buffer.isEOF()  ||  headerBuf.length()  ==  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF()    ||    headerBuf.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
53	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.isEOF()  ||  buffer.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.isEOF()  ||  buffer.length()  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.isEOF()  ||  buffer.length()  ==  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF()    ||    headerBuf.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
54	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOF()  ||  headerBuf.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOF()  ||  headerBuf.length()  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOF()  ||  headerBuf.length()  ==  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF()    ||    headerBuf.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
55	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOF()  ||  buffer.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOF()  ||  buffer.length()  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOF()  ||  buffer.length()  ==  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF()    ||    headerBuf.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
56	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  &&  headerBuf.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  &&  headerBuf.length()  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  &&  headerBuf.length()  ==  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF()    ||    headerBuf.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
57	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  buffer.isEOF()  ||  headerBuf.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  buffer.isEOF()  ||  headerBuf.length()  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)&&  buffer.isEOF()  ||  headerBuf.length()  ==  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF()    ||    headerBuf.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
58	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf!=  null)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf!=  null)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf!=  null)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
59	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf!=  null)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf!=  null)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf!=  null)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
60	[BUG]  [BUGGY]  }  else  if(buffer.isEOF(headerBuf)&&  headerBuf!=  null)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOF(headerBuf)&&  headerBuf!=  null)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF(headerBuf)&&  headerBuf!=  null)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
61	[BUG]  [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)&&  headerBuf!=  null)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)&&  headerBuf!=  null)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOFRecord(headerBuf)&&  headerBuf!=  null)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
62	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf  >=  null)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf  >=  null)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf  >=  null)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
63	[BUG]  [BUGGY]  headerBuf  =  buffer.readRecord();  if(headerBuf  ==  null)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  headerBuf  =  buffer.readRecord();  if(headerBuf  ==  null)  {  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	headerBuf  =  buffer.readRecord();  if(headerBuf  ==  null)  {  hasHitEOF  =  true;  }	  if(headerBuf    ==    null)    {    headerBuf    =    buffer.readRecord();    if(headerBuf    ==    null)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
64	[BUG]  [BUGGY]  HeaderBuffer  headerBuf  =  buffer.readRecord();  if(headerBuf  ==  null)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  HeaderBuffer  headerBuf  =  buffer.readRecord();  if(headerBuf  ==  null)  {  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	HeaderBuffer  headerBuf  =  buffer.readRecord();  if(headerBuf  ==  null)  {  hasHitEOF  =  true;  }	  if(headerBuf    ==    null)    {    headerBuf    =    buffer.readRecord();    if(headerBuf    ==    null)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
65	[BUG]  [BUGGY]  HeaderBuf  =  buffer.readRecord();  if(headerBuf  ==  null)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  HeaderBuf  =  buffer.readRecord();  if(headerBuf  ==  null)  {  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	HeaderBuf  =  buffer.readRecord();  if(headerBuf  ==  null)  {  hasHitEOF  =  true;  }	  if(headerBuf    ==    null)    {    headerBuf    =    buffer.readRecord();    if(headerBuf    ==    null)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
66	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.length()  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.length()  >  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    headerBuf.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
67	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.length()  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.length()  ==  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    headerBuf.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
68	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.length()!=  0)  {  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.length()!=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.length()!=  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    headerBuf.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
69	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.length()  >=  0)  {  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.length()  >=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.length()  >=  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    headerBuf.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
70	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.length()  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.length()  <  =  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.length()  <  =  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    headerBuf.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
71	[BUG]  [BUGGY]  }  else  if(headerBuf.length!=  0  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length!=  0  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length!=  0  ||  buffer.isEOFRecord(headerBuf))  {	  }    else    if(buffer.length!=    0    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
72	[BUG]  [BUGGY]  }  else  if(headerBuf.length  >=  0  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  >=  0  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  >=  0  ||  buffer.isEOFRecord(headerBuf))  {	  }    else    if(buffer.length!=    0    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
73	[BUG]  [BUGGY]  }  else  if(headerBuf.length  ==  0  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  ==  0  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  ==  0  ||  buffer.isEOFRecord(headerBuf))  {	  }    else    if(buffer.length!=    0    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
74	[BUG]  [BUGGY]  }  else  if(headerBuf!=  0  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf!=  0  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf!=  0  ||  buffer.isEOFRecord(headerBuf))  {	  }    else    if(buffer.length!=    0    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
75	[BUG]  [BUGGY]  }  else  if(buffer.length!=  0  ||  headerBuf.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.length!=  0  ||  headerBuf.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.length!=  0  ||  headerBuf.isEOFRecord(headerBuf))  {	  }    else    if(buffer.length!=    0    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
76	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)&&  isEOF)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)&&  isEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)&&  isEOF)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    isEOF)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
77	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  isEOF)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  isEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  isEOF)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    isEOF)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
78	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF()  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF()  &&  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF()  &&  headerBuf.length  >  0)  {	  }    else    if(!buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
79	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF()  ||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF()  ||  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF()  ||  headerBuf.length  >  0)  {	  }    else    if(!buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
80	[BUG]  [BUGGY]  }  else  if(!headerBuf.isEOF())  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!headerBuf.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!headerBuf.isEOF())  {	  }    else    if(!buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
81	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF()  ||  headerBuf.length  <  0)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF()  ||  headerBuf.length  <  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF()  ||  headerBuf.length  <  0)  {	  }    else    if(!buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
82	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF()  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF()  &&  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF()  &&  hasHitEOF)  {	  }    else    if(!buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
83	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF()  &&  headerBuf.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF()  &&  headerBuf.length()  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF()  &&  headerBuf.length()  >  0)  {	  }    else    if(!buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
84	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF()  ||  headerBuf.equals(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF()  ||  headerBuf.equals(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF()  ||  headerBuf.equals(headerBuf))  {	  }    else    if(!buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
85	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.length  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  ||  headerBuf.length  ==  0)  {	  }    else    if(buffer.isEOF()    ||    headerBuf.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
86	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  ||  buffer.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  ||  buffer.length  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  ||  buffer.length  ==  0)  {	  }    else    if(buffer.isEOF()    ||    headerBuf.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
87	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  ||  buffer.isEOF()  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  ||  buffer.isEOF()  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  ||  buffer.isEOF()  {	  }    else    if(buffer.isEOF()    ||    headerBuf.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
88	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  ||  headerBuf.isEOF()  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  ||  headerBuf.isEOF()  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  ||  headerBuf.isEOF()  {	  }    else    if(buffer.isEOF()    ||    headerBuf.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
89	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  ||  headerBuf.isEOF())  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  ||  headerBuf.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  ||  headerBuf.isEOF())  {	  }    else    if(buffer.isEOF()    ||    headerBuf.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
90	[BUG]  [BUGGY]  }  else  if(buffer.length()  ||  headerBuf.isEOF())  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.length()  ||  headerBuf.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.length()  ||  headerBuf.isEOF())  {	  }    else    if(buffer.isEOF()    ||    headerBuf.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
91	[BUG]  [BUGGY]  if(headerBuf.length!=  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  if(headerBuf.length!=  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	if(headerBuf.length!=  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }	  if(headerBuf.length    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
92	[BUG]  [BUGGY]  if(headerBuf.length  ==  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  if(headerBuf.length  ==  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	if(headerBuf.length  ==  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }	  if(headerBuf.length    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
93	[BUG]  [BUGGY]  HashTraversal.traverse(compiler,  headerBuf,  this);  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  HashTraversal.traverse(compiler,  headerBuf,  this);  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	HashTraversal.traverse(compiler,  headerBuf,  this);	  if(headerBuf.length    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
94	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf,  false))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF(headerBuf,  false))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf,  false))  {	  }    else    if(!buffer.isEOFRecord(headerBuf,    true))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
95	[BUG]  [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf,  false)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf,  false)&&  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOFRecord(headerBuf,  false)&&  hasHitEOF)  {	  }    else    if(!buffer.isEOFRecord(headerBuf,    true))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
96	[BUG]  [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf,  false)&&  headerBuf.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf,  false)&&  headerBuf.length()  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOFRecord(headerBuf,  false)&&  headerBuf.length()  >  0)  {	  }    else    if(!buffer.isEOFRecord(headerBuf,    true))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
97	[BUG]  [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf,  false)||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf,  false)||  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOFRecord(headerBuf,  false)||  headerBuf.length  >  0)  {	  }    else    if(!buffer.isEOFRecord(headerBuf,    true))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
98	[BUG]  [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf,  false)&&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf,  false)&&  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOFRecord(headerBuf,  false)&&  headerBuf.length  >  0)  {	  }    else    if(!buffer.isEOFRecord(headerBuf,    true))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
99	[BUG]  [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf,  true)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf,  true)&&  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOFRecord(headerBuf,  true)&&  hasHitEOF)  {	  }    else    if(!buffer.isEOFRecord(headerBuf,    true))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
100	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.length  <  0)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.length  <  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  ||  headerBuf.length  <  0)  {	  }    else    if(buffer.isEOF()    ||    headerBuf.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
101	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  ||  buffer.length  <  0)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  ||  buffer.length  <  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  ||  buffer.length  <  0)  {	  }    else    if(buffer.isEOF()    ||    headerBuf.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
102	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  ||  buffer.isEOF()  ||  headerBuf.length  <  0)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  ||  buffer.isEOF()  ||  headerBuf.length  <  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  ||  buffer.isEOF()  ||  headerBuf.length  <  0)  {	  }    else    if(buffer.isEOF()    ||    headerBuf.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
103	[BUG]  [BUGGY]  }  else  if(buffer.isEOF()  ||  headerBuf.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOF()  ||  headerBuf.length  <  =  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF()  ||  headerBuf.length  <  =  0)  {	  }    else    if(buffer.isEOF()    ||    headerBuf.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
104	[BUG]  [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)||  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOFRecord(headerBuf)||  hasHitEOF)  {	  }    else    if(!buffer.isEOFRecord(headerBuf)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
105	[BUG]  [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)&&  hasHitEOF  ||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)&&  hasHitEOF  ||  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOFRecord(headerBuf)&&  hasHitEOF  ||  headerBuf.length  >  0)  {	  }    else    if(!buffer.isEOFRecord(headerBuf)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
106	[BUG]  [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)&&  isEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)&&  isEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOFRecord(headerBuf)&&  isEOF)  {	  }    else    if(!buffer.isEOFRecord(headerBuf)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
107	[BUG]  [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf,  true)&&  headerBuf.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf,  true)&&  headerBuf.length()  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOFRecord(headerBuf,  true)&&  headerBuf.length()  >  0)  {	  }    else    if(!buffer.isEOFRecord(headerBuf,    false))    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
108	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  buffer.isEOF()  ||  headerBuf.length()!=  0)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  buffer.isEOF()  ||  headerBuf.length()!=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)||  buffer.isEOF()  ||  headerBuf.length()!=  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF()    ||    headerBuf.length()!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
109	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.isEOF()  ||  buffer.length()!=  0)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.isEOF()  ||  buffer.length()!=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.isEOF()  ||  buffer.length()!=  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF()    ||    headerBuf.length()!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
110	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  &&  headerBuf.length()!=  0)  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  &&  headerBuf.length()!=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  &&  headerBuf.length()!=  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF()    ||    headerBuf.length()!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
111	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOF()  ||  buffer.length()!=  0)  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOF()  ||  buffer.length()!=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOF()  ||  buffer.length()!=  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF()    ||    headerBuf.length()!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
112	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOF()  ||  headerBuf.length()!=  0)  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOF()  ||  headerBuf.length()!=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOF()  ||  headerBuf.length()!=  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF()    ||    headerBuf.length()!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
113	[BUG]  [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)&&  headerBuf.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)&&  headerBuf.length()  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOFRecord(headerBuf)&&  headerBuf.length()  ==  0)  {	  }    else    if(!buffer.isEOFRecord(headerBuf)&&    headerBuf.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
114	[BUG]  [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)&&  headerBuf.length()!=  0)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)&&  headerBuf.length()!=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOFRecord(headerBuf)&&  headerBuf.length()!=  0)  {	  }    else    if(!buffer.isEOFRecord(headerBuf)&&    headerBuf.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
115	[BUG]  [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)&&  headerBuf.length()  >=  0)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)&&  headerBuf.length()  >=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOFRecord(headerBuf)&&  headerBuf.length()  >=  0)  {	  }    else    if(!buffer.isEOFRecord(headerBuf)&&    headerBuf.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
116	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  >  0  &&!buffer.isEOFRecord(headerBuf)&&  headerBuf.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  >  0  &&!buffer.isEOFRecord(headerBuf)&&  headerBuf.length()  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  >  0  &&!buffer.isEOFRecord(headerBuf)&&  headerBuf.length()  >  0)  {	  }    else    if(!buffer.isEOFRecord(headerBuf)&&    headerBuf.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
117	[BUG]  [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)&&  headerBuf.length()  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)&&  headerBuf.length()  <  =  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOFRecord(headerBuf)&&  headerBuf.length()  <  =  0)  {	  }    else    if(!buffer.isEOFRecord(headerBuf)&&    headerBuf.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
118	[BUG]  [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)||  headerBuf.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)||  headerBuf.length()  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOFRecord(headerBuf)||  headerBuf.length()  >  0)  {	  }    else    if(!buffer.isEOFRecord(headerBuf)&&    headerBuf.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
119	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer,  0,  headerBuf.length  -  1))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer,  0,  headerBuf.length  -  1))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer,  0,  headerBuf.length  -  1))  {	  }    else    if(headerBuf.isEOFRecord(buffer,    0,    headerBuf.length))    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
120	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer,  0,  headerBuf.length),  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer,  0,  headerBuf.length),  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer,  0,  headerBuf.length),  hasHitEOF)  {	  }    else    if(headerBuf.isEOFRecord(buffer,    0,    headerBuf.length))    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
121	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer,  0,  headerBuf.length  +  1))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer,  0,  headerBuf.length  +  1))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer,  0,  headerBuf.length  +  1))  {	  }    else    if(headerBuf.isEOFRecord(buffer,    0,    headerBuf.length))    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
122	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer,  0,  headerBuf.length)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer,  0,  headerBuf.length)&&  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer,  0,  headerBuf.length)&&  hasHitEOF)  {	  }    else    if(headerBuf.isEOFRecord(buffer,    0,    headerBuf.length))    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
123	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf,  0,  headerBuf.length))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf,  0,  headerBuf.length))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf,  0,  headerBuf.length))  {	  }    else    if(headerBuf.isEOFRecord(buffer,    0,    headerBuf.length))    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
124	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF(buffer,  0,  headerBuf.length))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF(buffer,  0,  headerBuf.length))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF(buffer,  0,  headerBuf.length))  {	  }    else    if(headerBuf.isEOFRecord(buffer,    0,    headerBuf.length))    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
125	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer,  0,  headerBuf.length)&&  headerBuf.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer,  0,  headerBuf.length)&&  headerBuf.length()  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer,  0,  headerBuf.length)&&  headerBuf.length()  >  0)  {	  }    else    if(headerBuf.isEOFRecord(buffer,    0,    headerBuf.length))    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
126	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF(buffer)&&  headerBuf.isEOF())  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF(buffer)&&  headerBuf.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF(buffer)&&  headerBuf.isEOF())  {	  }    else    if(headerBuf.isEOFRecord(buffer)||    headerBuf.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
127	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF(buffer)||  headerBuf.isEOF())  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF(buffer)||  headerBuf.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF(buffer)||  headerBuf.isEOF())  {	  }    else    if(headerBuf.isEOFRecord(buffer)||    headerBuf.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
128	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.isEOF()  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.isEOF()  ||  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.isEOF()  ||  hasHitEOF)  {	  }    else    if(headerBuf.isEOFRecord(buffer)||    headerBuf.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
129	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.length()  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  ||  headerBuf.length()  ==  0)  {	  }    else    if(buffer.isEOF()    ||    headerBuf.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
130	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  ||  buffer.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  ||  buffer.length()  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  ||  buffer.length()  ==  0)  {	  }    else    if(buffer.isEOF()    ||    headerBuf.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
131	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  ||  headerBuf.isEOF()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  ||  headerBuf.isEOF()  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  ||  headerBuf.isEOF()  ==  0)  {	  }    else    if(buffer.isEOF()    ||    headerBuf.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
132	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  ||  buffer.isEOF()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  ||  buffer.isEOF()  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  ||  buffer.isEOF()  ==  0)  {	  }    else    if(buffer.isEOF()    ||    headerBuf.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
133	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)||  headerBuf.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)||  headerBuf.length  <  =  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)||  headerBuf.length  <  =  0)  {	  }    else    if(!buffer.isEOF(headerBuf)||    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
134	[BUG]  [BUGGY]  }  else  if(headerBuf.length  >  0  ||!buffer.isEOF(headerBuf)||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  >  0  ||!buffer.isEOF(headerBuf)||  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  >  0  ||!buffer.isEOF(headerBuf)||  headerBuf.length  >  0)  {	  }    else    if(!buffer.isEOF(headerBuf)||    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
135	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)||  headerBuf.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)||  headerBuf.length  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)||  headerBuf.length  ==  0)  {	  }    else    if(!buffer.isEOF(headerBuf)||    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
136	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)||  headerBuf.length  >=  0)  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)||  headerBuf.length  >=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)||  headerBuf.length  >=  0)  {	  }    else    if(!buffer.isEOF(headerBuf)||    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
137	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  buffer.isEOF())  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  buffer.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)&&  buffer.isEOF())  {	  }    else    if(!buffer.isEOF(headerBuf)||    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
138	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)||  buffer.isEOF()  ||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)||  buffer.isEOF()  ||  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)||  buffer.isEOF()  ||  headerBuf.length  >  0)  {	  }    else    if(!buffer.isEOF(headerBuf)||    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
139	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)||  buffer.isEOF()  ||  headerBuf.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)||  buffer.isEOF()  ||  headerBuf.length()  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)||  buffer.isEOF()  ||  headerBuf.length()  ==  0)  {	  }    else    if(!buffer.isEOF(headerBuf)||    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
140	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)||  buffer.isEOF()  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)||  buffer.isEOF()  ||  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)||  buffer.isEOF()  ||  hasHitEOF)  {	  }    else    if(!buffer.isEOF(headerBuf)||    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
141	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)||  buffer.isEOF()  ||  headerBuf.length()!=  0)  {  [CE]  illegal  start  of  type  [FE]                                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)||  buffer.isEOF()  ||  headerBuf.length()!=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)||  buffer.isEOF()  ||  headerBuf.length()!=  0)  {	  }    else    if(!buffer.isEOF(headerBuf)||    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
142	[BUG]  [BUGGY]  }  else  if(!buffer.equals(headerBuf)||  buffer.isEOF())  {  [CE]  illegal  start  of  type  [FE]                                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.equals(headerBuf)||  buffer.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.equals(headerBuf)||  buffer.isEOF())  {	  }    else    if(!buffer.isEOF(headerBuf)||    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
143	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf.length()  >=  0)  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf.length()  >=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf.length()  >=  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf.length()    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
144	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf.length()!=  0)  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf.length()!=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf.length()!=  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf.length()    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
145	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf.length()  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf.length()  ==  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf.length()    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
146	[BUG]  [BUGGY]  }  else  if(buffer.isEOF(headerBuf)&&  headerBuf.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOF(headerBuf)&&  headerBuf.length()  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF(headerBuf)&&  headerBuf.length()  ==  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
147	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf.length  >=  0)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf.length  >=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf.length  >=  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf.length    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
148	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf.length!=  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf.length!=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf.length!=  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf.length    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
149	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.isEOF())  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  ||  headerBuf.isEOF())  {	  }    else    if(headerBuf.isEOFRecord()    ||    headerBuf.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
150	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord()  &&  headerBuf.isEOF())  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord()  &&  headerBuf.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord()  &&  headerBuf.isEOF())  {	  }    else    if(headerBuf.isEOFRecord()    ||    headerBuf.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
151	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  >  0  ||  headerBuf.isEOF())  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  >  0  ||  headerBuf.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  >  0  ||  headerBuf.isEOF())  {	  }    else    if(headerBuf.isEOFRecord()    ||    headerBuf.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
152	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord()  ||  headerBuf.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord()  ||  headerBuf.isEmpty())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord()  ||  headerBuf.isEmpty())  {	  }    else    if(headerBuf.isEOFRecord()    ||    headerBuf.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
153	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  ==  0  ||  headerBuf.isEOF())  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  ==  0  ||  headerBuf.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  ==  0  ||  headerBuf.isEOF())  {	  }    else    if(headerBuf.isEOFRecord()    ||    headerBuf.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
154	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  ||  buffer.isEOFRecord(bodyerBuf))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  ||  buffer.isEOFRecord(bodyerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  ||  buffer.isEOFRecord(bodyerBuf))  {	  }    else    if(buffer.isEOF()    ||    headerBuf.isEOFRecord(bodyerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
155	[BUG]  [BUGGY]  }  else  if(bodyerBuf.isEOF()  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(bodyerBuf.isEOF()  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(bodyerBuf.isEOF()  ||  buffer.isEOFRecord(headerBuf))  {	  }    else    if(buffer.isEOF()    ||    headerBuf.isEOFRecord(bodyerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
156	[BUG]  [BUGGY]  }  else  if(bodyerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(bodyerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(bodyerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer))  {	  }    else    if(buffer.isEOF()    ||    headerBuf.isEOFRecord(bodyerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
157	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF(buffer)&&  headerBuf.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF(buffer)&&  headerBuf.length()  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF(buffer)&&  headerBuf.length()  >  0)  {	  }    else    if(headerBuf.isEOF(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
158	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF(buffer)||  headerBuf.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF(buffer)||  headerBuf.length()  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF(buffer)||  headerBuf.length()  ==  0)  {	  }    else    if(headerBuf.isEOF(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
159	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF(buffer)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF(buffer)&&  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF(buffer)&&  hasHitEOF)  {	  }    else    if(headerBuf.isEOF(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
160	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.isEOF(buffer))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.isEOF(buffer))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  ||  headerBuf.isEOF(buffer))  {	  }    else    if(headerBuf.isEOF(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
161	[BUG]  [BUGGY]  }  else  if(!headerBuf.isEOF(buffer))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!headerBuf.isEOF(buffer))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!headerBuf.isEOF(buffer))  {	  }    else    if(headerBuf.isEOF(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
162	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  headerBuf.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  headerBuf.length()  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)&&  headerBuf.length()  ==  0)  {	  }    else    if(!buffer.isEOF(headerBuf)||    headerBuf.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
163	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  ==  0  ||!buffer.isEOF(headerBuf)||  headerBuf.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  ==  0  ||!buffer.isEOF(headerBuf)||  headerBuf.length()  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  ==  0  ||!buffer.isEOF(headerBuf)||  headerBuf.length()  ==  0)  {	  }    else    if(!buffer.isEOF(headerBuf)||    headerBuf.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
164	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  ==  0  ||  buffer.isEOF(headerBuf)||  headerBuf.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  ==  0  ||  buffer.isEOF(headerBuf)||  headerBuf.length()  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  ==  0  ||  buffer.isEOF(headerBuf)||  headerBuf.length()  ==  0)  {	  }    else    if(!buffer.isEOF(headerBuf)||    headerBuf.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
165	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)||  headerBuf.length()  ==  0  ||  headerBuf.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)||  headerBuf.length()  ==  0  ||  headerBuf.length()  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)||  headerBuf.length()  ==  0  ||  headerBuf.length()  ==  0)  {	  }    else    if(!buffer.isEOF(headerBuf)||    headerBuf.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
166	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  ==  0  ||!buffer.isEOF(headerBuf)&&  headerBuf.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  ==  0  ||!buffer.isEOF(headerBuf)&&  headerBuf.length()  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  ==  0  ||!buffer.isEOF(headerBuf)&&  headerBuf.length()  ==  0)  {	  }    else    if(!buffer.isEOF(headerBuf)||    headerBuf.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
167	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)||  headerBuf.length()!=  0)  {  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)||  headerBuf.length()!=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)||  headerBuf.length()!=  0)  {	  }    else    if(!buffer.isEOF(headerBuf)||    headerBuf.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
168	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer.readRecord();  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer.readRecord();  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer.readRecord();  }	  if(headerBuf    ==    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
169	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer.readRecord();  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer.readRecord();  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer.readRecord();  }	  if(headerBuf    ==    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
170	[BUG]  [BUGGY]  while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer.readRecord();  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer.readRecord();  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer.readRecord();  }	  if(headerBuf    ==    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
171	[BUG]  [BUGGY]  }  else  if(headerBuf.equals(buffer)||  headerBuf.equals(buffer))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.equals(buffer)||  headerBuf.equals(buffer))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.equals(buffer)||  headerBuf.equals(buffer))  {	  }    else    if(buffer.equals(headerBuf)||    buffer.equals(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
172	[BUG]  [BUGGY]  }  else  if(headerBuf.equals(buffer)||  buffer.equals(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.equals(buffer)||  buffer.equals(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.equals(buffer)||  buffer.equals(headerBuf))  {	  }    else    if(buffer.equals(headerBuf)||    buffer.equals(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
173	[BUG]  [BUGGY]  }  else  if(buffer.equals(headerBuf)&&  buffer.equals(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.equals(headerBuf)&&  buffer.equals(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.equals(headerBuf)&&  buffer.equals(headerBuf))  {	  }    else    if(buffer.equals(headerBuf)||    buffer.equals(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
174	[BUG]  [BUGGY]  }  else  if(buffer.equals(headerBuf)||  headerBuf.equals(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.equals(headerBuf)||  headerBuf.equals(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.equals(headerBuf)||  headerBuf.equals(headerBuf))  {	  }    else    if(buffer.equals(headerBuf)||    buffer.equals(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
175	[BUG]  [BUGGY]  }  else  if(buf.equals(headerBuf)||  buffer.equals(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buf.equals(headerBuf)||  buffer.equals(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buf.equals(headerBuf)||  buffer.equals(headerBuf))  {	  }    else    if(buffer.equals(headerBuf)||    buffer.equals(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
176	[BUG]  [BUGGY]  }  else  if(headerBuf.equals(buffer)||  headerBuf.equals(bodyBuf))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.equals(buffer)||  headerBuf.equals(bodyBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.equals(buffer)||  headerBuf.equals(bodyBuf))  {	  }    else    if(buffer.equals(headerBuf)||    buffer.equals(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
177	[BUG]  [BUGGY]  }  else  if(buffer.length  >  0  ||  headerBuf.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.length  >  0  ||  headerBuf.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.length  >  0  ||  headerBuf.isEOFRecord(headerBuf))  {	  }    else    if(buffer.length    >    0    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
178	[BUG]  [BUGGY]  }  else  if(headerBuf.length  >  0  ||  buffer.equals(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  >  0  ||  buffer.equals(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  >  0  ||  buffer.equals(headerBuf))  {	  }    else    if(buffer.length    >    0    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
179	[BUG]  [BUGGY]  }  else  if(buffer.length  <  0  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.length  <  0  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.length  <  0  ||  buffer.isEOFRecord(headerBuf))  {	  }    else    if(buffer.length    >    0    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
180	[BUG]  [BUGGY]  }  else  if(bodyBuf.length  >  0  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(bodyBuf.length  >  0  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(bodyBuf.length  >  0  ||  buffer.isEOFRecord(headerBuf))  {	  }    else    if(buffer.length    >    0    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
181	[BUG]  [BUGGY]  headerBuf  =  buffer.readRecord();  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  headerBuf  =  buffer.readRecord();  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	headerBuf  =  buffer.readRecord();	  if(headerBuf    ==    null)    {    headerBuf    =    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
182	[BUG]  [BUGGY]  HeaderBuf  =  buffer.readRecord();  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  HeaderBuf  =  buffer.readRecord();  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	HeaderBuf  =  buffer.readRecord();	  if(headerBuf    ==    null)    {    headerBuf    =    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
183	[BUG]  [BUGGY]  HeaderBuf  headerBuf  =  buffer.readRecord();  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  HeaderBuf  headerBuf  =  buffer.readRecord();  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	HeaderBuf  headerBuf  =  buffer.readRecord();	  if(headerBuf    ==    null)    {    headerBuf    =    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
184	[BUG]  [BUGGY]  headBuf  =  buffer.readRecord();  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  headBuf  =  buffer.readRecord();  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	headBuf  =  buffer.readRecord();	  if(headerBuf    ==    null)    {    headerBuf    =    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
185	[BUG]  [BUGGY]  berBuf  =  buffer.readRecord();  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  berBuf  =  buffer.readRecord();  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	berBuf  =  buffer.readRecord();	  if(headerBuf    ==    null)    {    headerBuf    =    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
186	[BUG]  [BUGGY]  }  else  if(buffer.record(headerBuf)&&  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.record(headerBuf)&&  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.record(headerBuf)&&  buffer.isEOFRecord(headerBuf))  {	  }    else    if(buffer.record(headerBuf)||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
187	[BUG]  [BUGGY]  }  else  if(buffer.record(headerBuf)||  buffer.isEOF(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.record(headerBuf)||  buffer.isEOF(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.record(headerBuf)||  buffer.isEOF(headerBuf))  {	  }    else    if(buffer.record(headerBuf)||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
188	[BUG]  [BUGGY]  }  else  if(buffer.record(headerBuf,  headerBuf)||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.record(headerBuf,  headerBuf)||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.record(headerBuf,  headerBuf)||  buffer.isEOFRecord(headerBuf))  {	  }    else    if(buffer.record(headerBuf)||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
189	[BUG]  [BUGGY]  }  else  if(buffer.record(headerBuf)||  buffer.equals(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.record(headerBuf)||  buffer.equals(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.record(headerBuf)||  buffer.equals(headerBuf))  {	  }    else    if(buffer.record(headerBuf)||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
190	[BUG]  [BUGGY]  }  else  if(buffer.record(headerBuf)||  buffer.contains(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.record(headerBuf)||  buffer.contains(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.record(headerBuf)||  buffer.contains(headerBuf))  {	  }    else    if(buffer.record(headerBuf)||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
191	[BUG]  [BUGGY]  }  else  if(buffer.record(headerBuf)||  buffer.isEOFRecord(headerBuf)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.record(headerBuf)||  buffer.isEOFRecord(headerBuf)&&  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.record(headerBuf)||  buffer.isEOFRecord(headerBuf)&&  hasHitEOF)  {	  }    else    if(buffer.record(headerBuf)||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
192	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  ||  headerBuf.isEOFRecord(buffer))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  ||  headerBuf.isEOFRecord(buffer))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  ||  headerBuf.isEOFRecord(buffer))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
193	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer,  false))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer,  false))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer,  false))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
194	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord(bodyBuf))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord(bodyBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord(bodyBuf))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
195	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  >  0  ||  headerBuf.isEOFRecord(buffer))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  >  0  ||  headerBuf.isEOFRecord(buffer))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  >  0  ||  headerBuf.isEOFRecord(buffer))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
196	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  &&  headerBuf.isEOFRecord(buffer))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  &&  headerBuf.isEOFRecord(buffer))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  &&  headerBuf.isEOFRecord(buffer))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
197	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf.length  <  =  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf.length  <  =  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf.length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
198	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length  <  =  1)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length  <  =  1)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length  <  =  1)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf.length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
199	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)||  hasHitEOF)  {	  }    else    if(headerBuf.isEOFRecord(buffer)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
200	[BUG]  [BUGGY]  }  else  if(!headerBuf.isEOFRecord(buffer)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!headerBuf.isEOFRecord(buffer)&&  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!headerBuf.isEOFRecord(buffer)&&  hasHitEOF)  {	  }    else    if(headerBuf.isEOFRecord(buffer)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
201	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length()  <  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length()  <  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length()  <  hasHitEOF)  {	  }    else    if(headerBuf.isEOFRecord(buffer)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
202	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf.isEOFRecord(buffer))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf.isEOFRecord(buffer))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf.isEOFRecord(buffer))  {	  }    else    if(headerBuf.isEOFRecord(buffer)||    headerBuf.isEOFRecord(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
203	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF(buffer)||  headerBuf.isEOFRecord(buffer))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF(buffer)||  headerBuf.isEOFRecord(buffer))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF(buffer)||  headerBuf.isEOFRecord(buffer))  {	  }    else    if(headerBuf.isEOFRecord(buffer)||    headerBuf.isEOFRecord(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
204	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.isEOFRecord(buffer,  hasHitEOF))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.isEOFRecord(buffer,  hasHitEOF))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.isEOFRecord(buffer,  hasHitEOF))  {	  }    else    if(headerBuf.isEOFRecord(buffer)||    headerBuf.isEOFRecord(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
205	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF(buffer)||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF(buffer)||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF(buffer)||  buffer.isEOFRecord(headerBuf))  {	  }    else    if(buffer.isEOF(headerBuf)||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
206	[BUG]  [BUGGY]  }  else  if(buffer.equals(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.equals(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.equals(headerBuf)||  buffer.isEOFRecord(headerBuf))  {	  }    else    if(buffer.isEOF(headerBuf)||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
207	[BUG]  [BUGGY]  }  else  if(buffer.isEOF(headerBuf)||  buffer.equals(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOF(headerBuf)||  buffer.equals(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF(headerBuf)||  buffer.equals(headerBuf))  {	  }    else    if(buffer.isEOF(headerBuf)||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
208	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord()  ||  headerBuf.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord()  ||  headerBuf.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord()  ||  headerBuf.isEOFRecord(headerBuf))  {	  }    else    if(headerBuf.isEOFRecord()    ||    headerBuf.isEOFRecord(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
209	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord()  ||  headerBuf.isEOFRecord(buffer,  false))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord()  ||  headerBuf.isEOFRecord(buffer,  false))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord()  ||  headerBuf.isEOFRecord(buffer,  false))  {	  }    else    if(headerBuf.isEOFRecord()    ||    headerBuf.isEOFRecord(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
210	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord()  &&  headerBuf.isEOFRecord(buffer))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord()  &&  headerBuf.isEOFRecord(buffer))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord()  &&  headerBuf.isEOFRecord(buffer))  {	  }    else    if(headerBuf.isEOFRecord()    ||    headerBuf.isEOFRecord(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
211	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord()  ||  headerBuf.isEOFRecord(buffer,  0,  headerBuf.length))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord()  ||  headerBuf.isEOFRecord(buffer,  0,  headerBuf.length))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord()  ||  headerBuf.isEOFRecord(buffer,  0,  headerBuf.length))  {	  }    else    if(headerBuf.isEOFRecord()    ||    headerBuf.isEOFRecord(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
212	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord()  ||  headerBuf.isEOF(buffer))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord()  ||  headerBuf.isEOF(buffer))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord()  ||  headerBuf.isEOF(buffer))  {	  }    else    if(headerBuf.isEOFRecord()    ||    headerBuf.isEOFRecord(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
213	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  buffer.isEOF(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  buffer.isEOF(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)&&  buffer.isEOF(headerBuf))  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
214	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  buffer.isEOF(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  buffer.isEOF(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)||  buffer.isEOF(headerBuf))  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
215	[BUG]  [BUGGY]  }  else  if(buffer.isEOF(headerBuf)||  buffer.isEOF(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOF(headerBuf)||  buffer.isEOF(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF(headerBuf)||  buffer.isEOF(headerBuf))  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
216	[BUG]  [BUGGY]  }  else  if(buffer.isEOF()  ||  buffer.isEOF(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOF()  ||  buffer.isEOF(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF()  ||  buffer.isEOF(headerBuf))  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
217	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF(headerBuf)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF(headerBuf)&&  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF(headerBuf)&&  hasHitEOF)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
218	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  headerBuf[i]  =  buffer.readRecord();  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  headerBuf[i]  =  buffer.readRecord();  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  headerBuf[i]  =  buffer.readRecord();  }	  if(headerBuf    ==    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    headerBuf[i]    =    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
219	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  headerBuf[i]  =  buffer.readRecord();  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  headerBuf[i]  =  buffer.readRecord();  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  headerBuf[i]  =  buffer.readRecord();  }	  if(headerBuf    ==    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    headerBuf[i]    =    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
220	[BUG]  [BUGGY]  headerBuf[i]  =  buffer.readRecord();  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  headerBuf[i]  =  buffer.readRecord();  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	headerBuf[i]  =  buffer.readRecord();	  if(headerBuf    ==    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    headerBuf[i]    =    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
221	[BUG]  [BUGGY]  HeaderBuf[]  headerBuf  =  buffer.readRecord();  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  HeaderBuf[]  headerBuf  =  buffer.readRecord();  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	HeaderBuf[]  headerBuf  =  buffer.readRecord();	  if(headerBuf    ==    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    headerBuf[i]    =    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
222	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  headerBuf[i]  =  getRecord();  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  headerBuf[i]  =  getRecord();  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  headerBuf[i]  =  getRecord();  }	  if(headerBuf    ==    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    headerBuf[i]    =    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
223	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  headBuf[i]  =  buffer.readRecord();  }  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  headBuf[i]  =  buffer.readRecord();  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  headBuf[i]  =  buffer.readRecord();  }	  if(headerBuf    ==    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    headerBuf[i]    =    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
224	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  ||  buffer.isEOFRecord(headerBuf,  false))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  ||  buffer.isEOFRecord(headerBuf,  false))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  ||  buffer.isEOFRecord(headerBuf,  false))  {	  }    else    if(buffer.isEOF()    ||    buffer.isEOFRecord(headerBuf,    false))    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
225	[BUG]  [BUGGY]  }  else  if(buffer.isEOF()  ||  buffer.isEOFRecord(headerBuf,  true))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOF()  ||  buffer.isEOFRecord(headerBuf,  true))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF()  ||  buffer.isEOFRecord(headerBuf,  true))  {	  }    else    if(buffer.isEOF()    ||    buffer.isEOFRecord(headerBuf,    false))    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
226	[BUG]  [BUGGY]  }  else  if(buffer.isEOF()  ||  headerBuf.isEOFRecord(headerBuf,  false))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOF()  ||  headerBuf.isEOFRecord(headerBuf,  false))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF()  ||  headerBuf.isEOFRecord(headerBuf,  false))  {	  }    else    if(buffer.isEOF()    ||    buffer.isEOFRecord(headerBuf,    false))    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
227	[BUG]  [BUGGY]  }  else  if(buffer.isEOF()  &&  buffer.isEOFRecord(headerBuf,  false))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOF()  &&  buffer.isEOFRecord(headerBuf,  false))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF()  &&  buffer.isEOFRecord(headerBuf,  false))  {	  }    else    if(buffer.isEOF()    ||    buffer.isEOFRecord(headerBuf,    false))    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
228	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  ||  buffer.isEOFRecord(headerBuf,  false))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  ||  buffer.isEOFRecord(headerBuf,  false))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  ||  buffer.isEOFRecord(headerBuf,  false))  {	  }    else    if(buffer.isEOF()    ||    buffer.isEOFRecord(headerBuf,    false))    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
229	[BUG]  [BUGGY]  }  else  if(buffer.length  >  0  ||  buffer.isEOFRecord(headerBuf,  false))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.length  >  0  ||  buffer.isEOFRecord(headerBuf,  false))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.length  >  0  ||  buffer.isEOFRecord(headerBuf,  false))  {	  }    else    if(buffer.isEOF()    ||    buffer.isEOFRecord(headerBuf,    false))    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
230	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf.length()  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf.length()  <  =  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf.length()  <  =  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf.length()    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
231	[BUG]  [BUGGY]  }  else  if(headerBuf.length  >  0  &&  buffer.isEOFRecord(headerBuf)&&  headerBuf.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  >  0  &&  buffer.isEOFRecord(headerBuf)&&  headerBuf.length  <  =  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  >  0  &&  buffer.isEOFRecord(headerBuf)&&  headerBuf.length  <  =  0)  {	  }    else    if(headerBuf.length    >    0    &&    buffer.isEOFRecord(headerBuf)&&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
232	[BUG]  [BUGGY]  }  else  if(headerBuf.length  >  0  ||  buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  >  0  ||  buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  >  0  ||  buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0)  {	  }    else    if(headerBuf.length    >    0    &&    buffer.isEOFRecord(headerBuf)&&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
233	[BUG]  [BUGGY]  }  else  if(headerBuf.length  ==  0  &&  buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  ==  0  &&  buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  ==  0  &&  buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0)  {	  }    else    if(headerBuf.length    >    0    &&    buffer.isEOFRecord(headerBuf)&&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
234	[BUG]  [BUGGY]  }  else  if(headerBuf.length  <  0  &&  buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  <  0  &&  buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  <  0  &&  buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0)  {	  }    else    if(headerBuf.length    >    0    &&    buffer.isEOFRecord(headerBuf)&&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
235	[BUG]  [BUGGY]  }  else  if(headerBuf.length  >  0  &&  buffer.isEOFRecord(headerBuf)||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  >  0  &&  buffer.isEOFRecord(headerBuf)||  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  >  0  &&  buffer.isEOFRecord(headerBuf)||  headerBuf.length  >  0)  {	  }    else    if(headerBuf.length    >    0    &&    buffer.isEOFRecord(headerBuf)&&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
236	[BUG]  [BUGGY]  }  else  if(headerBuf.length  >  0  &&  buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >=  0)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  >  0  &&  buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  >  0  &&  buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >=  0)  {	  }    else    if(headerBuf.length    >    0    &&    buffer.isEOFRecord(headerBuf)&&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
237	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.length!=  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.length!=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.length!=  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf.length!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
238	[BUG]  [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)&&  headerBuf.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)&&  headerBuf.length  <  =  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOFRecord(headerBuf)&&  headerBuf.length  <  =  0)  {	  }    else    if(!buffer.isEOFRecord(headerBuf)&&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
239	[BUG]  [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)&&  headerBuf.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)&&  headerBuf.length  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOFRecord(headerBuf)&&  headerBuf.length  ==  0)  {	  }    else    if(!buffer.isEOFRecord(headerBuf)&&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
240	[BUG]  [BUGGY]  }  else  if(headerBuf.length  >  0  &&!buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  >  0  &&!buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  >  0  &&!buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0)  {	  }    else    if(!buffer.isEOFRecord(headerBuf)&&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
241	[BUG]  [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)&&  headerBuf.length!=  0)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)&&  headerBuf.length!=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOFRecord(headerBuf)&&  headerBuf.length!=  0)  {	  }    else    if(!buffer.isEOFRecord(headerBuf)&&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
242	[BUG]  [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >=  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >=  0)  {	  }    else    if(!buffer.isEOFRecord(headerBuf)&&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
243	[BUG]  [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0  ||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0  ||  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0  ||  headerBuf.length  >  0)  {	  }    else    if(!buffer.isEOFRecord(headerBuf)&&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
244	[BUG]  [BUGGY]  System.arraycopy(headerBuf,  0,  buf,  0,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  System.arraycopy(headerBuf,  0,  buf,  0,  headerBuf.length);  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	System.arraycopy(headerBuf,  0,  buf,  0,  headerBuf.length);	  System.arraycopy(buffer,    0,    buf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
245	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  0,  headerBuf.length  -  1);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  System.arraycopy(buffer,  0,  buf,  0,  headerBuf.length  -  1);  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	System.arraycopy(buffer,  0,  buf,  0,  headerBuf.length  -  1);	  System.arraycopy(buffer,    0,    buf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
246	[BUG]  [BUGGY]  System.arraycopy(bodyBuf,  0,  buf,  0,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  System.arraycopy(bodyBuf,  0,  buf,  0,  headerBuf.length);  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	System.arraycopy(bodyBuf,  0,  buf,  0,  headerBuf.length);	  System.arraycopy(buffer,    0,    buf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
247	[BUG]  [BUGGY]  System.arraycopy(headerBuf,  0,  buffer,  0,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  System.arraycopy(headerBuf,  0,  buffer,  0,  headerBuf.length);  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	System.arraycopy(headerBuf,  0,  buffer,  0,  headerBuf.length);	  System.arraycopy(buffer,    0,    buf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
248	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  0,  headerBuf.length  +  1);  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  System.arraycopy(buffer,  0,  buf,  0,  headerBuf.length  +  1);  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	System.arraycopy(buffer,  0,  buf,  0,  headerBuf.length  +  1);	  System.arraycopy(buffer,    0,    buf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
249	[BUG]  [BUGGY]  }  else  if(buffer.isEOF()  ||  headerBuf.isEOFRecord(headerBuf.getCharset()))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOF()  ||  headerBuf.isEOFRecord(headerBuf.getCharset()))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF()  ||  headerBuf.isEOFRecord(headerBuf.getCharset()))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer.getCharset()))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
250	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  ==  headerBuf.length  &&  headerBuf.isEOFRecord(buffer.getCharset()))  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  ==  headerBuf.length  &&  headerBuf.isEOFRecord(buffer.getCharset()))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  ==  headerBuf.length  &&  headerBuf.isEOFRecord(buffer.getCharset()))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer.getCharset()))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
251	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  &&  headerBuf.isEOFRecord(buffer.getCharset()))  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  &&  headerBuf.isEOFRecord(buffer.getCharset()))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  &&  headerBuf.isEOFRecord(buffer.getCharset()))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer.getCharset()))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
252	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer,  buffer.getCharset()))  {  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer,  buffer.getCharset()))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer,  buffer.getCharset()))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer.getCharset()))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
253	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  >  0  ||  headerBuf.isEOFRecord(buffer.getCharset()))  {  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  >  0  ||  headerBuf.isEOFRecord(buffer.getCharset()))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  >  0  ||  headerBuf.isEOFRecord(buffer.getCharset()))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer.getCharset()))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
254	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  ==  headerBuf.length  ||  headerBuf.isEOFRecord(buffer.getCharset()))  {  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  ==  headerBuf.length  ||  headerBuf.isEOFRecord(buffer.getCharset()))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  ==  headerBuf.length  ||  headerBuf.isEOFRecord(buffer.getCharset()))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer.getCharset()))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
255	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  headerBuf.length  <  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  headerBuf.length  <  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)&&  headerBuf.length  <  0)  {	  }    else    if(!buffer.isEOF(headerBuf)||    headerBuf.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
256	[BUG]  [BUGGY]  }  else  if(headerBuf.length  <  0  ||!buffer.isEOF(headerBuf)||  headerBuf.length  <  0)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  <  0  ||!buffer.isEOF(headerBuf)||  headerBuf.length  <  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  <  0  ||!buffer.isEOF(headerBuf)||  headerBuf.length  <  0)  {	  }    else    if(!buffer.isEOF(headerBuf)||    headerBuf.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
257	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)||  headerBuf.length!=  0)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)||  headerBuf.length!=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)||  headerBuf.length!=  0)  {	  }    else    if(!buffer.isEOF(headerBuf)||    headerBuf.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
258	[BUG]  [BUGGY]  }  else  if(buffer.isEOF(headerBuf)&&  headerBuf.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOF(headerBuf)&&  headerBuf.length()  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF(headerBuf)&&  headerBuf.length()  >  0)  {	  }    else    if(buffer.isEOF(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
259	[BUG]  [BUGGY]  }  else  if(buffer.isEOF(headerBuf)||  buffer.isEOF())  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOF(headerBuf)||  buffer.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF(headerBuf)||  buffer.isEOF())  {	  }    else    if(buffer.isEOF(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
260	[BUG]  [BUGGY]  }  else  if(buffer.isEOF(headerBuf)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOF(headerBuf)&&  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF(headerBuf)&&  hasHitEOF)  {	  }    else    if(buffer.isEOF(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
261	[BUG]  [BUGGY]  }  else  if(buffer.shouldRecord(headerBuf)&&  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.shouldRecord(headerBuf)&&  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.shouldRecord(headerBuf)&&  buffer.isEOFRecord(headerBuf))  {	  }    else    if(buffer.shouldRecord(headerBuf)||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
262	[BUG]  [BUGGY]  }  else  if(buffer.shouldRecord(headerBuf)||  buffer.isEOF(headerBuf))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.shouldRecord(headerBuf)||  buffer.isEOF(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.shouldRecord(headerBuf)||  buffer.isEOF(headerBuf))  {	  }    else    if(buffer.shouldRecord(headerBuf)||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
263	[BUG]  [BUGGY]  }  else  if(headerBuf.shouldRecord(buffer)||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.shouldRecord(buffer)||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.shouldRecord(buffer)||  buffer.isEOFRecord(headerBuf))  {	  }    else    if(buffer.shouldRecord(headerBuf)||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
264	[BUG]  [BUGGY]  }  else  if(buffer.shouldRecord(headerBuf)||  buffer.equals(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.shouldRecord(headerBuf)||  buffer.equals(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.shouldRecord(headerBuf)||  buffer.equals(headerBuf))  {	  }    else    if(buffer.shouldRecord(headerBuf)||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
265	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  buffer.shouldRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  buffer.shouldRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  buffer.shouldRecord(headerBuf))  {	  }    else    if(buffer.shouldRecord(headerBuf)||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
266	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  headerBuf  =  buffer.readRecord();  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  if(headerBuf!=  null)  {  headerBuf  =  buffer.readRecord();  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	if(headerBuf!=  null)  {  headerBuf  =  buffer.readRecord();  }	  if(headerBuf    ==    null)    {    if(headerBuf!=    null)    {    headerBuf    =    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
267	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer,  true))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer,  true))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer,  true))  {	  }    else    if(headerBuf.isEOFRecord(buffer,    false))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
268	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf,  false))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf,  false))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf,  false))  {	  }    else    if(headerBuf.isEOFRecord(buffer,    false))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
269	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf,  true))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf,  true))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf,  true))  {	  }    else    if(headerBuf.isEOFRecord(buffer,    false))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
270	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer,  false)&&  headerBuf.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer,  false)&&  headerBuf.length()  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer,  false)&&  headerBuf.length()  >  0)  {	  }    else    if(headerBuf.isEOFRecord(buffer,    false))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
271	[BUG]  [BUGGY]  }  else  if(!headerBuf.isEOFRecord(buffer,  false))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!headerBuf.isEOFRecord(buffer,  false))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!headerBuf.isEOFRecord(buffer,  false))  {	  }    else    if(headerBuf.isEOFRecord(buffer,    false))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
272	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer,  false)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer,  false)&&  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer,  false)&&  hasHitEOF)  {	  }    else    if(headerBuf.isEOFRecord(buffer,    false))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
273	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer,  false)||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer,  false)||  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer,  false)||  headerBuf.length  >  0)  {	  }    else    if(headerBuf.isEOFRecord(buffer,    false))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
274	[BUG]  [BUGGY]  }  else  if(buffer.isEOF()  ||  headerBuf.isEOFRecord(headerBuf.getBytes()))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOF()  ||  headerBuf.isEOFRecord(headerBuf.getBytes()))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF()  ||  headerBuf.isEOFRecord(headerBuf.getBytes()))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer.getBytes()))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
275	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  &&  headerBuf.isEOFRecord(buffer.getBytes()))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  &&  headerBuf.isEOFRecord(buffer.getBytes()))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  &&  headerBuf.isEOFRecord(buffer.getBytes()))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer.getBytes()))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
276	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  ==  headerBuf.length  &&  headerBuf.isEOFRecord(buffer.getBytes()))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  ==  headerBuf.length  &&  headerBuf.isEOFRecord(buffer.getBytes()))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  ==  headerBuf.length  &&  headerBuf.isEOFRecord(buffer.getBytes()))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer.getBytes()))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
277	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer,  buffer.getBytes()))  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer,  buffer.getBytes()))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer,  buffer.getBytes()))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer.getBytes()))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
278	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  ==  0  ||  headerBuf.isEOFRecord(buffer.getBytes()))  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  ==  0  ||  headerBuf.isEOFRecord(buffer.getBytes()))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  ==  0  ||  headerBuf.isEOFRecord(buffer.getBytes()))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer.getBytes()))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
279	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  >  0  ||  headerBuf.isEOFRecord(buffer.getBytes()))  {  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  >  0  ||  headerBuf.isEOFRecord(buffer.getBytes()))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  >  0  ||  headerBuf.isEOFRecord(buffer.getBytes()))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer.getBytes()))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
280	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  headerBuf,  0,  headerBuf.length  -  1);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  System.arraycopy(buffer,  0,  headerBuf,  0,  headerBuf.length  -  1);  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	System.arraycopy(buffer,  0,  headerBuf,  0,  headerBuf.length  -  1);	  System.arraycopy(buffer,    0,    headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
281	[BUG]  [BUGGY]  System.arraycopy(headerBuf,  0,  headerBuf,  0,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  System.arraycopy(headerBuf,  0,  headerBuf,  0,  headerBuf.length);  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	System.arraycopy(headerBuf,  0,  headerBuf,  0,  headerBuf.length);	  System.arraycopy(buffer,    0,    headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
282	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  headerBuf,  0,  headerBuf.length  +  1);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  System.arraycopy(buffer,  0,  headerBuf,  0,  headerBuf.length  +  1);  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	System.arraycopy(buffer,  0,  headerBuf,  0,  headerBuf.length  +  1);	  System.arraycopy(buffer,    0,    headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
283	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  headerBuf,  0,  headerBuf.length  -  2);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  System.arraycopy(buffer,  0,  headerBuf,  0,  headerBuf.length  -  2);  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	System.arraycopy(buffer,  0,  headerBuf,  0,  headerBuf.length  -  2);	  System.arraycopy(buffer,    0,    headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
284	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  false;  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  false;  }	  if(headerBuf.length    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
285	[BUG]  [BUGGY]  if(headerBuf.length!=  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  if(headerBuf.length!=  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  false;  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	if(headerBuf.length!=  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  false;  }	  if(headerBuf.length    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
286	[BUG]  [BUGGY]  hasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  hasHitEOF  =  false;  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	hasHitEOF  =  false;	  if(headerBuf.length    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
287	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  headerBuf.equals(headerBuf.length))  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  headerBuf.equals(headerBuf.length))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)&&  headerBuf.equals(headerBuf.length))  {	  }    else    if(!buffer.isEOF(headerBuf)||    headerBuf.equals(headerBuf.length))    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
288	[BUG]  [BUGGY]  }  else  if(headerBuf.length  >  0  &&!buffer.isEOF(headerBuf)||  headerBuf.equals(headerBuf.length))  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  >  0  &&!buffer.isEOF(headerBuf)||  headerBuf.equals(headerBuf.length))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  >  0  &&!buffer.isEOF(headerBuf)||  headerBuf.equals(headerBuf.length))  {	  }    else    if(!buffer.isEOF(headerBuf)||    headerBuf.equals(headerBuf.length))    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
289	[BUG]  [BUGGY]  }  else  if(headerBuf.length  <  0  ||!buffer.isEOF(headerBuf)||  headerBuf.equals(headerBuf.length))  {  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  <  0  ||!buffer.isEOF(headerBuf)||  headerBuf.equals(headerBuf.length))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  <  0  ||!buffer.isEOF(headerBuf)||  headerBuf.equals(headerBuf.length))  {	  }    else    if(!buffer.isEOF(headerBuf)||    headerBuf.equals(headerBuf.length))    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
290	[BUG]  [BUGGY]  }  else  if(headerBuf.length  >  0  ||!buffer.isEOF(headerBuf)||  headerBuf.equals(headerBuf.length))  {  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  >  0  ||!buffer.isEOF(headerBuf)||  headerBuf.equals(headerBuf.length))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  >  0  ||!buffer.isEOF(headerBuf)||  headerBuf.equals(headerBuf.length))  {	  }    else    if(!buffer.isEOF(headerBuf)||    headerBuf.equals(headerBuf.length))    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
291	[BUG]  [BUGGY]  }  else  if(!headerBuf.isEOF(buffer)||  headerBuf.equals(headerBuf.length))  {  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!headerBuf.isEOF(buffer)||  headerBuf.equals(headerBuf.length))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!headerBuf.isEOF(buffer)||  headerBuf.equals(headerBuf.length))  {	  }    else    if(!buffer.isEOF(headerBuf)||    headerBuf.equals(headerBuf.length))    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
292	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)||  headerBuf.equals(bodyBuf.length))  {  [CE]  illegal  start  of  type  [FE]                                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)||  headerBuf.equals(bodyBuf.length))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)||  headerBuf.equals(bodyBuf.length))  {	  }    else    if(!buffer.isEOF(headerBuf)||    headerBuf.equals(headerBuf.length))    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
293	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  &&  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  &&  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  &&  buffer.isEOFRecord(headerBuf))  {	  }    else    if(buffer.isEOF()    &&    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
294	[BUG]  [BUGGY]  }  else  if(buffer.length()  ==  headerBuf.length  &&  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.length()  ==  headerBuf.length  &&  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.length()  ==  headerBuf.length  &&  buffer.isEOFRecord(headerBuf))  {	  }    else    if(buffer.isEOF()    &&    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
295	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF()  &&  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF()  &&  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF()  &&  buffer.isEOFRecord(headerBuf))  {	  }    else    if(buffer.isEOF()    &&    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
296	[BUG]  [BUGGY]  }  else  if(!headerBuf.isEOF()  &&  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!headerBuf.isEOF()  &&  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!headerBuf.isEOF()  &&  buffer.isEOFRecord(headerBuf))  {	  }    else    if(buffer.isEOF()    &&    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
297	[BUG]  [BUGGY]  }  else  if(buffer.length  >  0  &&  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.length  >  0  &&  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.length  >  0  &&  buffer.isEOFRecord(headerBuf))  {	  }    else    if(buffer.isEOF()    &&    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
298	[BUG]  [BUGGY]  }  else  if(buffer.isEOF(headerBuf)&&  headerBuf.isEOF())  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOF(headerBuf)&&  headerBuf.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF(headerBuf)&&  headerBuf.isEOF())  {	  }    else    if(headerBuf.isEOFRecord(buffer)&&    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
299	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.isEOF()  ||  buffer.isEOF())  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.isEOF()  ||  buffer.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.isEOF()  ||  buffer.isEOF())  {	  }    else    if(headerBuf.isEOFRecord(buffer)&&    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
300	[BUG]  [BUGGY]  }  else  if(buffer.isEOF(headerBuf)&&  buffer.isEOF())  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOF(headerBuf)&&  buffer.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF(headerBuf)&&  buffer.isEOF())  {	  }    else    if(headerBuf.isEOFRecord(buffer)&&    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
301	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  headerBuf  =  buffer.readRecord();  if(headerBuf!=  null)  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  if(headerBuf  ==  null)  {  headerBuf  =  buffer.readRecord();  if(headerBuf!=  null)  {  hasHitEOF  =  false;  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	if(headerBuf  ==  null)  {  headerBuf  =  buffer.readRecord();  if(headerBuf!=  null)  {  hasHitEOF  =  false;  }	  if(headerBuf    ==    null)    {    headerBuf    =    buffer.readRecord();    if(headerBuf    ==    null)    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
302	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  headerBuf  =  buffer.readRecord();  if(headerBuf  ==  null)  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  if(headerBuf!=  null)  {  headerBuf  =  buffer.readRecord();  if(headerBuf  ==  null)  {  hasHitEOF  =  false;  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	if(headerBuf!=  null)  {  headerBuf  =  buffer.readRecord();  if(headerBuf  ==  null)  {  hasHitEOF  =  false;  }	  if(headerBuf    ==    null)    {    headerBuf    =    buffer.readRecord();    if(headerBuf    ==    null)    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
303	[BUG]  [BUGGY]  HeaderBuffer  headerBuf  =  buffer.readRecord();  if(headerBuf  ==  null)  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  HeaderBuffer  headerBuf  =  buffer.readRecord();  if(headerBuf  ==  null)  {  hasHitEOF  =  false;  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	HeaderBuffer  headerBuf  =  buffer.readRecord();  if(headerBuf  ==  null)  {  hasHitEOF  =  false;  }	  if(headerBuf    ==    null)    {    headerBuf    =    buffer.readRecord();    if(headerBuf    ==    null)    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
304	[BUG]  [BUGGY]  headerBuf  =  buffer.readRecord();  if(headerBuf  ==  null)  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  headerBuf  =  buffer.readRecord();  if(headerBuf  ==  null)  {  hasHitEOF  =  false;  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	headerBuf  =  buffer.readRecord();  if(headerBuf  ==  null)  {  hasHitEOF  =  false;  }	  if(headerBuf    ==    null)    {    headerBuf    =    buffer.readRecord();    if(headerBuf    ==    null)    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
305	[BUG]  [BUGGY]  HeaderBuf  =  buffer.readRecord();  if(headerBuf  ==  null)  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  HeaderBuf  =  buffer.readRecord();  if(headerBuf  ==  null)  {  hasHitEOF  =  false;  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	HeaderBuf  =  buffer.readRecord();  if(headerBuf  ==  null)  {  hasHitEOF  =  false;  }	  if(headerBuf    ==    null)    {    headerBuf    =    buffer.readRecord();    if(headerBuf    ==    null)    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
306	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer,  headerBuf.length  -  1))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer,  headerBuf.length  -  1))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer,  headerBuf.length  -  1))  {	  }    else    if(headerBuf.isEOFRecord(buffer,    headerBuf.length))    {    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
307	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer,  headerBuf.length)||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer,  headerBuf.length)||  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer,  headerBuf.length)||  headerBuf.length  >  0)  {	  }    else    if(headerBuf.isEOFRecord(buffer,    headerBuf.length))    {    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
308	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer,  headerBuf.length  +  1))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer,  headerBuf.length  +  1))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer,  headerBuf.length  +  1))  {	  }    else    if(headerBuf.isEOFRecord(buffer,    headerBuf.length))    {    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
309	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF(buffer,  headerBuf.length))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF(buffer,  headerBuf.length))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF(buffer,  headerBuf.length))  {	  }    else    if(headerBuf.isEOFRecord(buffer,    headerBuf.length))    {    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
310	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer,  headerBuf.length),  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer,  headerBuf.length),  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer,  headerBuf.length),  hasHitEOF)  {	  }    else    if(headerBuf.isEOFRecord(buffer,    headerBuf.length))    {    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
311	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer,  headerBuf.length)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer,  headerBuf.length)&&  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer,  headerBuf.length)&&  hasHitEOF)  {	  }    else    if(headerBuf.isEOFRecord(buffer,    headerBuf.length))    {    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
312	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer,  headerBuf.length)&&  headerBuf.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer,  headerBuf.length)&&  headerBuf.length()  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer,  headerBuf.length)&&  headerBuf.length()  >  0)  {	  }    else    if(headerBuf.isEOFRecord(buffer,    headerBuf.length))    {    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
313	[BUG]  [BUGGY]  }  else  if(buffer.isEOF(headerBuf)&&  headerBuf.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOF(headerBuf)&&  headerBuf.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF(headerBuf)&&  headerBuf.isEOFRecord(headerBuf))  {	  }    else    if(buffer.isEOF(headerBuf)&&    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
314	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF(buffer)&&  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF(buffer)&&  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF(buffer)&&  buffer.isEOFRecord(headerBuf))  {	  }    else    if(buffer.isEOF(headerBuf)&&    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
315	[BUG]  [BUGGY]  }  else  if(buffer.equals(headerBuf)&&  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.equals(headerBuf)&&  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.equals(headerBuf)&&  buffer.isEOFRecord(headerBuf))  {	  }    else    if(buffer.isEOF(headerBuf)&&    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
316	[BUG]  [BUGGY]  }  else  if(buffer.isEOF(headerBuf)&&  buffer.isEOFRecord(headerBuf)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOF(headerBuf)&&  buffer.isEOFRecord(headerBuf)||  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF(headerBuf)&&  buffer.isEOFRecord(headerBuf)||  hasHitEOF)  {	  }    else    if(buffer.isEOF(headerBuf)&&    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
317	[BUG]  [BUGGY]  }  else  if(buffer.length  ==  0  ||  headerBuf.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.length  ==  0  ||  headerBuf.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.length  ==  0  ||  headerBuf.isEOFRecord(headerBuf))  {	  }    else    if(buffer.length    ==    0    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
318	[BUG]  [BUGGY]  }  else  if(headerBuf.length  ==  0  ||  buffer.equals(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  ==  0  ||  buffer.equals(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  ==  0  ||  buffer.equals(headerBuf))  {	  }    else    if(buffer.length    ==    0    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
319	[BUG]  [BUGGY]  }  else  if(headerBuf!=  null  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf!=  null  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf!=  null  ||  buffer.isEOFRecord(headerBuf))  {	  }    else    if(buffer.length    ==    0    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
320	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  >  0  &&  headerBuf.isEOFRecord(buffer)&&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  >  0  &&  headerBuf.isEOFRecord(buffer)&&  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  >  0  &&  headerBuf.isEOFRecord(buffer)&&  headerBuf.length  >  0)  {	  }    else    if(headerBuf.isEOFRecord(buffer)&&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
321	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf.length  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf.length  ==  0)  {	  }    else    if(headerBuf.isEOFRecord(buffer)&&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
322	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  &&  buffer.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  &&  buffer.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  &&  buffer.length  >  0)  {	  }    else    if(buffer.isEOF()    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
323	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  &&  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  &&  headerBuf.length  >  0)  {	  }    else    if(buffer.isEOF()    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
324	[BUG]  [BUGGY]  }  else  if(headerBuf.length  >  0  &&  buffer.isEOF())  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  >  0  &&  buffer.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  >  0  &&  buffer.isEOF())  {	  }    else    if(buffer.isEOF()    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
325	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  >  0  &&  buffer.isEOF())  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  >  0  &&  buffer.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  >  0  &&  buffer.isEOF())  {	  }    else    if(buffer.isEOF()    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
326	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  ||  headerBuf.length  >  0)  {	  }    else    if(buffer.isEOF()    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
327	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  &&  buf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  &&  buf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  &&  buf.length  >  0)  {	  }    else    if(buffer.isEOF()    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
328	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf.length  >  0  ||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf.length  >  0  ||  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf.length  >  0  ||  headerBuf.length  >  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf.length    >    0    ||    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
329	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0  ||  headerBuf.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0  ||  headerBuf.length  <  =  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0  ||  headerBuf.length  <  =  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf.length    >    0    ||    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
330	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0  ||  headerBuf.length  <  0)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0  ||  headerBuf.length  <  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0  ||  headerBuf.length  <  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf.length    >    0    ||    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
331	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0  ||  headerBuf.length  >=  0)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0  ||  headerBuf.length  >=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0  ||  headerBuf.length  >=  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf.length    >    0    ||    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
332	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0  ||  headerBuf.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0  ||  headerBuf.length  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0  ||  headerBuf.length  ==  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf.length    >    0    ||    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
333	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf.length  >  0  ||  buffer.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf.length  >  0  ||  buffer.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf.length  >  0  ||  buffer.length  >  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf.length    >    0    ||    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
334	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.isEOFRecord(headerBuf))  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
335	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord()  ||  headerBuf.isEOF())  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord()  ||  headerBuf.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord()  ||  headerBuf.isEOF())  {	  }    else    if(headerBuf.isEOFRecord()    ||    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
336	[BUG]  [BUGGY]  }  else  if(buffer.isEOF()  ||  headerBuf.isEOFRecord())  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOF()  ||  headerBuf.isEOFRecord())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF()  ||  headerBuf.isEOFRecord())  {	  }    else    if(headerBuf.isEOFRecord()    ||    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
337	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord()  &&  buffer.isEOF())  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord()  &&  buffer.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord()  &&  buffer.isEOF())  {	  }    else    if(headerBuf.isEOFRecord()    ||    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
338	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.length  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.length  ==  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
339	[BUG]  [BUGGY]  }  else  if(buffer.length()  ||  headerBuf.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.length()  ||  headerBuf.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.length()  ||  headerBuf.isEOFRecord(headerBuf))  {	  }    else    if(headerBuf.length()    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
340	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  ==  headerBuf.length()  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  ==  headerBuf.length()  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  ==  headerBuf.length()  ||  buffer.isEOFRecord(headerBuf))  {	  }    else    if(headerBuf.length()    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
341	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  >=  0  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  >=  0  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  >=  0  ||  buffer.isEOFRecord(headerBuf))  {	  }    else    if(headerBuf.length()    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
342	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  ==  EOFRecord.BACKSLASH  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  ==  EOFRecord.BACKSLASH  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  ==  EOFRecord.BACKSLASH  ||  buffer.isEOFRecord(headerBuf))  {	  }    else    if(headerBuf.length()    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
343	[BUG]  [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)&&  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)&&  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOFRecord(headerBuf)&&  buffer.isEOFRecord(headerBuf))  {	  }    else    if(!buffer.isEOFRecord(headerBuf)||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
344	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF()  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF()  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF()  ||  buffer.isEOFRecord(headerBuf))  {	  }    else    if(!buffer.isEOFRecord(headerBuf)||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
345	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)||  buffer.isEOFRecord(headerBuf))  {	  }    else    if(!buffer.isEOFRecord(headerBuf)||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
346	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)&&  buffer.isEOFRecord(headerBuf))  {	  }    else    if(!buffer.isEOFRecord(headerBuf)||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
347	[BUG]  [BUGGY]  }  else  if(headerBuf.length  >  0  &&!buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  >  0  &&!buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  >  0  &&!buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {	  }    else    if(!buffer.isEOFRecord(headerBuf)||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
348	[BUG]  [BUGGY]  }  else  if(headerBuf.length  <  0  ||!buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  <  0  ||!buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  <  0  ||!buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {	  }    else    if(!buffer.isEOFRecord(headerBuf)||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
349	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  buffer.isEOF(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  buffer.isEOF(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)&&  buffer.isEOF(headerBuf))  {	  }    else    if(!buffer.isEOF(headerBuf)||    buffer.isEOF(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
350	[BUG]  [BUGGY]  }  else  if(headerBuf.length  >  0  &&!buffer.isEOF(headerBuf)||  buffer.isEOF(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  >  0  &&!buffer.isEOF(headerBuf)||  buffer.isEOF(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  >  0  &&!buffer.isEOF(headerBuf)||  buffer.isEOF(headerBuf))  {	  }    else    if(!buffer.isEOF(headerBuf)||    buffer.isEOF(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
351	[BUG]  [BUGGY]  }  else  if(!buffer.equals(headerBuf)||  buffer.equals(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.equals(headerBuf)||  buffer.equals(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.equals(headerBuf)||  buffer.equals(headerBuf))  {	  }    else    if(!buffer.isEOF(headerBuf)||    buffer.isEOF(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
352	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF()  ||  buffer.isEOF(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF()  ||  buffer.isEOF(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF()  ||  buffer.isEOF(headerBuf))  {	  }    else    if(!buffer.isEOF(headerBuf)||    buffer.isEOF(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
353	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)||  buffer.equals(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)||  buffer.equals(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)||  buffer.equals(headerBuf))  {	  }    else    if(!buffer.isEOF(headerBuf)||    buffer.isEOF(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
354	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf  ==  null)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf  ==  null)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf  ==  null)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
355	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf  ==  null)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf  ==  null)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf  ==  null)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
356	[BUG]  [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)&&  headerBuf  ==  null)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)&&  headerBuf  ==  null)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOFRecord(headerBuf)&&  headerBuf  ==  null)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
357	[BUG]  [BUGGY]  }  else  if(buffer.isEOF(headerBuf)&&  headerBuf  ==  null)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOF(headerBuf)&&  headerBuf  ==  null)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF(headerBuf)&&  headerBuf  ==  null)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
358	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)/&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)/&  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)/&  hasHitEOF)  {	  }    else    if(buffer.isEOFRecord(headerBuf)/&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
359	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)/*&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)/*&  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)/*&  hasHitEOF)  {	  }    else    if(buffer.isEOFRecord(headerBuf)/&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
360	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOFRecord(headerBuf)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOFRecord(headerBuf)&&  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOFRecord(headerBuf)&&  hasHitEOF)  {	  }    else    if(buffer.isEOFRecord(headerBuf)/&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
361	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)/&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)/&  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)/&  headerBuf.length  >  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)/&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
362	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  &&  headerBuf.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  &&  headerBuf.length()  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  &&  headerBuf.length()  >  0)  {	  }    else    if(headerBuf.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
363	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  >  0)  {	  }    else    if(headerBuf.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
364	[BUG]  [BUGGY]  }  else  if(headerBuf.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEmpty())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEmpty())  {	  }    else    if(headerBuf.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
365	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.isEmpty())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  ||  headerBuf.isEmpty())  {	  }    else    if(headerBuf.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
366	[BUG]  [BUGGY]  }  else  if(headerBuf.length  >  0  ||  headerBuf.isEOF())  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  >  0  ||  headerBuf.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  >  0  ||  headerBuf.isEOF())  {	  }    else    if(headerBuf.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
367	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf.length()  ==  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf.length()  ==  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf.length()  ==  hasHitEOF)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf.length()    ==    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
368	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.length()  ==  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.length()  ==  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.length()  ==  hasHitEOF)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf.length()    ==    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
369	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  buffer.length()  ==  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  buffer.length()  ==  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)&&  buffer.length()  ==  hasHitEOF)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf.length()    ==    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
370	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)||  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)||  hasHitEOF)  {	  }    else    if(!buffer.isEOF(headerBuf)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
371	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  hasHitEOF  ||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  hasHitEOF  ||  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)&&  hasHitEOF  ||  headerBuf.length  >  0)  {	  }    else    if(!buffer.isEOF(headerBuf)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
372	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  headerBuf!=  null)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  headerBuf!=  null)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)&&  headerBuf!=  null)  {	  }    else    if(!buffer.isEOF(headerBuf)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
373	[BUG]  [BUGGY]  }  else  if(!buffer.equals(headerBuf)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.equals(headerBuf)&&  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.equals(headerBuf)&&  hasHitEOF)  {	  }    else    if(!buffer.isEOF(headerBuf)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
374	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  hasHitEOF  ||  headerBuf.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  hasHitEOF  ||  headerBuf.length()  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)&&  hasHitEOF  ||  headerBuf.length()  ==  0)  {	  }    else    if(!buffer.isEOF(headerBuf)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
375	[BUG]  [BUGGY]  }  else  if(!headerBuf.isEOFRecord(buffer)&&  headerBuf.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!headerBuf.isEOFRecord(buffer)&&  headerBuf.length()  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!headerBuf.isEOFRecord(buffer)&&  headerBuf.length()  >  0)  {	  }    else    if(!headerBuf.isEOFRecord(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
376	[BUG]  [BUGGY]  }  else  if(!headerBuf.isEOFRecord(buffer,  0,  headerBuf.length))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!headerBuf.isEOFRecord(buffer,  0,  headerBuf.length))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!headerBuf.isEOFRecord(buffer,  0,  headerBuf.length))  {	  }    else    if(!headerBuf.isEOFRecord(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
377	[BUG]  [BUGGY]  }  else  if(!headerBuf.isEOFRecord(buffer,  true))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!headerBuf.isEOFRecord(buffer,  true))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!headerBuf.isEOFRecord(buffer,  true))  {	  }    else    if(!headerBuf.isEOFRecord(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
378	[BUG]  [BUGGY]  }  else  if(!headerBuf.isEOFRecord(buffer,  headerBuf.length))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!headerBuf.isEOFRecord(buffer,  headerBuf.length))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!headerBuf.isEOFRecord(buffer,  headerBuf.length))  {	  }    else    if(!headerBuf.isEOFRecord(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
379	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer.readRecord();  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer.readRecord();  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer.readRecord();  }	  if(headerBuf.length    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
380	[BUG]  [BUGGY]  while(headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer.readRecord();  }  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  while(headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer.readRecord();  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	while(headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer.readRecord();  }	  if(headerBuf.length    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
381	[BUG]  [BUGGY]  if(headerBuf.length!=  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer.readRecord();  }  [CE]  illegal  start  of  type  [FE]                                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  if(headerBuf.length!=  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer.readRecord();  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	if(headerBuf.length!=  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer.readRecord();  }	  if(headerBuf.length    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
382	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer.readRecord();  }  [CE]  illegal  start  of  type  [FE]                                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  For(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer.readRecord();  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	For(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer.readRecord();  }	  if(headerBuf.length    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
383	[BUG]  [BUGGY]  while(headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  while(headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	while(headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  hasHitEOF  =  true;  }	  if(headerBuf.length    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
384	[BUG]  [BUGGY]  while(headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer.readRecord();  [CE]  illegal  start  of  type  [FE]                                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  while(headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer.readRecord();  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	while(headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer.readRecord();	  if(headerBuf.length    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
385	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  buffer.isEOF()  ||  headerBuf.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  buffer.isEOF()  ||  headerBuf.length  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)||  buffer.isEOF()  ||  headerBuf.length  ==  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF()    ||    headerBuf.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
386	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOF()  ||  headerBuf.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOF()  ||  headerBuf.length  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOF()  ||  headerBuf.length  ==  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF()    ||    headerBuf.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
387	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.isEOF()  ||  headerBuf.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.isEOF()  ||  headerBuf.length  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.isEOF()  ||  headerBuf.length  ==  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF()    ||    headerBuf.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
388	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  &&  headerBuf.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  &&  headerBuf.length  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  &&  headerBuf.length  ==  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF()    ||    headerBuf.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
389	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  &&  buffer.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  &&  buffer.length()  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  &&  buffer.length()  >  0)  {	  }    else    if(buffer.isEOF()    &&    headerBuf.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
390	[BUG]  [BUGGY]  }  else  if(buffer.isEOF()  ||  headerBuf.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOF()  ||  headerBuf.length()  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF()  ||  headerBuf.length()  >  0)  {	  }    else    if(buffer.isEOF()    &&    headerBuf.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
391	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.length()  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  ||  headerBuf.length()  >  0)  {	  }    else    if(buffer.isEOF()    &&    headerBuf.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
392	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  >  0  ||  buffer.isEOF()  &&  headerBuf.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  >  0  ||  buffer.isEOF()  &&  headerBuf.length()  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  >  0  ||  buffer.isEOF()  &&  headerBuf.length()  >  0)  {	  }    else    if(buffer.isEOF()    &&    headerBuf.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
393	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  ||  buffer.isEOFRecord(buffer))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  ||  buffer.isEOFRecord(buffer))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  ||  buffer.isEOFRecord(buffer))  {	  }    else    if(buffer.isEOF()    ||    headerBuf.isEOFRecord(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
394	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  ||  buffer.isEOFRecord(bodyBuf))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  ||  buffer.isEOFRecord(bodyBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  ||  buffer.isEOFRecord(bodyBuf))  {	  }    else    if(buffer.isEOF()    ||    headerBuf.isEOFRecord(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
395	[BUG]  [BUGGY]  }  else  if(bodyBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(bodyBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(bodyBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer))  {	  }    else    if(buffer.isEOF()    ||    headerBuf.isEOFRecord(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
396	[BUG]  [BUGGY]  }  else  if(buffer.length  >  0  ||  headerBuf.isEOFRecord(buffer))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.length  >  0  ||  headerBuf.isEOFRecord(buffer))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.length  >  0  ||  headerBuf.isEOFRecord(buffer))  {	  }    else    if(buffer.isEOF()    ||    headerBuf.isEOFRecord(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
397	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)||  isEOF())  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)||  isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)||  isEOF())  {	  }    else    if(!buffer.isEOF(headerBuf)&&    isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
398	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  isEOF()  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  isEOF()  ||  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)&&  isEOF()  ||  hasHitEOF)  {	  }    else    if(!buffer.isEOF(headerBuf)&&    isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
399	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  isEOF()  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  isEOF()  &&  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)&&  isEOF()  &&  hasHitEOF)  {	  }    else    if(!buffer.isEOF(headerBuf)&&    isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
400	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  isEOF()  ||  headerBuf.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  isEOF()  ||  headerBuf.length()  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)&&  isEOF()  ||  headerBuf.length()  ==  0)  {	  }    else    if(!buffer.isEOF(headerBuf)&&    isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
401	[BUG]  [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)||  headerBuf.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)||  headerBuf.length  <  =  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOFRecord(headerBuf)||  headerBuf.length  <  =  0)  {	  }    else    if(!buffer.isEOFRecord(headerBuf)||    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
402	[BUG]  [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)||  headerBuf.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)||  headerBuf.length  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOFRecord(headerBuf)||  headerBuf.length  ==  0)  {	  }    else    if(!buffer.isEOFRecord(headerBuf)||    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
403	[BUG]  [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)||  headerBuf.length  >=  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)||  headerBuf.length  >=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOFRecord(headerBuf)||  headerBuf.length  >=  0)  {	  }    else    if(!buffer.isEOFRecord(headerBuf)||    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
404	[BUG]  [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)||  headerBuf.length!=  0)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)||  headerBuf.length!=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOFRecord(headerBuf)||  headerBuf.length!=  0)  {	  }    else    if(!buffer.isEOFRecord(headerBuf)||    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
405	[BUG]  [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)||  headerBuf.length  <  0)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)||  headerBuf.length  <  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOFRecord(headerBuf)||  headerBuf.length  <  0)  {	  }    else    if(!buffer.isEOFRecord(headerBuf)||    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
406	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length  >  0)  {  headerBuf  =  buffer.readRecord();  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length  >  0)  {  headerBuf  =  buffer.readRecord();  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	if(headerBuf!=  null)  {  if(headerBuf.length  >  0)  {  headerBuf  =  buffer.readRecord();  }	  if(headerBuf    ==    null)    {    if(headerBuf.length    >    0)    {    headerBuf    =    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
407	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length  ==  0)  {  headerBuf  =  buffer.readRecord();  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length  ==  0)  {  headerBuf  =  buffer.readRecord();  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	if(headerBuf!=  null)  {  if(headerBuf.length  ==  0)  {  headerBuf  =  buffer.readRecord();  }	  if(headerBuf    ==    null)    {    if(headerBuf.length    >    0)    {    headerBuf    =    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
408	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length  >=  0)  {  headerBuf  =  buffer.readRecord();  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length  >=  0)  {  headerBuf  =  buffer.readRecord();  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	if(headerBuf!=  null)  {  if(headerBuf.length  >=  0)  {  headerBuf  =  buffer.readRecord();  }	  if(headerBuf    ==    null)    {    if(headerBuf.length    >    0)    {    headerBuf    =    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
409	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length  <  0)  {  headerBuf  =  buffer.readRecord();  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length  <  0)  {  headerBuf  =  buffer.readRecord();  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	if(headerBuf!=  null)  {  if(headerBuf.length  <  0)  {  headerBuf  =  buffer.readRecord();  }	  if(headerBuf    ==    null)    {    if(headerBuf.length    >    0)    {    headerBuf    =    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
410	[BUG]  [BUGGY]  }  else  if(bodyBuf.isEOF()  ||  headerBuf.isEOF())  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(bodyBuf.isEOF()  ||  headerBuf.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(bodyBuf.isEOF()  ||  headerBuf.isEOF())  {	  }    else    if(buffer.isEOF()    ||    headerBuf.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
411	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  ||  headerBuf.isEOFRecord(buffer.length))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  ||  headerBuf.isEOFRecord(buffer.length))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  ||  headerBuf.isEOFRecord(buffer.length))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer.length))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
412	[BUG]  [BUGGY]  }  else  if(buffer.length.isEOF()  ||  headerBuf.isEOFRecord(headerBuf.length))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.length.isEOF()  ||  headerBuf.isEOFRecord(headerBuf.length))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.length.isEOF()  ||  headerBuf.isEOFRecord(headerBuf.length))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer.length))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
413	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  >  0  ||  headerBuf.isEOFRecord(buffer.length))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  >  0  ||  headerBuf.isEOFRecord(buffer.length))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  >  0  ||  headerBuf.isEOFRecord(buffer.length))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer.length))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
414	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer,  0,  headerBuf.length))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer,  0,  headerBuf.length))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer,  0,  headerBuf.length))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer.length))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
415	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer,  0,  buffer.length))  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer,  0,  buffer.length))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer,  0,  buffer.length))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer.length))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
416	[BUG]  [BUGGY]  }  else  if(buffer.length()  ||  headerBuf.isEOFRecord(headerBuf.length))  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.length()  ||  headerBuf.isEOFRecord(headerBuf.length))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.length()  ||  headerBuf.isEOFRecord(headerBuf.length))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer.length))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
417	[BUG]  [BUGGY]  }  else  if(buffer.isEOF()  ||  headerBuf.isEOFRecord(headerBuf.length))  {  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOF()  ||  headerBuf.isEOFRecord(headerBuf.length))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF()  ||  headerBuf.isEOFRecord(headerBuf.length))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer.length))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
418	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  buffer.isEOF()  ||  headerBuf.isEOF())  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  buffer.isEOF()  ||  headerBuf.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)&&  buffer.isEOF()  ||  headerBuf.isEOF())  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
419	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  buffer.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  buffer.length()  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)&&  buffer.length()  >  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
420	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.length  <  0)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.length  <  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.length  <  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
421	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.length  <  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.length  <  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.length  <  hasHitEOF)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
422	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.isEOF()  ||  buffer.isEOF())  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.isEOF()  ||  buffer.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.isEOF()  ||  buffer.isEOF())  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF()    ||    headerBuf.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
423	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOF()  ||  buffer.isEOF())  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOF()  ||  buffer.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOF()  ||  buffer.isEOF())  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF()    ||    headerBuf.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
424	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  buffer.isEOF()  ||  headerBuf.isEOF())  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  buffer.isEOF()  ||  headerBuf.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)||  buffer.isEOF()  ||  headerBuf.isEOF())  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF()    ||    headerBuf.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
425	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOF()  ||  headerBuf.isEOF())  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOF()  ||  headerBuf.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOF()  ||  headerBuf.isEOF())  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF()    ||    headerBuf.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
426	[BUG]  [BUGGY]  }  else  if(buffer.isEOF(headerBuf)||  buffer.isEOF()  ||  headerBuf.isEOF())  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOF(headerBuf)||  buffer.isEOF()  ||  headerBuf.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF(headerBuf)||  buffer.isEOF()  ||  headerBuf.isEOF())  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF()    ||    headerBuf.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
427	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecord();  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  byte[]  headerBuf  =  buffer.getRecord();  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	byte[]  headerBuf  =  buffer.getRecord();	  byte[]    headerBuf    =    buffer.readRecord();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
428	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf);  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	byte[]  headerBuf  =  buffer.readRecord(this.headerBuf);	  byte[]    headerBuf    =    buffer.readRecord();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
429	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer();  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer();  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer();	  byte[]    headerBuf    =    buffer.readRecord();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
430	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(true);  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(true);  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	byte[]  headerBuf  =  buffer.readRecord(true);	  byte[]    headerBuf    =    buffer.readRecord();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
431	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readHeaderBuf();  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  byte[]  headerBuf  =  buffer.readHeaderBuf();  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	byte[]  headerBuf  =  buffer.readHeaderBuf();	  byte[]    headerBuf    =    buffer.readRecord();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
432	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.length  >  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
433	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.length  <  =  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.length  <  =  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
434	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.length  >=  0)  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.length  >=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.length  >=  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
435	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  headerBuf.length()!=  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  headerBuf.length()!=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)&&  headerBuf.length()!=  0)  {	  }    else    if(!buffer.isEOF(headerBuf)&&    headerBuf.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
436	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  >  0  &&!buffer.isEOF(headerBuf)&&  headerBuf.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  >  0  &&!buffer.isEOF(headerBuf)&&  headerBuf.length()  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  >  0  &&!buffer.isEOF(headerBuf)&&  headerBuf.length()  >  0)  {	  }    else    if(!buffer.isEOF(headerBuf)&&    headerBuf.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
437	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  headerBuf.length()  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  headerBuf.length()  <  =  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)&&  headerBuf.length()  <  =  0)  {	  }    else    if(!buffer.isEOF(headerBuf)&&    headerBuf.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
438	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  headerBuf.length()  >=  0)  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  headerBuf.length()  >=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)&&  headerBuf.length()  >=  0)  {	  }    else    if(!buffer.isEOF(headerBuf)&&    headerBuf.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
439	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  headerBuf.length()  >  0  ||  headerBuf.charAt(headerBuf.length()  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  headerBuf.length()  >  0  ||  headerBuf.charAt(headerBuf.length()  -  1)!=  '/')  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)&&  headerBuf.length()  >  0  ||  headerBuf.charAt(headerBuf.length()  -  1)!=  '/')  {	  }    else    if(!buffer.isEOF(headerBuf)&&    headerBuf.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
440	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.isEOF()  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.isEOF()  &&  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.isEOF()  &&  hasHitEOF)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    headerBuf.isEOF()    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
441	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  &&  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  &&  hasHitEOF)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    headerBuf.isEOF()    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
442	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.isEOF()  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.isEOF()  &&  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.isEOF()  &&  hasHitEOF)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    headerBuf.isEOF()    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
443	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  buffer.isEOF()  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  buffer.isEOF()  &&  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)||  buffer.isEOF()  &&  hasHitEOF)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    headerBuf.isEOF()    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
444	[BUG]  [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf,  headerBuf)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf,  headerBuf)&&  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOFRecord(headerBuf,  headerBuf)&&  hasHitEOF)  {	  }    else    if(!buffer.isEOFRecord(headerBuf,    headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
445	[BUG]  [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf,  0,  headerBuf.length))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf,  0,  headerBuf.length))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOFRecord(headerBuf,  0,  headerBuf.length))  {	  }    else    if(!buffer.isEOFRecord(headerBuf,    headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
446	[BUG]  [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf,  null))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf,  null))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOFRecord(headerBuf,  null))  {	  }    else    if(!buffer.isEOFRecord(headerBuf,    headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
447	[BUG]  [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf,  buffer.length))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf,  buffer.length))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOFRecord(headerBuf,  buffer.length))  {	  }    else    if(!buffer.isEOFRecord(headerBuf,    headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
448	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer,  headerBuf))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer,  headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer,  headerBuf))  {	  }    else    if(!buffer.isEOFRecord(headerBuf,    headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
449	[BUG]  [BUGGY]  }  else  if(headerBuf.hasEOF()  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.hasEOF()  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.hasEOF()  ||  buffer.isEOFRecord(headerBuf))  {	  }    else    if(buffer.hasEOF()    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
450	[BUG]  [BUGGY]  }  else  if(buffer.hasEOF()  ||  headerBuf.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.hasEOF()  ||  headerBuf.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.hasEOF()  ||  headerBuf.isEOFRecord(headerBuf))  {	  }    else    if(buffer.hasEOF()    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
451	[BUG]  [BUGGY]  }  else  if(buffer.hasHitEOF()  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.hasHitEOF()  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.hasHitEOF()  ||  buffer.isEOFRecord(headerBuf))  {	  }    else    if(buffer.hasEOF()    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
452	[BUG]  [BUGGY]  }  else  if(buffer.hasEOF()  ||  headerBuf.isEOFRecord(buffer))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.hasEOF()  ||  headerBuf.isEOFRecord(buffer))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.hasEOF()  ||  headerBuf.isEOFRecord(buffer))  {	  }    else    if(buffer.hasEOF()    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
453	[BUG]  [BUGGY]  }  else  if(buffer.length  <  headerBuf.length  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.length  <  headerBuf.length  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.length  <  headerBuf.length  ||  buffer.isEOFRecord(headerBuf))  {	  }    else    if(buffer.hasEOF()    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
454	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  ||  headerBuf.isEOFRecord(bodyBuf))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  ||  headerBuf.isEOFRecord(bodyBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  ||  headerBuf.isEOFRecord(bodyBuf))  {	  }    else    if(bodyBuf.isEOF()    ||    headerBuf.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
455	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  ||  bodyBuf.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  ||  bodyBuf.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  ||  bodyBuf.isEOFRecord(headerBuf))  {	  }    else    if(bodyBuf.isEOF()    ||    headerBuf.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
456	[BUG]  [BUGGY]  }  else  if(headerBuf.equals(bodyBuf)||  headerBuf.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.equals(bodyBuf)||  headerBuf.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.equals(bodyBuf)||  headerBuf.isEOFRecord(headerBuf))  {	  }    else    if(bodyBuf.isEOF()    ||    headerBuf.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
457	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headBuf.isEOFRecord(bodyBuf))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headBuf.isEOFRecord(bodyBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  ||  headBuf.isEOFRecord(bodyBuf))  {	  }    else    if(bodyBuf.isEOF()    ||    headerBuf.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
458	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  false;  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  false;  }	  if(headerBuf    ==    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
459	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  ||  buffer.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  ||  buffer.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  ||  buffer.length  >  0)  {	  }    else    if(buffer.isEOF()    ||    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
460	[BUG]  [BUGGY]  }  else  if(headerBuf.length  >  0  ||  buffer.isEOF()  ||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  >  0  ||  buffer.isEOF()  ||  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  >  0  ||  buffer.isEOF()  ||  headerBuf.length  >  0)  {	  }    else    if(buffer.isEOF()    ||    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
461	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  ||  buffer.isEOF()  ||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  ||  buffer.isEOF()  ||  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  ||  buffer.isEOF()  ||  headerBuf.length  >  0)  {	  }    else    if(buffer.isEOF()    ||    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
462	[BUG]  [BUGGY]  }  else  if(headerBuf.length  ==  0  ||!buffer.isEOF(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  ==  0  ||!buffer.isEOF(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  ==  0  ||!buffer.isEOF(headerBuf))  {	  }    else    if(headerBuf.length    ==    0    &&!buffer.isEOF(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
463	[BUG]  [BUGGY]  }  else  if(headerBuf.length!=  0  &&!buffer.isEOF(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length!=  0  &&!buffer.isEOF(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length!=  0  &&!buffer.isEOF(headerBuf))  {	  }    else    if(headerBuf.length    ==    0    &&!buffer.isEOF(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
464	[BUG]  [BUGGY]  }  else  if(headerBuf.length  ==  1  &&!buffer.isEOF(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  ==  1  &&!buffer.isEOF(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  ==  1  &&!buffer.isEOF(headerBuf))  {	  }    else    if(headerBuf.length    ==    0    &&!buffer.isEOF(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
465	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.equals(buffer.getRecord()))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.equals(buffer.getRecord()))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  ||  headerBuf.equals(buffer.getRecord()))  {	  }    else    if(buffer.isEOF()    ||    headerBuf.equals(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
466	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  ||  buffer.equals(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  ||  buffer.equals(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  ||  buffer.equals(headerBuf))  {	  }    else    if(buffer.isEOF()    ||    headerBuf.equals(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
467	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.equals(buffer.getLength()))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.equals(buffer.getLength()))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  ||  headerBuf.equals(buffer.getLength()))  {	  }    else    if(buffer.isEOF()    ||    headerBuf.equals(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
468	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.equals(buffer.getCharset()))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.equals(buffer.getCharset()))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  ||  headerBuf.equals(buffer.getCharset()))  {	  }    else    if(buffer.isEOF()    ||    headerBuf.equals(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
469	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.equals(buffer.getBytes()))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.equals(buffer.getBytes()))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  ||  headerBuf.equals(buffer.getBytes()))  {	  }    else    if(buffer.isEOF()    ||    headerBuf.equals(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
470	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.equals(buffer.toString()))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.equals(buffer.toString()))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  ||  headerBuf.equals(buffer.toString()))  {	  }    else    if(buffer.isEOF()    ||    headerBuf.equals(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
471	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.equals(buffer.getName()))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.equals(buffer.getName()))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  ||  headerBuf.equals(buffer.getName()))  {	  }    else    if(buffer.isEOF()    ||    headerBuf.equals(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
472	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  >  0  &&  headerBuf.isEOFRecord(buffer)&&  headerBuf.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  >  0  &&  headerBuf.isEOFRecord(buffer)&&  headerBuf.length()  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  >  0  &&  headerBuf.isEOFRecord(buffer)&&  headerBuf.length()  >  0)  {	  }    else    if(headerBuf.isEOFRecord(buffer)&&    headerBuf.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
473	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer.readRecord();  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer.readRecord();  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer.readRecord();  }	  if(headerBuf    ==    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
474	[BUG]  [BUGGY]  while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer.readRecord();  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer.readRecord();  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer.readRecord();  }	  if(headerBuf    ==    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
475	[BUG]  [BUGGY]  while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  hasHitEOF  =  true;  }	  if(headerBuf    ==    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
476	[BUG]  [BUGGY]  while(headerBuf!=  null)  {  int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer.readRecord();  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  while(headerBuf!=  null)  {  int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer.readRecord();  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	while(headerBuf!=  null)  {  int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer.readRecord();  }	  if(headerBuf    ==    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
477	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  hasHitEOF  =  true;  }	  if(headerBuf    ==    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
478	[BUG]  [BUGGY]  }  else  if(headerBuf.length  ==  0  ||  buffer.isEOFRecord())  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  ==  0  ||  buffer.isEOFRecord())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  ==  0  ||  buffer.isEOFRecord())  {	  }    else    if(headerBuf.isEOFRecord()    ||    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
479	[BUG]  [BUGGY]  }  else  if(headerBuf.length!=  0  ||  buffer.isEOFRecord())  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length!=  0  ||  buffer.isEOFRecord())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length!=  0  ||  buffer.isEOFRecord())  {	  }    else    if(headerBuf.isEOFRecord()    ||    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
480	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)/*&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)/*&  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)/*&  hasHitEOF)  {	  }    else    if(buffer.isEOFRecord(headerBuf)/&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
481	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(headerBuf,  true))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(headerBuf,  true))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(headerBuf,  true))  {	  }    else    if(!buffer.isEOFRecord(headerBuf,    true))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
482	[BUG]  [BUGGY]  }  else  if(!buffer.equals(headerBuf,  false))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.equals(headerBuf,  false))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.equals(headerBuf,  false))  {	  }    else    if(!buffer.isEOFRecord(headerBuf,    true))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
483	[BUG]  [BUGGY]  }  else  if(headerBuf.length  ==  0  ||  buffer.isEOFRecord(buffer))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  ==  0  ||  buffer.isEOFRecord(buffer))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  ==  0  ||  buffer.isEOFRecord(buffer))  {	  }    else    if(buffer.length    ==    0    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
484	[BUG]  [BUGGY]  }  else  if(headerBuf  ==  0  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf  ==  0  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf  ==  0  ||  buffer.isEOFRecord(headerBuf))  {	  }    else    if(buffer.length    ==    0    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
485	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  buffer.isEOF()  ||  headerBuf.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  buffer.isEOF()  ||  headerBuf.length  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)&&  buffer.isEOF()  ||  headerBuf.length  ==  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF()    ||    headerBuf.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
486	[BUG]  [BUGGY]  readBuf  =  buffer.readRecord();  if(headerBuf!=  null)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  readBuf  =  buffer.readRecord();  if(headerBuf!=  null)  {  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	readBuf  =  buffer.readRecord();  if(headerBuf!=  null)  {  hasHitEOF  =  true;  }	  if(headerBuf    ==    null)    {    headerBuf    =    buffer.readRecord();    if(headerBuf!=    null)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
487	[BUG]  [BUGGY]  berBuf  =  buffer.readRecord();  if(headerBuf!=  null)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  berBuf  =  buffer.readRecord();  if(headerBuf!=  null)  {  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	berBuf  =  buffer.readRecord();  if(headerBuf!=  null)  {  hasHitEOF  =  true;  }	  if(headerBuf    ==    null)    {    headerBuf    =    buffer.readRecord();    if(headerBuf!=    null)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
488	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0,  headerBuf.length;  i  <  headerBuf.length;  i++)  {  buffer.readRecord();  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0,  headerBuf.length;  i  <  headerBuf.length;  i++)  {  buffer.readRecord();  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0,  headerBuf.length;  i  <  headerBuf.length;  i++)  {  buffer.readRecord();  }	  if(headerBuf    ==    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
489	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  ==  0  &&!buffer.isEOFRecord(headerBuf)&&  headerBuf.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  ==  0  &&!buffer.isEOFRecord(headerBuf)&&  headerBuf.length()  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  ==  0  &&!buffer.isEOFRecord(headerBuf)&&  headerBuf.length()  >  0)  {	  }    else    if(!buffer.isEOFRecord(headerBuf)&&    headerBuf.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
490	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  ||  headerBuf.length  <  0)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  ||  headerBuf.length  <  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  ||  headerBuf.length  <  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF()    ||    headerBuf.length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
491	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  buffer.isEOF()  ||  headerBuf.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  buffer.isEOF()  ||  headerBuf.length  <  =  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)&&  buffer.isEOF()  ||  headerBuf.length  <  =  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF()    ||    headerBuf.length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
492	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)&&  buffer.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)&&  buffer.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)&&  buffer.length  >  0)  {	  }    else    if(headerBuf.isEOFRecord(buffer)&&    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
493	[BUG]  [BUGGY]  }  else  if(buffer.isEOF()  &&  headerBuf.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOF()  &&  headerBuf.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF()  &&  headerBuf.isEOFRecord(headerBuf))  {	  }    else    if(headerBuf.isEOFRecord(buffer)&&    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
494	[BUG]  [BUGGY]  }  else  if(headerBuf.length  >=  0  &&  buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  >=  0  &&  buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  >=  0  &&  buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0)  {	  }    else    if(headerBuf.length    >    0    &&    buffer.isEOFRecord(headerBuf)&&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
495	[BUG]  [BUGGY]  }  else  if(headerBuf.length!=  0  &&  buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length!=  0  &&  buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length!=  0  &&  buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0)  {	  }    else    if(headerBuf.length    >    0    &&    buffer.isEOFRecord(headerBuf)&&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
496	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  int  i  =  0;  i  <  headerBuf.length;  ++i)  {  headerBuf[i]  =  buffer.readRecord();  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  if(headerBuf!=  null)  {  int  i  =  0;  i  <  headerBuf.length;  ++i)  {  headerBuf[i]  =  buffer.readRecord();  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	if(headerBuf!=  null)  {  int  i  =  0;  i  <  headerBuf.length;  ++i)  {  headerBuf[i]  =  buffer.readRecord();  }	  if(headerBuf    ==    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    headerBuf[i]    =    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
497	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.length!=  0)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.length!=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  ||  headerBuf.length!=  0)  {	  }    else    if(buffer.isEOF()    ||    headerBuf.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
498	[BUG]  [BUGGY]  }  else  if(buffer.record(headerBuf)||  buffer.canEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.record(headerBuf)||  buffer.canEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.record(headerBuf)||  buffer.canEOFRecord(headerBuf))  {	  }    else    if(buffer.record(headerBuf)||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
499	[BUG]  [BUGGY]  }  else  if(buffer.record(headerBuf)||  buffer.containsKey(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.record(headerBuf)||  buffer.containsKey(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.record(headerBuf)||  buffer.containsKey(headerBuf))  {	  }    else    if(buffer.record(headerBuf)||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
500	[BUG]  [BUGGY]  }  else  if(headerBuf.length!=  0  ||  buffer.isEOFRecord(buffer))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length!=  0  ||  buffer.isEOFRecord(buffer))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length!=  0  ||  buffer.isEOFRecord(buffer))  {	  }    else    if(buffer.length!=    0    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
501	[BUG]  [BUGGY]  }  else  if(headerBuf.length  ==  headerBuf.length)  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  ==  headerBuf.length)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  ==  headerBuf.length)  {	  }    else    if(!buffer.isEOF(headerBuf)||    headerBuf.equals(headerBuf.length))    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
502	[BUG]  [BUGGY]  }  else  if(headerBuf.equals(buffer)||  headerBuf.equals(headerBuf.length))  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.equals(buffer)||  headerBuf.equals(headerBuf.length))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.equals(buffer)||  headerBuf.equals(headerBuf.length))  {	  }    else    if(!buffer.isEOF(headerBuf)||    headerBuf.equals(headerBuf.length))    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
503	[BUG]  [BUGGY]  }  else  if(headerBuf.equals(buffer.length)||  headerBuf.equals(headerBuf.length))  {  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.equals(buffer.length)||  headerBuf.equals(headerBuf.length))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.equals(buffer.length)||  headerBuf.equals(headerBuf.length))  {	  }    else    if(!buffer.isEOF(headerBuf)||    headerBuf.equals(headerBuf.length))    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
504	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.equals(headerBuf.length))  {  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.equals(headerBuf.length))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  ||  headerBuf.equals(headerBuf.length))  {	  }    else    if(!buffer.isEOF(headerBuf)||    headerBuf.equals(headerBuf.length))    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
505	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord(headerBuf))  {	  }    else    if(headerBuf.isEOFRecord(buffer)||    headerBuf.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
506	[BUG]  [BUGGY]  }  else  if(headerBuf.equals(headerBuf)||  headerBuf.equals(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.equals(headerBuf)||  headerBuf.equals(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.equals(headerBuf)||  headerBuf.equals(headerBuf))  {	  }    else    if(headerBuf.isEOFRecord(buffer)||    headerBuf.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
507	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.isEOF(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.isEOF(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.isEOF(headerBuf))  {	  }    else    if(headerBuf.isEOFRecord(buffer)||    headerBuf.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
508	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.length()  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.length()  ==  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    headerBuf.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
509	[BUG]  [BUGGY]  }  else  if(buffer.length  ==  0  ||  buffer.isEOF(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.length  ==  0  ||  buffer.isEOF(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.length  ==  0  ||  buffer.isEOF(headerBuf)||  buffer.isEOFRecord(headerBuf))  {	  }    else    if(buffer.isEOF(headerBuf)||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
510	[BUG]  [BUGGY]  }  else  if(buffer.hasEOF(headerBuf)&&  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.hasEOF(headerBuf)&&  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.hasEOF(headerBuf)&&  buffer.isEOFRecord(headerBuf))  {	  }    else    if(buffer.isEOF(headerBuf)||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
511	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.isEOF()  ||  headerBuf.isEOF())  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.isEOF()  ||  headerBuf.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.isEOF()  ||  headerBuf.isEOF())  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF()    ||    headerBuf.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
512	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  &&  headerBuf.isEOFRecord(buffer.getLength()))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  &&  headerBuf.isEOFRecord(buffer.getLength()))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  &&  headerBuf.isEOFRecord(buffer.getLength()))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer.getLength()))    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
513	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  >  0  &&  headerBuf.isEOFRecord(buffer.getLength()))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  >  0  &&  headerBuf.isEOFRecord(buffer.getLength()))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  >  0  &&  headerBuf.isEOFRecord(buffer.getLength()))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer.getLength()))    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
514	[BUG]  [BUGGY]  }  else  if(headerBuf.length  ==  0  ||  headerBuf.isEOFRecord(buffer.getLength()))  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  ==  0  ||  headerBuf.isEOFRecord(buffer.getLength()))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  ==  0  ||  headerBuf.isEOFRecord(buffer.getLength()))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer.getLength()))    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
515	[BUG]  [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf,  headerBuf)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf,  headerBuf)||  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOFRecord(headerBuf,  headerBuf)||  hasHitEOF)  {	  }    else    if(!buffer.isEOFRecord(headerBuf,    headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
516	[BUG]  [BUGGY]  }  else  if(headerBuf.length  ==  0  &&!buffer.isEOF(headerBuf)||  buffer.isEOF())  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  ==  0  &&!buffer.isEOF(headerBuf)||  buffer.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  ==  0  &&!buffer.isEOF(headerBuf)||  buffer.isEOF())  {	  }    else    if(!buffer.isEOF(headerBuf)||    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
517	[BUG]  [BUGGY]  }  else  if(!buffer.equals(headerBuf)&&  buffer.isEOF())  {  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.equals(headerBuf)&&  buffer.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.equals(headerBuf)&&  buffer.isEOF())  {	  }    else    if(!buffer.isEOF(headerBuf)||    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
518	[BUG]  [BUGGY]  }  else  if(headerBuf.length  ==  0  &&!buffer.isEOF(headerBuf)||  buffer.isEOF(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  ==  0  &&!buffer.isEOF(headerBuf)||  buffer.isEOF(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  ==  0  &&!buffer.isEOF(headerBuf)||  buffer.isEOF(headerBuf))  {	  }    else    if(!buffer.isEOF(headerBuf)||    buffer.isEOF(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
519	[BUG]  [BUGGY]  }  else  if(headerBuf.length!=  0  &&!buffer.isEOF(headerBuf)||  buffer.isEOF(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length!=  0  &&!buffer.isEOF(headerBuf)||  buffer.isEOF(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length!=  0  &&!buffer.isEOF(headerBuf)||  buffer.isEOF(headerBuf))  {	  }    else    if(!buffer.isEOF(headerBuf)||    buffer.isEOF(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
520	[BUG]  [BUGGY]  }  else  if(!buffer.equals(headerBuf)&&  buffer.isEOF(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.equals(headerBuf)&&  buffer.isEOF(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.equals(headerBuf)&&  buffer.isEOF(headerBuf))  {	  }    else    if(!buffer.isEOF(headerBuf)||    buffer.isEOF(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
521	[BUG]  [BUGGY]  }  else  if(headerBuf.length  >  0  &&  headerBuf.isEOFRecord(buffer)&&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  >  0  &&  headerBuf.isEOFRecord(buffer)&&  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  >  0  &&  headerBuf.isEOFRecord(buffer)&&  headerBuf.length  >  0)  {	  }    else    if(headerBuf.isEOFRecord(buffer)&&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
522	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord(bodyerBuf))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord(bodyerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord(bodyerBuf))  {	  }    else    if(buffer.isEOF()    ||    headerBuf.isEOFRecord(bodyerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
523	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer.readRecord();  System.arraycopy(buffer,  0,  headerBuf,  0,  headerBuf.length);  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer.readRecord();  System.arraycopy(buffer,  0,  headerBuf,  0,  headerBuf.length);  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer.readRecord();  System.arraycopy(buffer,  0,  headerBuf,  0,  headerBuf.length);  }	  if(headerBuf.length    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
524	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF(buffer)&&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF(buffer)&&  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF(buffer)&&  headerBuf.length  >  0)  {	  }    else    if(headerBuf.isEOF(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
525	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF(buffer)||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF(buffer)||  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF(buffer)||  headerBuf.length  >  0)  {	  }    else    if(headerBuf.isEOF(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
526	[BUG]  [BUGGY]  }  else  if(headerBuf.equals(buffer))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.equals(buffer))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.equals(buffer))  {	  }    else    if(headerBuf.isEOF(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
527	[BUG]  [BUGGY]  }  else  if(headerBuf.length  ==  0  ||  headerBuf.isEOFRecord(buffer.getCharset()))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  ==  0  ||  headerBuf.isEOFRecord(buffer.getCharset()))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  ==  0  ||  headerBuf.isEOFRecord(buffer.getCharset()))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer.getCharset()))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
528	[BUG]  [BUGGY]  }  else  if(headerBuf.length  ==  0  &&  headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer.getCharset()))  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  ==  0  &&  headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer.getCharset()))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  ==  0  &&  headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer.getCharset()))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer.getCharset()))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
529	[BUG]  [BUGGY]  }  else  if(headerBuf.length  ==  0  ||  headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer.getCharset()))  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  ==  0  ||  headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer.getCharset()))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  ==  0  ||  headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer.getCharset()))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer.getCharset()))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
530	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  buffer.readRecord()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  buffer.readRecord()  ==  null)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)&&  buffer.readRecord()  ==  null)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
531	[BUG]  [BUGGY]  }  else  if(buffer.equals(headerBuf)&&  headerBuf  ==  null)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.equals(headerBuf)&&  headerBuf  ==  null)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.equals(headerBuf)&&  headerBuf  ==  null)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
532	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  ==  0  &&  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  ==  0  &&  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  ==  0  &&  buffer.isEOFRecord(headerBuf))  {	  }    else    if(headerBuf.length()    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
533	[BUG]  [BUGGY]  }  else  if(headerBuf.length()!=  0  &&  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()!=  0  &&  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()!=  0  &&  buffer.isEOFRecord(headerBuf))  {	  }    else    if(headerBuf.length()    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
534	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)&&  buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
535	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.equals(buffer))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.equals(buffer))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  ||  headerBuf.equals(buffer))  {	  }    else    if(buffer.isEOF()    ||    headerBuf.equals(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
536	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.equals(buffer.getEOF()))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.equals(buffer.getEOF()))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  ||  headerBuf.equals(buffer.getEOF()))  {	  }    else    if(buffer.isEOF()    ||    headerBuf.equals(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
537	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.equals(buffer.getHeaderSize()))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.equals(buffer.getHeaderSize()))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  ||  headerBuf.equals(buffer.getHeaderSize()))  {	  }    else    if(buffer.isEOF()    ||    headerBuf.equals(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
538	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  buffer.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  buffer.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)&&  buffer.length  >  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
539	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  buffer.readEOF())  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  buffer.readEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)&&  buffer.readEOF())  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
540	[BUG]  [BUGGY]  }  else  if(headerBuf.length  ==  0  &&  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  ==  0  &&  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  ==  0  &&  buffer.isEOFRecord(headerBuf))  {	  }    else    if(headerBuf.isEOF()    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
541	[BUG]  [BUGGY]  }  else  if(headerBuf.length  ==  0  &&!buffer.isEOF(headerBuf)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  ==  0  &&!buffer.isEOF(headerBuf)&&  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  ==  0  &&!buffer.isEOF(headerBuf)&&  hasHitEOF)  {	  }    else    if(!buffer.isEOF(headerBuf)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
542	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  isEOF)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  isEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)&&  isEOF)  {	  }    else    if(!buffer.isEOF(headerBuf)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
543	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  &&  buffer.isEOFRecord(buffer))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  &&  buffer.isEOFRecord(buffer))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  &&  buffer.isEOFRecord(buffer))  {	  }    else    if(buffer.isEOF()    &&    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
544	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord()  &&  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord()  &&  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord()  &&  buffer.isEOFRecord(headerBuf))  {	  }    else    if(buffer.isEOF()    &&    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
545	[BUG]  [BUGGY]  }  else  if(buffer.length  ==  0  &&  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.length  ==  0  &&  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.length  ==  0  &&  buffer.isEOFRecord(headerBuf))  {	  }    else    if(buffer.isEOF()    &&    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
546	[BUG]  [BUGGY]  }  else  if(headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  >  0)  {	  }    else    if(!buffer.isEOFRecord(headerBuf)||    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
547	[BUG]  [BUGGY]  while(headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  while(headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  false;  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	while(headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  false;  }	  if(headerBuf.length    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
548	[BUG]  [BUGGY]  }  else  if(headerBuf.length  >  0  &&  headerBuf.isEOFRecord(buffer,  0,  headerBuf.length))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  >  0  &&  headerBuf.isEOFRecord(buffer,  0,  headerBuf.length))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  >  0  &&  headerBuf.isEOFRecord(buffer,  0,  headerBuf.length))  {	  }    else    if(headerBuf.isEOFRecord(buffer,    0,    headerBuf.length))    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
549	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer,  0,  headerBuf.length)&&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer,  0,  headerBuf.length)&&  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer,  0,  headerBuf.length)&&  headerBuf.length  >  0)  {	  }    else    if(headerBuf.isEOFRecord(buffer,    0,    headerBuf.length))    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
550	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer,  0,  headerBuf.length)||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer,  0,  headerBuf.length)||  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer,  0,  headerBuf.length)||  headerBuf.length  >  0)  {	  }    else    if(headerBuf.isEOFRecord(buffer,    0,    headerBuf.length))    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
551	[BUG]  [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf,  true)&&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf,  true)&&  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOFRecord(headerBuf,  true)&&  headerBuf.length  >  0)  {	  }    else    if(!buffer.isEOFRecord(headerBuf,    false))    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
552	[BUG]  [BUGGY]  }  else  if(buffer.length  ==  0  ||  buffer.isEOF())  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.length  ==  0  ||  buffer.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.length  ==  0  ||  buffer.isEOF())  {	  }    else    if(buffer.isEOF()    ||    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
553	[BUG]  [BUGGY]  }  else  if(buffer.length!=  0  ||  buffer.isEOF())  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.length!=  0  ||  buffer.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.length!=  0  ||  buffer.isEOF())  {	  }    else    if(buffer.isEOF()    ||    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
554	[BUG]  [BUGGY]  }  else  if(buffer.isEOF()  &&  buffer.isEOF())  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOF()  &&  buffer.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF()  &&  buffer.isEOF())  {	  }    else    if(buffer.isEOF()    ||    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
555	[BUG]  [BUGGY]  }  else  if(buffer.length  ==  0  ||  buffer.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.length  ==  0  ||  buffer.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.length  ==  0  ||  buffer.length  >  0)  {	  }    else    if(buffer.isEOF()    ||    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
556	[BUG]  [BUGGY]  }  else  if(headerBuf.length  ==  0  ||  headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer.length))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  ==  0  ||  headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer.length))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  ==  0  ||  headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer.length))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer.length))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
557	[BUG]  [BUGGY]  }  else  if(headerBuf.length  <  =  0  ||  headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer.length))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  <  =  0  ||  headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer.length))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  <  =  0  ||  headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer.length))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer.length))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
558	[BUG]  [BUGGY]  }  else  if(headerBuf.length  >  0  &&  headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer.length))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  >  0  &&  headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer.length))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  >  0  &&  headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer.length))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer.length))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
559	[BUG]  [BUGGY]  }  else  if(headerBuf.length  <  =  0  ||  headerBuf.isEOFRecord(buffer.length))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  <  =  0  ||  headerBuf.isEOFRecord(buffer.length))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  <  =  0  ||  headerBuf.isEOFRecord(buffer.length))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer.length))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
560	[BUG]  [BUGGY]  }  else  if(headerBuf.length  ==  0  ||  headerBuf.isEOFRecord(buffer.length))  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  ==  0  ||  headerBuf.isEOFRecord(buffer.length))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  ==  0  ||  headerBuf.isEOFRecord(buffer.length))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer.length))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
561	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  buffer.isEOF()  ||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  buffer.isEOF()  ||  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)&&  buffer.isEOF()  ||  headerBuf.length  >  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF()    ||    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
562	[BUG]  [BUGGY]  readBuf  =  buffer.readRecord();  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  readBuf  =  buffer.readRecord();  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	readBuf  =  buffer.readRecord();	  if(headerBuf    ==    null)    {    if(headerBuf!=    null)    {    headerBuf    =    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
563	[BUG]  [BUGGY]  }  else  if(buffer.hashCode()  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.hashCode()  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.hashCode()  ||  buffer.isEOFRecord(headerBuf))  {	  }    else    if(buffer.hasEOF()    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
564	[BUG]  [BUGGY]  }  else  if(headerBuf.length  >  0  &&  headerBuf.isEOF()  ||  headerBuf.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  >  0  &&  headerBuf.isEOF()  ||  headerBuf.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  >  0  &&  headerBuf.isEOF()  ||  headerBuf.isEOFRecord(headerBuf))  {	  }    else    if(bodyBuf.isEOF()    ||    headerBuf.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
565	[BUG]  [BUGGY]  }  else  if(headerBuf.length  ==  0  ||  headerBuf.isEOFRecord(bodyBuf))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  ==  0  ||  headerBuf.isEOFRecord(bodyBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  ==  0  ||  headerBuf.isEOFRecord(bodyBuf))  {	  }    else    if(bodyBuf.isEOF()    ||    headerBuf.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
566	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer,  false)&&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer,  false)&&  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer,  false)&&  headerBuf.length  >  0)  {	  }    else    if(headerBuf.isEOFRecord(buffer,    false))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
567	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer,  false)&&  headerBuf.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer,  false)&&  headerBuf.length()  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer,  false)&&  headerBuf.length()  ==  0)  {	  }    else    if(headerBuf.isEOFRecord(buffer,    false))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
568	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  ==  0)  {	  }    else    if(!buffer.isEOF(headerBuf)||    headerBuf.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
569	[BUG]  [BUGGY]  }  else  if(headerBuf!=  null  &&!buffer.isEOF(headerBuf)||  headerBuf.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf!=  null  &&!buffer.isEOF(headerBuf)||  headerBuf.length()  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf!=  null  &&!buffer.isEOF(headerBuf)||  headerBuf.length()  ==  0)  {	  }    else    if(!buffer.isEOF(headerBuf)||    headerBuf.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
570	[BUG]  [BUGGY]  }  else  if(!buffer.equals(headerBuf)&&  headerBuf.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.equals(headerBuf)&&  headerBuf.length()  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.equals(headerBuf)&&  headerBuf.length()  ==  0)  {	  }    else    if(!buffer.isEOF(headerBuf)||    headerBuf.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
571	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  headerBuf  =  buffer.readRecord();  if(headerBuf!=  null)  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  if(headerBuf!=  null)  {  headerBuf  =  buffer.readRecord();  if(headerBuf!=  null)  {  hasHitEOF  =  false;  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	if(headerBuf!=  null)  {  headerBuf  =  buffer.readRecord();  if(headerBuf!=  null)  {  hasHitEOF  =  false;  }	  if(headerBuf    ==    null)    {    headerBuf    =    buffer.readRecord();    if(headerBuf    ==    null)    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
572	[BUG]  [BUGGY]  HeaderBuffer  headerBuf  =  buffer.readRecord();  if(headerBuf!=  null)  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  HeaderBuffer  headerBuf  =  buffer.readRecord();  if(headerBuf!=  null)  {  hasHitEOF  =  false;  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	HeaderBuffer  headerBuf  =  buffer.readRecord();  if(headerBuf!=  null)  {  hasHitEOF  =  false;  }	  if(headerBuf    ==    null)    {    headerBuf    =    buffer.readRecord();    if(headerBuf    ==    null)    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
573	[BUG]  [BUGGY]  }  else  if(headerBuf.length  ==  0  &&!headerBuf.isEOFRecord(buffer))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  ==  0  &&!headerBuf.isEOFRecord(buffer))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  ==  0  &&!headerBuf.isEOFRecord(buffer))  {	  }    else    if(!headerBuf.isEOFRecord(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
574	[BUG]  [BUGGY]  }  else  if(!headerBuf.isEOFRecord(buffer)&&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!headerBuf.isEOFRecord(buffer)&&  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!headerBuf.isEOFRecord(buffer)&&  headerBuf.length  >  0)  {	  }    else    if(!headerBuf.isEOFRecord(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
575	[BUG]  [BUGGY]  }  else  if(!headerBuf.isEOFRecord(buffer,  hasHitEOF))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!headerBuf.isEOFRecord(buffer,  hasHitEOF))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!headerBuf.isEOFRecord(buffer,  hasHitEOF))  {	  }    else    if(!headerBuf.isEOFRecord(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
576	[BUG]  [BUGGY]  }  else  if(buffer.isEOF(headerBuf)&&  buffer.isEOF(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOF(headerBuf)&&  buffer.isEOF(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF(headerBuf)&&  buffer.isEOF(headerBuf))  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
577	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  buffer.readRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  buffer.readRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  buffer.readRecord(headerBuf))  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
578	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer.record();  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer.record();  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer.record();  }	  if(headerBuf    ==    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
579	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer.seekRecord();  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer.seekRecord();  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	if(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer.seekRecord();  }	  if(headerBuf    ==    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
580	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  ==  0  ||  buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  ||  headerBuf.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  ==  0  ||  buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  ||  headerBuf.length()  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  ==  0  ||  buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  ||  headerBuf.length()  ==  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF()    ||    headerBuf.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
581	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.isEOF()  ||  headerBuf.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.isEOF()  ||  headerBuf.length()  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.isEOF()  ||  headerBuf.length()  ==  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF()    ||    headerBuf.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
582	[BUG]  [BUGGY]  }  else  if(headerBuf.equals(headerBuf)||  headerBuf.isEOFRecord())  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.equals(headerBuf)||  headerBuf.isEOFRecord())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.equals(headerBuf)||  headerBuf.isEOFRecord())  {	  }    else    if(headerBuf.isEOFRecord(buffer)||    headerBuf.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
583	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  ==  0  &&!buffer.isEOF(headerBuf)&&  headerBuf.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  ==  0  &&!buffer.isEOF(headerBuf)&&  headerBuf.length()  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  ==  0  &&!buffer.isEOF(headerBuf)&&  headerBuf.length()  >  0)  {	  }    else    if(!buffer.isEOF(headerBuf)&&    headerBuf.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
584	[BUG]  [BUGGY]  }  else  if(headerBuf.length  ==  0  ||  buffer.isEOF()  ||  headerBuf.isEOFRecord(buffer))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  ==  0  ||  buffer.isEOF()  ||  headerBuf.isEOFRecord(buffer))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  ==  0  ||  buffer.isEOF()  ||  headerBuf.isEOFRecord(buffer))  {	  }    else    if(buffer.isEOF()    ||    headerBuf.isEOFRecord(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
585	[BUG]  [BUGGY]  }  else  if(buffer.length  ==  0  ||  buffer.isEOFRecord(headerBuf,  false))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.length  ==  0  ||  buffer.isEOFRecord(headerBuf,  false))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.length  ==  0  ||  buffer.isEOFRecord(headerBuf,  false))  {	  }    else    if(buffer.isEOF()    ||    buffer.isEOFRecord(headerBuf,    false))    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
586	[BUG]  [BUGGY]  }  else  if(buffer.length!=  0  ||  buffer.isEOFRecord(headerBuf,  false))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.length!=  0  ||  buffer.isEOFRecord(headerBuf,  false))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.length!=  0  ||  buffer.isEOFRecord(headerBuf,  false))  {	  }    else    if(buffer.isEOF()    ||    buffer.isEOFRecord(headerBuf,    false))    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
587	[BUG]  [BUGGY]  }  else  if(headerBuf.length  >  0  &&  headerBuf.isEOFRecord(buffer,  headerBuf.length))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  >  0  &&  headerBuf.isEOFRecord(buffer,  headerBuf.length))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  >  0  &&  headerBuf.isEOFRecord(buffer,  headerBuf.length))  {	  }    else    if(headerBuf.isEOFRecord(buffer,    headerBuf.length))    {    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
588	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer,  headerBuf.length)&&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer,  headerBuf.length)&&  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer,  headerBuf.length)&&  headerBuf.length  >  0)  {	  }    else    if(headerBuf.isEOFRecord(buffer,    headerBuf.length))    {    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
589	[BUG]  [BUGGY]  }  else  if(buffer.isEOF(headerBuf)&&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOF(headerBuf)&&  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF(headerBuf)&&  headerBuf.length  >  0)  {	  }    else    if(buffer.isEOF(headerBuf)&&    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
590	[BUG]  [BUGGY]  }  else  if(headerBuf.length  ==  0  &&!buffer.isEOF(headerBuf)&&  isEOF())  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  ==  0  &&!buffer.isEOF(headerBuf)&&  isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  ==  0  &&!buffer.isEOF(headerBuf)&&  isEOF())  {	  }    else    if(!buffer.isEOF(headerBuf)&&    isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
591	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF()  &&  isEOF())  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF()  &&  isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF()  &&  isEOF())  {	  }    else    if(!buffer.isEOF(headerBuf)&&    isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
592	[BUG]  [BUGGY]  }  else  if(headerBuf.length  >  0  ||  buffer.isEOF())  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  >  0  ||  buffer.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  >  0  ||  buffer.isEOF())  {	  }    else    if(buffer.isEOF()    ||    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
593	[BUG]  [BUGGY]  }  else  if(headerBuf.length  ==  0  &&  headerBuf.length  >  0  &&!buffer.isEOF(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  ==  0  &&  headerBuf.length  >  0  &&!buffer.isEOF(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  ==  0  &&  headerBuf.length  >  0  &&!buffer.isEOF(headerBuf))  {	  }    else    if(headerBuf.length    ==    0    &&!buffer.isEOF(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
594	[BUG]  [BUGGY]  }  else  if(headerBuf.length  ==  0  &&  isEOF(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  ==  0  &&  isEOF(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  ==  0  &&  isEOF(headerBuf))  {	  }    else    if(headerBuf.length    ==    0    &&!buffer.isEOF(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
595	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF()  ||  headerBuf.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF()  ||  headerBuf.length  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF()  ||  headerBuf.length  ==  0)  {	  }    else    if(!buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
596	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF()  ||  headerBuf.length!=  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF()  ||  headerBuf.length!=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF()  ||  headerBuf.length!=  0)  {	  }    else    if(!buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
597	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  &&  buffer.isEOF())  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  &&  buffer.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  &&  buffer.isEOF())  {	  }    else    if(buffer.isEOF()    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
598	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length  <  0)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length  <  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length  <  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf.length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
599	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  &&  buf.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  &&  buf.length()  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  &&  buf.length()  >  0)  {	  }    else    if(buffer.isEOF()    &&    headerBuf.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
600	[BUG]  [BUGGY]  }  else  if(headerBuf.length  ==  0  ||  headerBuf.isEOFRecord(buffer)||  headerBuf.isEOFRecord(buffer))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  ==  0  ||  headerBuf.isEOFRecord(buffer)||  headerBuf.isEOFRecord(buffer))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  ==  0  ||  headerBuf.isEOFRecord(buffer)||  headerBuf.isEOFRecord(buffer))  {	  }    else    if(headerBuf.isEOFRecord(buffer)||    headerBuf.isEOFRecord(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
601	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.isEOF(buffer))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.isEOF(buffer))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.isEOF(buffer))  {	  }    else    if(headerBuf.isEOFRecord(buffer)||    headerBuf.isEOFRecord(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
602	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  ==  0  ||  buffer.isEOF())  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  ==  0  ||  buffer.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  ==  0  ||  buffer.isEOF())  {	  }    else    if(buffer.isEOF()    ||    headerBuf.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
603	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  {  0  ||  buffer.isEOF())  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  {  0  ||  buffer.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  {  0  ||  buffer.isEOF())  {	  }    else    if(buffer.isEOF()    ||    headerBuf.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
604	[BUG]  [BUGGY]  while(headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  while(headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	while(headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }	  if(headerBuf.length    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
605	[BUG]  [BUGGY]  if(headerBuf.length  >  0)  {  for(int  i  =  headerBuf.length  -  1;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  if(headerBuf.length  >  0)  {  for(int  i  =  headerBuf.length  -  1;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	if(headerBuf.length  >  0)  {  for(int  i  =  headerBuf.length  -  1;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }	  if(headerBuf.length    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
606	[BUG]  [BUGGY]  }  else  if(headerBuf.length  ==  0  ||  buffer.isEOF())  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  ==  0  ||  buffer.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  ==  0  ||  buffer.isEOF())  {	  }    else    if(buffer.isEOF()    ||    headerBuf.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
607	[BUG]  [BUGGY]  }  else  if(headerBuf.length  ==  0  &&!buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  ==  0  &&!buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  ==  0  &&!buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {	  }    else    if(!buffer.isEOFRecord(headerBuf)||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
608	[BUG]  [BUGGY]  }  else  if(headerBuf.length!=  0  &&!buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length!=  0  &&!buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length!=  0  &&!buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {	  }    else    if(!buffer.isEOFRecord(headerBuf)||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
609	[BUG]  [BUGGY]  }  else  if(buffer.isEOF(headerBuf)||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOF(headerBuf)||  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF(headerBuf)||  headerBuf.length  >  0)  {	  }    else    if(buffer.isEOF(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
610	[BUG]  [BUGGY]  }  else  if(headerBuf.length  ==  0  ||  headerBuf.isEOFRecord()  ||  headerBuf.isEOF())  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  ==  0  ||  headerBuf.isEOFRecord()  ||  headerBuf.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  ==  0  ||  headerBuf.isEOFRecord()  ||  headerBuf.isEOF())  {	  }    else    if(headerBuf.isEOFRecord()    ||    headerBuf.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
611	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord())  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord())  {	  }    else    if(headerBuf.isEOFRecord()    ||    headerBuf.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
612	[BUG]  [BUGGY]  }  else  if(headerBuf.length  ==  0  ||  headerBuf.isEOFRecord())  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  ==  0  ||  headerBuf.isEOFRecord())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  ==  0  ||  headerBuf.isEOFRecord())  {	  }    else    if(headerBuf.isEOFRecord()    ||    headerBuf.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
613	[BUG]  [BUGGY]  }  else  if(headerBuf.length!=  0  ||  headerBuf.isEOFRecord())  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length!=  0  ||  headerBuf.isEOFRecord())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length!=  0  ||  headerBuf.isEOFRecord())  {	  }    else    if(headerBuf.isEOFRecord()    ||    headerBuf.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
614	[BUG]  [BUGGY]  }  else  if(buffer.shouldRecord(headerBuf)||  buffer.readEOF(headerBuf))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.shouldRecord(headerBuf)||  buffer.readEOF(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.shouldRecord(headerBuf)||  buffer.readEOF(headerBuf))  {	  }    else    if(buffer.shouldRecord(headerBuf)||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
615	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  buffer.isEOF()  ||  headerBuf.length()!=  0)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  buffer.isEOF()  ||  headerBuf.length()!=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)&&  buffer.isEOF()  ||  headerBuf.length()!=  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF()    ||    headerBuf.length()!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
616	[BUG]  [BUGGY]  }  else  if(headerBuf.equals(buffer)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.equals(buffer)&&  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.equals(buffer)&&  hasHitEOF)  {	  }    else    if(headerBuf.isEOFRecord(buffer)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
617	[BUG]  [BUGGY]  }  else  if(headerBuf.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  ==  0)  {	  }    else    if(headerBuf.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
618	[BUG]  [BUGGY]  }  else  if(headerBuf.length!=  0)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length!=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length!=  0)  {	  }    else    if(headerBuf.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
619	[BUG]  [BUGGY]  }  else  if(headerBuf.length  ==  0  ||  headerBuf.isEOF())  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  ==  0  ||  headerBuf.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  ==  0  ||  headerBuf.isEOF())  {	  }    else    if(headerBuf.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
620	[BUG]  [BUGGY]  }  else  if(headerBuf.length  ==  0  ||  headerBuf.isEOFRecord()  ||  headerBuf.isEOFRecord(buffer))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  ==  0  ||  headerBuf.isEOFRecord()  ||  headerBuf.isEOFRecord(buffer))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  ==  0  ||  headerBuf.isEOFRecord()  ||  headerBuf.isEOFRecord(buffer))  {	  }    else    if(headerBuf.isEOFRecord()    ||    headerBuf.isEOFRecord(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
621	[BUG]  [BUGGY]  }  else  if(headerBuf.length!=  0  ||  headerBuf.isEOFRecord()  ||  headerBuf.isEOFRecord(buffer))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length!=  0  ||  headerBuf.isEOFRecord()  ||  headerBuf.isEOFRecord(buffer))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length!=  0  ||  headerBuf.isEOFRecord()  ||  headerBuf.isEOFRecord(buffer))  {	  }    else    if(headerBuf.isEOFRecord()    ||    headerBuf.isEOFRecord(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
622	[BUG]  [BUGGY]  }  else  if(headerBuf.length  ==  0  ||  headerBuf.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  ==  0  ||  headerBuf.length  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  ==  0  ||  headerBuf.length  ==  0)  {	  }    else    if(headerBuf.isEOFRecord()    ||    headerBuf.isEOFRecord(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
623	[BUG]  [BUGGY]  }  else  if(headerBuf.equals(buffer)&&  buffer.equals(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.equals(buffer)&&  buffer.equals(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.equals(buffer)&&  buffer.equals(headerBuf))  {	  }    else    if(buffer.equals(headerBuf)||    buffer.equals(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
624	[BUG]  [BUGGY]  }  else  if(buffer.equals(headerBuf)&&  headerBuf.equals(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.equals(headerBuf)&&  headerBuf.equals(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.equals(headerBuf)&&  headerBuf.equals(headerBuf))  {	  }    else    if(buffer.equals(headerBuf)||    buffer.equals(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
625	[BUG]  [BUGGY]  }  else  if(headerBuf.length  <  0  ||!buffer.isEOF(headerBuf)&&  headerBuf.length  <  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  <  0  ||!buffer.isEOF(headerBuf)&&  headerBuf.length  <  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  <  0  ||!buffer.isEOF(headerBuf)&&  headerBuf.length  <  0)  {	  }    else    if(!buffer.isEOF(headerBuf)||    headerBuf.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
626	[BUG]  [BUGGY]  while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  false;  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	while(headerBuf!=  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  false;  }	  if(headerBuf    ==    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
627	[BUG]  [BUGGY]  while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  false;  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	while(headerBuf!=  null  &&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  false;  }	  if(headerBuf    ==    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
628	[BUG]  [BUGGY]  }  else  if(headerBuf.length  ==  0  ||  headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  ==  0  ||  headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  ==  0  ||  headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
629	[BUG]  [BUGGY]  }  else  if(headerBuf.length  ==  0  ||  headerBuf.isEOFRecord(buffer))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  ==  0  ||  headerBuf.isEOFRecord(buffer))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  ==  0  ||  headerBuf.isEOFRecord(buffer))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
630	[BUG]  [BUGGY]  }  else  if(headerBuf.length  ==  0  &&  headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  ==  0  &&  headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  ==  0  &&  headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
631	[BUG]  [BUGGY]  }  else  if(headerBuf.length!=  0  ||  headerBuf.isEOFRecord(buffer))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length!=  0  ||  headerBuf.isEOFRecord(buffer))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length!=  0  ||  headerBuf.isEOFRecord(buffer))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
632	[BUG]  [BUGGY]  }  else  if(headerBuf.length  ==  0  ||  headerBuf.isEOFRecord(buffer.getBytes()))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  ==  0  ||  headerBuf.isEOFRecord(buffer.getBytes()))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  ==  0  ||  headerBuf.isEOFRecord(buffer.getBytes()))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer.getBytes()))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
633	[BUG]  [BUGGY]  }  else  if(headerBuf.length  ==  0  ||  headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer.getBytes()))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  ==  0  ||  headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer.getBytes()))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  ==  0  ||  headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer.getBytes()))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer.getBytes()))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
634	[BUG]  [BUGGY]  }  else  if(headerBuf.length  ==  0  &&  headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer.getBytes()))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  ==  0  &&  headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer.getBytes()))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  ==  0  &&  headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer.getBytes()))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer.getBytes()))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
635	[BUG]  [BUGGY]  }  else  if(headerBuf.length!=  0  ||  headerBuf.isEOFRecord(buffer.getBytes()))  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length!=  0  ||  headerBuf.isEOFRecord(buffer.getBytes()))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length!=  0  ||  headerBuf.isEOFRecord(buffer.getBytes()))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer.getBytes()))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
636	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  buffer.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  buffer.length()  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)&&  buffer.length()  ==  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
637	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(headerBuf);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(headerBuf);  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	byte[]  headerBuf  =  buffer.readRecord(headerBuf);	  byte[]    headerBuf    =    buffer.readRecord();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
638	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readHeaderBuffer();  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  byte[]  headerBuf  =  buffer.readHeaderBuffer();  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	byte[]  headerBuf  =  buffer.readHeaderBuffer();	  byte[]    headerBuf    =    buffer.readRecord();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
639	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  0,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  0,  headerBuf.length);  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  0,  headerBuf.length);	  byte[]    headerBuf    =    buffer.readRecord();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
640	[BUG]  [BUGGY]  }  else  if(buffer.hasEOF(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.hasEOF(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.hasEOF(headerBuf)||  buffer.isEOFRecord(headerBuf))  {	  }    else    if(buffer.isEOF(headerBuf)||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
641	[BUG]  [BUGGY]  }  else  if(headerBuf.length  <  0  ||  buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  <  0  ||  buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  <  0  ||  buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0)  {	  }    else    if(headerBuf.length    >    0    &&    buffer.isEOFRecord(headerBuf)&&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
642	[BUG]  [BUGGY]  }  else  if(bodyBuf.isEOF()  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(bodyBuf.isEOF()  &&  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(bodyBuf.isEOF()  &&  headerBuf.length  >  0)  {	  }    else    if(buffer.isEOF()    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
643	[BUG]  [BUGGY]  }  else  if(bodyerBuf.isEOF()  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(bodyerBuf.isEOF()  &&  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(bodyerBuf.isEOF()  &&  headerBuf.length  >  0)  {	  }    else    if(buffer.isEOF()    &&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
644	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  headerBuf.length  >  0  ||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  headerBuf.length  >  0  ||  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)&&  headerBuf.length  >  0  ||  headerBuf.length  >  0)  {	  }    else    if(!buffer.isEOF(headerBuf)&&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
645	[BUG]  [BUGGY]  }  else  if(headerBuf.length  >  0  ||  headerBuf.isEOFRecord()  ||  headerBuf.isEOF())  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  >  0  ||  headerBuf.isEOFRecord()  ||  headerBuf.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  >  0  ||  headerBuf.isEOFRecord()  ||  headerBuf.isEOF())  {	  }    else    if(headerBuf.isEOFRecord()    ||    headerBuf.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
646	[BUG]  [BUGGY]  }  else  if(headerBuf.length  <  =  headerBuf.length  ||  headerBuf.isEOFRecord())  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  <  =  headerBuf.length  ||  headerBuf.isEOFRecord())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  <  =  headerBuf.length  ||  headerBuf.isEOFRecord())  {	  }    else    if(headerBuf.isEOFRecord()    ||    headerBuf.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
647	[BUG]  [BUGGY]  }  else  if(headerBuf.length  <  =  headerBuf.length  ||  headerBuf.isEOF())  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  <  =  headerBuf.length  ||  headerBuf.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  <  =  headerBuf.length  ||  headerBuf.isEOF())  {	  }    else    if(headerBuf.isEOFRecord()    ||    headerBuf.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
648	[BUG]  [BUGGY]  }  else  if(buffer.isEOF(headerBuf)&&  buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOF(headerBuf)&&  buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF(headerBuf)&&  buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {	  }    else    if(buffer.isEOF(headerBuf)&&    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
649	[BUG]  [BUGGY]  }  else  if(headerBuf.equals(buffer)||  headerBuf.isEOF())  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.equals(buffer)||  headerBuf.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.equals(buffer)||  headerBuf.isEOF())  {	  }    else    if(headerBuf.isEOFRecord(buffer)||    headerBuf.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
650	[BUG]  [BUGGY]  }  else  if(headerBuf.equals(bodyerBuf)||  headerBuf.isEOF())  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.equals(bodyerBuf)||  headerBuf.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.equals(bodyerBuf)||  headerBuf.isEOF())  {	  }    else    if(headerBuf.isEOFRecord(buffer)||    headerBuf.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
651	[BUG]  [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0  ||  headerBuf.charAt(headerBuf.length  -  1)!=  '/')  {	  }    else    if(!buffer.isEOFRecord(headerBuf)&&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
652	[BUG]  [BUGGY]  }  else  if(headerBuf.length  <  =  headerBuf.length  ||  headerBuf.isEOFRecord(buffer.getBytes()))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  <  =  headerBuf.length  ||  headerBuf.isEOFRecord(buffer.getBytes()))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  <  =  headerBuf.length  ||  headerBuf.isEOFRecord(buffer.getBytes()))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer.getBytes()))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
653	[BUG]  [BUGGY]  }  else  if(headerBuf.length  >  0  ||  headerBuf.isEOFRecord(buffer.getBytes()))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  >  0  ||  headerBuf.isEOFRecord(buffer.getBytes()))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  >  0  ||  headerBuf.isEOFRecord(buffer.getBytes()))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer.getBytes()))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
654	[BUG]  [BUGGY]  }  else  if(headerBuf.length  ==  2  &&!buffer.isEOF(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  ==  2  &&!buffer.isEOF(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  ==  2  &&!buffer.isEOF(headerBuf))  {	  }    else    if(headerBuf.length    ==    0    &&!buffer.isEOF(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
655	[BUG]  [BUGGY]  }  else  if(headerBuf.length  ==  0  &&  hasHitEOF  &&  buffer.isEOF(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  ==  0  &&  hasHitEOF  &&  buffer.isEOF(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  ==  0  &&  hasHitEOF  &&  buffer.isEOF(headerBuf))  {	  }    else    if(headerBuf.length    ==    0    &&!buffer.isEOF(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
656	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  >  0  &&  headerBuf.isEOFRecord(buffer.length))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  >  0  &&  headerBuf.isEOFRecord(buffer.length))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  >  0  &&  headerBuf.isEOFRecord(buffer.length))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer.length))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
657	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  <  =  headerBuf.length  ||  headerBuf.isEOFRecord(buffer.length))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  <  =  headerBuf.length  ||  headerBuf.isEOFRecord(buffer.length))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  <  =  headerBuf.length  ||  headerBuf.isEOFRecord(buffer.length))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer.length))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
658	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  ==  headerBuf.length)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  ==  headerBuf.length)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  ==  headerBuf.length)  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer.length))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
659	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.equals(buffer.length))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.equals(buffer.length))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  ||  headerBuf.equals(buffer.length))  {	  }    else    if(buffer.isEOF()    ||    headerBuf.equals(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
660	[BUG]  [BUGGY]  }  else  if(buffer.equals(bodyBuf)||  buffer.equals(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.equals(bodyBuf)||  buffer.equals(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.equals(bodyBuf)||  buffer.equals(headerBuf))  {	  }    else    if(buffer.equals(headerBuf)||    buffer.equals(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
661	[BUG]  [BUGGY]  }  else  if(buffer.equals(bodyerBuf)||  buffer.equals(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.equals(bodyerBuf)||  buffer.equals(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.equals(bodyerBuf)||  buffer.equals(headerBuf))  {	  }    else    if(buffer.equals(headerBuf)||    buffer.equals(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
662	[BUG]  [BUGGY]  }  else  if(!hasHitEOF  &&!buffer.isEOF())  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!hasHitEOF  &&!buffer.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!hasHitEOF  &&!buffer.isEOF())  {	  }    else    if(!buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
663	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF()  ||  headerBuf.isEOF())  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF()  ||  headerBuf.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF()  ||  headerBuf.isEOF())  {	  }    else    if(!buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
664	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  1,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  System.arraycopy(buffer,  0,  buf,  1,  headerBuf.length);  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	System.arraycopy(buffer,  0,  buf,  1,  headerBuf.length);	  System.arraycopy(buffer,    0,    buf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
665	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  0,  headerBuf.length  -  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  System.arraycopy(buffer,  0,  buf,  0,  headerBuf.length  -  headerBuf.length);  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	System.arraycopy(buffer,  0,  buf,  0,  headerBuf.length  -  headerBuf.length);	  System.arraycopy(buffer,    0,    buf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
666	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord()  ||  headerBuf.isEOFRecord(bodyBuf))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord()  ||  headerBuf.isEOFRecord(bodyBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord()  ||  headerBuf.isEOFRecord(bodyBuf))  {	  }    else    if(bodyBuf.isEOF()    ||    headerBuf.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
667	[BUG]  [BUGGY]  }  else  if(headerBuf.length  >  0  &&  headerBuf.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  >  0  &&  headerBuf.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  >  0  &&  headerBuf.isEOFRecord(headerBuf))  {	  }    else    if(bodyBuf.isEOF()    ||    headerBuf.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
668	[BUG]  [BUGGY]  }  else  if(headerBuf.length  >  0  &&  headerBuf.isEOFRecord(bodyBuf))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  >  0  &&  headerBuf.isEOFRecord(bodyBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  >  0  &&  headerBuf.isEOFRecord(bodyBuf))  {	  }    else    if(bodyBuf.isEOF()    ||    headerBuf.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
669	[BUG]  [BUGGY]  }  else  if(headerBuf.length  >  0  ||  buffer.isEOFRecord(buffer))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  >  0  ||  buffer.isEOFRecord(buffer))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  >  0  ||  buffer.isEOFRecord(buffer))  {	  }    else    if(buffer.length    >    0    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
670	[BUG]  [BUGGY]  }  else  if(buffer.length  <  =  0  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.length  <  =  0  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.length  <  =  0  ||  buffer.isEOFRecord(headerBuf))  {	  }    else    if(buffer.length    >    0    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
671	[BUG]  [BUGGY]  HashTraversal.traverse(compiler,  headerBuf,  buffer);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  HashTraversal.traverse(compiler,  headerBuf,  buffer);  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	HashTraversal.traverse(compiler,  headerBuf,  buffer);	  if(headerBuf    ==    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
672	[BUG]  [BUGGY]  }  else  if(bodyerBuf.isEOFRecord(buffer)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(bodyerBuf.isEOFRecord(buffer)&&  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(bodyerBuf.isEOFRecord(buffer)&&  hasHitEOF)  {	  }    else    if(headerBuf.isEOFRecord(buffer)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
673	[BUG]  [BUGGY]  }  else  if(buffer.equals(headerBuf)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.equals(headerBuf)&&  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.equals(headerBuf)&&  hasHitEOF)  {	  }    else    if(headerBuf.isEOFRecord(buffer)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
674	[BUG]  [BUGGY]  }  else  if(buffer.isEOF()  ||  headerBuf.length!=  0)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOF()  ||  headerBuf.length!=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF()  ||  headerBuf.length!=  0)  {	  }    else    if(buffer.isEOF()    ||    headerBuf.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
675	[BUG]  [BUGGY]  }  else  if(bodyBuf.isEOF()  ||  headerBuf.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(bodyBuf.isEOF()  ||  headerBuf.length  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(bodyBuf.isEOF()  ||  headerBuf.length  ==  0)  {	  }    else    if(buffer.isEOF()    ||    headerBuf.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
676	[BUG]  [BUGGY]  hasHitEOF?  null  :  headerBuf;  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  hasHitEOF?  null  :  headerBuf;  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	hasHitEOF?  null  :  headerBuf;	  if(headerBuf    ==    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
677	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  hasHitEOF  =  true;  }	  if(headerBuf    ==    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
678	[BUG]  [BUGGY]  }  else  if(buffer.isEOF()  ||  headerBuf.length  >=  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOF()  ||  headerBuf.length  >=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF()  ||  headerBuf.length  >=  0)  {	  }    else    if(buffer.isEOF()    ||    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
679	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOFRecord(buffer))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOFRecord(buffer))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOFRecord(buffer))  {	  }    else    if(headerBuf.isEOFRecord(buffer)||    headerBuf.isEOFRecord(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
680	[BUG]  [BUGGY]  }  else  if(headerBuf.length  >  0  &&  headerBuf.isEOFRecord()  ||  headerBuf.isEOFRecord(buffer))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  >  0  &&  headerBuf.isEOFRecord()  ||  headerBuf.isEOFRecord(buffer))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  >  0  &&  headerBuf.isEOFRecord()  ||  headerBuf.isEOFRecord(buffer))  {	  }    else    if(headerBuf.isEOFRecord()    ||    headerBuf.isEOFRecord(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
681	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord()  ||  headerBuf.isEOFRecord(bodyerBuf))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord()  ||  headerBuf.isEOFRecord(bodyerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord()  ||  headerBuf.isEOFRecord(bodyerBuf))  {	  }    else    if(headerBuf.isEOFRecord()    ||    headerBuf.isEOFRecord(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
682	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord()  ||  headerBuf.isEOFRecord(buffer,  hasHitEOF))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord()  ||  headerBuf.isEOFRecord(buffer,  hasHitEOF))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord()  ||  headerBuf.isEOFRecord(buffer,  hasHitEOF))  {	  }    else    if(headerBuf.isEOFRecord()    ||    headerBuf.isEOFRecord(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
683	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf,  headerBuf)&&  headerBuf!=  null)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf,  headerBuf)&&  headerBuf!=  null)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf,  headerBuf)&&  headerBuf!=  null)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
684	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)/&  headerBuf!=  null)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)/&  headerBuf!=  null)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)/&  headerBuf!=  null)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
685	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  &&  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  &&  hasHitEOF)  {	  }    else    if(headerBuf.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
686	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.length  >  0  ||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.length  >  0  ||  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.length  >  0  ||  headerBuf.length  >  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf.length    >    0    ||    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
687	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length  <  =  0  ||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length  <  =  0  ||  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length  <  =  0  ||  headerBuf.length  >  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf.length    >    0    ||    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
688	[BUG]  [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf,  headerBuf)||  buffer.isEOFRecord(headerBuf,  headerBuf))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf,  headerBuf)||  buffer.isEOFRecord(headerBuf,  headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOFRecord(headerBuf,  headerBuf)||  buffer.isEOFRecord(headerBuf,  headerBuf))  {	  }    else    if(!buffer.isEOFRecord(headerBuf,    headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
689	[BUG]  [BUGGY]  }  else  if(!hasHitEOF  &&!buffer.isEOFRecord(headerBuf,  headerBuf))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!hasHitEOF  &&!buffer.isEOFRecord(headerBuf,  headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!hasHitEOF  &&!buffer.isEOFRecord(headerBuf,  headerBuf))  {	  }    else    if(!buffer.isEOFRecord(headerBuf,    headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
690	[BUG]  [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf,  headerBuf)&&!hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf,  headerBuf)&&!hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOFRecord(headerBuf,  headerBuf)&&!hasHitEOF)  {	  }    else    if(!buffer.isEOFRecord(headerBuf,    headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
691	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf,  headerBuf))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf,  headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf,  headerBuf))  {	  }    else    if(!buffer.isEOFRecord(headerBuf,    headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
692	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  isEOF(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  isEOF(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)&&  isEOF(headerBuf))  {	  }    else    if(!buffer.isEOF(headerBuf)&&    isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
693	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  isEOF()  ||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  isEOF()  ||  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)&&  isEOF()  ||  headerBuf.length  >  0)  {	  }    else    if(!buffer.isEOF(headerBuf)&&    isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
694	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.length  <  =  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.length  <  =  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.length  <  =  hasHitEOF)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
695	[BUG]  [BUGGY]  }  else  if(bodyBuf.isEOF()  ||  headerBuf.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(bodyBuf.isEOF()  ||  headerBuf.length()  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(bodyBuf.isEOF()  ||  headerBuf.length()  ==  0)  {	  }    else    if(buffer.isEOF()    ||    headerBuf.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
696	[BUG]  [BUGGY]  }  else  if(buffer.length()  ==  0  ||  headerBuf.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.length()  ==  0  ||  headerBuf.length()  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.length()  ==  0  ||  headerBuf.length()  ==  0)  {	  }    else    if(buffer.isEOF()    ||    headerBuf.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
697	[BUG]  [BUGGY]  }  else  if(buffer.isEOF()  ||  headerBuf.length()!=  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOF()  ||  headerBuf.length()!=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF()  ||  headerBuf.length()!=  0)  {	  }    else    if(buffer.isEOF()    ||    headerBuf.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
698	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer,  buffer.getLength()))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer,  buffer.getLength()))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer,  buffer.getLength()))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer.getLength()))    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
699	[BUG]  [BUGGY]  }  else  if(headerBuf.length  <  =  headerBuf.length  ||  headerBuf.isEOFRecord(buffer.getLength()))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  <  =  headerBuf.length  ||  headerBuf.isEOFRecord(buffer.getLength()))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  <  =  headerBuf.length  ||  headerBuf.isEOFRecord(buffer.getLength()))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer.getLength()))    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
700	[BUG]  [BUGGY]  HeaderBuf[i]  =  buffer.readRecord();  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  HeaderBuf[i]  =  buffer.readRecord();  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	HeaderBuf[i]  =  buffer.readRecord();	  if(headerBuf    ==    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    headerBuf[i]    =    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
701	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer,  false)||  headerBuf.isEOFRecord(buffer,  true))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer,  false)||  headerBuf.isEOFRecord(buffer,  true))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer,  false)||  headerBuf.isEOFRecord(buffer,  true))  {	  }    else    if(headerBuf.isEOFRecord(buffer,    false))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
702	[BUG]  [BUGGY]  }  else  if(headerBuf.equals(buffer,  false))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.equals(buffer,  false))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.equals(buffer,  false))  {	  }    else    if(headerBuf.isEOFRecord(buffer,    false))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
703	[BUG]  [BUGGY]  }  else  if(buffer.isEOF()  &&  headerBuf.isEOFRecord(headerBuf)&&  headerBuf.isEOF())  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOF()  &&  headerBuf.isEOFRecord(headerBuf)&&  headerBuf.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF()  &&  headerBuf.isEOFRecord(headerBuf)&&  headerBuf.isEOF())  {	  }    else    if(headerBuf.isEOFRecord(buffer)&&    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
704	[BUG]  [BUGGY]  }  else  if(buffer.isEOF()  &&  headerBuf.isEOFRecord(headerBuf)&&  buffer.isEOF())  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOF()  &&  headerBuf.isEOFRecord(headerBuf)&&  buffer.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF()  &&  headerBuf.isEOFRecord(headerBuf)&&  buffer.isEOF())  {	  }    else    if(headerBuf.isEOFRecord(buffer)&&    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
705	[BUG]  [BUGGY]  }  else  if(buffer.equals(headerBuf)&&  headerBuf.isEOFRecord(buffer)&&  headerBuf.isEOF())  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.equals(headerBuf)&&  headerBuf.isEOFRecord(buffer)&&  headerBuf.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.equals(headerBuf)&&  headerBuf.isEOFRecord(buffer)&&  headerBuf.isEOF())  {	  }    else    if(headerBuf.isEOFRecord(buffer)&&    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
706	[BUG]  [BUGGY]  }  else  if(headerBuf.length  >  0  &&  buffer.isEOF()  ||  headerBuf.isEOF())  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  >  0  &&  buffer.isEOF()  ||  headerBuf.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  >  0  &&  buffer.isEOF()  ||  headerBuf.isEOF())  {	  }    else    if(buffer.isEOF()    ||    headerBuf.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
707	[BUG]  [BUGGY]  }  else  if(buffer.isEOF()  ||  buffer.isEOFRecord())  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOF()  ||  buffer.isEOFRecord())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF()  ||  buffer.isEOFRecord())  {	  }    else    if(buffer.isEOF()    ||    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
708	[BUG]  [BUGGY]  }  else  if(buffer.hasEOF()  ||  buffer.isEOF())  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.hasEOF()  ||  buffer.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.hasEOF()  ||  buffer.isEOF())  {	  }    else    if(buffer.isEOF()    ||    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
709	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  ||  headerBuf.length  <  2)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  ||  headerBuf.length  <  2)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  ||  headerBuf.length  <  2)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF()    ||    headerBuf.length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
710	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readEOF();  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  byte[]  headerBuf  =  buffer.readEOF();  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	byte[]  headerBuf  =  buffer.readEOF();	  byte[]    headerBuf    =    buffer.readRecord();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
711	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  headerBuf,  0,  headerBuf.length  -  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  System.arraycopy(buffer,  0,  headerBuf,  0,  headerBuf.length  -  headerBuf.length);  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	System.arraycopy(buffer,  0,  headerBuf,  0,  headerBuf.length  -  headerBuf.length);	  System.arraycopy(buffer,    0,    headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
712	[BUG]  [BUGGY]  }  else  if(hasHitEOF  &&!buffer.isEOF(headerBuf)&&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(hasHitEOF  &&!buffer.isEOF(headerBuf)&&  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(hasHitEOF  &&!buffer.isEOF(headerBuf)&&  headerBuf.length  >  0)  {	  }    else    if(!buffer.isEOF(headerBuf)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
713	[BUG]  [BUGGY]  }  else  if(!buffer.hasEOF(headerBuf)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.hasEOF(headerBuf)&&  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.hasEOF(headerBuf)&&  hasHitEOF)  {	  }    else    if(!buffer.isEOF(headerBuf)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
714	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.isEOF()  ||  headerBuf.isEOF())  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.isEOF()  ||  headerBuf.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.isEOF()  ||  headerBuf.isEOF())  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF()    ||    headerBuf.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
715	[BUG]  [BUGGY]  }  else  if(headerBuf.equals(buffer.getRecord())||  headerBuf.equals(headerBuf.length))  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.equals(buffer.getRecord())||  headerBuf.equals(headerBuf.length))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.equals(buffer.getRecord())||  headerBuf.equals(headerBuf.length))  {	  }    else    if(!buffer.isEOF(headerBuf)||    headerBuf.equals(headerBuf.length))    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
716	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)||  headerBuf.equals(bodyerBuf.length))  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)||  headerBuf.equals(bodyerBuf.length))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)||  headerBuf.equals(bodyerBuf.length))  {	  }    else    if(!buffer.isEOF(headerBuf)||    headerBuf.equals(headerBuf.length))    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
717	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)||  headerBuf.equals(0,  headerBuf.length))  {  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)||  headerBuf.equals(0,  headerBuf.length))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)||  headerBuf.equals(0,  headerBuf.length))  {	  }    else    if(!buffer.isEOF(headerBuf)||    headerBuf.equals(headerBuf.length))    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
718	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  header.length;  ++i)  {  buffer.readRecord();  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  header.length;  ++i)  {  buffer.readRecord();  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  header.length;  ++i)  {  buffer.readRecord();  }	  if(headerBuf    ==    null)    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
719	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer,  headerBuf,  0,  headerBuf.length))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer,  headerBuf,  0,  headerBuf.length))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer,  headerBuf,  0,  headerBuf.length))  {	  }    else    if(headerBuf.isEOFRecord(buffer,    0,    headerBuf.length))    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
720	[BUG]  [BUGGY]  }  else  if(headerBuf.length  <  =  headerBuf.length  ||  headerBuf.isEOFRecord(buffer.getCharset()))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  <  =  headerBuf.length  ||  headerBuf.isEOFRecord(buffer.getCharset()))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  <  =  headerBuf.length  ||  headerBuf.isEOFRecord(buffer.getCharset()))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer.getCharset()))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
721	[BUG]  [BUGGY]  }  else  if(headerBuf.length  >  0  &&  headerBuf.isEOFRecord(buffer.getCharset()))  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  >  0  &&  headerBuf.isEOFRecord(buffer.getCharset()))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  >  0  &&  headerBuf.isEOFRecord(buffer.getCharset()))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer.getCharset()))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
722	[BUG]  [BUGGY]  }  else  if(headerBuf.length  >  0  &&  headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer.getCharset()))  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  >  0  &&  headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer.getCharset()))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  >  0  &&  headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer.getCharset()))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer.getCharset()))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
723	[BUG]  [BUGGY]  }  else  if(headerBuf.equals(bodyerBuf)||  headerBuf.equals(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.equals(bodyerBuf)||  headerBuf.equals(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.equals(bodyerBuf)||  headerBuf.equals(headerBuf))  {	  }    else    if(headerBuf.isEOFRecord(buffer)||    headerBuf.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
724	[BUG]  [BUGGY]  }  else  if(headerBuf.equals(buffer)||  headerBuf.equals(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.equals(buffer)||  headerBuf.equals(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.equals(buffer)||  headerBuf.equals(headerBuf))  {	  }    else    if(headerBuf.isEOFRecord(buffer)||    headerBuf.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
725	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord()  ||  headerBuf.isEOFRecord())  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord()  ||  headerBuf.isEOFRecord())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord()  ||  headerBuf.isEOFRecord())  {	  }    else    if(headerBuf.isEOFRecord()    ||    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
726	[BUG]  [BUGGY]  }  else  if(headerBuf.length  >  0  ||!buffer.isEOF(headerBuf)&&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  >  0  ||!buffer.isEOF(headerBuf)&&  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  >  0  ||!buffer.isEOF(headerBuf)&&  headerBuf.length  >  0)  {	  }    else    if(!buffer.isEOF(headerBuf)||    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
727	[BUG]  [BUGGY]  }  else  if(headerBuf.length  <  0  ||  buffer.isEOF())  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  <  0  ||  buffer.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  <  0  ||  buffer.isEOF())  {	  }    else    if(buffer.isEOF()    ||    headerBuf.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
728	[BUG]  [BUGGY]  }  else  if(buffer.isEOF()  ||  headerBuf.length  <  2)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOF()  ||  headerBuf.length  <  2)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF()  ||  headerBuf.length  <  2)  {	  }    else    if(buffer.isEOF()    ||    headerBuf.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
729	[BUG]  [BUGGY]  }  else  if(!hasHitEOF  &&!buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!hasHitEOF  &&!buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!hasHitEOF  &&!buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {	  }    else    if(!buffer.isEOFRecord(headerBuf)||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
730	[BUG]  [BUGGY]  }  else  if(headerBuf.equals(bodyerBuf)&&  headerBuf.isEOFRecord(buffer,  headerBuf.length))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.equals(bodyerBuf)&&  headerBuf.isEOFRecord(buffer,  headerBuf.length))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.equals(bodyerBuf)&&  headerBuf.isEOFRecord(buffer,  headerBuf.length))  {	  }    else    if(headerBuf.isEOFRecord(buffer,    headerBuf.length))    {    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
731	[BUG]  [BUGGY]  }  else  if(!buffer.hasEOF(headerBuf)&&  headerBuf.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.hasEOF(headerBuf)&&  headerBuf.length()  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.hasEOF(headerBuf)&&  headerBuf.length()  ==  0)  {	  }    else    if(!buffer.isEOF(headerBuf)||    headerBuf.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
732	[BUG]  [BUGGY]  }  else  if(!hasHitEOF  &&!buffer.isEOF(headerBuf)||  buffer.isEOF())  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!hasHitEOF  &&!buffer.isEOF(headerBuf)||  buffer.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!hasHitEOF  &&!buffer.isEOF(headerBuf)||  buffer.isEOF())  {	  }    else    if(!buffer.isEOF(headerBuf)||    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
733	[BUG]  [BUGGY]  }  else  if(!buffer.hasEOF(headerBuf)&&  buffer.isEOF())  {  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.hasEOF(headerBuf)&&  buffer.isEOF())  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.hasEOF(headerBuf)&&  buffer.isEOF())  {	  }    else    if(!buffer.isEOF(headerBuf)||    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
734	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length()  <  =  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length()  <  =  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length()  <  =  hasHitEOF)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf.length()    ==    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
735	[BUG]  [BUGGY]  HeaderBuf  headerBuf  =  buffer.readRecord();  if(headerBuf  ==  null)  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  HeaderBuf  headerBuf  =  buffer.readRecord();  if(headerBuf  ==  null)  {  hasHitEOF  =  false;  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	HeaderBuf  headerBuf  =  buffer.readRecord();  if(headerBuf  ==  null)  {  hasHitEOF  =  false;  }	  if(headerBuf    ==    null)    {    headerBuf    =    buffer.readRecord();    if(headerBuf    ==    null)    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
736	[BUG]  [BUGGY]  }  else  if(buffer.length  ==  0  ||  headerBuf.equals(headerBuf))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.length  ==  0  ||  headerBuf.equals(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.length  ==  0  ||  headerBuf.equals(headerBuf))  {	  }    else    if(buffer.length    ==    0    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
737	[BUG]  [BUGGY]  }  else  if(headerBuf.length  ==  0  ||  buffer.isEOFRecord(bodyBuf))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  ==  0  ||  buffer.isEOFRecord(bodyBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  ==  0  ||  buffer.isEOFRecord(bodyBuf))  {	  }    else    if(buffer.length    ==    0    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
738	[BUG]  [BUGGY]  }  else  if(buffer.record(headerBuf)||  buffer.shouldRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.record(headerBuf)||  buffer.shouldRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.record(headerBuf)||  buffer.shouldRecord(headerBuf))  {	  }    else    if(buffer.record(headerBuf)||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
739	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length  <  2)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length  <  2)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length  <  2)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf.length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
740	[BUG]  [BUGGY]  }  else  if(headerBuf.length  >  0  &&  headerBuf.isEOF()  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  >  0  &&  headerBuf.isEOF()  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  >  0  &&  headerBuf.isEOF()  ||  buffer.isEOFRecord(headerBuf))  {	  }    else    if(headerBuf.isEOF()    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
741	[BUG]  [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)||  headerBuf.length  <  2)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)||  headerBuf.length  <  2)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOFRecord(headerBuf)||  headerBuf.length  <  2)  {	  }    else    if(!buffer.isEOFRecord(headerBuf)||    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
742	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  ==  headerBuf.length  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  ==  headerBuf.length  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  ==  headerBuf.length  ||  buffer.isEOFRecord(headerBuf))  {	  }    else    if(headerBuf.length()    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
743	[BUG]  [BUGGY]  }  else  if(headerBuf.length()!=  headerBuf.length  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()!=  headerBuf.length  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()!=  headerBuf.length  ||  buffer.isEOFRecord(headerBuf))  {	  }    else    if(headerBuf.length()    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
744	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  ==  headerBuf.length()  &&  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length()  ==  headerBuf.length()  &&  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  ==  headerBuf.length()  &&  buffer.isEOFRecord(headerBuf))  {	  }    else    if(headerBuf.length()    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
745	[BUG]  [BUGGY]  HeaderBuf  headerBuf  =  buffer.readRecord();  if(headerBuf  ==  null)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  HeaderBuf  headerBuf  =  buffer.readRecord();  if(headerBuf  ==  null)  {  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	HeaderBuf  headerBuf  =  buffer.readRecord();  if(headerBuf  ==  null)  {  hasHitEOF  =  true;  }	  if(headerBuf    ==    null)    {    headerBuf    =    buffer.readRecord();    if(headerBuf    ==    null)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
746	[BUG]  [BUGGY]  HeaderBuf  headerBuf  =  buffer.readRecord();  if(headerBuf!=  null)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  HeaderBuf  headerBuf  =  buffer.readRecord();  if(headerBuf!=  null)  {  hasHitEOF  =  true;  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	HeaderBuf  headerBuf  =  buffer.readRecord();  if(headerBuf!=  null)  {  hasHitEOF  =  true;  }	  if(headerBuf    ==    null)    {    headerBuf    =    buffer.readRecord();    if(headerBuf    ==    null)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
747	[BUG]  [BUGGY]  }  else  if(bodyerBuf.isEOF()  ||  headerBuf.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(bodyerBuf.isEOF()  ||  headerBuf.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(bodyerBuf.isEOF()  ||  headerBuf.isEOFRecord(headerBuf))  {	  }    else    if(buffer.isEOF()    ||    headerBuf.isEOFRecord(bodyerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
748	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)||  headerBuf.length  <  2  ||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)||  headerBuf.length  <  2  ||  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)||  headerBuf.length  <  2  ||  headerBuf.length  >  0)  {	  }    else    if(!buffer.isEOF(headerBuf)||    headerBuf.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
749	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length  >  1)  {  headerBuf  =  buffer.readRecord();  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  if(headerBuf!=  null)  {  if(headerBuf.length  >  1)  {  headerBuf  =  buffer.readRecord();  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	if(headerBuf!=  null)  {  if(headerBuf.length  >  1)  {  headerBuf  =  buffer.readRecord();  }	  if(headerBuf    ==    null)    {    if(headerBuf.length    >    0)    {    headerBuf    =    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
750	[BUG]  [BUGGY]  }  else  if(buffer.length!=  0  &&  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.length!=  0  &&  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.length!=  0  &&  buffer.isEOFRecord(headerBuf))  {	  }    else    if(buffer.length!=    0    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
751	[BUG]  [BUGGY]  }  else  if(buffer.shouldRecord(bodyBuf)||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.shouldRecord(bodyBuf)||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.shouldRecord(bodyBuf)||  buffer.isEOFRecord(headerBuf))  {	  }    else    if(buffer.shouldRecord(headerBuf)||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
752	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length()  <  0)  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length()  <  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length()  <  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf.length()    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
753	[BUG]  [BUGGY]  }  else  if(!hasHitEOF  &&!buffer.isEOF(headerBuf)||  buffer.isEOF(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!hasHitEOF  &&!buffer.isEOF(headerBuf)||  buffer.isEOF(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!hasHitEOF  &&!buffer.isEOF(headerBuf)||  buffer.isEOF(headerBuf))  {	  }    else    if(!buffer.isEOF(headerBuf)||    buffer.isEOF(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
754	[BUG]  [BUGGY]  }  else  if(!hasHitEOF  &&  buffer.isEOF(headerBuf)||  buffer.isEOF(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!hasHitEOF  &&  buffer.isEOF(headerBuf)||  buffer.isEOF(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!hasHitEOF  &&  buffer.isEOF(headerBuf)||  buffer.isEOF(headerBuf))  {	  }    else    if(!buffer.isEOF(headerBuf)||    buffer.isEOF(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
755	[BUG]  [BUGGY]  }  else  if(!buffer.hasEOF(headerBuf)&&  buffer.isEOF(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.hasEOF(headerBuf)&&  buffer.isEOF(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.hasEOF(headerBuf)&&  buffer.isEOF(headerBuf))  {	  }    else    if(!buffer.isEOF(headerBuf)||    buffer.isEOF(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
756	[BUG]  [BUGGY]  }  else  if(hasHitEOF  &&!buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(hasHitEOF  &&!buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(hasHitEOF  &&!buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0)  {	  }    else    if(!buffer.isEOFRecord(headerBuf)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
757	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord()  ||  buffer.isEOFRecord(buffer))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord()  ||  buffer.isEOFRecord(buffer))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord()  ||  buffer.isEOFRecord(buffer))  {	  }    else    if(buffer.isEOF()    ||    headerBuf.isEOFRecord(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
758	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.isEOF()  ||  headerBuf.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.isEOF()  ||  headerBuf.length()  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.isEOF()  ||  headerBuf.length()  ==  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF()    ||    headerBuf.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
759	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.isEOF()  ||  headerBuf.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.isEOF()  ||  headerBuf.length  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.isEOF()  ||  headerBuf.length  ==  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF()    ||    headerBuf.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
760	[BUG]  [BUGGY]  bodyBuf  =  buffer.readRecord();  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  bodyBuf  =  buffer.readRecord();  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	bodyBuf  =  buffer.readRecord();	  if(headerBuf    ==    null)    {    headerBuf    =    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
761	[BUG]  [BUGGY]  }  else  if(headerBuf.length  <  =  headerBuf.length  ||  headerBuf.isEOFRecord(buffer))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  <  =  headerBuf.length  ||  headerBuf.isEOFRecord(buffer))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  <  =  headerBuf.length  ||  headerBuf.isEOFRecord(buffer))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
762	[BUG]  [BUGGY]  }  else  if(headerBuf.length  >  0  &&  headerBuf.isEOFRecord(buffer))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  >  0  &&  headerBuf.isEOFRecord(buffer))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  >  0  &&  headerBuf.isEOFRecord(buffer))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
763	[BUG]  [BUGGY]  }  else  if(headerBuf.length  >  0  ||  headerBuf.isEOFRecord(buffer))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.length  >  0  ||  headerBuf.isEOFRecord(buffer))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  >  0  ||  headerBuf.isEOFRecord(buffer))  {	  }    else    if(headerBuf.isEOF()    ||    headerBuf.isEOFRecord(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
764	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)||  headerBuf.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)||  headerBuf.length()  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)||  headerBuf.length()  >  0)  {	  }    else    if(!buffer.isEOF(headerBuf)&&    headerBuf.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
765	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  headerBuf.length()  >  0  ||  headerBuf.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  headerBuf.length()  >  0  ||  headerBuf.length()  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)&&  headerBuf.length()  >  0  ||  headerBuf.length()  >  0)  {	  }    else    if(!buffer.isEOF(headerBuf)&&    headerBuf.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
766	[BUG]  [BUGGY]  }  else  if(hasHitEOF  &&!buffer.isEOFRecord(headerBuf,  false))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(hasHitEOF  &&!buffer.isEOFRecord(headerBuf,  false))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(hasHitEOF  &&!buffer.isEOFRecord(headerBuf,  false))  {	  }    else    if(!buffer.isEOFRecord(headerBuf,    false))    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
767	[BUG]  [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf,  false)||  buffer.isEOFRecord(headerBuf,  true))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf,  false)||  buffer.isEOFRecord(headerBuf,  true))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOFRecord(headerBuf,  false)||  buffer.isEOFRecord(headerBuf,  true))  {	  }    else    if(!buffer.isEOFRecord(headerBuf,    false))    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
768	[BUG]  [BUGGY]  }  else  if(buffer.hasEOF()  ||  buffer.isEOFRecord(headerBuf,  false))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.hasEOF()  ||  buffer.isEOFRecord(headerBuf,  false))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.hasEOF()  ||  buffer.isEOFRecord(headerBuf,  false))  {	  }    else    if(buffer.isEOF()    ||    buffer.isEOFRecord(headerBuf,    false))    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
769	[BUG]  [BUGGY]  }  else  if(buffer.isEOF()  ||  buffer.isEOFRecord(headerBuf,  false)&&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOF()  ||  buffer.isEOFRecord(headerBuf,  false)&&  headerBuf.length  >  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF()  ||  buffer.isEOFRecord(headerBuf,  false)&&  headerBuf.length  >  0)  {	  }    else    if(buffer.isEOF()    ||    buffer.isEOFRecord(headerBuf,    false))    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
770	[BUG]  [BUGGY]  }  else  if(buffer.isEOF()  ||  buffer.isEOFRecord(headerBuf,  false)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOF()  ||  buffer.isEOFRecord(headerBuf,  false)&&  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF()  ||  buffer.isEOFRecord(headerBuf,  false)&&  hasHitEOF)  {	  }    else    if(buffer.isEOF()    ||    buffer.isEOFRecord(headerBuf,    false))    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
771	[BUG]  [BUGGY]  int  headerLength  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer.readRecord();  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  int  headerLength  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer.readRecord();  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	int  headerLength  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer.readRecord();  }	  if(headerBuf.length    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
772	[BUG]  [BUGGY]  while(headerBuf.length  <  headerSize)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer.readRecord();  }  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  while(headerBuf.length  <  headerSize)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer.readRecord();  }  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	while(headerBuf.length  <  headerSize)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer.readRecord();  }	  if(headerBuf.length    >    0)    {    for(int    i    =    0;    i    <    headerBuf.length;    i++)    {    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
773	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord()  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord()  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord()  ||  buffer.isEOFRecord(headerBuf))  {	  }    else    if(buffer.isEOF()    &&    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
774	[BUG]  [BUGGY]  }  else  if(buffer.hasHeaderSize()  &&  headerBuf.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.hasHeaderSize()  &&  headerBuf.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.hasHeaderSize()  &&  headerBuf.isEOFRecord(headerBuf))  {	  }    else    if(buffer.isEOF()    &&    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
775	[BUG]  [BUGGY]  }  else  if(!headerBuf.isEOFRecord(buffer,  headerBuf))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!headerBuf.isEOFRecord(buffer,  headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!headerBuf.isEOFRecord(buffer,  headerBuf))  {	  }    else    if(!headerBuf.isEOFRecord(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
776	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.length  <  2)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.length  <  2)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.length  <  2)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
777	[BUG]  [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf,  false)||  buffer.isEOFRecord(headerBuf,  false))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf,  false)||  buffer.isEOFRecord(headerBuf,  false))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOFRecord(headerBuf,  false)||  buffer.isEOFRecord(headerBuf,  false))  {	  }    else    if(!buffer.isEOFRecord(headerBuf,    true))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
778	[BUG]  [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf,  false)||  headerBuf.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf,  false)||  headerBuf.length  ==  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOFRecord(headerBuf,  false)||  headerBuf.length  ==  0)  {	  }    else    if(!buffer.isEOFRecord(headerBuf,    true))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
779	[BUG]  [BUGGY]  }  else  if(buffer.hasHeaderSize()  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.hasHeaderSize()  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.hasHeaderSize()  ||  buffer.isEOFRecord(headerBuf))  {	  }    else    if(buffer.hasEOF()    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
780	[BUG]  [BUGGY]  }  else  if(buffer.hasRecorded()  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.hasRecorded()  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.hasRecorded()  ||  buffer.isEOFRecord(headerBuf))  {	  }    else    if(buffer.hasEOF()    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
781	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  ||  headerBuf.isEOF()  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  ||  headerBuf.isEOF()  &&  hasHitEOF)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  ||  headerBuf.isEOF()  &&  hasHitEOF)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    headerBuf.isEOF()    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
782	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.isEOF()  ||  headerBuf.length()!=  0)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.isEOF()  ||  headerBuf.length()!=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.isEOF()  ||  headerBuf.length()!=  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF()    ||    headerBuf.length()!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
783	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.isEOF()  ||  headerBuf.length()!=  0)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.isEOF()  ||  headerBuf.length()!=  0)  {  [BUGGY]      hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.isEOF()  ||  headerBuf.length()!=  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF()    ||    headerBuf.length()!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
