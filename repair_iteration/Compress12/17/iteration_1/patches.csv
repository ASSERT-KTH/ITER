bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf.length()  >  0)  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf.length()  >  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
2	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length()  ==  0)  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length()  ==  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
3	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length()!=  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length()!=  0)  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length()!=  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
4	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length()  >=  0)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length()  >=  0)  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length()  >=  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
5	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.length()  >  0)  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.length()  >  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
6	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length()  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length()  <  =  0)  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length()  <  =  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
7	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  hasHitEOF)  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  hasHitEOF)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
8	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)&&  hasHitEOF)  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)&&  hasHitEOF)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
9	[BUG]  [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)&&  hasHitEOF)  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOFRecord(headerBuf)&&  hasHitEOF)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
10	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOF()  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOF()  &&  hasHitEOF)  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOF()  &&  hasHitEOF)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
11	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length()  ==  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length()  ==  hasHitEOF)  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length()  ==  hasHitEOF)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
12	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF())  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(headerBuf.isEOF())  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF())  {	  }    else    if(buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
13	[BUG]  [BUGGY]  }  else  if(buffer.isEOF()  ||  headerBuf.isEOF())  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(buffer.isEOF()  ||  headerBuf.isEOF())  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF()  ||  headerBuf.isEOF())  {	  }    else    if(buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
14	[BUG]  [BUGGY]  }  else  if(buffer.isEOF()  &&  headerBuf.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(buffer.isEOF()  &&  headerBuf.length()  >  0)  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF()  &&  headerBuf.length()  >  0)  {	  }    else    if(buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
15	[BUG]  [BUGGY]  }  else  if(buffer.isEOF()  ||  headerBuf.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(buffer.isEOF()  ||  headerBuf.length()  ==  0)  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF()  ||  headerBuf.length()  ==  0)  {	  }    else    if(buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
16	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF())  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(!buffer.isEOF())  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF())  {	  }    else    if(buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
17	[BUG]  [BUGGY]  }  else  if(buffer.isEOF()  ||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(buffer.isEOF()  ||  headerBuf.length  >  0)  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF()  ||  headerBuf.length  >  0)  {	  }    else    if(buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
18	[BUG]  [BUGGY]  }  else  if(buffer.isEOF()  &&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(buffer.isEOF()  &&  headerBuf.length  >  0)  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF()  &&  headerBuf.length  >  0)  {	  }    else    if(buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
19	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer,  false))  {  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer,  false))  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer,  false))  {	  }    else    if(headerBuf.isEOFRecord(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
20	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF(buffer))  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(headerBuf.isEOF(buffer))  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF(buffer))  {	  }    else    if(headerBuf.isEOFRecord(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
21	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.isEOF())  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.isEOF())  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.isEOF())  {	  }    else    if(headerBuf.isEOFRecord(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
22	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer,  0,  headerBuf.length))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer,  0,  headerBuf.length))  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer,  0,  headerBuf.length))  {	  }    else    if(headerBuf.isEOFRecord(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
23	[BUG]  [BUGGY]  }  else  if(!headerBuf.isEOFRecord(buffer))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(!headerBuf.isEOFRecord(buffer))  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!headerBuf.isEOFRecord(buffer))  {	  }    else    if(headerBuf.isEOFRecord(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
24	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  buffer.isEOF())  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  buffer.isEOF())  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)&&  buffer.isEOF())  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
25	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  buffer.isEOF())  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  buffer.isEOF())  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)||  buffer.isEOF())  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
26	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  ||  headerBuf.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  ||  headerBuf.length()  ==  0)  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  ||  headerBuf.length()  ==  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
27	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  ||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  ||  headerBuf.length  >  0)  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  ||  headerBuf.length  >  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
28	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  ||  headerBuf.length()!=  0)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  ||  headerBuf.length()!=  0)  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  ||  headerBuf.length()!=  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
29	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOF())  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOF())  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOF())  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
30	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(headerBuf.isEOF()  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  ||  buffer.isEOFRecord(headerBuf))  {	  }    else    if(buffer.isEOF()    ||    headerBuf.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
31	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer))  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer))  {	  }    else    if(buffer.isEOF()    ||    headerBuf.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
32	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer.length))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer.length))  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer.length))  {	  }    else    if(buffer.isEOF()    ||    headerBuf.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
33	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer.getBytes()))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer.getBytes()))  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer.getBytes()))  {	  }    else    if(buffer.isEOF()    ||    headerBuf.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
34	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer.getLength()))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer.getLength()))  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer.getLength()))  {	  }    else    if(buffer.isEOF()    ||    headerBuf.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
35	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer.getCharset()))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer.getCharset()))  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOF()  ||  headerBuf.isEOFRecord(buffer.getCharset()))  {	  }    else    if(buffer.isEOF()    ||    headerBuf.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
36	[BUG]  [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)&&  headerBuf.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)&&  headerBuf.length()  >  0)  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOFRecord(headerBuf)&&  headerBuf.length()  >  0)  {	  }    else    if(!buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
37	[BUG]  [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf,  false))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf,  false))  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOFRecord(headerBuf,  false))  {	  }    else    if(!buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
38	[BUG]  [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)||  headerBuf.length  >  0)  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOFRecord(headerBuf)||  headerBuf.length  >  0)  {	  }    else    if(!buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
39	[BUG]  [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf,  true))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf,  true))  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOFRecord(headerBuf,  true))  {	  }    else    if(!buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
40	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf.length  >  0)  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)&&  headerBuf.length  >  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
41	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length  <  =  0)  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length  <  =  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
42	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length  ==  0)  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length  ==  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
43	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >=  0)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >=  0)  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >=  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
44	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length!=  0)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length!=  0)  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length!=  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
45	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.length  >  0)  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  headerBuf.length  >  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
46	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  hasHitEOF)  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)&&  hasHitEOF)  {	  }    else    if(!buffer.isEOF(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
47	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  headerBuf.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  headerBuf.length()  >  0)  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)&&  headerBuf.length()  >  0)  {	  }    else    if(!buffer.isEOF(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
48	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)||  headerBuf.length  >  0)  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)||  headerBuf.length  >  0)  {	  }    else    if(!buffer.isEOF(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
49	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  headerBuf.length  >  0)  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)&&  headerBuf.length  >  0)  {	  }    else    if(!buffer.isEOF(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
50	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)||  headerBuf.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)||  headerBuf.length()  ==  0)  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)||  headerBuf.length()  ==  0)  {	  }    else    if(!buffer.isEOF(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
51	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)||  headerBuf.equals(headerBuf.length))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)||  headerBuf.equals(headerBuf.length))  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)||  headerBuf.equals(headerBuf.length))  {	  }    else    if(!buffer.isEOF(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
52	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)||  buffer.isEOF())  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)||  buffer.isEOF())  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)||  buffer.isEOF())  {	  }    else    if(!buffer.isEOF(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
53	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  buffer.isEOFRecord(headerBuf))  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)&&  buffer.isEOFRecord(headerBuf))  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
54	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)||  buffer.isEOFRecord(headerBuf))  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
55	[BUG]  [BUGGY]  }  else  if(buffer.isEOF(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(buffer.isEOF(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF(headerBuf)||  buffer.isEOFRecord(headerBuf))  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
56	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF(headerBuf))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF(headerBuf))  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF(headerBuf))  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
57	[BUG]  [BUGGY]  }  else  if(buffer.equals(headerBuf)||  buffer.equals(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(buffer.equals(headerBuf)||  buffer.equals(headerBuf))  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.equals(headerBuf)||  buffer.equals(headerBuf))  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
58	[BUG]  [BUGGY]  }  else  if(buffer.length  >  0  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(buffer.length  >  0  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.length  >  0  ||  buffer.isEOFRecord(headerBuf))  {	  }    else    if(buffer.isEOF()    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
59	[BUG]  [BUGGY]  }  else  if(buffer.isEOF()  ||  buffer.isEOFRecord(headerBuf,  false))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(buffer.isEOF()  ||  buffer.isEOFRecord(headerBuf,  false))  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF()  ||  buffer.isEOFRecord(headerBuf,  false))  {	  }    else    if(buffer.isEOF()    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
60	[BUG]  [BUGGY]  }  else  if(headerBuf.length()  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(headerBuf.length()  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length()  ||  buffer.isEOFRecord(headerBuf))  {	  }    else    if(buffer.isEOF()    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
61	[BUG]  [BUGGY]  }  else  if(buffer.isEOF()  ||  headerBuf.isEOFRecord(buffer))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(buffer.isEOF()  ||  headerBuf.isEOFRecord(buffer))  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF()  ||  headerBuf.isEOFRecord(buffer))  {	  }    else    if(buffer.isEOF()    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
62	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer.readRecord();  }  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer.readRecord();  }  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer.readRecord();  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
63	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord();  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  byte[]  headerBuf  =  buffer.readRecord();  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	byte[]  headerBuf  =  buffer.readRecord();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
64	[BUG]  [BUGGY]  if(headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  if(headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	if(headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
65	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
66	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  false;  }  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  false;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
67	[BUG]  [BUGGY]  if(headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  if(headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  false;  }  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	if(headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  false;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
68	[BUG]  [BUGGY]  if(headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer.readRecord();  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  if(headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer.readRecord();  }  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	if(headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  i++)  {  buffer.readRecord();  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
69	[BUG]  [BUGGY]  }  else  if(headerBuf.length  >  0  &&  buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(headerBuf.length  >  0  &&  buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0)  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  >  0  &&  buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
70	[BUG]  [BUGGY]  }  else  if(buffer.isEOF()  ||  headerBuf.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(buffer.isEOF()  ||  headerBuf.length  ==  0)  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF()  ||  headerBuf.length  ==  0)  {	  }    else    if(buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
71	[BUG]  [BUGGY]  }  else  if(buffer.isEOF()  ||  headerBuf.length  <  0)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(buffer.isEOF()  ||  headerBuf.length  <  0)  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF()  ||  headerBuf.length  <  0)  {	  }    else    if(buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
72	[BUG]  [BUGGY]  }  else  if(buffer.isEOF()  ||  buffer.isEOF())  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(buffer.isEOF()  ||  buffer.isEOF())  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF()  ||  buffer.isEOF())  {	  }    else    if(buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
73	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord()  ||  buffer.isEOF())  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(headerBuf.isEOFRecord()  ||  buffer.isEOF())  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord()  ||  buffer.isEOF())  {	  }    else    if(buffer.isEOF()    ||    headerBuf.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
74	[BUG]  [BUGGY]  }  else  if(bodyBuf.isEOF()  ||  headerBuf.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(bodyBuf.isEOF()  ||  headerBuf.isEOFRecord(headerBuf))  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(bodyBuf.isEOF()  ||  headerBuf.isEOFRecord(headerBuf))  {	  }    else    if(buffer.isEOF()    ||    headerBuf.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
75	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord()  ||  headerBuf.isEOF())  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(headerBuf.isEOFRecord()  ||  headerBuf.isEOF())  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord()  ||  headerBuf.isEOF())  {	  }    else    if(buffer.isEOF()    ||    headerBuf.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
76	[BUG]  [BUGGY]  }  else  if(headerBuf.length  ==  0  &&!buffer.isEOF(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(headerBuf.length  ==  0  &&!buffer.isEOF(headerBuf))  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.length  ==  0  &&!buffer.isEOF(headerBuf))  {	  }    else    if(!buffer.isEOF(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
77	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)||  headerBuf.length  <  0)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)||  headerBuf.length  <  0)  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)||  headerBuf.length  <  0)  {	  }    else    if(!buffer.isEOF(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
78	[BUG]  [BUGGY]  }  else  if(buffer.length  ==  0  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(buffer.length  ==  0  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.length  ==  0  ||  buffer.isEOFRecord(headerBuf))  {	  }    else    if(buffer.isEOF()    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
79	[BUG]  [BUGGY]  }  else  if(buffer.isEOF()  &&  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(buffer.isEOF()  &&  buffer.isEOFRecord(headerBuf))  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF()  &&  buffer.isEOFRecord(headerBuf))  {	  }    else    if(buffer.isEOF()    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
80	[BUG]  [BUGGY]  }  else  if(buffer.length!=  0  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(buffer.length!=  0  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.length!=  0  ||  buffer.isEOFRecord(headerBuf))  {	  }    else    if(buffer.isEOF()    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
81	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  isEOF)  {  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  isEOF)  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)&&  isEOF)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
82	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf!=  null)  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf!=  null)  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf!=  null)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
83	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf  ==  null)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf  ==  null)  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf  ==  null)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
84	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)&&  buffer.isEOF())  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)&&  buffer.isEOF())  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)&&  buffer.isEOF())  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
85	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  ||  headerBuf.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  ||  headerBuf.length  ==  0)  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  ||  headerBuf.length  ==  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
86	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  ||  headerBuf.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  ||  headerBuf.length  <  =  0)  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  ||  headerBuf.length  <  =  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
87	[BUG]  [BUGGY]  }  else  if(buffer.isEOF(headerBuf)&&  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(buffer.isEOF(headerBuf)&&  buffer.isEOFRecord(headerBuf))  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF(headerBuf)&&  buffer.isEOFRecord(headerBuf))  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
88	[BUG]  [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0)  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0)  {	  }    else    if(!buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
89	[BUG]  [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {	  }    else    if(!buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
90	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  headerBuf,  0,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  System.arraycopy(buffer,  0,  headerBuf,  0,  headerBuf.length);  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	System.arraycopy(buffer,  0,  headerBuf,  0,  headerBuf.length);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
91	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  if(headerBuf!=  null)  {  headerBuf  =  buffer.readRecord();  }  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  if(headerBuf  ==  null)  {  if(headerBuf!=  null)  {  headerBuf  =  buffer.readRecord();  }  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	if(headerBuf  ==  null)  {  if(headerBuf!=  null)  {  headerBuf  =  buffer.readRecord();  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
92	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  if(headerBuf.length  >  0)  {  headerBuf  =  buffer.readRecord();  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  if(headerBuf  ==  null)  {  if(headerBuf.length  >  0)  {  headerBuf  =  buffer.readRecord();  }  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	if(headerBuf  ==  null)  {  if(headerBuf.length  >  0)  {  headerBuf  =  buffer.readRecord();  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
93	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  headerBuf  =  buffer.readRecord();  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  if(headerBuf  ==  null)  {  headerBuf  =  buffer.readRecord();  }  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	if(headerBuf  ==  null)  {  headerBuf  =  buffer.readRecord();  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
94	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  headerBuf  =  buffer.readRecord();  if(headerBuf  ==  null)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  if(headerBuf  ==  null)  {  headerBuf  =  buffer.readRecord();  if(headerBuf  ==  null)  {  hasHitEOF  =  true;  }  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	if(headerBuf  ==  null)  {  headerBuf  =  buffer.readRecord();  if(headerBuf  ==  null)  {  hasHitEOF  =  true;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
95	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  headerBuf  =  buffer.readRecord();  if(headerBuf  ==  null)  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  if(headerBuf  ==  null)  {  headerBuf  =  buffer.readRecord();  if(headerBuf  ==  null)  {  hasHitEOF  =  false;  }  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	if(headerBuf  ==  null)  {  headerBuf  =  buffer.readRecord();  if(headerBuf  ==  null)  {  hasHitEOF  =  false;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
96	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  headerBuf  =  buffer.readRecord();  if(headerBuf!=  null)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  if(headerBuf  ==  null)  {  headerBuf  =  buffer.readRecord();  if(headerBuf!=  null)  {  hasHitEOF  =  true;  }  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	if(headerBuf  ==  null)  {  headerBuf  =  buffer.readRecord();  if(headerBuf!=  null)  {  hasHitEOF  =  true;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
97	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  ||  headerBuf.isEOF())  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  ||  headerBuf.isEOF())  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  ||  headerBuf.isEOF())  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
98	[BUG]  [BUGGY]  }  else  if(buffer.shouldRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(buffer.shouldRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.shouldRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
99	[BUG]  [BUGGY]  }  else  if(buffer.record(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(buffer.record(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.record(headerBuf)||  buffer.isEOFRecord(headerBuf))  {	  }    else    if(buffer.isEOFRecord(headerBuf)||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
100	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord()  ||  headerBuf.isEOFRecord(buffer))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(headerBuf.isEOFRecord()  ||  headerBuf.isEOFRecord(buffer))  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord()  ||  headerBuf.isEOFRecord(buffer))  {	  }    else    if(buffer.isEOF()    ||    headerBuf.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
101	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.isEOFRecord(headerBuf))  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.isEOFRecord(headerBuf))  {	  }    else    if(buffer.isEOF()    ||    headerBuf.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
102	[BUG]  [BUGGY]  }  else  if(buffer.isEOF()  ||  headerBuf.isEOFRecord(bodyerBuf))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(buffer.isEOF()  ||  headerBuf.isEOFRecord(bodyerBuf))  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF()  ||  headerBuf.isEOFRecord(bodyerBuf))  {	  }    else    if(buffer.isEOF()    ||    headerBuf.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
103	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0  ||  headerBuf.length  >  0)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0  ||  headerBuf.length  >  0)  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0  ||  headerBuf.length  >  0)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    headerBuf.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
104	[BUG]  [BUGGY]  }  else  if(buffer.hasEOF()  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(buffer.hasEOF()  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.hasEOF()  ||  buffer.isEOFRecord(headerBuf))  {	  }    else    if(buffer.isEOF()    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
105	[BUG]  [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf,  headerBuf))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(!buffer.isEOFRecord(headerBuf,  headerBuf))  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOFRecord(headerBuf,  headerBuf))  {	  }    else    if(!buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
106	[BUG]  [BUGGY]  }  else  if(buffer.isEOF()  ||  headerBuf.equals(headerBuf))  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(buffer.isEOF()  ||  headerBuf.equals(headerBuf))  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF()  ||  headerBuf.equals(headerBuf))  {	  }    else    if(buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
107	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)||  buffer.isEOF(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)||  buffer.isEOF(headerBuf))  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)||  buffer.isEOF(headerBuf))  {	  }    else    if(!buffer.isEOF(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
108	[BUG]  [BUGGY]  }  else  if(buffer.isEOF(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(buffer.isEOF(headerBuf))  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOF(headerBuf))  {	  }    else    if(!buffer.isEOF(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
109	[BUG]  [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  isEOF())  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(!buffer.isEOF(headerBuf)&&  isEOF())  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(!buffer.isEOF(headerBuf)&&  isEOF())  {	  }    else    if(!buffer.isEOF(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
110	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)/&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf)/&  hasHitEOF)  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(buffer.isEOFRecord(headerBuf)/&  hasHitEOF)  {	  }    else    if(buffer.isEOFRecord(headerBuf)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
111	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  0,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  System.arraycopy(buffer,  0,  buf,  0,  headerBuf.length);  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	System.arraycopy(buffer,  0,  buf,  0,  headerBuf.length);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
112	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer.readRecord();  }  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer.readRecord();  }  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  buffer.readRecord();  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
113	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  headerBuf[i]  =  buffer.readRecord();  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  headerBuf[i]  =  buffer.readRecord();  }  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	if(headerBuf  ==  null)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  headerBuf[i]  =  buffer.readRecord();  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
114	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.isEOFRecord(buffer))  {  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.isEOFRecord(buffer))  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer)||  headerBuf.isEOFRecord(buffer))  {	  }    else    if(headerBuf.isEOFRecord(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
115	[BUG]  [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer,  headerBuf.length))  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;    [BUGGY]  }  else  if(headerBuf.isEOFRecord(buffer,  headerBuf.length))  {  [BUGGY]    hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	261	261	1	replace	}  else  if(headerBuf.isEOFRecord(buffer,  headerBuf.length))  {	  }    else    if(headerBuf.isEOFRecord(buffer))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
