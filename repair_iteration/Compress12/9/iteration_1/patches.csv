bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry();  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry();  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =  getNextTarEntry();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
2	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
3	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  this.getNextTarEntry();  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  TarArchiveEntry  currEntry  =  this.getNextTarEntry();  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =  this.getNextTarEntry();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
4	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(null);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(null);  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =  getNextTarEntry(null);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
5	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.currEntry.getValue();  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.currEntry.getValue();  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)this.currEntry.getValue();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
6	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextTarEntry();  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextTarEntry();  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	final  TarArchiveEntry  currEntry  =  getNextTarEntry();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
7	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)super.getNextTarEntry();  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)super.getNextTarEntry();  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)super.getNextTarEntry();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
8	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
9	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES))  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
10	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
11	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  hasHitEOF))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  hasHitEOF))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  hasHitEOF))  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
12	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
13	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
14	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {	  if(!hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
15	[BUG]  [BUGGY]  if(!hasHitEOF  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(!hasHitEOF  &&  hasHitEOF)  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  hasHitEOF)  {	  if(!hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
16	[BUG]  [BUGGY]  if(!hasHitEOF  &&  hasNextTarEntry)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(!hasHitEOF  &&  hasNextTarEntry)  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  hasNextTarEntry)  {	  if(!hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
17	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_PREFIX))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_PREFIX))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_PREFIX))  {	  if(!hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
18	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ERROR))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ERROR))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ERROR))  {	  if(!hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
19	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY))  {	  if(!hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
20	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY_NAME))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY_NAME))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY_NAME))  {	  if(!hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
21	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(currEntry  ==  null  ||  hasHitEOF)  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(currEntry  ==  null  ||  hasHitEOF)  {	  if(hasHitEOF    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
22	[BUG]  [BUGGY]  if(HitEOF  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(HitEOF  ||  hasHitEOF)  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(HitEOF  ||  hasHitEOF)  {	  if(hasHitEOF    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
23	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(getNextTarEntry()  ==  null  ||  hasHitEOF)  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  hasHitEOF)  {	  if(hasHitEOF    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
24	[BUG]  [BUGGY]  if(!hasHitEOF  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(!hasHitEOF  ||  hasHitEOF)  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  ||  hasHitEOF)  {	  if(hasHitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
25	[BUG]  [BUGGY]  if(hashEOF  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(hashEOF  ||  hasHitEOF)  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hashEOF  ||  hasHitEOF)  {	  if(hasHitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
26	[BUG]  [BUGGY]  if(hasNextTarEntry  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(hasNextTarEntry  ||  hasHitEOF)  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasNextTarEntry  ||  hasHitEOF)  {	  if(hasHitEOF    ||    hasNextTarEntry)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
27	[BUG]  [BUGGY]  if(hasHitEOF  &&  hasNextTarEntry)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(hasHitEOF  &&  hasNextTarEntry)  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  hasNextTarEntry)  {	  if(hasHitEOF    ||    hasNextTarEntry)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
28	[BUG]  [BUGGY]  if(!hasHitEOF  ||  hasNextTarEntry)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(!hasHitEOF  ||  hasNextTarEntry)  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  ||  hasNextTarEntry)  {	  if(hasHitEOF    ||    hasNextTarEntry)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
29	[BUG]  [BUGGY]  if(getNextTarEntry()  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(getNextTarEntry()  ||  hasHitEOF)  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ||  hasHitEOF)  {	  if(hasHitEOF    ||    hasNextTarEntry)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
30	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  hasNextTarEntry)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(currEntry  ==  null  ||  hasNextTarEntry)  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(currEntry  ==  null  ||  hasNextTarEntry)  {	  if(hasHitEOF    ||    hasNextTarEntry)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
31	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_TARGET))  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_TARGET))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(Feature.QUOTE_TARGET))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
32	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_TARGET))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_TARGET))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_TARGET))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
33	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_TARGET)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(isEnabled(Feature.QUOTE_TARGET)||  hasHitEOF)  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_TARGET)||  hasHitEOF)  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
34	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_TARGET)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_TARGET)||  hasHitEOF)  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  isEnabled(Feature.QUOTE_TARGET)||  hasHitEOF)  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
35	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_TARGET))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(getNextTarEntry()  ==  null  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_TARGET))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_TARGET))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
36	[BUG]  [BUGGY]  if(HitEOF  &&  isEnabled(Feature.QUOTE_TARGET))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(HitEOF  &&  isEnabled(Feature.QUOTE_TARGET))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(HitEOF  &&  isEnabled(Feature.QUOTE_TARGET))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
37	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.HARD_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.HARD_BUFFER_SIZE))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.HARD_BUFFER_SIZE))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
38	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
39	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
40	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  hasHitEOF)  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  hasHitEOF)  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
41	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  hasHitEOF)  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  hasHitEOF)  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
42	[BUG]  [BUGGY]  if(HitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(HitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(HitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
43	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
44	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
45	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
46	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
47	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
48	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
49	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(getNextTarEntry()  ==  null  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
50	[BUG]  [BUGGY]  if(HitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(HitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(HitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
51	[BUG]  [BUGGY]  if(getHitEOF()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(getHitEOF()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getHitEOF()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
52	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextTarEntry()!=  null)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextTarEntry()!=  null)  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  getNextTarEntry()!=  null)  {	  if(getNextTarEntry()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
53	[BUG]  [BUGGY]  if(currEntry  ==  null)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(currEntry  ==  null)  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(currEntry  ==  null)  {	  if(getNextTarEntry()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
54	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextTarEntry().getName()!=  null)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextTarEntry().getName()!=  null)  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  getNextTarEntry().getName()!=  null)  {	  if(getNextTarEntry()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
55	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextTarEntry().getParent()!=  null)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextTarEntry().getParent()!=  null)  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  getNextTarEntry().getParent()!=  null)  {	  if(getNextTarEntry()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
56	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextTarEntry()  ==  null)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextTarEntry()  ==  null)  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  getNextTarEntry()  ==  null)  {	  if(getNextTarEntry()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
57	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextSize()  ==  entryOffset)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextSize()  ==  entryOffset)  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  getNextSize()  ==  entryOffset)  {	  if(getNextTarEntry()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
58	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
59	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(getNextTarEntry()  ==  null  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
60	[BUG]  [BUGGY]  if(HitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(HitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(HitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
61	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
62	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_NON_NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
63	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_NON_NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
64	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NULL_VALUE)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NULL_VALUE)||  hasHitEOF)  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_NON_NULL_VALUE)||  hasHitEOF)  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_NON_NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
65	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(getNextTarEntry()  ==  null  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_NON_NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
66	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE)||  hasHitEOF)  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE)||  hasHitEOF)  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_NON_NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
67	[BUG]  [BUGGY]  if(HitEOF  &&  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(HitEOF  &&  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(HitEOF  &&  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_NON_NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
68	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {	  if(hasHitEOF    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
69	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {	  if(hasHitEOF    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
70	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(getNextTarEntry()  ==  null  ||  hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {	  if(hasHitEOF    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
71	[BUG]  [BUGGY]  if(getNextTarEntry()  ||  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(getNextTarEntry()  ||  isEnabled(TarArchiveEntry.class))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ||  isEnabled(TarArchiveEntry.class))  {	  if(hasHitEOF    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
72	[BUG]  [BUGGY]  if(getNextTarEntry().hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(getNextTarEntry().hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry().hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {	  if(hasHitEOF    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
73	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {	  if(hasHitEOF    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
74	[BUG]  [BUGGY]  if(HitEOF  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(HitEOF  &&  hasHitEOF)  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(HitEOF  &&  hasHitEOF)  {	  if(hasHitEOF    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
75	[BUG]  [BUGGY]  if(!hasHitEOF  &&  getNextTarEntry())  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(!hasHitEOF  &&  getNextTarEntry())  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  getNextTarEntry())  {	  if(hasHitEOF    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
76	[BUG]  [BUGGY]  if(!hasHitEOF  &&  getNextTarEntry()!=  null)  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(!hasHitEOF  &&  getNextTarEntry()!=  null)  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  getNextTarEntry()!=  null)  {	  if(!hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
77	[BUG]  [BUGGY]  if(!hasHitEOF  &&  getNextTarEntry()  ==  null)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(!hasHitEOF  &&  getNextTarEntry()  ==  null)  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  getNextTarEntry()  ==  null)  {	  if(!hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
78	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARNING_ERROR))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARNING_ERROR))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARNING_ERROR))  {	  if(!hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
79	[BUG]  [BUGGY]  if(getHitEOF()  ||  isEnabled(Feature.QUOTE_TARGET))  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(getHitEOF()  ||  isEnabled(Feature.QUOTE_TARGET))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getHitEOF()  ||  isEnabled(Feature.QUOTE_TARGET))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
80	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.SHORT_TARGET))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.SHORT_TARGET))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.SHORT_TARGET))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
81	[BUG]  [BUGGY]  if(getHitEOF()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(getHitEOF()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getHitEOF()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
82	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.SHORT_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.SHORT_BUFFER_SIZE))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.SHORT_BUFFER_SIZE))  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
83	[BUG]  [BUGGY]  if(!hasNextTarEntry  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(!hasNextTarEntry  ||  hasHitEOF)  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasNextTarEntry  ||  hasHitEOF)  {	  if(hasHitEOF    ||    hasNextTarEntry)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
84	[BUG]  [BUGGY]  if(hasNextEntry  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(hasNextEntry  ||  hasHitEOF)  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasNextEntry  ||  hasHitEOF)  {	  if(hasHitEOF    ||    hasNextTarEntry)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
85	[BUG]  [BUGGY]  if(getHitEOF()  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(getHitEOF()  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getHitEOF()  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
86	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
87	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
88	[BUG]  [BUGGY]  if(getHitEOF()  ||  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(getHitEOF()  ||  isEnabled(TarArchiveEntry.class))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getHitEOF()  ||  isEnabled(TarArchiveEntry.class))  {	  if(hasHitEOF    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
89	[BUG]  [BUGGY]  if(HitEOF  &&  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(HitEOF  &&  isEnabled(TarArchiveEntry.class))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(HitEOF  &&  isEnabled(TarArchiveEntry.class))  {	  if(hasHitEOF    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
90	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(isEnabled(TarArchiveEntry.class))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(TarArchiveEntry.class))  {	  if(hasHitEOF    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
91	[BUG]  [BUGGY]  TarEntry  currEntry  =  getNextTarEntry();  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  TarEntry  currEntry  =  getNextTarEntry();  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarEntry  currEntry  =  getNextTarEntry();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
92	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.clone();  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.clone();  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.clone();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
93	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_NON_NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
94	[BUG]  [BUGGY]  if(getHitEOF()  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(getHitEOF()  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getHitEOF()  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_NON_NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
95	[BUG]  [BUGGY]  if(this.getNextTarEntry()  ==  null)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(this.getNextTarEntry()  ==  null)  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(this.getNextTarEntry()  ==  null)  {	  if(getNextTarEntry()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
96	[BUG]  [BUGGY]  if(getNextEntry()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(getNextEntry()  ==  null)  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextEntry()  ==  null)  {	  if(getNextTarEntry()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
97	[BUG]  [BUGGY]  if(getNextTarEntry()!=  null  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(getNextTarEntry()!=  null  ||  hasHitEOF)  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()!=  null  ||  hasHitEOF)  {	  if(getNextTarEntry()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
98	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  isNewTarEntry())  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(getNextTarEntry()  ==  null  ||  isNewTarEntry())  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  isNewTarEntry())  {	  if(getNextTarEntry()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
99	[BUG]  [BUGGY]  if(this.hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(this.hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(this.hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
100	[BUG]  [BUGGY]  if(HitEOF  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(HitEOF  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  hasHitEOF)  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(HitEOF  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  hasHitEOF)  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
101	[BUG]  [BUGGY]  if(getNextTarEntry()!=  null  ||  getNextTarEntry()  ==  null)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(getNextTarEntry()!=  null  ||  getNextTarEntry()  ==  null)  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()!=  null  ||  getNextTarEntry()  ==  null)  {	  if(getNextTarEntry()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
102	[BUG]  [BUGGY]  if(this.getNextTarEntry()!=  null)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(this.getNextTarEntry()!=  null)  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(this.getNextTarEntry()!=  null)  {	  if(getNextTarEntry()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
103	[BUG]  [BUGGY]  if(hasHitEOF  ||  hasNextEntry)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(hasHitEOF  ||  hasNextEntry)  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  hasNextEntry)  {	  if(hasHitEOF    ||    hasNextTarEntry)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
104	[BUG]  [BUGGY]  if(hasHitEOF  ||  hasNextEntry  ||  entryOffset  >  entrySize)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(hasHitEOF  ||  hasNextEntry  ||  entryOffset  >  entrySize)  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  hasNextEntry  ||  entryOffset  >  entrySize)  {	  if(hasHitEOF    ||    hasNextTarEntry)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
105	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAME))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAME))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
106	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.BUFFER_SIZE))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.BUFFER_SIZE))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
107	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEOF)  {  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(hasHitEOF  ||  isEOF)  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  isEOF)  {	  if(hasHitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
108	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_ENTRY_SIZE))  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_ENTRY_SIZE))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_ENTRY_SIZE))  {	  if(!hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
109	[BUG]  [BUGGY]  if(!hasHitEOF  &&  currEntry  ==  null)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(!hasHitEOF  &&  currEntry  ==  null)  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  currEntry  ==  null)  {	  if(!hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
110	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.BUFFER_SIZE))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.BUFFER_SIZE))  {	  if(!hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
111	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.BUFFER_SIZE))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.BUFFER_SIZE))  {	  if(!hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
112	[BUG]  [BUGGY]  this.currEntry  =  getNextTarEntry();  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  this.currEntry  =  getNextTarEntry();  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	this.currEntry  =  getNextTarEntry();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
113	[BUG]  [BUGGY]  if(entryOffset  <  0)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(entryOffset  <  0)  {  throw  new  RuntimeException( " ");  }  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(entryOffset  <  0)  {  throw  new  RuntimeException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
114	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)getObject();  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)getObject();  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)getObject();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
115	[BUG]  [BUGGY]  if(!hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(!hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {	  if(hasHitEOF    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
116	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARN_ENTRY))  {  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARN_ENTRY))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARN_ENTRY))  {	  if(hasHitEOF    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
117	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.BUFFER_SIZE))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.BUFFER_SIZE))  {	  if(hasHitEOF    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
118	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEmptyTarEntry())  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(hasHitEOF  &&  isEmptyTarEntry())  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEmptyTarEntry())  {	  if(hasHitEOF    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
119	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
120	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_NON_NULL_VALUE))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_NON_NULL_VALUE))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_NON_NULL_VALUE))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_NON_NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
121	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.START_TARGET_NAMES))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.START_TARGET_NAMES))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.START_TARGET_NAMES))  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
122	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.NUMBER_INT_RANGE))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.NUMBER_INT_RANGE))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.NUMBER_INT_RANGE))  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
123	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_TARGET))  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_TARGET))  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_TARGET))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
124	[BUG]  [BUGGY]  if(HitEOF  ||  isEnabled(Feature.QUOTE_TARGET)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(HitEOF  ||  isEnabled(Feature.QUOTE_TARGET)||  hasHitEOF)  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(HitEOF  ||  isEnabled(Feature.QUOTE_TARGET)||  hasHitEOF)  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
125	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  entryOffset  <  0)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(getNextTarEntry()  ==  null  ||  entryOffset  <  0)  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  entryOffset  <  0)  {	  if(getNextTarEntry()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
126	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextSize()  <  entryOffset)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {    [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextSize()  <  entryOffset)  {  [BUGGY]    return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(   "failed  to  skip  current  tar  entry   ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  getNextSize()  <  entryOffset)  {	  if(getNextTarEntry()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
