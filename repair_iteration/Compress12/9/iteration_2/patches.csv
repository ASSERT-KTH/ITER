bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(entryOffset  ==  0)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(entryOffset  ==  0)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(entryOffset  ==  0)  {	  if(currEntry    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
2	[BUG]  [BUGGY]  if(entryOffset  ==  entrySize)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(entryOffset  ==  entrySize)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(entryOffset  ==  entrySize)  {	  if(currEntry    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
3	[BUG]  [BUGGY]  if(entryOffset  ==  null)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(entryOffset  ==  null)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(entryOffset  ==  null)  {	  if(currEntry    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
4	[BUG]  [BUGGY]  if(entry  ==  null)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(entry  ==  null)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(entry  ==  null)  {	  if(currEntry    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
5	[BUG]  [BUGGY]  if(entry!=  null)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(entry!=  null)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(entry!=  null)  {	  if(currEntry    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
6	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.START_TARGET_NAMES)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.START_TARGET_NAMES)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.START_TARGET_NAMES)||  hasHitEOF)  {	  if(hasHitEOF    &&    isEnabled(TarArchiveEntry.START_TARGET_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
7	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.START_TARGET_NAMES))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.START_TARGET_NAMES))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.START_TARGET_NAMES))  {	  if(hasHitEOF    &&    isEnabled(TarArchiveEntry.START_TARGET_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
8	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.START_TARGET_NAMES)||  isEnabled(TarArchiveEntry.START_TARGET_NAMES))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.START_TARGET_NAMES)||  isEnabled(TarArchiveEntry.START_TARGET_NAMES))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.START_TARGET_NAMES)||  isEnabled(TarArchiveEntry.START_TARGET_NAMES))  {	  if(hasHitEOF    &&    isEnabled(TarArchiveEntry.START_TARGET_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
9	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.START_TARGET_NAMES)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.START_TARGET_NAMES)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(TarArchiveEntry.START_TARGET_NAMES)||  hasHitEOF)  {	  if(hasHitEOF    &&    isEnabled(TarArchiveEntry.START_TARGET_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
10	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.START_TARGET_NAMES  ||  hasHitEOF))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.START_TARGET_NAMES  ||  hasHitEOF))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.START_TARGET_NAMES  ||  hasHitEOF))  {	  if(hasHitEOF    &&    isEnabled(TarArchiveEntry.START_TARGET_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
11	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.START_TARGET_NAMES))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.START_TARGET_NAMES))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  isEnabled(TarArchiveEntry.START_TARGET_NAMES))  {	  if(hasHitEOF    &&    isEnabled(TarArchiveEntry.START_TARGET_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
12	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.START_TARGET_NAMES,  true))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.START_TARGET_NAMES,  true))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.START_TARGET_NAMES,  true))  {	  if(hasHitEOF    &&    isEnabled(TarArchiveEntry.START_TARGET_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
13	[BUG]  [BUGGY]  if(entry  ==  null  ||  hasNextTarEntry)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  hasNextTarEntry)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(entry  ==  null  ||  hasNextTarEntry)  {	  if(currEntry    ==    null    ||    hasNextTarEntry)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
14	[BUG]  [BUGGY]  if(entry!=  null  ||  hasNextTarEntry)  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  hasNextTarEntry)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(entry!=  null  ||  hasNextTarEntry)  {	  if(currEntry    ==    null    ||    hasNextTarEntry)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
15	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  hasNextTarEntry)  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  hasNextTarEntry)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  hasNextTarEntry)  {	  if(currEntry    ==    null    ||    hasNextTarEntry)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
16	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  hasNextTarEntry())  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(currEntry  ==  null  ||  hasNextTarEntry())  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(currEntry  ==  null  ||  hasNextTarEntry())  {	  if(currEntry    ==    null    ||    hasNextTarEntry)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
17	[BUG]  [BUGGY]  if(entryOffset  ==  0  ||  hasNextTarEntry)  {  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(entryOffset  ==  0  ||  hasNextTarEntry)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(entryOffset  ==  0  ||  hasNextTarEntry)  {	  if(currEntry    ==    null    ||    hasNextTarEntry)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
18	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.hasNextTarEntry())  {  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(currEntry  ==  null  ||  currEntry.hasNextTarEntry())  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(currEntry  ==  null  ||  currEntry.hasNextTarEntry())  {	  if(currEntry    ==    null    ||    hasNextTarEntry)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
19	[BUG]  [BUGGY]  if(hasHitEOF  &&  getNextTarEntry()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  getNextTarEntry()  ==  null)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  getNextTarEntry()  ==  null)  {	  if(!hasHitEOF    &&    getNextTarEntry()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
20	[BUG]  [BUGGY]  if(!hasHitEOF  ||  getNextTarEntry()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  ||  getNextTarEntry()  ==  null)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  ||  getNextTarEntry()  ==  null)  {	  if(!hasHitEOF    &&    getNextTarEntry()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
21	[BUG]  [BUGGY]  if(hasHitEOF  &&  getNextTarEntry()!=  null)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  getNextTarEntry()!=  null)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  getNextTarEntry()!=  null)  {	  if(!hasHitEOF    &&    getNextTarEntry()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
22	[BUG]  [BUGGY]  if(hasHitEOF  ||  getNextTarEntry()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  getNextTarEntry()  ==  null)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  getNextTarEntry()  ==  null)  {	  if(!hasHitEOF    &&    getNextTarEntry()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
23	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
24	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
25	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  hasHitEOF)  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
26	[BUG]  [BUGGY]  if(HitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(HitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(HitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
27	[BUG]  [BUGGY]  if(hashEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hashEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hashEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
28	[BUG]  [BUGGY]  if(getHitEOF()  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getHitEOF()  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getHitEOF()  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE)||  hasHitEOF)  {	  if(getHitEOF()    ||    isEnabled(Feature.QUOTE_NON_NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
29	[BUG]  [BUGGY]  if(getHitEOF()  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getHitEOF()  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getHitEOF()  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE)&&  hasHitEOF)  {	  if(getHitEOF()    ||    isEnabled(Feature.QUOTE_NON_NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
30	[BUG]  [BUGGY]  if(getHitEOF()  >  0  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getHitEOF()  >  0  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getHitEOF()  >  0  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {	  if(getHitEOF()    ||    isEnabled(Feature.QUOTE_NON_NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
31	[BUG]  [BUGGY]  if(getHitEOF()  ||  isEnabled(TarArchiveEntry.QUOTE_NON_NULL_VALUE))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getHitEOF()  ||  isEnabled(TarArchiveEntry.QUOTE_NON_NULL_VALUE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getHitEOF()  ||  isEnabled(TarArchiveEntry.QUOTE_NON_NULL_VALUE))  {	  if(getHitEOF()    ||    isEnabled(Feature.QUOTE_NON_NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
32	[BUG]  [BUGGY]  if(!hasHitEOF  &&  currEntry!=  null)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  currEntry!=  null)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  currEntry!=  null)  {	  if(!hasHitEOF    &&    currEntry    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
33	[BUG]  [BUGGY]  if(hasHitEOF  &&  currEntry  ==  null)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  currEntry  ==  null)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  currEntry  ==  null)  {	  if(!hasHitEOF    &&    currEntry    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
34	[BUG]  [BUGGY]  if(!hasHitEOF  ||  currEntry  ==  null)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  ||  currEntry  ==  null)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  ||  currEntry  ==  null)  {	  if(!hasHitEOF    &&    currEntry    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
35	[BUG]  [BUGGY]  if(hasHitEOF  &&  currEntry!=  null)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  currEntry!=  null)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  currEntry!=  null)  {	  if(!hasHitEOF    &&    currEntry    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
36	[BUG]  [BUGGY]  if(hasHitEOF  ||  currEntry  ==  null)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  currEntry  ==  null)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  currEntry  ==  null)  {	  if(!hasHitEOF    &&    currEntry    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
37	[BUG]  [BUGGY]  if(!hasHitEOF  &&  currEntry  >=  null)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  currEntry  >=  null)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  currEntry  >=  null)  {	  if(!hasHitEOF    &&    currEntry    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
38	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentTarEntry();  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentTarEntry();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =  getCurrentTarEntry();	  TarArchiveEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
39	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(entryOffset);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(entryOffset);  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =  getNextTarEntry(entryOffset);	  TarArchiveEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
40	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextFileEntry();  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextFileEntry();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =  getNextFileEntry();	  TarArchiveEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
41	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(entry);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(entry);  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =  getNextTarEntry(entry);	  TarArchiveEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
42	[BUG]  [BUGGY]  if(getHitEOF()  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getHitEOF()  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getHitEOF()  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  hasHitEOF)  {	  if(getHitEOF()    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
43	[BUG]  [BUGGY]  if(getHitEOF()  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_FUNCTIONS))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getHitEOF()  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_FUNCTIONS))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getHitEOF()  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_FUNCTIONS))  {	  if(getHitEOF()    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
44	[BUG]  [BUGGY]  if(getHitEOF()  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getHitEOF()  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getHitEOF()  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)&&  hasHitEOF)  {	  if(getHitEOF()    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
45	[BUG]  [BUGGY]  if(getHitEOF()  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_FUNCTION))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getHitEOF()  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_FUNCTION))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getHitEOF()  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_FUNCTION))  {	  if(getHitEOF()    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
46	[BUG]  [BUGGY]  if(getHitEOF()  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getHitEOF()  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getHitEOF()  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {	  if(getHitEOF()    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
47	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextSize()  >  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextSize()  >  entryOffset)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  getNextSize()  >  entryOffset)  {	  if(getNextTarEntry()    ==    null    ||    getNextSize()    <    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
48	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextSize()  >=  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextSize()  >=  entryOffset)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  getNextSize()  >=  entryOffset)  {	  if(getNextTarEntry()    ==    null    ||    getNextSize()    <    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
49	[BUG]  [BUGGY]  if(getNextTarEntry()!=  null  ||  getNextSize()  <  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()!=  null  ||  getNextSize()  <  entryOffset)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()!=  null  ||  getNextSize()  <  entryOffset)  {	  if(getNextTarEntry()    ==    null    ||    getNextSize()    <    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
50	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextSize()  <  entryOffset  +  1)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextSize()  <  entryOffset  +  1)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  getNextSize()  <  entryOffset  +  1)  {	  if(getNextTarEntry()    ==    null    ||    getNextSize()    <    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
51	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextSize()!=  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextSize()!=  entryOffset)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  getNextSize()!=  entryOffset)  {	  if(getNextTarEntry()    ==    null    ||    getNextSize()    <    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
52	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  getNextSize()  <  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(currEntry  ==  null  ||  getNextSize()  <  entryOffset)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(currEntry  ==  null  ||  getNextSize()  <  entryOffset)  {	  if(getNextTarEntry()    ==    null    ||    getNextSize()    <    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
53	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  entrySize  <  0)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  entrySize  <  0)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  entrySize  <  0)  {	  if(getNextTarEntry()    ==    null    ||    entryOffset    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
54	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  entryOffset  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  entryOffset  <  =  0)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  entryOffset  <  =  0)  {	  if(getNextTarEntry()    ==    null    ||    entryOffset    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
55	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  entryOffset!=  0)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  entryOffset!=  0)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  entryOffset!=  0)  {	  if(getNextTarEntry()    ==    null    ||    entryOffset    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
56	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  entryOffset  >=  0)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  entryOffset  >=  0)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  entryOffset  >=  0)  {	  if(getNextTarEntry()    ==    null    ||    entryOffset    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
57	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  entryOffset  ==  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  entryOffset  ==  0)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  entryOffset  ==  0)  {	  if(getNextTarEntry()    ==    null    ||    entryOffset    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
58	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  entrySize  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  entrySize  <  =  0)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  entrySize  <  =  0)  {	  if(getNextTarEntry()    ==    null    ||    entryOffset    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
59	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.SHORT_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.SHORT_BUFFER_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.SHORT_BUFFER_SIZE))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
60	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.SIZE_SMALL_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.SIZE_SMALL_BUFFER_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.SIZE_SMALL_BUFFER_SIZE))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
61	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.BUFFER_SIZE)||  isEnabled(TarBuffer.BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.BUFFER_SIZE)||  isEnabled(TarBuffer.BUFFER_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.BUFFER_SIZE)||  isEnabled(TarBuffer.BUFFER_SIZE))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
62	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.BUFFER_SIZE)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.BUFFER_SIZE)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.BUFFER_SIZE)||  hasHitEOF)  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
63	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.BUFFER_SIZE  +  1))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.BUFFER_SIZE  +  1))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.BUFFER_SIZE  +  1))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
64	[BUG]  [BUGGY]  if(entryOffset  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(entryOffset  ||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(entryOffset  ||  hasHitEOF)  {	  if(HitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
65	[BUG]  [BUGGY]  if(HitEOF  ||  hasHitEOF  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(HitEOF  ||  hasHitEOF  ||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(HitEOF  ||  hasHitEOF  ||  hasHitEOF)  {	  if(HitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
66	[BUG]  [BUGGY]  if(!hasHitEOF  &&  hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {	  if(!hasHitEOF    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
67	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEmptyTarEntry())  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEmptyTarEntry())  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEmptyTarEntry())  {	  if(!hasHitEOF    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
68	[BUG]  [BUGGY]  this.currEntry  =  getNextArchiveEntry();  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  this.currEntry  =  getNextArchiveEntry();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	this.currEntry  =  getNextArchiveEntry();	  this.currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
69	[BUG]  [BUGGY]  this.currEntry  =  getNextTarEntry(null);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  this.currEntry  =  getNextTarEntry(null);  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	this.currEntry  =  getNextTarEntry(null);	  this.currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
70	[BUG]  [BUGGY]  this.currEntry  =  new  TarArchiveEntry(getNextTarEntry());  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  this.currEntry  =  new  TarArchiveEntry(getNextTarEntry());  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	this.currEntry  =  new  TarArchiveEntry(getNextTarEntry());	  this.currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
71	[BUG]  [BUGGY]  this.currEntry  =(TarArchiveEntry)getNextTarEntry();  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  this.currEntry  =(TarArchiveEntry)getNextTarEntry();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	this.currEntry  =(TarArchiveEntry)getNextTarEntry();	  this.currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
72	[BUG]  [BUGGY]  this.currEntry  =  getNextTarEntry(0,  0);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  this.currEntry  =  getNextTarEntry(0,  0);  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	this.currEntry  =  getNextTarEntry(0,  0);	  this.currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
73	[BUG]  [BUGGY]  this.currEntry  =(TarArchiveEntry)getNextSize();  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  this.currEntry  =(TarArchiveEntry)getNextSize();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	this.currEntry  =(TarArchiveEntry)getNextSize();	  this.currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
74	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  hasHitEOF)  {	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
75	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_NON_NUMERIC_NUMBERS))  {	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
76	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
77	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS  ||  hasHitEOF))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS  ||  hasHitEOF))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS  ||  hasHitEOF))  {	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
78	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  hasHitEOF)  {	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
79	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.getNextTarEntry();  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.getNextTarEntry();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)this.getNextTarEntry();	  TarArchiveEntry    currEntry    =    this.getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
80	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  new  TarArchiveEntry(this.getNextTarEntry());  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =  new  TarArchiveEntry(this.getNextTarEntry());  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =  new  TarArchiveEntry(this.getNextTarEntry());	  TarArchiveEntry    currEntry    =    this.getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
81	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  this.getNextTarEntry(null);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =  this.getNextTarEntry(null);  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =  this.getNextTarEntry(null);	  TarArchiveEntry    currEntry    =    this.getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
82	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  this.getNextTarEntry(entry);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =  this.getNextTarEntry(entry);  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =  this.getNextTarEntry(entry);	  TarArchiveEntry    currEntry    =    this.getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
83	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  super.getNextTarEntry();  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =  super.getNextTarEntry();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =  super.getNextTarEntry();	  TarArchiveEntry    currEntry    =    this.getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
84	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARNING_ERROR,  true))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARNING_ERROR,  true))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARNING_ERROR,  true))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TARNING_ERROR))    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
85	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARNING_ERROR,  Long.MAX_VALUE))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARNING_ERROR,  Long.MAX_VALUE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARNING_ERROR,  Long.MAX_VALUE))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TARNING_ERROR))    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
86	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARNING_ERROR,  null))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARNING_ERROR,  null))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARNING_ERROR,  null))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TARNING_ERROR))    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
87	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARNING_ERROR,  longName))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARNING_ERROR,  longName))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARNING_ERROR,  longName))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TARNING_ERROR))    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
88	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARNING_ERROR,  false))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARNING_ERROR,  false))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARNING_ERROR,  false))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TARNING_ERROR))    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
89	[BUG]  [BUGGY]  if(isEnabled(TarBuffer.DEFAULT_TARNING_ERROR))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(TarBuffer.DEFAULT_TARNING_ERROR))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(TarBuffer.DEFAULT_TARNING_ERROR))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TARNING_ERROR))    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
90	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
91	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
92	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH)||  hasHitEOF)  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
93	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH)||  hasHitEOF)  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
94	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH)||  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH)||  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH)||  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
95	[BUG]  [BUGGY]  if(HitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(HitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(HitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
96	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH)||  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH)||  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH)||  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
97	[BUG]  [BUGGY]  if(!hasHitEOF  &&  getNextTarEntry()  instanceof  TarArchiveEntry)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  getNextTarEntry()  instanceof  TarArchiveEntry)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  getNextTarEntry()  instanceof  TarArchiveEntry)  {	  if(!hasHitEOF    &&    getNextTarEntry())    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
98	[BUG]  [BUGGY]  if(!hasHitEOF  &&  getNextTarEntry().length  >  0)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  getNextTarEntry().length  >  0)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  getNextTarEntry().length  >  0)  {	  if(!hasHitEOF    &&    getNextTarEntry())    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
99	[BUG]  [BUGGY]  if(hasHitEOF  &&  getNextTarEntry())  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  getNextTarEntry())  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  getNextTarEntry())  {	  if(!hasHitEOF    &&    getNextTarEntry())    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
100	[BUG]  [BUGGY]  if(!hasHitEOF  &&  getNextTarEntry().getName().endsWith( "/ "))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  getNextTarEntry().getName().endsWith( "/ "))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  getNextTarEntry().getName().endsWith( "/ "))  {	  if(!hasHitEOF    &&    getNextTarEntry())    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
101	[BUG]  [BUGGY]  if(!hasHitEOF  &&  getNextTarEntry().getName().endsWith( "Archive "))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  getNextTarEntry().getName().endsWith( "Archive "))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  getNextTarEntry().getName().endsWith( "Archive "))  {	  if(!hasHitEOF    &&    getNextTarEntry())    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
102	[BUG]  [BUGGY]  if(entryOffset  ==  0  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(entryOffset  ==  0  ||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(entryOffset  ==  0  ||  hasHitEOF)  {	  if(currEntry    ==    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
103	[BUG]  [BUGGY]  if(entry  ==  null  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(entry  ==  null  ||  hasHitEOF)  {	  if(currEntry    ==    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
104	[BUG]  [BUGGY]  if(entryOffset  ==  null  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(entryOffset  ==  null  ||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(entryOffset  ==  null  ||  hasHitEOF)  {	  if(currEntry    ==    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
105	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(currEntry  ==  null  ||  currEntry.hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(currEntry  ==  null  ||  currEntry.hasHitEOF)  {	  if(currEntry    ==    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
106	[BUG]  [BUGGY]  if(entry!=  null  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(entry!=  null  ||  hasHitEOF)  {	  if(currEntry    ==    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
107	[BUG]  [BUGGY]  if(currEntry!=  null  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(currEntry!=  null  ||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(currEntry!=  null  ||  hasHitEOF)  {	  if(currEntry    ==    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
108	[BUG]  [BUGGY]  if(!hasNextTarEntry  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasNextTarEntry  &&  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasNextTarEntry  &&  hasHitEOF)  {	  if(!hasNextTarEntry    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
109	[BUG]  [BUGGY]  if(!hasNextTarEntry)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasNextTarEntry)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasNextTarEntry)  {	  if(!hasNextTarEntry    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
110	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_NON_NUMERIC_NUMBERS))  {	  if(HitEOF    &&    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
111	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS  ||  hasHitEOF))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS  ||  hasHitEOF))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS  ||  hasHitEOF))  {	  if(HitEOF    &&    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
112	[BUG]  [BUGGY]  if(HitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(HitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(HitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  hasHitEOF)  {	  if(HitEOF    &&    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
113	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
114	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class)||  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class)||  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class)||  isEnabled(TarArchiveEntry.class))  {	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
115	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class,  true))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class,  true))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class,  true))  {	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
116	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class,  false))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class,  false))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class,  false))  {	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
117	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class)||  isEnabled(TarBuffer.class))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class)||  isEnabled(TarBuffer.class))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class)||  isEnabled(TarBuffer.class))  {	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
118	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.BUFFER_SIZE)||  isEnabled(TarArchiveEntry.SMALL_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.BUFFER_SIZE)||  isEnabled(TarArchiveEntry.SMALL_BUFFER_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.BUFFER_SIZE)||  isEnabled(TarArchiveEntry.SMALL_BUFFER_SIZE))  {	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
119	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.BUFFER_SIZE)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.BUFFER_SIZE)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.BUFFER_SIZE)||  hasHitEOF)  {	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
120	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.SMALL_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.SMALL_BUFFER_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.SMALL_BUFFER_SIZE))  {	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
121	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.BUFFER_SIZE)||  isEnabled(TarArchiveEntry.BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.BUFFER_SIZE)||  isEnabled(TarArchiveEntry.BUFFER_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.BUFFER_SIZE)||  isEnabled(TarArchiveEntry.BUFFER_SIZE))  {	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
122	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.BUFFER_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(TarArchiveEntry.BUFFER_SIZE))  {	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
123	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
124	[BUG]  [BUGGY]  if(HitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(HitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(HitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
125	[BUG]  [BUGGY]  if(hashEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hashEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hashEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
126	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
127	[BUG]  [BUGGY]  if(getNextTarEntry()!=  null  ||  isNewTarEntry())  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()!=  null  ||  isNewTarEntry())  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()!=  null  ||  isNewTarEntry())  {	  if(getNextTarEntry()    ==    null    ||    isNewTarEntry())    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
128	[BUG]  [BUGGY]  if(isNewTarEntry()  ||  getNextTarEntry()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isNewTarEntry()  ||  getNextTarEntry()  ==  null)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isNewTarEntry()  ||  getNextTarEntry()  ==  null)  {	  if(getNextTarEntry()    ==    null    ||    isNewTarEntry())    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
129	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  isNewTarEntry())  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(currEntry  ==  null  ||  isNewTarEntry())  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(currEntry  ==  null  ||  isNewTarEntry())  {	  if(getNextTarEntry()    ==    null    ||    isNewTarEntry())    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
130	[BUG]  [BUGGY]  if(getNextEntry()  ==  null  ||  isNewTarEntry())  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextEntry()  ==  null  ||  isNewTarEntry())  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextEntry()  ==  null  ||  isNewTarEntry())  {	  if(getNextTarEntry()    ==    null    ||    isNewTarEntry())    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
131	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
132	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
133	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
134	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
135	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
136	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
137	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextTarEntry(null);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextTarEntry(null);  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	final  TarArchiveEntry  currEntry  =  getNextTarEntry(null);	  final    TarArchiveEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
138	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  this.getNextTarEntry();  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  final  TarArchiveEntry  currEntry  =  this.getNextTarEntry();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	final  TarArchiveEntry  currEntry  =  this.getNextTarEntry();	  final    TarArchiveEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
139	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextTarEntry().getValue();  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextTarEntry().getValue();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	final  TarArchiveEntry  currEntry  =  getNextTarEntry().getValue();	  final    TarArchiveEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
140	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextTarEntry(entryOffset);  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextTarEntry(entryOffset);  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	final  TarArchiveEntry  currEntry  =  getNextTarEntry(entryOffset);	  final    TarArchiveEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
141	[BUG]  [BUGGY]  if(hashEOF  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hashEOF  &&  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hashEOF  &&  hasHitEOF)  {	  if(HitEOF    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
142	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.BUFFER_SIZE)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.BUFFER_SIZE)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.BUFFER_SIZE)||  hasHitEOF)  {	  if(hasHitEOF    &&    isEnabled(TarArchiveEntry.BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
143	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.BUFFER_SIZE)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.BUFFER_SIZE)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(TarArchiveEntry.BUFFER_SIZE)||  hasHitEOF)  {	  if(hasHitEOF    &&    isEnabled(TarArchiveEntry.BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
144	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.BUFFER_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  isEnabled(TarArchiveEntry.BUFFER_SIZE))  {	  if(hasHitEOF    &&    isEnabled(TarArchiveEntry.BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
145	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.BUFFER_SIZE)||  isEnabled(TarArchiveEntry.SMALL_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.BUFFER_SIZE)||  isEnabled(TarArchiveEntry.SMALL_BUFFER_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.BUFFER_SIZE)||  isEnabled(TarArchiveEntry.SMALL_BUFFER_SIZE))  {	  if(hasHitEOF    &&    isEnabled(TarArchiveEntry.BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
146	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.SMALL_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.SMALL_BUFFER_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.SMALL_BUFFER_SIZE))  {	  if(hasHitEOF    &&    isEnabled(TarArchiveEntry.BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
147	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.class)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.class)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(TarArchiveEntry.class)&&  hasHitEOF)  {	  if(isEnabled(TarArchiveEntry.class)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
148	[BUG]  [BUGGY]  if(!isEnabled(TarArchiveEntry.class)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!isEnabled(TarArchiveEntry.class)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!isEnabled(TarArchiveEntry.class)&&  hasHitEOF)  {	  if(isEnabled(TarArchiveEntry.class)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
149	[BUG]  [BUGGY]  if(!isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {	  if(isEnabled(TarArchiveEntry.class)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
150	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.class)||  hasHitEOF  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.class)||  hasHitEOF  ||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(TarArchiveEntry.class)||  hasHitEOF  ||  hasHitEOF)  {	  if(isEnabled(TarArchiveEntry.class)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
151	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(null,  null);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(null,  null);  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =  getNextTarEntry(null,  null);	  TarArchiveEntry    currEntry    =    getNextTarEntry(null);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
152	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(null,  false);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(null,  false);  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =  getNextTarEntry(null,  false);	  TarArchiveEntry    currEntry    =    getNextTarEntry(null);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
153	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(this);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(this);  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =  getNextTarEntry(this);	  TarArchiveEntry    currEntry    =    getNextTarEntry(null);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
154	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(null,  0);  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(null,  0);  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =  getNextTarEntry(null,  0);	  TarArchiveEntry    currEntry    =    getNextTarEntry(null);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
155	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {	  if(hasHitEOF    ||    isEnabled(TarArchiveEntry.class)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
156	[BUG]  [BUGGY]  if(getNextTarEntry()  ||  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ||  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ||  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {	  if(hasHitEOF    ||    isEnabled(TarArchiveEntry.class)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
157	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.class)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.class)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  isEnabled(TarArchiveEntry.class)&&  hasHitEOF)  {	  if(hasHitEOF    ||    isEnabled(TarArchiveEntry.class)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
158	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)&&  hasHitEOF)  {	  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
159	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)&&  hasHitEOF)  {	  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
160	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS  ||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS  ||  hasHitEOF)  {	  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
161	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {	  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
162	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS  ||  hasHitEOF))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS  ||  hasHitEOF))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS  ||  hasHitEOF))  {	  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
163	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  hasHitEOF)  {	  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
164	[BUG]  [BUGGY]  ||  entryOffset  <  0)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  ||  entryOffset  <  0)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	||  entryOffset  <  0)  {  throw  new  RuntimeException( " ");  }	  if(entryOffset    <    0)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
165	[BUG]  [BUGGY]  allowSkip(entryOffset)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  allowSkip(entryOffset)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	allowSkip(entryOffset)  {  throw  new  RuntimeException( " ");  }	  if(entryOffset    <    0)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
166	[BUG]  [BUGGY]  throw  new  RuntimeException( " ");  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  throw  new  RuntimeException( " ");  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	throw  new  RuntimeException( " ");	  if(entryOffset    <    0)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
167	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(TarArchiveEntry.class.getClassLoader());  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  Thread.currentThread().setContextClassLoader(TarArchiveEntry.class.getClassLoader());  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	Thread.currentThread().setContextClassLoader(TarArchiveEntry.class.getClassLoader());	  if(entryOffset    <    0)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
168	[BUG]  [BUGGY]  ||  entrySize  <  0)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  ||  entrySize  <  0)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	||  entrySize  <  0)  {  throw  new  RuntimeException( " ");  }	  if(entryOffset    <    0)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
169	[BUG]  [BUGGY]  Thread.currentThread().setContext(new  TarArchiveEntry(entryOffset,  entrySize));  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  Thread.currentThread().setContext(new  TarArchiveEntry(entryOffset,  entrySize));  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	Thread.currentThread().setContext(new  TarArchiveEntry(entryOffset,  entrySize));	  if(entryOffset    <    0)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
170	[BUG]  [BUGGY]  Thread.currentThread().setContext(new  TarArchiveEntry(entrySize,  entryOffset));  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  Thread.currentThread().setContext(new  TarArchiveEntry(entrySize,  entryOffset));  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	Thread.currentThread().setContext(new  TarArchiveEntry(entrySize,  entryOffset));	  if(entryOffset    <    0)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
171	[BUG]  [BUGGY]  if(getHitEOF()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getHitEOF()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getHitEOF()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {	  if(getHitEOF()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
172	[BUG]  [BUGGY]  if(getHitEOF()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getHitEOF()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getHitEOF()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  hasHitEOF)  {	  if(getHitEOF()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
173	[BUG]  [BUGGY]  if(getHitEOF()  ||  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getHitEOF()  ||  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAME))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getHitEOF()  ||  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAME))  {	  if(getHitEOF()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
174	[BUG]  [BUGGY]  if(getHitEOF()  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getHitEOF()  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getHitEOF()  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {	  if(getHitEOF()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
175	[BUG]  [BUGGY]  if(entryOffset  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(entryOffset  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(entryOffset  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  hasHitEOF)  {	  if(HitEOF    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
176	[BUG]  [BUGGY]  if(!hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  hasHitEOF)  {	  if(HitEOF    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
177	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {	  if(getNextTarEntry()    ==    null    ||    hasHitEOF    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
178	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  isEnabled(TarArchiveEntry.class))  {	  if(getNextTarEntry()    ==    null    ||    hasHitEOF    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
179	[BUG]  [BUGGY]  if(getNextTarEntry()!=  null  ||  hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()!=  null  ||  hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()!=  null  ||  hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {	  if(getNextTarEntry()    ==    null    ||    hasHitEOF    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
180	[BUG]  [BUGGY]  if(getNextTarEntry()!=  null  ||  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()!=  null  ||  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()!=  null  ||  isEnabled(TarArchiveEntry.class))  {	  if(getNextTarEntry()    ==    null    ||    hasHitEOF    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
181	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  isEnabled(TarArchiveEntry.class)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  isEnabled(TarArchiveEntry.class)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  isEnabled(TarArchiveEntry.class)&&  hasHitEOF)  {	  if(getNextTarEntry()    ==    null    ||    hasHitEOF    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
182	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {	  if(getNextTarEntry()    ==    null    ||    hasHitEOF    ||    isEnabled(Feature.QUOTE_NON_NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
183	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {	  if(getNextTarEntry()    ==    null    ||    hasHitEOF    ||    isEnabled(Feature.QUOTE_NON_NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
184	[BUG]  [BUGGY]  if(getNextTarEntry()!=  null  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()!=  null  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()!=  null  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {	  if(getNextTarEntry()    ==    null    ||    hasHitEOF    ||    isEnabled(Feature.QUOTE_NON_NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
185	[BUG]  [BUGGY]  if(getNextTarEntry()!=  null  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()!=  null  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()!=  null  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {	  if(getNextTarEntry()    ==    null    ||    hasHitEOF    ||    isEnabled(Feature.QUOTE_NON_NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
186	[BUG]  [BUGGY]  if(this.getNextTarEntry()  ==  null  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(this.getNextTarEntry()  ==  null  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(this.getNextTarEntry()  ==  null  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {	  if(getNextTarEntry()    ==    null    ||    hasHitEOF    ||    isEnabled(Feature.QUOTE_NON_NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
187	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE)&&  hasHitEOF)  {	  if(getNextTarEntry()    ==    null    ||    hasHitEOF    ||    isEnabled(Feature.QUOTE_NON_NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
188	[BUG]  [BUGGY]  if(HitEOF  &&  isEnabled(Feature.QUOTE_TARGET)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(HitEOF  &&  isEnabled(Feature.QUOTE_TARGET)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(HitEOF  &&  isEnabled(Feature.QUOTE_TARGET)||  hasHitEOF)  {	  if(HitEOF    ||    isEnabled(Feature.QUOTE_TARGET)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
189	[BUG]  [BUGGY]  if(entryOffset  ||  isEnabled(Feature.QUOTE_TARGET)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(entryOffset  ||  isEnabled(Feature.QUOTE_TARGET)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(entryOffset  ||  isEnabled(Feature.QUOTE_TARGET)||  hasHitEOF)  {	  if(HitEOF    ||    isEnabled(Feature.QUOTE_TARGET)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
190	[BUG]  [BUGGY]  if(!hasHitEOF  ||  isEnabled(Feature.QUOTE_TARGET)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  ||  isEnabled(Feature.QUOTE_TARGET)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  ||  isEnabled(Feature.QUOTE_TARGET)||  hasHitEOF)  {	  if(HitEOF    ||    isEnabled(Feature.QUOTE_TARGET)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
191	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_TARGET)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_TARGET)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!isEnabled(Feature.QUOTE_TARGET)||  hasHitEOF)  {	  if(HitEOF    ||    isEnabled(Feature.QUOTE_TARGET)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
192	[BUG]  [BUGGY]  if(!hasNextEntry  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasNextEntry  ||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasNextEntry  ||  hasHitEOF)  {	  if(hasNextEntry    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
193	[BUG]  [BUGGY]  if(hasNextEntry  ||  hasHitEOF  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasNextEntry  ||  hasHitEOF  ||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasNextEntry  ||  hasHitEOF  ||  hasHitEOF)  {	  if(hasNextEntry    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
194	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(getNextTarEntry()    ==    null    ||    hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
195	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(getNextTarEntry()    ==    null    ||    hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
196	[BUG]  [BUGGY]  if(getNextTarEntry()!=  null  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()!=  null  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()!=  null  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(getNextTarEntry()    ==    null    ||    hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
197	[BUG]  [BUGGY]  if(getNextTarEntry()!=  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()!=  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()!=  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(getNextTarEntry()    ==    null    ||    hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
198	[BUG]  [BUGGY]  if(this.getNextTarEntry()  ==  null  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(this.getNextTarEntry()  ==  null  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(this.getNextTarEntry()  ==  null  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(getNextTarEntry()    ==    null    ||    hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
199	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {	  if(getNextTarEntry()    ==    null    ||    hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
200	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(entryOffset  <  0  ||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(entryOffset  <  0  ||  hasHitEOF)  {	  if(hashEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
201	[BUG]  [BUGGY]  if(!hashEOF  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hashEOF  ||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hashEOF  ||  hasHitEOF)  {	  if(hashEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
202	[BUG]  [BUGGY]  if(!hashEOF  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hashEOF  &&  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hashEOF  &&  hasHitEOF)  {	  if(hashEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
203	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NULL_VALUE)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NULL_VALUE)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NULL_VALUE)||  hasHitEOF)  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_NON_NULL_VALUE)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
204	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NULL_VALUE)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NULL_VALUE)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NULL_VALUE)||  hasHitEOF)  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_NON_NULL_VALUE)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
205	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE)&&  hasHitEOF)  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_NON_NULL_VALUE)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
206	[BUG]  [BUGGY]  if(HitEOF  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(HitEOF  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(HitEOF  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE)||  hasHitEOF)  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_NON_NULL_VALUE)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
207	[BUG]  [BUGGY]  if(hashEOF  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hashEOF  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hashEOF  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE)||  hasHitEOF)  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_NON_NULL_VALUE)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
208	[BUG]  [BUGGY]  if(getNextTarEntry().hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry().hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry().hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {	  if(getNextTarEntry().hasHitEOF    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
209	[BUG]  [BUGGY]  if(getNextTarEntry().hasHitEOF  ||  isEnabled(TarArchiveEntry.class)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry().hasHitEOF  ||  isEnabled(TarArchiveEntry.class)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry().hasHitEOF  ||  isEnabled(TarArchiveEntry.class)&&  hasHitEOF)  {	  if(getNextTarEntry().hasHitEOF    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
210	[BUG]  [BUGGY]  if(getNextTarEntry().hasHitEOF  ||  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry().hasHitEOF  ||  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry().hasHitEOF  ||  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {	  if(getNextTarEntry().hasHitEOF    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
211	[BUG]  [BUGGY]  if(getNextTarEntry().hashCode()  ||  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry().hashCode()  ||  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry().hashCode()  ||  isEnabled(TarArchiveEntry.class))  {	  if(getNextTarEntry().hasHitEOF    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
212	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_NON_NULL_VALUE))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_NON_NULL_VALUE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_NON_NULL_VALUE))  {	  if(hasHitEOF    ||    isEnabled(TarArchiveEntry.QUOTE_NON_NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
213	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_NON_NULL_VALUE))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_NON_NULL_VALUE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_NON_NULL_VALUE))  {	  if(hasHitEOF    ||    isEnabled(TarArchiveEntry.QUOTE_NON_NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
214	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.QUOTE_NON_NULL_VALUE)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.QUOTE_NON_NULL_VALUE)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(TarArchiveEntry.QUOTE_NON_NULL_VALUE)||  hasHitEOF)  {	  if(hasHitEOF    ||    isEnabled(TarArchiveEntry.QUOTE_NON_NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
215	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_NON_NULL_VALUE))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_NON_NULL_VALUE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_NON_NULL_VALUE))  {	  if(hasHitEOF    ||    isEnabled(TarArchiveEntry.QUOTE_NON_NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
216	[BUG]  [BUGGY]  if(getNextTarEntry().hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_NON_NULL_VALUE))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry().hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_NON_NULL_VALUE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry().hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_NON_NULL_VALUE))  {	  if(hasHitEOF    ||    isEnabled(TarArchiveEntry.QUOTE_NON_NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
217	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.QUOTE_NON_NULL_VALUE))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.QUOTE_NON_NULL_VALUE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(TarArchiveEntry.QUOTE_NON_NULL_VALUE))  {	  if(hasHitEOF    ||    isEnabled(TarArchiveEntry.QUOTE_NON_NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
218	[BUG]  [BUGGY]  if(HitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_NON_NULL_VALUE))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(HitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_NON_NULL_VALUE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(HitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_NON_NULL_VALUE))  {	  if(hasHitEOF    ||    isEnabled(TarArchiveEntry.QUOTE_NON_NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
219	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
220	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
221	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
222	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  hasHitEOF))  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  hasHitEOF))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  hasHitEOF))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
223	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT)||  isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT)||  isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT)||  isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT))  {	  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||    isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
224	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT)&&  isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT)&&  isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT)&&  isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT))  {	  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||    isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
225	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT)||  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT)||  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT)||  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {	  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||    isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
226	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT)||  isEnabled(Feature.QUOTE_NON_NUMERIC_FONT))  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT)||  isEnabled(Feature.QUOTE_NON_NUMERIC_FONT))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT)||  isEnabled(Feature.QUOTE_NON_NUMERIC_FONT))  {	  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||    isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
227	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT)||  isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT))  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT)||  isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT)||  isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT))  {	  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||    isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
228	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_NON_TARGET_FLOAT)||  isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT))  {  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_NON_TARGET_FLOAT)||  isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_NON_TARGET_FLOAT)||  isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT))  {	  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||    isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
229	[BUG]  [BUGGY]  if(getNextTarEntry()!=  null  ||  getNextTarEntry().getParent()!=  null)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()!=  null  ||  getNextTarEntry().getParent()!=  null)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()!=  null  ||  getNextTarEntry().getParent()!=  null)  {	  if(getNextTarEntry()    ==    null    ||    getNextTarEntry().getParent()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
230	[BUG]  [BUGGY]  if(getNextTarEntry()!=  null  ||  getNextTarEntry().getParent()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()!=  null  ||  getNextTarEntry().getParent()  ==  null)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()!=  null  ||  getNextTarEntry().getParent()  ==  null)  {	  if(getNextTarEntry()    ==    null    ||    getNextTarEntry().getParent()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
231	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextTarEntry().getParent()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextTarEntry().getParent()  ==  null)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  getNextTarEntry().getParent()  ==  null)  {	  if(getNextTarEntry()    ==    null    ||    getNextTarEntry().getParent()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
232	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextTarEntry().getNext()!=  null)  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextTarEntry().getNext()!=  null)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  getNextTarEntry().getNext()!=  null)  {	  if(getNextTarEntry()    ==    null    ||    getNextTarEntry().getParent()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
233	[BUG]  [BUGGY]  if(getNextTarEntry()!=  null  ||  getNextTarEntry().getName()!=  null)  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()!=  null  ||  getNextTarEntry().getName()!=  null)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()!=  null  ||  getNextTarEntry().getName()!=  null)  {	  if(getNextTarEntry()    ==    null    ||    getNextTarEntry().getParent()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
234	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.currEntry.clone();  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.currEntry.clone();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)this.currEntry.clone();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.clone();    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
235	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)entry.clone();  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)entry.clone();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)entry.clone();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.clone();    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
236	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)getNextEntry();  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)getNextEntry();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)getNextEntry();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.clone();    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
237	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)currentEntry.clone();  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)currentEntry.clone();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)currentEntry.clone();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.clone();    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
238	[BUG]  [BUGGY]  if(getNextTarEntry())  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry())  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry())  {	  if(hasNextTarEntry    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
239	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEmptyTarEntry())  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isEmptyTarEntry())  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  isEmptyTarEntry())  {	  if(hasHitEOF    &&    isEmptyTarEntry())    {    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
240	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEmptyTarEntry()  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEmptyTarEntry()  ||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEmptyTarEntry()  ||  hasHitEOF)  {	  if(hasHitEOF    &&    isEmptyTarEntry())    {    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
241	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEmptyTarEntry()  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEmptyTarEntry()  &&  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEmptyTarEntry()  &&  hasHitEOF)  {	  if(hasHitEOF    &&    isEmptyTarEntry())    {    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
242	[BUG]  [BUGGY]  if(isEmptyTarEntry()  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEmptyTarEntry()  ||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEmptyTarEntry()  ||  hasHitEOF)  {	  if(hasHitEOF    &&    isEmptyTarEntry())    {    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
243	[BUG]  [BUGGY]  if(isEmptyTarEntry())  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEmptyTarEntry())  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEmptyTarEntry())  {	  if(hasHitEOF    &&    isEmptyTarEntry())    {    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
244	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_TARGET)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_TARGET)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(Feature.QUOTE_TARGET)||  hasHitEOF)  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
245	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_TARGET))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_TARGET))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_TARGET))  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
246	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.START_TARGET))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.START_TARGET))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.START_TARGET))  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
247	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_TARGET  ||  isEnabled(Feature.HARD_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_TARGET  ||  isEnabled(Feature.HARD_BUFFER_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_TARGET  ||  isEnabled(Feature.HARD_BUFFER_SIZE))  {	  if(isEnabled(Feature.QUOTE_TARGET)||    isEnabled(Feature.HARD_BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
248	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_TARGET)&&  isEnabled(Feature.HARD_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_TARGET)&&  isEnabled(Feature.HARD_BUFFER_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_TARGET)&&  isEnabled(Feature.HARD_BUFFER_SIZE))  {	  if(isEnabled(Feature.QUOTE_TARGET)||    isEnabled(Feature.HARD_BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
249	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.SHORT_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.SHORT_BUFFER_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.SHORT_BUFFER_SIZE))  {	  if(isEnabled(Feature.QUOTE_TARGET)||    isEnabled(Feature.HARD_BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
250	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.HARD_BUFFER_SIZE  +  1))  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.HARD_BUFFER_SIZE  +  1))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.HARD_BUFFER_SIZE  +  1))  {	  if(isEnabled(Feature.QUOTE_TARGET)||    isEnabled(Feature.HARD_BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
251	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.HARD_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.HARD_BUFFER_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.HARD_BUFFER_SIZE))  {	  if(isEnabled(Feature.QUOTE_TARGET)||    isEnabled(Feature.HARD_BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
252	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.SMALL_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.SMALL_BUFFER_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.SMALL_BUFFER_SIZE))  {	  if(isEnabled(Feature.QUOTE_TARGET)||    isEnabled(Feature.HARD_BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
253	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_ENTRY_SIZE)||  isEnabled(TarBuffer.DEFAULT_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_ENTRY_SIZE)||  isEnabled(TarBuffer.DEFAULT_BUFFER_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_ENTRY_SIZE)||  isEnabled(TarBuffer.DEFAULT_BUFFER_SIZE))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_ENTRY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
254	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_ENTRY_SIZE)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_ENTRY_SIZE)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_ENTRY_SIZE)||  hasHitEOF)  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_ENTRY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
255	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_ENTRY_SIZE,  Long.MAX_VALUE))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_ENTRY_SIZE,  Long.MAX_VALUE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_ENTRY_SIZE,  Long.MAX_VALUE))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_ENTRY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
256	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_ENTRY_SIZE  +  1))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_ENTRY_SIZE  +  1))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_ENTRY_SIZE  +  1))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_ENTRY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
257	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_ENTRY_SIZE,  false))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_ENTRY_SIZE,  false))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_ENTRY_SIZE,  false))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_ENTRY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
258	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_ENTRY_SIZE,  true))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_ENTRY_SIZE,  true))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_ENTRY_SIZE,  true))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_ENTRY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
259	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_TARGET))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_TARGET))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_TARGET))  {	  if(hasHitEOF    ||    isEnabled(TarArchiveEntry.QUOTE_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
260	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.QUOTE_TARGET)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.QUOTE_TARGET)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(TarArchiveEntry.QUOTE_TARGET)||  hasHitEOF)  {	  if(hasHitEOF    ||    isEnabled(TarArchiveEntry.QUOTE_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
261	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_TARGET))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_TARGET))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_TARGET))  {	  if(hasHitEOF    ||    isEnabled(TarArchiveEntry.QUOTE_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
262	[BUG]  [BUGGY]  if(getNextTarEntry().hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_TARGET))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry().hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_TARGET))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry().hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_TARGET))  {	  if(hasHitEOF    ||    isEnabled(TarArchiveEntry.QUOTE_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
263	[BUG]  [BUGGY]  if(HitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_TARGET))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(HitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_TARGET))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(HitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_TARGET))  {	  if(hasHitEOF    ||    isEnabled(TarArchiveEntry.QUOTE_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
264	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_TARGET)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_TARGET)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_TARGET)||  hasHitEOF)  {	  if(hasHitEOF    ||    isEnabled(TarArchiveEntry.QUOTE_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
265	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.class)||  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.class)||  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(TarArchiveEntry.class)||  isEnabled(TarArchiveEntry.class))  {	  if(isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
266	[BUG]  [BUGGY]  if(!isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!isEnabled(TarArchiveEntry.class))  {	  if(isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
267	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.class)||  isEnabled(TarArchiveInputStream.class))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.class)||  isEnabled(TarArchiveInputStream.class))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(TarArchiveEntry.class)||  isEnabled(TarArchiveInputStream.class))  {	  if(isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
268	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.class  ||  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.class  ||  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(TarArchiveEntry.class  ||  isEnabled(TarArchiveEntry.class))  {	  if(isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
269	[BUG]  [BUGGY]  if(entryOffset  ==  null  ||  getNextSize()  ==  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(entryOffset  ==  null  ||  getNextSize()  ==  entryOffset)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(entryOffset  ==  null  ||  getNextSize()  ==  entryOffset)  {	  if(getNextTarEntry()    ==    null    ||    getNextSize()    ==    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
270	[BUG]  [BUGGY]  if(getNextTarEntry()!=  null  ||  getNextSize()  ==  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()!=  null  ||  getNextSize()  ==  entryOffset)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()!=  null  ||  getNextSize()  ==  entryOffset)  {	  if(getNextTarEntry()    ==    null    ||    getNextSize()    ==    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
271	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  getNextSize()  ==  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(currEntry  ==  null  ||  getNextSize()  ==  entryOffset)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(currEntry  ==  null  ||  getNextSize()  ==  entryOffset)  {	  if(getNextTarEntry()    ==    null    ||    getNextSize()    ==    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
272	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  getNextTarEntry()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(currEntry  ==  null  ||  getNextTarEntry()  ==  null)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(currEntry  ==  null  ||  getNextTarEntry()  ==  null)  {	  if(getNextTarEntry()!=    null    ||    getNextTarEntry()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
273	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextTarEntry()  >=  null)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextTarEntry()  >=  null)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  getNextTarEntry()  >=  null)  {	  if(getNextTarEntry()!=    null    ||    getNextTarEntry()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
274	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextSize()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextSize()  ==  null)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  getNextSize()  ==  null)  {	  if(getNextTarEntry()!=    null    ||    getNextTarEntry()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
275	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.NUMBER_INT_RANGE))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.NUMBER_INT_RANGE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.NUMBER_INT_RANGE))  {	  if(hasHitEOF    &&    isEnabled(TarArchiveEntry.NUMBER_INT_RANGE))    {    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
276	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.NUMBER_INT_RANGE)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.NUMBER_INT_RANGE)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.NUMBER_INT_RANGE)||  hasHitEOF)  {	  if(hasHitEOF    &&    isEnabled(TarArchiveEntry.NUMBER_INT_RANGE))    {    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
277	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.NUMBER_INT_RANGE)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.NUMBER_INT_RANGE)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(TarArchiveEntry.NUMBER_INT_RANGE)||  hasHitEOF)  {	  if(hasHitEOF    &&    isEnabled(TarArchiveEntry.NUMBER_INT_RANGE))    {    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
278	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.NUMBER_INT_RANGE))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.NUMBER_INT_RANGE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  isEnabled(TarArchiveEntry.NUMBER_INT_RANGE))  {	  if(hasHitEOF    &&    isEnabled(TarArchiveEntry.NUMBER_INT_RANGE))    {    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
279	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.NUMBER_INT_RANGE,  true))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.NUMBER_INT_RANGE,  true))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.NUMBER_INT_RANGE,  true))  {	  if(hasHitEOF    &&    isEnabled(TarArchiveEntry.NUMBER_INT_RANGE))    {    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
280	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.NUMBER_INT_RANGE),  return  null;  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.NUMBER_INT_RANGE),  return  null;  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.NUMBER_INT_RANGE),  return  null;	  if(hasHitEOF    &&    isEnabled(TarArchiveEntry.NUMBER_INT_RANGE))    {    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
281	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.NUMBER_INT_RANGE)||  isEnabled(TarArchiveEntry.SHORT_DESCENDING))  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.NUMBER_INT_RANGE)||  isEnabled(TarArchiveEntry.SHORT_DESCENDING))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.NUMBER_INT_RANGE)||  isEnabled(TarArchiveEntry.SHORT_DESCENDING))  {	  if(hasHitEOF    &&    isEnabled(TarArchiveEntry.NUMBER_INT_RANGE))    {    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
282	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_TARGET)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_TARGET)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_TARGET)||  hasHitEOF)  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_TARGET)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
283	[BUG]  [BUGGY]  if(hashEOF  ||  isEnabled(Feature.QUOTE_TARGET)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hashEOF  ||  isEnabled(Feature.QUOTE_TARGET)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hashEOF  ||  isEnabled(Feature.QUOTE_TARGET)||  hasHitEOF)  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_TARGET)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
284	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_TARGET)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_TARGET)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  isEnabled(Feature.QUOTE_TARGET)&&  hasHitEOF)  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_TARGET)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
285	[BUG]  [BUGGY]  if(hashEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hashEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hashEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
286	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES)||  hasHitEOF)  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
287	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_TARGET))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_TARGET))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_TARGET))  {	  if(getNextTarEntry()    ==    null    ||    hasHitEOF    ||    isEnabled(Feature.QUOTE_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
288	[BUG]  [BUGGY]  if(getNextTarEntry()!=  null  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_TARGET))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()!=  null  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_TARGET))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()!=  null  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_TARGET))  {	  if(getNextTarEntry()    ==    null    ||    hasHitEOF    ||    isEnabled(Feature.QUOTE_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
289	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  isEnabled(Feature.QUOTE_TARGET))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  isEnabled(Feature.QUOTE_TARGET))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  isEnabled(Feature.QUOTE_TARGET))  {	  if(getNextTarEntry()    ==    null    ||    hasHitEOF    ||    isEnabled(Feature.QUOTE_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
290	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  isEnabled(Feature.QUOTE_TARGET)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  isEnabled(Feature.QUOTE_TARGET)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  isEnabled(Feature.QUOTE_TARGET)||  hasHitEOF)  {	  if(getNextTarEntry()    ==    null    ||    hasHitEOF    ||    isEnabled(Feature.QUOTE_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
291	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_TARGET))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(currEntry  ==  null  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_TARGET))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(currEntry  ==  null  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_TARGET))  {	  if(getNextTarEntry()    ==    null    ||    hasHitEOF    ||    isEnabled(Feature.QUOTE_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
292	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  isEnabled(Feature.QUOTE_TARGET)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  isEnabled(Feature.QUOTE_TARGET)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  isEnabled(Feature.QUOTE_TARGET)&&  hasHitEOF)  {	  if(getNextTarEntry()    ==    null    ||    hasHitEOF    ||    isEnabled(Feature.QUOTE_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
293	[BUG]  [BUGGY]  if(this.getNextTarEntry()  ==  null  ||  getNextTarEntry()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(this.getNextTarEntry()  ==  null  ||  getNextTarEntry()  ==  null)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(this.getNextTarEntry()  ==  null  ||  getNextTarEntry()  ==  null)  {	  if(getNextTarEntry()    ==    null    ||    getNextTarEntry()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
294	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.class)||  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.class)||  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.class)||  isEnabled(TarArchiveEntry.class))  {	  if(HitEOF    &&    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
295	[BUG]  [BUGGY]  if(HitEOF  &&  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(HitEOF  &&  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(HitEOF  &&  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {	  if(HitEOF    &&    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
296	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.class)||  isEnabled(TarArchiveInputStream.class))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.class)||  isEnabled(TarArchiveInputStream.class))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.class)||  isEnabled(TarArchiveInputStream.class))  {	  if(HitEOF    &&    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
297	[BUG]  [BUGGY]  if(HitEOF  ||  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(HitEOF  ||  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(HitEOF  ||  isEnabled(TarArchiveEntry.class))  {	  if(HitEOF    &&    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
298	[BUG]  [BUGGY]  TarEntry  currEntry  =  getNextArchiveEntry();  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarEntry  currEntry  =  getNextArchiveEntry();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarEntry  currEntry  =  getNextArchiveEntry();	  TarEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
299	[BUG]  [BUGGY]  TarEntry  currEntry  =  getNextTarEntry(null);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarEntry  currEntry  =  getNextTarEntry(null);  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarEntry  currEntry  =  getNextTarEntry(null);	  TarEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
300	[BUG]  [BUGGY]  TarEntry  currEntry  =  getNextTarEntry(entryOffset);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarEntry  currEntry  =  getNextTarEntry(entryOffset);  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarEntry  currEntry  =  getNextTarEntry(entryOffset);	  TarEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
301	[BUG]  [BUGGY]  TarEntry  currEntry  =  this.getNextTarEntry();  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarEntry  currEntry  =  this.getNextTarEntry();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarEntry  currEntry  =  this.getNextTarEntry();	  TarEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
302	[BUG]  [BUGGY]  TarEntry  currEntry  =  getNextFileEntry();  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarEntry  currEntry  =  getNextFileEntry();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarEntry  currEntry  =  getNextFileEntry();	  TarEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
303	[BUG]  [BUGGY]  TarEntry  currEntry  =  getNextTarEntry().getValue();  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarEntry  currEntry  =  getNextTarEntry().getValue();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarEntry  currEntry  =  getNextTarEntry().getValue();	  TarEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
304	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NULL_VALUE,  true))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NULL_VALUE,  true))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NULL_VALUE,  true))  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_NON_NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
305	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NULL_VALUE),  return  null;  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NULL_VALUE),  return  null;  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NULL_VALUE),  return  null;	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_NON_NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
306	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.class,  true))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.class,  true))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.class,  true))  {	  if(hasHitEOF    &&    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
307	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.class)||  isEnabled(TarBuffer.class))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.class)||  isEnabled(TarBuffer.class))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.class)||  isEnabled(TarBuffer.class))  {	  if(hasHitEOF    &&    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
308	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  false))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  false))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  false))  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES,    true))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
309	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES,    true))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
310	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES,    true))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
311	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  false)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  false)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  false)||  hasHitEOF)  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES,    true))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
312	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES,  false))  {  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES,  false))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES,  false))  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES,    true))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
313	[BUG]  [BUGGY]  if(HitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  false))  {  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(HitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  false))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(HitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  false))  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES,    true))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
314	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES,  false)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES,  false)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES,  false)||  hasHitEOF)  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES,    true))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
315	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)entry.getValue();  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)entry.getValue();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)entry.getValue();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
316	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)super.getValue();  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)super.getValue();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)super.getValue();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
317	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getKey();  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getKey();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getKey();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
318	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getNext();  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getNext();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getNext();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
319	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NULL_VALUE)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NULL_VALUE)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_NON_NULL_VALUE)&&  hasHitEOF)  {	  if(isEnabled(Feature.QUOTE_NON_NULL_VALUE)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
320	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_NON_NULL_VALUE)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_NON_NULL_VALUE)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!isEnabled(Feature.QUOTE_NON_NULL_VALUE)&&  hasHitEOF)  {	  if(isEnabled(Feature.QUOTE_NON_NULL_VALUE)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
321	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_NON_NULL_VALUE)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_NON_NULL_VALUE)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!isEnabled(Feature.QUOTE_NON_NULL_VALUE)||  hasHitEOF)  {	  if(isEnabled(Feature.QUOTE_NON_NULL_VALUE)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
322	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NULL_VALUE)||  hasHitEOF  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NULL_VALUE)||  hasHitEOF  ||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_NON_NULL_VALUE)||  hasHitEOF  ||  hasHitEOF)  {	  if(isEnabled(Feature.QUOTE_NON_NULL_VALUE)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
323	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  this.getNextTarEntry()!=  null)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(currEntry  ==  null  ||  this.getNextTarEntry()!=  null)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(currEntry  ==  null  ||  this.getNextTarEntry()!=  null)  {	  if(this.getNextTarEntry()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
324	[BUG]  [BUGGY]  if(this.getNextTarEntry()  ==  null  ||  this.getNextTarEntry()!=  null)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(this.getNextTarEntry()  ==  null  ||  this.getNextTarEntry()!=  null)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(this.getNextTarEntry()  ==  null  ||  this.getNextTarEntry()!=  null)  {	  if(this.getNextTarEntry()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
325	[BUG]  [BUGGY]  if(HitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(HitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(HitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {	  if(HitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
326	[BUG]  [BUGGY]  if(HitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(HitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(HitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES))  {	  if(HitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
327	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(HitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
328	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ERROR,  longName))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ERROR,  longName))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ERROR,  longName))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TAR_ERROR))    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
329	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ERROR,  Long.MAX_VALUE))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ERROR,  Long.MAX_VALUE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ERROR,  Long.MAX_VALUE))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TAR_ERROR))    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
330	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ERROR,  true))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ERROR,  true))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ERROR,  true))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TAR_ERROR))    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
331	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ERROR,  false))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ERROR,  false))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ERROR,  false))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TAR_ERROR))    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
332	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ERROR,  shortName))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ERROR,  shortName))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ERROR,  shortName))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TAR_ERROR))    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
333	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ERROR,  null))  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ERROR,  null))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ERROR,  null))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TAR_ERROR))    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
334	[BUG]  [BUGGY]  if(hasNextTarEntry)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasNextTarEntry)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasNextTarEntry)  {	  if(hasHitEOF    &&    hasNextTarEntry)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
335	[BUG]  [BUGGY]  if(hasHitEOF  &&  hasNextEntry)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  hasNextEntry)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  hasNextEntry)  {	  if(hasHitEOF    &&    hasNextTarEntry)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
336	[BUG]  [BUGGY]  if(getNextTarEntry()  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  {	  if(getNextTarEntry()    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
337	[BUG]  [BUGGY]  if(getNextTarEntry().hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry().hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry().hasHitEOF)  {	  if(getNextTarEntry()    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
338	[BUG]  [BUGGY]  if(getNextTarEntry().length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry().length()  ==  0)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry().length()  ==  0)  {	  if(getNextTarEntry()    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
339	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_TARGET)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_TARGET)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_TARGET)&&  hasHitEOF)  {	  if(isEnabled(Feature.QUOTE_TARGET)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
340	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_TARGET)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_TARGET)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!isEnabled(Feature.QUOTE_TARGET)&&  hasHitEOF)  {	  if(isEnabled(Feature.QUOTE_TARGET)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
341	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_TARGET  ||  hasHitEOF))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_TARGET  ||  hasHitEOF))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_TARGET  ||  hasHitEOF))  {	  if(isEnabled(Feature.QUOTE_TARGET)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
342	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_TARGET)||  hasHitEOF  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_TARGET)||  hasHitEOF  ||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_TARGET)||  hasHitEOF  ||  hasHitEOF)  {	  if(isEnabled(Feature.QUOTE_TARGET)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
343	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES))  {	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
344	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  hasHitEOF))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  hasHitEOF))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  hasHitEOF))  {	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
345	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.BUFFER_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.BUFFER_SIZE))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(TarArchiveEntry.BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
346	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.BUFFER_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.BUFFER_SIZE))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(TarArchiveEntry.BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
347	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.BUFFER_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.BUFFER_SIZE))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(TarArchiveEntry.BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
348	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(TarArchiveEntry.BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(TarArchiveEntry.BUFFER_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(TarArchiveEntry.BUFFER_SIZE))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(TarArchiveEntry.BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
349	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.BUFFER_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.BUFFER_SIZE))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(TarArchiveEntry.BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
350	[BUG]  [BUGGY]  if(HitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(HitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.BUFFER_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(HitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.BUFFER_SIZE))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(TarArchiveEntry.BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
351	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NULL_VALUE,  true))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NULL_VALUE,  true))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NULL_VALUE,  true))  {	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_NON_NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
352	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  hasHitEOF))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  hasHitEOF))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  hasHitEOF))  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES    ||    hasHitEOF))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
353	[BUG]  [BUGGY]  if(HitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  hasHitEOF))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(HitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  hasHitEOF))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(HitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  hasHitEOF))  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES    ||    hasHitEOF))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
354	[BUG]  [BUGGY]  if(hashEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  hasHitEOF))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hashEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  hasHitEOF))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hashEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  hasHitEOF))  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES    ||    hasHitEOF))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
355	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  hasHitEOF)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  hasHitEOF)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  hasHitEOF)||  hasHitEOF)  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES    ||    hasHitEOF))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
356	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_PREFIX)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_PREFIX)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_PREFIX)||  hasHitEOF)  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TAR_PREFIX))    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
357	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_PREFIX,  true))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_PREFIX,  true))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_PREFIX,  true))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TAR_PREFIX))    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
358	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_PREFIX  ||  isEnabled(TarBuffer.DEFAULT_TAR_PREFIX))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_PREFIX  ||  isEnabled(TarBuffer.DEFAULT_TAR_PREFIX))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_PREFIX  ||  isEnabled(TarBuffer.DEFAULT_TAR_PREFIX))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TAR_PREFIX))    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
359	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_PREFIX,  false))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_PREFIX,  false))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_PREFIX,  false))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TAR_PREFIX))    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
360	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_PREFIX)||  isEnabled(TarBuffer.DEFAULT_SIZE))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_PREFIX)||  isEnabled(TarBuffer.DEFAULT_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_PREFIX)||  isEnabled(TarBuffer.DEFAULT_SIZE))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TAR_PREFIX))    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
361	[BUG]  [BUGGY]  if(isEnabled(TarBuffer.DEFAULT_TAR_PREFIX))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(TarBuffer.DEFAULT_TAR_PREFIX))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(TarBuffer.DEFAULT_TAR_PREFIX))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TAR_PREFIX))    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
362	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.START_TARGET))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.START_TARGET))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.START_TARGET))  {	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
363	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_TARGET,  true))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_TARGET,  true))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_TARGET,  true))  {	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
364	[BUG]  [BUGGY]  if(HitEOF  ||  hasNextTarEntry)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(HitEOF  ||  hasNextTarEntry)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(HitEOF  ||  hasNextTarEntry)  {	  if(!hasHitEOF    ||    hasNextTarEntry)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
365	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARN_ENTRY))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARN_ENTRY))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARN_ENTRY))  {	  if(hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TARN_ENTRY))    {    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
366	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARN_ENTRY)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARN_ENTRY)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARN_ENTRY)||  hasHitEOF)  {	  if(hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TARN_ENTRY))    {    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
367	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARN_ENTRY,  true))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARN_ENTRY,  true))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARN_ENTRY,  true))  {	  if(hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TARN_ENTRY))    {    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
368	[BUG]  [BUGGY]  if(isEnabled(TarBuffer.DEFAULT_TARN_ENTRY)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(TarBuffer.DEFAULT_TARN_ENTRY)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(TarBuffer.DEFAULT_TARN_ENTRY)||  hasHitEOF)  {	  if(hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TARN_ENTRY))    {    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
369	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARN_ENTRY,  false))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARN_ENTRY,  false))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARN_ENTRY,  false))  {	  if(hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TARN_ENTRY))    {    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
370	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(TarBuffer.DEFAULT_TARN_ENTRY))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isEnabled(TarBuffer.DEFAULT_TARN_ENTRY))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  isEnabled(TarBuffer.DEFAULT_TARN_ENTRY))  {	  if(hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TARN_ENTRY))    {    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
371	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARN_ENTRY,  buffer.length))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARN_ENTRY,  buffer.length))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARN_ENTRY,  buffer.length))  {	  if(hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TARN_ENTRY))    {    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
372	[BUG]  [BUGGY]  if(getNextTarEntry()!=  null  ||  getNextTarEntry()!=  null)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()!=  null  ||  getNextTarEntry()!=  null)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()!=  null  ||  getNextTarEntry()!=  null)  {	  if(getNextTarEntry()    ==    null    ||    getNextTarEntry()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
373	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  getNextTarEntry()!=  null)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(currEntry  ==  null  ||  getNextTarEntry()!=  null)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(currEntry  ==  null  ||  getNextTarEntry()!=  null)  {	  if(getNextTarEntry()    ==    null    ||    getNextTarEntry()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
374	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextSize()!=  null)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextSize()!=  null)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  getNextSize()!=  null)  {	  if(getNextTarEntry()    ==    null    ||    getNextTarEntry()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
375	[BUG]  [BUGGY]  if(getNextTarEntry()!=  null  ||  getNextTarEntry().getName()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()!=  null  ||  getNextTarEntry().getName()  ==  null)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()!=  null  ||  getNextTarEntry().getName()  ==  null)  {	  if(getNextTarEntry()    ==    null    ||    getNextTarEntry().getName()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
376	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextTarEntry().getName()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextTarEntry().getName()  ==  null)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  getNextTarEntry().getName()  ==  null)  {	  if(getNextTarEntry()    ==    null    ||    getNextTarEntry().getName()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
377	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextTarEntry().getSize()!=  null)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextTarEntry().getSize()!=  null)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  getNextTarEntry().getSize()!=  null)  {	  if(getNextTarEntry()    ==    null    ||    getNextTarEntry().getName()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
378	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  getNextTarEntry().getName()!=  null)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(currEntry  ==  null  ||  getNextTarEntry().getName()!=  null)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(currEntry  ==  null  ||  getNextTarEntry().getName()!=  null)  {	  if(getNextTarEntry()    ==    null    ||    getNextTarEntry().getName()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
379	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES)||  hasHitEOF)  {	  if(hasHitEOF    ||    isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
380	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES))  {	  if(hasHitEOF    ||    isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
381	[BUG]  [BUGGY]  if(getNextTarEntry().hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry().hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry().hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES))  {	  if(hasHitEOF    ||    isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
382	[BUG]  [BUGGY]  if(!hasHitEOF  &&  hasNextEntry)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  hasNextEntry)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  hasNextEntry)  {	  if(!hasHitEOF    &&    hasNextTarEntry)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
383	[BUG]  [BUGGY]  if(!hasHitEOF  &&  hasNextTarEntry.getName())  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  hasNextTarEntry.getName())  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  hasNextTarEntry.getName())  {	  if(!hasHitEOF    &&    hasNextTarEntry)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
384	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
385	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAME))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAME))  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
386	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
387	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
388	[BUG]  [BUGGY]  if(getHitEOF()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getHitEOF()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getHitEOF()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {	  if(getHitEOF()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
389	[BUG]  [BUGGY]  if(getHitEOF()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getHitEOF()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getHitEOF()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {	  if(getHitEOF()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
390	[BUG]  [BUGGY]  if(getHitEOF()  ||  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getHitEOF()  ||  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getHitEOF()  ||  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES))  {	  if(getHitEOF()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
391	[BUG]  [BUGGY]  if(getHitEOF()  >  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getHitEOF()  >  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getHitEOF()  >  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(getHitEOF()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
392	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NULL_VALUE  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NULL_VALUE  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_NON_NULL_VALUE  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {	  if(isEnabled(Feature.QUOTE_NON_NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
393	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {	  if(isEnabled(Feature.QUOTE_NON_NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
394	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NULL_VALUE)||  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NULL_VALUE)||  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_NON_NULL_VALUE)||  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {	  if(isEnabled(Feature.QUOTE_NON_NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
395	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.QUOTE_NON_NULL_VALUE)||  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.QUOTE_NON_NULL_VALUE)||  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(TarArchiveEntry.QUOTE_NON_NULL_VALUE)||  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {	  if(isEnabled(Feature.QUOTE_NON_NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
396	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAME))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAME))  {	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
397	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
398	[BUG]  [BUGGY]  if(HitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(HitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAME))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(HitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAME))  {	  if(HitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
399	[BUG]  [BUGGY]  if(HitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(HitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(HitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {	  if(HitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
400	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
401	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
402	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
403	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
404	[BUG]  [BUGGY]  if(HitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(HitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(HitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
405	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES,  true))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES,  true))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES,  true))  {	  if(hasHitEOF    &&    isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
406	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES),  return  null;  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES),  return  null;  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES),  return  null;	  if(hasHitEOF    &&    isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
407	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.super.getNextTarEntry();  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.super.getNextTarEntry();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)this.super.getNextTarEntry();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)super.getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
408	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.currEntry.getNextTarEntry();  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.currEntry.getNextTarEntry();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)this.currEntry.getNextTarEntry();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)super.getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
409	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)getNextTarEntry();  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)getNextTarEntry();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)getNextTarEntry();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)super.getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
410	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)super.getNext();  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)super.getNext();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)super.getNext();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)super.getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
411	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)super.getNextTarEntry(0);  [CE]  illegal  start  of  type  [FE]                                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)super.getNextTarEntry(0);  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)super.getNextTarEntry(0);	  TarArchiveEntry    currEntry    =(TarArchiveEntry)super.getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
412	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(getNextTarEntry()    ==    null    ||    hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
413	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(getNextTarEntry()    ==    null    ||    hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
414	[BUG]  [BUGGY]  if(getNextTarEntry()!=  null  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()!=  null  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()!=  null  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(getNextTarEntry()    ==    null    ||    hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
415	[BUG]  [BUGGY]  if(this.getNextTarEntry()  ==  null  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(this.getNextTarEntry()  ==  null  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(this.getNextTarEntry()  ==  null  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(getNextTarEntry()    ==    null    ||    hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
416	[BUG]  [BUGGY]  if(getNextTarEntry()!=  null  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()!=  null  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()!=  null  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(getNextTarEntry()    ==    null    ||    hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
417	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  hasHitEOF)  {	  if(getNextTarEntry()    ==    null    ||    hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
418	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH)&&  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH)&&  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH)&&  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {	  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||    isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
419	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_FIRST)||  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_FIRST)||  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_NON_NUMERIC_FIRST)||  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {	  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||    isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
420	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_FUNCTION)||  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_FUNCTION)||  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_NON_NUMERIC_FUNCTION)||  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {	  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||    isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
421	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_PREFIX)||  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_PREFIX)||  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_PREFIX)||  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {	  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||    isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
422	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.currEntry.getKey();  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.currEntry.getKey();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)this.currEntry.getKey();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)this.currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
423	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.currEntry.getNext();  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.currEntry.getNext();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)this.currEntry.getNext();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)this.currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
424	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.entry.getValue();  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.entry.getValue();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)this.entry.getValue();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)this.currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
425	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.currEntry.getObject();  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.currEntry.getObject();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)this.currEntry.getObject();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)this.currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
426	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.currEntry.getValue()  +  1;  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.currEntry.getValue()  +  1;  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)this.currEntry.getValue()  +  1;	  TarArchiveEntry    currEntry    =(TarArchiveEntry)this.currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
427	[BUG]  [BUGGY]  if(getNextEntry()  ==  null  ||  getNextTarEntry()!=  null)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextEntry()  ==  null  ||  getNextTarEntry()!=  null)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextEntry()  ==  null  ||  getNextTarEntry()!=  null)  {	  if(getNextEntry()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
428	[BUG]  [BUGGY]  if(getNextEntry()  ==  null  ||  getNextTarEntry()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextEntry()  ==  null  ||  getNextTarEntry()  ==  null)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextEntry()  ==  null  ||  getNextTarEntry()  ==  null)  {	  if(getNextEntry()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
429	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  getNextTarEntry()  ==  null  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(currEntry  ==  null  ||  getNextTarEntry()  ==  null  ||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(currEntry  ==  null  ||  getNextTarEntry()  ==  null  ||  hasHitEOF)  {	  if(getNextTarEntry()    ==    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
430	[BUG]  [BUGGY]  if(this.getNextTarEntry()  ==  null  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(this.getNextTarEntry()  ==  null  ||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(this.getNextTarEntry()  ==  null  ||  hasHitEOF)  {	  if(getNextTarEntry()    ==    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
431	[BUG]  [BUGGY]  if(getHitEOF()  ||  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getHitEOF()  ||  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getHitEOF()  ||  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {	  if(getHitEOF()    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
432	[BUG]  [BUGGY]  if(getHitEOF()  ||  isEnabled(TarArchiveEntry.class)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getHitEOF()  ||  isEnabled(TarArchiveEntry.class)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getHitEOF()  ||  isEnabled(TarArchiveEntry.class)&&  hasHitEOF)  {	  if(getHitEOF()    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
433	[BUG]  [BUGGY]  if(getHitEOF()  ||  isEnabled(TarArchiveEntry.SHORT_DESCRIPTION))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getHitEOF()  ||  isEnabled(TarArchiveEntry.SHORT_DESCRIPTION))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getHitEOF()  ||  isEnabled(TarArchiveEntry.SHORT_DESCRIPTION))  {	  if(getHitEOF()    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
434	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.class)||  getHitEOF())  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.class)||  getHitEOF())  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(TarArchiveEntry.class)||  getHitEOF())  {	  if(getHitEOF()    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
435	[BUG]  [BUGGY]  if(!hasHitEOF  ||  hasNextEntry)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  ||  hasNextEntry)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  ||  hasNextEntry)  {	  if(hasHitEOF    ||    hasNextEntry)    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
436	[BUG]  [BUGGY]  if(HitEOF  ||  hasNextEntry)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(HitEOF  ||  hasNextEntry)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(HitEOF  ||  hasNextEntry)  {	  if(hasHitEOF    ||    hasNextEntry)    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
437	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.SHORT_TARGET))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.SHORT_TARGET))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.SHORT_TARGET))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_TARGET)||    isEnabled(Feature.SHORT_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
438	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.SHORT_TARGET))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.SHORT_TARGET))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.SHORT_TARGET))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_TARGET)||    isEnabled(Feature.SHORT_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
439	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.SHORT_TARGET))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.SHORT_TARGET))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.SHORT_TARGET))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_TARGET)||    isEnabled(Feature.SHORT_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
440	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.SHORT_TARGET))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.SHORT_TARGET))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.SHORT_TARGET))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_TARGET)||    isEnabled(Feature.SHORT_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
441	[BUG]  [BUGGY]  if(HitEOF  ||  isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.SHORT_TARGET))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(HitEOF  ||  isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.SHORT_TARGET))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(HitEOF  ||  isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.SHORT_TARGET))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_TARGET)||    isEnabled(Feature.SHORT_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
442	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_TARGET)&&  isEnabled(Feature.SHORT_TARGET))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_TARGET)&&  isEnabled(Feature.SHORT_TARGET))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  isEnabled(Feature.QUOTE_TARGET)&&  isEnabled(Feature.SHORT_TARGET))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_TARGET)||    isEnabled(Feature.SHORT_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
443	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.QUOTE_FIELD_NAME)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.QUOTE_FIELD_NAME)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(TarArchiveEntry.QUOTE_FIELD_NAME)||  hasHitEOF)  {	  if(hasHitEOF    ||    isEnabled(TarArchiveEntry.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
444	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAME))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAME))  {	  if(hasHitEOF    ||    isEnabled(TarArchiveEntry.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
445	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.QUOTE_FIELD_NAME))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(TarArchiveEntry.QUOTE_FIELD_NAME))  {	  if(hasHitEOF    ||    isEnabled(TarArchiveEntry.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
446	[BUG]  [BUGGY]  if(getNextTarEntry().hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry().hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAME))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry().hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAME))  {	  if(hasHitEOF    ||    isEnabled(TarArchiveEntry.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
447	[BUG]  [BUGGY]  if(getHitEOF()  ||  isEnabled(Feature.QUOTE_TARGET)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getHitEOF()  ||  isEnabled(Feature.QUOTE_TARGET)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getHitEOF()  ||  isEnabled(Feature.QUOTE_TARGET)||  hasHitEOF)  {	  if(getHitEOF()    ||    isEnabled(Feature.QUOTE_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
448	[BUG]  [BUGGY]  if(getHitEOF()  ||  isEnabled(Feature.QUOTE_TARGET)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getHitEOF()  ||  isEnabled(Feature.QUOTE_TARGET)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getHitEOF()  ||  isEnabled(Feature.QUOTE_TARGET)&&  hasHitEOF)  {	  if(getHitEOF()    ||    isEnabled(Feature.QUOTE_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
449	[BUG]  [BUGGY]  if(getHitEOF()  ||  isEnabled(TarArchiveEntry.QUOTE_TARGET))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getHitEOF()  ||  isEnabled(TarArchiveEntry.QUOTE_TARGET))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getHitEOF()  ||  isEnabled(TarArchiveEntry.QUOTE_TARGET))  {	  if(getHitEOF()    ||    isEnabled(Feature.QUOTE_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
450	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_TARGET)||  getHitEOF())  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_TARGET)||  getHitEOF())  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_TARGET)||  getHitEOF())  {	  if(getHitEOF()    ||    isEnabled(Feature.QUOTE_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
451	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEOF)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEOF)  {	  if(hasHitEOF    ||    isEOF)    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
452	[BUG]  [BUGGY]  if(isEOF  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEOF  ||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEOF  ||  hasHitEOF)  {	  if(hasHitEOF    ||    isEOF)    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
453	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEOF)  {	  if(hasHitEOF    ||    isEOF)    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
454	[BUG]  [BUGGY]  if(!hasHitEOF  ||  isEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  ||  isEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  ||  isEOF)  {	  if(hasHitEOF    ||    isEOF)    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
455	[BUG]  [BUGGY]  if(isEOF  ||  isHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEOF  ||  isHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEOF  ||  isHitEOF)  {	  if(hasHitEOF    ||    isEOF)    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
456	[BUG]  [BUGGY]  if(!hasHitEOF  ||  hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  ||  hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  ||  hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {	  if(!hasHitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
457	[BUG]  [BUGGY]  if(!hasHitEOF  ||  hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  ||  hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  ||  hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {	  if(!hasHitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
458	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  TarArchiveEntry.class  ||  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  TarArchiveEntry.class  ||  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  TarArchiveEntry.class  ||  isEnabled(TarArchiveEntry.class))  {	  if(getNextTarEntry()    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
459	[BUG]  [BUGGY]  if(getNextTarEntry()!=  TarArchiveEntry.class  ||  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()!=  TarArchiveEntry.class  ||  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()!=  TarArchiveEntry.class  ||  isEnabled(TarArchiveEntry.class))  {	  if(getNextTarEntry()    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
460	[BUG]  [BUGGY]  if(getNextTarEntry()  ||  isEnabled(TarArchiveEntry.class)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ||  isEnabled(TarArchiveEntry.class)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ||  isEnabled(TarArchiveEntry.class)&&  hasHitEOF)  {	  if(getNextTarEntry()    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
461	[BUG]  [BUGGY]  if(getNextTarEntry().isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry().isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry().isEnabled(TarArchiveEntry.class))  {	  if(getNextTarEntry()    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
462	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)&&  hasHitEOF)  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
463	[BUG]  [BUGGY]  if(hashEOF  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hashEOF  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hashEOF  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  hasHitEOF)  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
464	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY_NAME,  true))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY_NAME,  true))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY_NAME,  true))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TAR_ENTRY_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
465	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY_NAME,  Long.MAX_VALUE))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY_NAME,  Long.MAX_VALUE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY_NAME,  Long.MAX_VALUE))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TAR_ENTRY_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
466	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY_NAME,  false))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY_NAME,  false))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY_NAME,  false))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TAR_ENTRY_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
467	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY_NAME)||  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY_NAME))  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY_NAME)||  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY_NAME))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY_NAME)||  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY_NAME))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TAR_ENTRY_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
468	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY_NAME)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY_NAME)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY_NAME)||  hasHitEOF)  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TAR_ENTRY_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
469	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY_NAME))  {  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY_NAME))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY_NAME))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TAR_ENTRY_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
470	[BUG]  [BUGGY]  if(this.hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(this.hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(this.hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {	  if(this.hasHitEOF    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
471	[BUG]  [BUGGY]  if(getNextTarEntry().hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry().hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry().hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {	  if(this.hasHitEOF    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
472	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {	  if(this.hasHitEOF    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
473	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {	  if(this.hasHitEOF    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
474	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)getNext();  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)getNext();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)getNext();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)getObject();    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
475	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)getValue();  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)getValue();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)getValue();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)getObject();    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
476	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)getCurrentEntry();  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)getCurrentEntry();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)getCurrentEntry();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)getObject();    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
477	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.getObject();  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.getObject();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)this.getObject();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)getObject();    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
478	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)getUser();  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)getUser();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)getUser();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)getObject();    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
479	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.entryOffset;  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.entryOffset;  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)this.entryOffset;	  TarArchiveEntry    currEntry    =(TarArchiveEntry)getObject();    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
480	[BUG]  [BUGGY]  if(entrySize  ||  hasNextEntry  ||  entryOffset  >  entrySize)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(entrySize  ||  hasNextEntry  ||  entryOffset  >  entrySize)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(entrySize  ||  hasNextEntry  ||  entryOffset  >  entrySize)  {	  if(hasHitEOF    ||    hasNextEntry    ||    entryOffset    >    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
481	[BUG]  [BUGGY]  if(hasHitEOF  ||  hasNextEntry  ||  entryOffset  ==  entrySize)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  hasNextEntry  ||  entryOffset  ==  entrySize)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  hasNextEntry  ||  entryOffset  ==  entrySize)  {	  if(hasHitEOF    ||    hasNextEntry    ||    entryOffset    >    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
482	[BUG]  [BUGGY]  if(!hasHitEOF  &&  hasNextEntry  ||  entryOffset  >  entrySize)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  hasNextEntry  ||  entryOffset  >  entrySize)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  hasNextEntry  ||  entryOffset  >  entrySize)  {	  if(hasHitEOF    ||    hasNextEntry    ||    entryOffset    >    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
483	[BUG]  [BUGGY]  if(hasHitEOF  &&  hasNextEntry  ||  entryOffset  >  entrySize)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  hasNextEntry  ||  entryOffset  >  entrySize)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  hasNextEntry  ||  entryOffset  >  entrySize)  {	  if(hasHitEOF    ||    hasNextEntry    ||    entryOffset    >    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
484	[BUG]  [BUGGY]  if(entryOffset  ||  hasNextEntry  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(entryOffset  ||  hasNextEntry  ||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(entryOffset  ||  hasNextEntry  ||  hasHitEOF)  {	  if(hasHitEOF    ||    hasNextEntry    ||    entryOffset    >    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
485	[BUG]  [BUGGY]  if(entryOffset  ||  hasNextEntry  ||  entrySize  >  entryHitEOF)  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(entryOffset  ||  hasNextEntry  ||  entrySize  >  entryHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(entryOffset  ||  hasNextEntry  ||  entrySize  >  entryHitEOF)  {	  if(hasHitEOF    ||    hasNextEntry    ||    entryOffset    >    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
486	[BUG]  [BUGGY]  if(hasHitEOF  ||  hasNextEntry  ||  entrySize  >  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  hasNextEntry  ||  entrySize  >  entryOffset)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  hasNextEntry  ||  entrySize  >  entryOffset)  {	  if(hasHitEOF    ||    hasNextEntry    ||    entryOffset    >    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
487	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY,  true))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY,  true))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY,  true))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TAR_ENTRY))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
488	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY,  buffer.length))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY,  buffer.length))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY,  buffer.length))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TAR_ENTRY))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
489	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY,  false))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY,  false))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY,  false))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TAR_ENTRY))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
490	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY,  Long.MAX_VALUE))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY,  Long.MAX_VALUE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY,  Long.MAX_VALUE))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TAR_ENTRY))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
491	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY,  longName))  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY,  longName))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY,  longName))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TAR_ENTRY))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
492	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY)||  hasHitEOF)  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TAR_ENTRY))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
493	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  this.getNextTarEntry()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(currEntry  ==  null  ||  this.getNextTarEntry()  ==  null)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(currEntry  ==  null  ||  this.getNextTarEntry()  ==  null)  {	  if(this.getNextTarEntry()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
494	[BUG]  [BUGGY]  if(this.getNextTarEntry()!=  null  ||  this.getNextTarEntry()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(this.getNextTarEntry()!=  null  ||  this.getNextTarEntry()  ==  null)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(this.getNextTarEntry()!=  null  ||  this.getNextTarEntry()  ==  null)  {	  if(this.getNextTarEntry()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
495	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  getNextTarEntry()!=  null  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(currEntry  ==  null  ||  getNextTarEntry()!=  null  ||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(currEntry  ==  null  ||  getNextTarEntry()!=  null  ||  hasHitEOF)  {	  if(getNextTarEntry()!=    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
496	[BUG]  [BUGGY]  if(HitEOF  &&  isEnabled(Feature.QUOTE_NON_NULL_VALUE)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(HitEOF  &&  isEnabled(Feature.QUOTE_NON_NULL_VALUE)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(HitEOF  &&  isEnabled(Feature.QUOTE_NON_NULL_VALUE)||  hasHitEOF)  {	  if(HitEOF    &&    isEnabled(Feature.QUOTE_NON_NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
497	[BUG]  [BUGGY]  if(!hasHitEOF  ||  getNextTarEntry()!=  null)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  ||  getNextTarEntry()!=  null)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  ||  getNextTarEntry()!=  null)  {	  if(!hasHitEOF    &&    getNextTarEntry()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
498	[BUG]  [BUGGY]  if(hasHitEOF  ||  getNextTarEntry()!=  null)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  getNextTarEntry()!=  null)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  getNextTarEntry()!=  null)  {	  if(!hasHitEOF    &&    getNextTarEntry()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
499	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME)&&  hasHitEOF)  {	  if(isEnabled(Feature.QUOTE_FIELD_NAME)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
500	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAME)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAME)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAME)&&  hasHitEOF)  {	  if(isEnabled(Feature.QUOTE_FIELD_NAME)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
501	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {	  if(isEnabled(Feature.QUOTE_FIELD_NAME)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
502	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  hasHitEOF)  {	  if(isEnabled(Feature.QUOTE_FIELD_NAME)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
503	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.SHORT_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.SHORT_BUFFER_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.SHORT_BUFFER_SIZE))  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.SHORT_BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
504	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.SHORT_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.SHORT_BUFFER_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.SHORT_BUFFER_SIZE))  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.SHORT_BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
505	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.SHORT_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.SHORT_BUFFER_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.SHORT_BUFFER_SIZE))  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.SHORT_BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
506	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.SMALL_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.SMALL_BUFFER_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.SMALL_BUFFER_SIZE))  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.SHORT_BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
507	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.SHORT_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.SHORT_BUFFER_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.SHORT_BUFFER_SIZE))  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.SHORT_BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
508	[BUG]  [BUGGY]  if(HitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.SHORT_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(HitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.SHORT_BUFFER_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(HitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.SHORT_BUFFER_SIZE))  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.SHORT_BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
509	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarEntry.QUOTE_NON_NULL_VALUE))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarEntry.QUOTE_NON_NULL_VALUE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarEntry.QUOTE_NON_NULL_VALUE))  {	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_NON_NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
510	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.NUMBER_OF_RANGE))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.NUMBER_OF_RANGE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.NUMBER_OF_RANGE))  {	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_NON_NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
511	[BUG]  [BUGGY]  if(getHitEOF()  ||  isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.SHORT_TARGET))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getHitEOF()  ||  isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.SHORT_TARGET))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getHitEOF()  ||  isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.SHORT_TARGET))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_TARGET)||    isEnabled(Feature.SHORT_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
512	[BUG]  [BUGGY]  if(getHitEOF()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getHitEOF()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getHitEOF()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
513	[BUG]  [BUGGY]  if(!hasHitEOF  ||  isEnabled(TarArchiveEntry.class)||  isEnabled(TarBuffer.class))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  ||  isEnabled(TarArchiveEntry.class)||  isEnabled(TarBuffer.class))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  ||  isEnabled(TarArchiveEntry.class)||  isEnabled(TarBuffer.class))  {	  if(!hasHitEOF    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
514	[BUG]  [BUGGY]  if(entryOffset  ==  0  ||  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(entryOffset  ==  0  ||  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(entryOffset  ==  0  ||  isEnabled(TarArchiveEntry.class))  {	  if(!hasHitEOF    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
515	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.class)||!hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.class)||!hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(TarArchiveEntry.class)||!hasHitEOF)  {	  if(!hasHitEOF    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
516	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.QUOTE_SIZE))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.QUOTE_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.QUOTE_SIZE))  {	  if(isEnabled(Feature.QUOTE_TARGET)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
517	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class)||  isEnabled(TarInputStream.class))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class)||  isEnabled(TarInputStream.class))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class)||  isEnabled(TarInputStream.class))  {	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
518	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class,  this))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class,  this))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class,  this))  {	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
519	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.hasNextTarEntry)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(currEntry  ==  null  ||  currEntry.hasNextTarEntry)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(currEntry  ==  null  ||  currEntry.hasNextTarEntry)  {	  if(currEntry    ==    null    ||    hasNextTarEntry)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
520	[BUG]  [BUGGY]  if(currentTarEntry  ==  null  ||  hasNextTarEntry)  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(currentTarEntry  ==  null  ||  hasNextTarEntry)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(currentTarEntry  ==  null  ||  hasNextTarEntry)  {	  if(currEntry    ==    null    ||    hasNextTarEntry)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
521	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_PREFIX)||  isEnabled(TarBuffer.DEFAULT_HEALTH_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_PREFIX)||  isEnabled(TarBuffer.DEFAULT_HEALTH_BUFFER_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_PREFIX)||  isEnabled(TarBuffer.DEFAULT_HEALTH_BUFFER_SIZE))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TAR_PREFIX))    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
522	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_PREFIX)||  isEnabled(TarBuffer.DEFAULT_SIZE))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_PREFIX)||  isEnabled(TarBuffer.DEFAULT_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_PREFIX)||  isEnabled(TarBuffer.DEFAULT_SIZE))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TAR_PREFIX))    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
523	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_PREFIX)||  isEnabled(TarBuffer.DEFAULT_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_PREFIX)||  isEnabled(TarBuffer.DEFAULT_BUFFER_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_PREFIX)||  isEnabled(TarBuffer.DEFAULT_BUFFER_SIZE))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TAR_PREFIX))    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
524	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY)||  isEnabled(TarBuffer.DEFAULT_SIZE))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY)||  isEnabled(TarBuffer.DEFAULT_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY)||  isEnabled(TarBuffer.DEFAULT_SIZE))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TAR_ENTRY))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
525	[BUG]  [BUGGY]  if(entryOffset  ==  0)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(entryOffset  ==  0)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(entryOffset  ==  0)  {  throw  new  RuntimeException( " ");  }	  if(entryOffset    <    0)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
526	[BUG]  [BUGGY]  allowNeighborEntry(entryOffset)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  allowNeighborEntry(entryOffset)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	allowNeighborEntry(entryOffset)  {  throw  new  RuntimeException( " ");  }	  if(entryOffset    <    0)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
527	[BUG]  [BUGGY]  allowNegate(entryOffset)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  allowNegate(entryOffset)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	allowNegate(entryOffset)  {  throw  new  RuntimeException( " ");  }	  if(entryOffset    <    0)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
528	[BUG]  [BUGGY]  if(entrySize  <  0)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(entrySize  <  0)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(entrySize  <  0)  {  throw  new  RuntimeException( " ");  }	  if(entryOffset    <    0)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
529	[BUG]  [BUGGY]  if(entryOffset!=  0)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(entryOffset!=  0)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(entryOffset!=  0)  {  throw  new  RuntimeException( " ");  }	  if(entryOffset    <    0)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
530	[BUG]  [BUGGY]  if(entryOffset  >=  0)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(entryOffset  >=  0)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(entryOffset  >=  0)  {  throw  new  RuntimeException( " ");  }	  if(entryOffset    <    0)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
531	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  isEOF())  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  isEOF())  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  isEOF())  {	  if(getNextTarEntry()!=    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
532	[BUG]  [BUGGY]  if(this.getNextTarEntry()!=  null  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(this.getNextTarEntry()!=  null  ||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(this.getNextTarEntry()!=  null  ||  hasHitEOF)  {	  if(getNextTarEntry()!=    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
533	[BUG]  [BUGGY]  if(this.hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(this.hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(this.hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  hasHitEOF)  {	  if(this.hasHitEOF    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
534	[BUG]  [BUGGY]  if(currEntry  ==  null  ||!hasNextTarEntry  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(currEntry  ==  null  ||!hasNextTarEntry  ||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(currEntry  ==  null  ||!hasNextTarEntry  ||  hasHitEOF)  {	  if(!hasNextTarEntry    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
535	[BUG]  [BUGGY]  if(!hasNextTarEntry  ||  isEOF())  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasNextTarEntry  ||  isEOF())  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasNextTarEntry  ||  isEOF())  {	  if(!hasNextTarEntry    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
536	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.NUMBER_OF_TARGET))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.NUMBER_OF_TARGET))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.NUMBER_OF_TARGET))  {	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
537	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.QUOTE_SIZE))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.QUOTE_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.QUOTE_SIZE))  {	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
538	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.BUFFER_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.BUFFER_SIZE))  {	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
539	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.QUOTE_NON_NUMERIC_NUMBERS))  {	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
540	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarEntry.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarEntry.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarEntry.QUOTE_NON_NUMERIC_NUMBERS))  {	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
541	[BUG]  [BUGGY]  if(!hasHitEOF  ||  isEOF())  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  ||  isEOF())  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  ||  isEOF())  {	  if(!hasHitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
542	[BUG]  [BUGGY]  if(getHitEOF()  ||  isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getHitEOF()  ||  isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getHitEOF()  ||  isEnabled(TarArchiveEntry.DEFAULT_TAR_ENTRY))  {	  if(getHitEOF()    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
543	[BUG]  [BUGGY]  if(getHitEOF()  ||  isEnabled(TarArchiveEntry.class)||  isEnabled(TarBuffer.class))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getHitEOF()  ||  isEnabled(TarArchiveEntry.class)||  isEnabled(TarBuffer.class))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getHitEOF()  ||  isEnabled(TarArchiveEntry.class)||  isEnabled(TarBuffer.class))  {	  if(getHitEOF()    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
544	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS  ||  hasHitEOF))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS  ||  hasHitEOF))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS  ||  hasHitEOF))  {	  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
545	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextSize()  <  =  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextSize()  <  =  entryOffset)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  getNextSize()  <  =  entryOffset)  {	  if(getNextTarEntry()    ==    null    ||    getNextSize()    <    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
546	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.SHORT_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.SHORT_BUFFER_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.SHORT_BUFFER_SIZE))  {	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
547	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.UNKNOWN_TAR_ENTRY))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.UNKNOWN_TAR_ENTRY))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.UNKNOWN_TAR_ENTRY))  {	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
548	[BUG]  [BUGGY]  if(hashEOF  ||  isEOF())  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hashEOF  ||  isEOF())  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hashEOF  ||  isEOF())  {	  if(hashEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
549	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_NON_NULL_VALUE)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_NON_NULL_VALUE)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_NON_NULL_VALUE)||  hasHitEOF)  {	  if(hasHitEOF    ||    isEnabled(TarArchiveEntry.QUOTE_NON_NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
550	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarEntry.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarEntry.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarEntry.QUOTE_FIELD_NAMES))  {	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
551	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getNextTarEntry();  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getNextTarEntry();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getNextTarEntry();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)super.getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
552	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(currEntry  ==  null  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(currEntry  ==  null  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {	  if(getNextTarEntry()    ==    null    ||    hasHitEOF    ||    isEnabled(Feature.QUOTE_NON_NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
553	[BUG]  [BUGGY]  if(HitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  hasHitEOF))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(HitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  hasHitEOF))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(HitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  hasHitEOF))  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES    ||    hasHitEOF))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
554	[BUG]  [BUGGY]  if(getHitEOF()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getHitEOF()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getHitEOF()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES,    true))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
555	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  false))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  false))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  false))  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES,    true))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
556	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAME)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAME)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAME)||  hasHitEOF)  {	  if(hasHitEOF    ||    isEnabled(TarArchiveEntry.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
557	[BUG]  [BUGGY]  if(getNextEntry()  ==  null  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextEntry()  ==  null  ||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextEntry()  ==  null  ||  hasHitEOF)  {	  if(getNextEntry()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
558	[BUG]  [BUGGY]  if(getHitEOF()  &&  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getHitEOF()  &&  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getHitEOF()  &&  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {	  if(getHitEOF()    ||    isEnabled(Feature.QUOTE_NON_NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
559	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.NUMBER_INT_ARRAY))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.NUMBER_INT_ARRAY))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(TarArchiveEntry.NUMBER_INT_ARRAY))  {	  if(isEnabled(Feature.QUOTE_NON_NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
560	[BUG]  [BUGGY]  if(getHitEOF()  ||  isEnabled(TarArchiveEntry.NUMBER_INT_RANGE))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getHitEOF()  ||  isEnabled(TarArchiveEntry.NUMBER_INT_RANGE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getHitEOF()  ||  isEnabled(TarArchiveEntry.NUMBER_INT_RANGE))  {	  if(hasHitEOF    &&    isEnabled(TarArchiveEntry.NUMBER_INT_RANGE))    {    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
561	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.NUMBER_INT_ARRAY))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.NUMBER_INT_ARRAY))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.NUMBER_INT_ARRAY))  {	  if(hasHitEOF    &&    isEnabled(TarArchiveEntry.NUMBER_INT_RANGE))    {    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
562	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.NUMBER_INT_RANGE)||  isEnabled(TarArchiveEntry.SHORT_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.NUMBER_INT_RANGE)||  isEnabled(TarArchiveEntry.SHORT_BUFFER_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.NUMBER_INT_RANGE)||  isEnabled(TarArchiveEntry.SHORT_BUFFER_SIZE))  {	  if(hasHitEOF    &&    isEnabled(TarArchiveEntry.NUMBER_INT_RANGE))    {    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
563	[BUG]  [BUGGY]  if(isEOF()  ||  isEmptyTarEntry())  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEOF()  ||  isEmptyTarEntry())  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEOF()  ||  isEmptyTarEntry())  {	  if(hasHitEOF    &&    isEmptyTarEntry())    {    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
564	[BUG]  [BUGGY]  if(getHitEOF()  ||  isEmptyTarEntry())  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getHitEOF()  ||  isEmptyTarEntry())  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getHitEOF()  ||  isEmptyTarEntry())  {	  if(hasHitEOF    &&    isEmptyTarEntry())    {    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
565	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  getNextTarEntry()  ==  null  ||  getNextSize()  ==  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(currEntry  ==  null  ||  getNextTarEntry()  ==  null  ||  getNextSize()  ==  entryOffset)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(currEntry  ==  null  ||  getNextTarEntry()  ==  null  ||  getNextSize()  ==  entryOffset)  {	  if(getNextTarEntry()    ==    null    ||    getNextSize()    ==    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
566	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  getNextTarEntry()  ==  null  ||  isNewTarEntry())  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(currEntry  ==  null  ||  getNextTarEntry()  ==  null  ||  isNewTarEntry())  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(currEntry  ==  null  ||  getNextTarEntry()  ==  null  ||  isNewTarEntry())  {	  if(getNextTarEntry()    ==    null    ||    isNewTarEntry())    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
567	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  isRemoteTarEntry())  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  isRemoteTarEntry())  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  isRemoteTarEntry())  {	  if(getNextTarEntry()    ==    null    ||    isNewTarEntry())    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
568	[BUG]  [BUGGY]  if(getHitEOF()  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getHitEOF()  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getHitEOF()  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {	  if(getHitEOF()    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
569	[BUG]  [BUGGY]  if(getHitEOF()  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_ARRAY))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getHitEOF()  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_ARRAY))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getHitEOF()  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_ARRAY))  {	  if(getHitEOF()    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
570	[BUG]  [BUGGY]  if(!getHitEOF()  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!getHitEOF()  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!getHitEOF()  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {	  if(getHitEOF()    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
571	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.NUMBER_OF_TARGET))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.NUMBER_OF_TARGET))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.NUMBER_OF_TARGET))  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
572	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_TARGET)&&  isEnabled(Feature.HARD_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_TARGET)&&  isEnabled(Feature.HARD_BUFFER_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!isEnabled(Feature.QUOTE_TARGET)&&  isEnabled(Feature.HARD_BUFFER_SIZE))  {	  if(isEnabled(Feature.QUOTE_TARGET)||    isEnabled(Feature.HARD_BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
573	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.HARD_BUFFER_SIZE)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.HARD_BUFFER_SIZE)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.HARD_BUFFER_SIZE)||  hasHitEOF)  {	  if(isEnabled(Feature.QUOTE_TARGET)||    isEnabled(Feature.HARD_BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
574	[BUG]  [BUGGY]  if(hasNextTarEntry  ||!hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasNextTarEntry  ||!hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasNextTarEntry  ||!hasHitEOF)  {	  if(!hasHitEOF    ||    hasNextTarEntry)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
575	[BUG]  [BUGGY]  if(!hasNextEOF  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasNextEOF  ||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasNextEOF  ||  hasHitEOF)  {	  if(!hasHitEOF    ||    hasNextTarEntry)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
576	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.nextEntry.getValue();  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.nextEntry.getValue();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)this.nextEntry.getValue();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)this.currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
577	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.chars.getValue();  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.chars.getValue();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)this.chars.getValue();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)this.currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
578	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  getNextTarEntry()  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(currEntry  ==  null  ||  getNextTarEntry()  ||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(currEntry  ==  null  ||  getNextTarEntry()  ||  hasHitEOF)  {	  if(getNextTarEntry()    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
579	[BUG]  [BUGGY]  if(getHitEOF()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getHitEOF()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getHitEOF()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(getHitEOF()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
580	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(currEntry  ==  null  ||  hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(currEntry  ==  null  ||  hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {	  if(getNextTarEntry()    ==    null    ||    hasHitEOF    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
581	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(true);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(true);  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =  getNextTarEntry(true);	  TarArchiveEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
582	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(0);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(0);  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =  getNextTarEntry(0);	  TarArchiveEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
583	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry().getValue();  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry().getValue();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =  getNextTarEntry().getValue();	  TarArchiveEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
584	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEOF())  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isEOF())  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  isEOF())  {	  if(hasHitEOF    ||    isEOF)    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
585	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
586	[BUG]  [BUGGY]  if(currEntry!=  null)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(currEntry!=  null)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(currEntry!=  null)  {	  if(this.getNextTarEntry()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
587	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(currEntry  ==  null  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(currEntry  ==  null  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(getNextTarEntry()    ==    null    ||    hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
588	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ERROR)||  isEnabled(TarBuffer.DEFAULT_SIZE))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ERROR)||  isEnabled(TarBuffer.DEFAULT_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ERROR)||  isEnabled(TarBuffer.DEFAULT_SIZE))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TAR_ERROR))    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
589	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ERROR)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ERROR)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ERROR)||  hasHitEOF)  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TAR_ERROR))    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
590	[BUG]  [BUGGY]  if(isEnabled(TarBuffer.DEFAULT_TAR_ERROR))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(TarBuffer.DEFAULT_TAR_ERROR))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(TarBuffer.DEFAULT_TAR_ERROR))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TAR_ERROR))    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
591	[BUG]  [BUGGY]  if(!hasHitEOF  &&  currEntry  ==  this)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  currEntry  ==  this)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  currEntry  ==  this)  {	  if(!hasHitEOF    &&    currEntry    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
592	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.class)||  isEnabled(TarBuffer.class))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.class)||  isEnabled(TarBuffer.class))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(TarArchiveEntry.class)||  isEnabled(TarBuffer.class))  {	  if(isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
593	[BUG]  [BUGGY]  this.currEntry  =  getNextTarEntry(true);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  this.currEntry  =  getNextTarEntry(true);  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	this.currEntry  =  getNextTarEntry(true);	  this.currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
594	[BUG]  [BUGGY]  this.currEntry  =  getNextTarEntry(0);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  this.currEntry  =  getNextTarEntry(0);  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	this.currEntry  =  getNextTarEntry(0);	  this.currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
595	[BUG]  [BUGGY]  this.currEntry  =(TarArchiveEntry)super.getNextTarEntry();  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  this.currEntry  =(TarArchiveEntry)super.getNextTarEntry();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	this.currEntry  =(TarArchiveEntry)super.getNextTarEntry();	  this.currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
596	[BUG]  [BUGGY]  if(!getHitEOF()  &&  isEnabled(Feature.QUOTE_TARGET))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!getHitEOF()  &&  isEnabled(Feature.QUOTE_TARGET))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!getHitEOF()  &&  isEnabled(Feature.QUOTE_TARGET))  {	  if(getHitEOF()    ||    isEnabled(Feature.QUOTE_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
597	[BUG]  [BUGGY]  if(getHitEOF()  &&  isEnabled(Feature.QUOTE_TARGET))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getHitEOF()  &&  isEnabled(Feature.QUOTE_TARGET))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getHitEOF()  &&  isEnabled(Feature.QUOTE_TARGET))  {	  if(getHitEOF()    ||    isEnabled(Feature.QUOTE_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
598	[BUG]  [BUGGY]  if(!hasNextEntry)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasNextEntry)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasNextEntry)  {	  if(hasNextEntry    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
599	[BUG]  [BUGGY]  if(HitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(HitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(HitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_NON_NUMERIC_NUMBERS))  {	  if(HitEOF    &&    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
600	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =(TarArchiveEntry)getNextTarEntry();  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  final  TarArchiveEntry  currEntry  =(TarArchiveEntry)getNextTarEntry();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	final  TarArchiveEntry  currEntry  =(TarArchiveEntry)getNextTarEntry();	  final    TarArchiveEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
601	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextTarEntry(true);  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextTarEntry(true);  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	final  TarArchiveEntry  currEntry  =  getNextTarEntry(true);	  final    TarArchiveEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
602	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextTarEntry().getParent();  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextTarEntry().getParent();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	final  TarArchiveEntry  currEntry  =  getNextTarEntry().getParent();	  final    TarArchiveEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
603	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextTarEntry(0);  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextTarEntry(0);  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	final  TarArchiveEntry  currEntry  =  getNextTarEntry(0);	  final    TarArchiveEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
604	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TO_SIZE))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TO_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TO_SIZE))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
605	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.ENTRY_SIZE))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.ENTRY_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.ENTRY_SIZE))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
606	[BUG]  [BUGGY]  if(isEnabled(TarBuffer.BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(TarBuffer.BUFFER_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(TarBuffer.BUFFER_SIZE))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
607	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARNING_SIZE))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARNING_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARNING_SIZE))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
608	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarEntry.QUOTE_NON_NULL_VALUE))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarEntry.QUOTE_NON_NULL_VALUE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarEntry.QUOTE_NON_NULL_VALUE))  {	  if(HitEOF    &&    isEnabled(Feature.QUOTE_NON_NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
609	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FLOAT)||  isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FLOAT)||  isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_FLOAT)||  isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT))  {	  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||    isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
610	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_PREFIX)||  isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_PREFIX)||  isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_PREFIX)||  isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT))  {	  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||    isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
611	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_SIZE)||  isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_SIZE)||  isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_SIZE)||  isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT))  {	  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||    isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
612	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.NUMBER_OF_RANGE))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.NUMBER_OF_RANGE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.NUMBER_OF_RANGE))  {	  if(hasHitEOF    &&    isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
613	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextTarEntry().getName()  >=  null)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextTarEntry().getName()  >=  null)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  getNextTarEntry().getName()  >=  null)  {	  if(getNextTarEntry()    ==    null    ||    getNextTarEntry().getName()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
614	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextTarEntry().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextTarEntry().getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  getNextTarEntry().getType()  ==  Token.FUNCTION)  {	  if(getNextTarEntry()    ==    null    ||    getNextTarEntry().getName()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
615	[BUG]  [BUGGY]  if(hasNext  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasNext  ||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasNext  ||  hasHitEOF)  {	  if(hasHitEOF    ||    hasNextEntry)    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
616	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARN_ENTRY)||  isEnabled(TarBuffer.DEFAULT_SIZE))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARN_ENTRY)||  isEnabled(TarBuffer.DEFAULT_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARN_ENTRY)||  isEnabled(TarBuffer.DEFAULT_SIZE))  {	  if(hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TARN_ENTRY))    {    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
617	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  getNextTarEntry().getParent()!=  null)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(currEntry  ==  null  ||  getNextTarEntry().getParent()!=  null)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(currEntry  ==  null  ||  getNextTarEntry().getParent()!=  null)  {	  if(getNextTarEntry()    ==    null    ||    getNextTarEntry().getParent()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
618	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextTarEntry().getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextTarEntry().getType()  ==  Token.GETPROP)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  getNextTarEntry().getType()  ==  Token.GETPROP)  {	  if(getNextTarEntry()    ==    null    ||    getNextTarEntry().getParent()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
619	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  entryOffset  >  0)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  entryOffset  >  0)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  entryOffset  >  0)  {	  if(getNextTarEntry()    ==    null    ||    entryOffset    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
620	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  getNextTarEntry()  ==  null  ||  entryOffset  <  0)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(currEntry  ==  null  ||  getNextTarEntry()  ==  null  ||  entryOffset  <  0)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(currEntry  ==  null  ||  getNextTarEntry()  ==  null  ||  entryOffset  <  0)  {	  if(getNextTarEntry()    ==    null    ||    entryOffset    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
621	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  isEnabled(Feature.SHORT_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  isEnabled(Feature.SHORT_BUFFER_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  isEnabled(Feature.SHORT_BUFFER_SIZE))  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
622	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarEntry.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarEntry.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarEntry.QUOTE_NON_NUMERIC_NUMBERS))  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
623	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.START_TARGET))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.START_TARGET))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  isEnabled(TarArchiveEntry.START_TARGET))  {	  if(hasHitEOF    ||    isEnabled(TarArchiveEntry.QUOTE_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
624	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES)||  hasHitEOF)  {	  if(hasHitEOF    ||    isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
625	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAME)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
626	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAME)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
627	[BUG]  [BUGGY]  if(this.getNextTarEntry()  ==  null  ||  getNextTarEntry()!=  null)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(this.getNextTarEntry()  ==  null  ||  getNextTarEntry()!=  null)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(this.getNextTarEntry()  ==  null  ||  getNextTarEntry()!=  null)  {	  if(getNextTarEntry()    ==    null    ||    getNextTarEntry()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
628	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.SMALL_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.SMALL_BUFFER_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.SMALL_BUFFER_SIZE))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(TarArchiveEntry.BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
629	[BUG]  [BUGGY]  TarEntry  currEntry  =(TarArchiveEntry)getNextTarEntry();  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarEntry  currEntry  =(TarArchiveEntry)getNextTarEntry();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarEntry  currEntry  =(TarArchiveEntry)getNextTarEntry();	  TarEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
630	[BUG]  [BUGGY]  TarEntry  currEntry  =  getNextTarEntry(0);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarEntry  currEntry  =  getNextTarEntry(0);  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarEntry  currEntry  =  getNextTarEntry(0);	  TarEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
631	[BUG]  [BUGGY]  if(getNextTarEntry()!=  null  ||  hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()!=  null  ||  hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()!=  null  ||  hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {	  if(getNextTarEntry().hasHitEOF    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
632	[BUG]  [BUGGY]  if(getHitEOF()  ||  isEnabled(TarArchiveEntry.START_TARGET_NAMES))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getHitEOF()  ||  isEnabled(TarArchiveEntry.START_TARGET_NAMES))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getHitEOF()  ||  isEnabled(TarArchiveEntry.START_TARGET_NAMES))  {	  if(hasHitEOF    &&    isEnabled(TarArchiveEntry.START_TARGET_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
633	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(null,  true);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(null,  true);  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =  getNextTarEntry(null,  true);	  TarArchiveEntry    currEntry    =    getNextTarEntry(null);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
634	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(null,  this);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextTarEntry(null,  this);  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =  getNextTarEntry(null,  this);	  TarArchiveEntry    currEntry    =    getNextTarEntry(null);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
635	[BUG]  [BUGGY]  if(getHitEOF()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getHitEOF()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getHitEOF()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(getHitEOF()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
636	[BUG]  [BUGGY]  if(!getHitEOF()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!getHitEOF()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!getHitEOF()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(getHitEOF()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
637	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.getName()!=  null)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(currEntry  ==  null  ||  currEntry.getName()!=  null)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(currEntry  ==  null  ||  currEntry.getName()!=  null)  {	  if(currEntry    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
638	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  entryOffset  <  0)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(currEntry  ==  null  ||  entryOffset  <  0)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(currEntry  ==  null  ||  entryOffset  <  0)  {	  if(currEntry    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
639	[BUG]  [BUGGY]  if(!hasHitEOF  &&  currEntry.getNextTar()!=  null)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  currEntry.getNextTar()!=  null)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  currEntry.getNextTar()!=  null)  {	  if(!hasHitEOF    &&    hasNextTarEntry)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
640	[BUG]  [BUGGY]  if(!hasHitEOF  &&  currEntry.getNextTar()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  currEntry.getNextTar()  ==  null)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  currEntry.getNextTar()  ==  null)  {	  if(!hasHitEOF    &&    hasNextTarEntry)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
641	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH)||  isEnabled(Feature.QUOTE_NON_NUMERIC_FIRST))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH)||  isEnabled(Feature.QUOTE_NON_NUMERIC_FIRST))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH)||  isEnabled(Feature.QUOTE_NON_NUMERIC_FIRST))  {	  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||    isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
642	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_SIZE)||  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_SIZE)||  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_SIZE)||  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {	  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||    isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
643	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_SIZE)||  isEnabled(Feature.QUOTE_SIZE))  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_SIZE)||  isEnabled(Feature.QUOTE_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_SIZE)||  isEnabled(Feature.QUOTE_SIZE))  {	  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||    isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
644	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH)||  isEnabled(Feature.QUOTE_NON_NUMERIC_SIZE))  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH)||  isEnabled(Feature.QUOTE_NON_NUMERIC_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH)||  isEnabled(Feature.QUOTE_NON_NUMERIC_SIZE))  {	  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||    isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
645	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.nextEntry.clone();  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.nextEntry.clone();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)this.nextEntry.clone();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.clone();    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
646	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_NON_NULL_VALUE)&&  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_NON_NULL_VALUE)&&  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!isEnabled(Feature.QUOTE_NON_NULL_VALUE)&&  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {	  if(isEnabled(Feature.QUOTE_NON_NULL_VALUE)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
647	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NULL_VALUE)||  hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NULL_VALUE)||  hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_NON_NULL_VALUE)||  hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {	  if(isEnabled(Feature.QUOTE_NON_NULL_VALUE)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
648	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY_NAME,  longName))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY_NAME,  longName))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY_NAME,  longName))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TAR_ENTRY_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
649	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY_NAME)||  isEnabled(TarBuffer.DEFAULT_SIZE))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY_NAME)||  isEnabled(TarBuffer.DEFAULT_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY_NAME)||  isEnabled(TarBuffer.DEFAULT_SIZE))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TAR_ENTRY_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
650	[BUG]  [BUGGY]  if(isEnabled(TarBuffer.DEFAULT_TAR_ENTRY_NAME))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(TarBuffer.DEFAULT_TAR_ENTRY_NAME))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(TarBuffer.DEFAULT_TAR_ENTRY_NAME))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TAR_ENTRY_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
651	[BUG]  [BUGGY]  if(getNextEntry()  ==  null  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_TARGET))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextEntry()  ==  null  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_TARGET))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextEntry()  ==  null  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_TARGET))  {	  if(getNextTarEntry()    ==    null    ||    hasHitEOF    ||    isEnabled(Feature.QUOTE_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
652	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NULL_VALUE)||  isEnabled(Feature.SHORT_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NULL_VALUE)||  isEnabled(Feature.SHORT_BUFFER_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(Feature.QUOTE_NON_NULL_VALUE)||  isEnabled(Feature.SHORT_BUFFER_SIZE))  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_NON_NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
653	[BUG]  [BUGGY]  if(!hasHitEOF  &&  currEntry.getNextTarEntry())  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  currEntry.getNextTarEntry())  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  currEntry.getNextTarEntry())  {	  if(!hasHitEOF    &&    getNextTarEntry())    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
654	[BUG]  [BUGGY]  if(!hasHitEOF  &&  getNextEntry())  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  getNextEntry())  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  getNextEntry())  {	  if(!hasHitEOF    &&    getNextTarEntry())    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
655	[BUG]  [BUGGY]  if(!hasHitEOF  ||  getNextTarEntry())  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  ||  getNextTarEntry())  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  ||  getNextTarEntry())  {	  if(!hasHitEOF    &&    getNextTarEntry())    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
656	[BUG]  [BUGGY]  if(hasHitEOF  ||  getNextTarEntry())  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  getNextTarEntry())  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  getNextTarEntry())  {	  if(!hasHitEOF    &&    getNextTarEntry())    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
657	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarEntry.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarEntry.QUOTE_FIELD_NAME))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarEntry.QUOTE_FIELD_NAME))  {	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
658	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.START_TARGET_NAME))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.START_TARGET_NAME))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.START_TARGET_NAME))  {	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
659	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
660	[BUG]  [BUGGY]  if(hasNextTarEntry  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasNextTarEntry  &&  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasNextTarEntry  &&  hasHitEOF)  {	  if(hasHitEOF    &&    hasNextTarEntry)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
661	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARNING_ERROR)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARNING_ERROR)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARNING_ERROR)||  hasHitEOF)  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TARNING_ERROR))    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
662	[BUG]  [BUGGY]  if(currentTarEntry  ==  null  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(currentTarEntry  ==  null  ||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(currentTarEntry  ==  null  ||  hasHitEOF)  {	  if(hasNextTarEntry    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
663	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.SHORT_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.SHORT_BUFFER_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.SHORT_BUFFER_SIZE))  {	  if(hasHitEOF    &&    isEnabled(TarArchiveEntry.BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
664	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.class)||  hasHitEOF  ||  isEnabled(TarBuffer.class))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.class)||  hasHitEOF  ||  isEnabled(TarBuffer.class))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(TarArchiveEntry.class)||  hasHitEOF  ||  isEnabled(TarBuffer.class))  {	  if(isEnabled(TarArchiveEntry.class)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
665	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  isEOF())  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(currEntry  ==  null  ||  isEOF())  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(currEntry  ==  null  ||  isEOF())  {	  if(currEntry    ==    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
666	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.getValue();  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.getValue();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)this.getValue();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
667	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(currEntry  ==  null  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(currEntry  ==  null  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(getNextTarEntry()    ==    null    ||    hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
668	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {	  if(getNextTarEntry()    ==    null    ||    hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
669	[BUG]  [BUGGY]  if(entrySize  >  entryOffset  ||  hasNextEntry  ||  entryOffset  >  entrySize)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(entrySize  >  entryOffset  ||  hasNextEntry  ||  entryOffset  >  entrySize)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(entrySize  >  entryOffset  ||  hasNextEntry  ||  entryOffset  >  entrySize)  {	  if(hasHitEOF    ||    hasNextEntry    ||    entryOffset    >    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
670	[BUG]  [BUGGY]  if(entryOffset  ||  hasNextEntry  ||  entrySize  >  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(entryOffset  ||  hasNextEntry  ||  entrySize  >  entryOffset)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(entryOffset  ||  hasNextEntry  ||  entrySize  >  entryOffset)  {	  if(hasHitEOF    ||    hasNextEntry    ||    entryOffset    >    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
671	[BUG]  [BUGGY]  if(entrySize  >  entrySize  ||  hasNextEntry  ||  entryOffset  >  entrySize)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(entrySize  >  entrySize  ||  hasNextEntry  ||  entryOffset  >  entrySize)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(entrySize  >  entrySize  ||  hasNextEntry  ||  entryOffset  >  entrySize)  {	  if(hasHitEOF    ||    hasNextEntry    ||    entryOffset    >    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
672	[BUG]  [BUGGY]  if(entrySize  <  =  hasHitEOF  ||  entryOffset  >  entrySize)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  hasHitEOF  ||  entryOffset  >  entrySize)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(entrySize  <  =  hasHitEOF  ||  entryOffset  >  entrySize)  {	  if(hasHitEOF    ||    hasNextEntry    ||    entryOffset    >    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
673	[BUG]  [BUGGY]  if(HitEOF  ||  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(HitEOF  ||  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(HitEOF  ||  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {	  if(hasHitEOF    ||    isEnabled(TarArchiveEntry.class)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
674	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_SIZE)||  isEnabled(Feature.SHORT_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_SIZE)||  isEnabled(Feature.SHORT_BUFFER_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_SIZE)||  isEnabled(Feature.SHORT_BUFFER_SIZE))  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.SHORT_BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
675	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)getParent();  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)getParent();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)getParent();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)getObject();    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
676	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_ENTRY_SIZE)||  isEnabled(TarBuffer.DEFAULT_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_ENTRY_SIZE)||  isEnabled(TarBuffer.DEFAULT_BUFFER_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_ENTRY_SIZE)||  isEnabled(TarBuffer.DEFAULT_BUFFER_SIZE))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_ENTRY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
677	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_ENTRY_SIZE)||  isEnabled(TarBuffer.DEFAULT_HEALTH_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_ENTRY_SIZE)||  isEnabled(TarBuffer.DEFAULT_HEALTH_BUFFER_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_ENTRY_SIZE)||  isEnabled(TarBuffer.DEFAULT_HEALTH_BUFFER_SIZE))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_ENTRY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
678	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.QUOTE_EOF))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.QUOTE_EOF))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.QUOTE_EOF))  {	  if(getHitEOF()    ||    isEnabled(Feature.QUOTE_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
679	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextTarEntry().getType()!=  Token.VAR)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextTarEntry().getType()!=  Token.VAR)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  getNextTarEntry().getType()!=  Token.VAR)  {	  if(getNextTarEntry()    ==    null    ||    getNextTarEntry().getParent()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
680	[BUG]  [BUGGY]  if(hasHitEOF  ||  hasNextEntry  ||  entryOffset  <  entrySize)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  hasNextEntry  ||  entryOffset  <  entrySize)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  hasNextEntry  ||  entryOffset  <  entrySize)  {	  if(hasHitEOF    ||    hasNextEntry    ||    entryOffset    >    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
681	[BUG]  [BUGGY]  if(hasHitEOF  ||  hasNextEntry  ||  entryOffset  >=  entrySize)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  hasNextEntry  ||  entryOffset  >=  entrySize)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  hasNextEntry  ||  entryOffset  >=  entrySize)  {	  if(hasHitEOF    ||    hasNextEntry    ||    entryOffset    >    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
682	[BUG]  [BUGGY]  if(entrySize  <  entryOffset  ||  hasNextEntry  ||  entryOffset  >  entrySize)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(entrySize  <  entryOffset  ||  hasNextEntry  ||  entryOffset  >  entrySize)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(entrySize  <  entryOffset  ||  hasNextEntry  ||  entryOffset  >  entrySize)  {	  if(hasHitEOF    ||    hasNextEntry    ||    entryOffset    >    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
683	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.class)||  hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.class)||  hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(TarArchiveEntry.class)||  hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {	  if(isEnabled(TarArchiveEntry.class)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
684	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_PREFIX)||  isEnabled(TarBuffer.DEFAULT_ENTRY_SIZE))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_PREFIX)||  isEnabled(TarBuffer.DEFAULT_ENTRY_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_PREFIX)||  isEnabled(TarBuffer.DEFAULT_ENTRY_SIZE))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TAR_PREFIX))    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
685	[BUG]  [BUGGY]  if(getHitEOF()  ||  isEnabled(TarArchiveEntry.BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getHitEOF()  ||  isEnabled(TarArchiveEntry.BUFFER_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getHitEOF()  ||  isEnabled(TarArchiveEntry.BUFFER_SIZE))  {	  if(hasHitEOF    &&    isEnabled(TarArchiveEntry.BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
686	[BUG]  [BUGGY]  if(getNextTarEntry().hasChildren()  ||  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry().hasChildren()  ||  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry().hasChildren()  ||  isEnabled(TarArchiveEntry.class))  {	  if(getNextTarEntry().hasHitEOF    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
687	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextSize()  <  entrySize)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextSize()  <  entrySize)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  getNextSize()  <  entrySize)  {	  if(getNextTarEntry()    ==    null    ||    getNextSize()    <    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
688	[BUG]  [BUGGY]  if(hasHitEOF  &&  entryOffset  >  0)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  entryOffset  >  0)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  entryOffset  >  0)  {	  if(HitEOF    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
689	[BUG]  [BUGGY]  if(!hasHitEOF  &&  TarBuffer.this.getNextTarEntry())  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  TarBuffer.this.getNextTarEntry())  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  TarBuffer.this.getNextTarEntry())  {	  if(HitEOF    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
690	[BUG]  [BUGGY]  while(entryOffset  <  0)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  while(entryOffset  <  0)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	while(entryOffset  <  0)  {  throw  new  RuntimeException( " ");  }	  if(entryOffset    <    0)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
691	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  entrySize  >  0)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(entryOffset  <  0  ||  entrySize  >  0)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(entryOffset  <  0  ||  entrySize  >  0)  {  throw  new  RuntimeException( " ");  }	  if(entryOffset    <    0)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
692	[BUG]  [BUGGY]  Thread.currentThread().interrupt();  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  Thread.currentThread().interrupt();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	Thread.currentThread().interrupt();	  if(entryOffset    <    0)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
693	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(TarArchiveEntry.class);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  Thread.currentThread().setContextClassLoader(TarArchiveEntry.class);  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	Thread.currentThread().setContextClassLoader(TarArchiveEntry.class);	  if(entryOffset    <    0)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
694	[BUG]  [BUGGY]  if(getHitEOF()  ||  isEnabled(TarArchiveEntry.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getHitEOF()  ||  isEnabled(TarArchiveEntry.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getHitEOF()  ||  isEnabled(TarArchiveEntry.QUOTE_NON_NUMERIC_NUMBERS))  {	  if(getHitEOF()    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
695	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextPosition()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextPosition()  ==  null)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  getNextPosition()  ==  null)  {	  if(getNextTarEntry()    ==    null    ||    getNextTarEntry()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
696	[BUG]  [BUGGY]  this.currEntry  =  createNextTarEntry();  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  this.currEntry  =  createNextTarEntry();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	this.currEntry  =  createNextTarEntry();	  this.currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
697	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.getName().endsWith( "/ "))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(currEntry  ==  null  ||  currEntry.getName().endsWith( "/ "))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(currEntry  ==  null  ||  currEntry.getName().endsWith( "/ "))  {	  if(currEntry    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
698	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  entryOffset  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(currEntry  ==  null  ||  entryOffset  <  =  0)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(currEntry  ==  null  ||  entryOffset  <  =  0)  {	  if(currEntry    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
699	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  entrySize  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(currEntry  ==  null  ||  entrySize  <  =  0)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(currEntry  ==  null  ||  entrySize  <  =  0)  {	  if(currEntry    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
700	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  _getNextTarEntry();  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =  _getNextTarEntry();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =  _getNextTarEntry();	  TarArchiveEntry    currEntry    =    this.getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
701	[BUG]  [BUGGY]  if(!hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE)||  hasHitEOF)  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_NON_NULL_VALUE)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
702	[BUG]  [BUGGY]  if(getHitEOF()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.SHORT_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getHitEOF()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.SHORT_BUFFER_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getHitEOF()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.SHORT_BUFFER_SIZE))  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.SHORT_BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
703	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_BUFFER_SIZE)||  isEnabled(Feature.SHORT_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_BUFFER_SIZE)||  isEnabled(Feature.SHORT_BUFFER_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(Feature.QUOTE_BUFFER_SIZE)||  isEnabled(Feature.SHORT_BUFFER_SIZE))  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.SHORT_BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
704	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.BUFFER_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.BUFFER_SIZE))  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.SHORT_BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
705	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {	  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
706	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  TarArchiveEntry.class)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  TarArchiveEntry.class)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  TarArchiveEntry.class)  {	  if(getNextTarEntry()    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
707	[BUG]  [BUGGY]  if(hasHitEOF  ||  entryOffset  >  entrySize)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  entryOffset  >  entrySize)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  entryOffset  >  entrySize)  {	  if(hashEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
708	[BUG]  [BUGGY]  if(!hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
709	[BUG]  [BUGGY]  if(getNextTarEntry()!=  null  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()!=  null  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()!=  null  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(getNextTarEntry()    ==    null    ||    hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
710	[BUG]  [BUGGY]  if(getNextTarEntry()!=  null  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_TARGET))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()!=  null  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_TARGET))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()!=  null  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_TARGET))  {	  if(getNextTarEntry()    ==    null    ||    hasHitEOF    ||    isEnabled(Feature.QUOTE_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
711	[BUG]  [BUGGY]  if(getNextTarEntry()!=  null  ||  isEnabled(Feature.QUOTE_TARGET))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()!=  null  ||  isEnabled(Feature.QUOTE_TARGET))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()!=  null  ||  isEnabled(Feature.QUOTE_TARGET))  {	  if(getNextTarEntry()    ==    null    ||    hasHitEOF    ||    isEnabled(Feature.QUOTE_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
712	[BUG]  [BUGGY]  if(HitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(HitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(HitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(HitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
713	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.NUMBER_INT_VALUE))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.NUMBER_INT_VALUE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.NUMBER_INT_VALUE))  {	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_NON_NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
714	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.RANGE_NON_NULL_VALUE))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.RANGE_NON_NULL_VALUE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.RANGE_NON_NULL_VALUE))  {	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_NON_NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
715	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.QUOTE_TARGET))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.QUOTE_TARGET))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(TarArchiveEntry.QUOTE_TARGET))  {	  if(hasHitEOF    ||    isEnabled(TarArchiveEntry.QUOTE_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
716	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.QUOTE_TARGET)||  isEnabled(TarArchiveEntry.HITE_EOF))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.QUOTE_TARGET)||  isEnabled(TarArchiveEntry.HITE_EOF))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(TarArchiveEntry.QUOTE_TARGET)||  isEnabled(TarArchiveEntry.HITE_EOF))  {	  if(hasHitEOF    ||    isEnabled(TarArchiveEntry.QUOTE_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
717	[BUG]  [BUGGY]  if(!hasHitEOF  &&  getNextEntry()  ==  null)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  getNextEntry()  ==  null)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  getNextEntry()  ==  null)  {	  if(!hasHitEOF    &&    getNextTarEntry()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
718	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.RANGE_NON_NULL_VALUE))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.RANGE_NON_NULL_VALUE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.RANGE_NON_NULL_VALUE))  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_NON_NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
719	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.NUMBER_INT_VALUE))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.NUMBER_INT_VALUE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.NUMBER_INT_VALUE))  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_NON_NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
720	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextSize()  ==  entrySize)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextSize()  ==  entrySize)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  getNextSize()  ==  entrySize)  {	  if(getNextTarEntry()    ==    null    ||    getNextSize()    ==    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
721	[BUG]  [BUGGY]  if(HitEOF  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(HitEOF  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(HitEOF  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {	  if(HitEOF    &&    isEnabled(Feature.QUOTE_NON_NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
722	[BUG]  [BUGGY]  if(!hasHitEOF  &&  getNextTarEntry()  ==  null  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  getNextTarEntry()  ==  null  ||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  getNextTarEntry()  ==  null  ||  hasHitEOF)  {	  if(!hasHitEOF    &&    getNextTarEntry()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
723	[BUG]  [BUGGY]  if(TarArchiveEntry.class.isAssignableFrom(this.getNextTarEntry()))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(TarArchiveEntry.class.isAssignableFrom(this.getNextTarEntry()))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(TarArchiveEntry.class.isAssignableFrom(this.getNextTarEntry()))  {	  if(this.getNextTarEntry()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
724	[BUG]  [BUGGY]  if(TarArchiveEntry.this.getNextTarEntry()!=  null)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(TarArchiveEntry.this.getNextTarEntry()!=  null)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(TarArchiveEntry.this.getNextTarEntry()!=  null)  {	  if(this.getNextTarEntry()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
725	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.RANGE_TARGET))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.RANGE_TARGET))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.RANGE_TARGET))  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
726	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
727	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_ENTRY_SPACE))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_ENTRY_SPACE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_ENTRY_SPACE))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
728	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_SIZE))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_SIZE))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
729	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.GET_SIZE))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.GET_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.GET_SIZE))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
730	[BUG]  [BUGGY]  TarEntry  currEntry  =  getNextStandardEntry();  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarEntry  currEntry  =  getNextStandardEntry();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarEntry  currEntry  =  getNextStandardEntry();	  TarEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
731	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEmptyTarEntry()  &&  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEmptyTarEntry()  &&  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEmptyTarEntry()  &&  isEnabled(TarArchiveEntry.class))  {	  if(hasHitEOF    &&    isEmptyTarEntry())    {    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
732	[BUG]  [BUGGY]  if(!hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
733	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_ENTRY_SIZE,  TarBuffer.DEFAULT_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_ENTRY_SIZE,  TarBuffer.DEFAULT_BUFFER_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_ENTRY_SIZE,  TarBuffer.DEFAULT_BUFFER_SIZE))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_ENTRY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
734	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_ENTRY_SIZE)||  isEnabled(TarBuffer.DEFAULT_SHELL_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_ENTRY_SIZE)||  isEnabled(TarBuffer.DEFAULT_SHELL_BUFFER_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_ENTRY_SIZE)||  isEnabled(TarBuffer.DEFAULT_SHELL_BUFFER_SIZE))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_ENTRY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
735	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY,  this))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY,  this))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY,  this))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TAR_ENTRY))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
736	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.RANGE_TARGET))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.RANGE_TARGET))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.RANGE_TARGET))  {	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
737	[BUG]  [BUGGY]  if(!hasHitEOF  &&  currEntry.getNextTar())  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  currEntry.getNextTar())  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  currEntry.getNextTar())  {	  if(!hasHitEOF    &&    hasNextTarEntry)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
738	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.NUMBER_INT_RANGE)||  isEnabled(TarArchiveEntry.BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.NUMBER_INT_RANGE)||  isEnabled(TarArchiveEntry.BUFFER_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.NUMBER_INT_RANGE)||  isEnabled(TarArchiveEntry.BUFFER_SIZE))  {	  if(hasHitEOF    &&    isEnabled(TarArchiveEntry.NUMBER_INT_RANGE))    {    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
739	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)super.clone();  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)super.clone();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)super.clone();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)super.getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
740	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.RANGE_NON_NUMERIC_NUMBERS))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.RANGE_NON_NUMERIC_NUMBERS))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.RANGE_NON_NUMERIC_NUMBERS))  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
741	[BUG]  [BUGGY]  if(!hasHitEOF  &&  currEntry  ==  null  ||  entryOffset  <  0)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  currEntry  ==  null  ||  entryOffset  <  0)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  currEntry  ==  null  ||  entryOffset  <  0)  {	  if(!hasHitEOF    &&    currEntry    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
742	[BUG]  [BUGGY]  if(!hasHitEOF  &&  currEntry  ==  null  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  currEntry  ==  null  ||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  currEntry  ==  null  ||  hasHitEOF)  {	  if(!hasHitEOF    &&    currEntry    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
743	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.entrySize.clone();  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.entrySize.clone();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)this.entrySize.clone();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.clone();    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
744	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.entryOffset.clone();  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.entryOffset.clone();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)this.entryOffset.clone();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.clone();    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
745	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.first.clone();  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.first.clone();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)this.first.clone();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.clone();    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
746	[BUG]  [BUGGY]  if(hasHitEOF  ||  isNextEntry())  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isNextEntry())  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  isNextEntry())  {	  if(hasNextEntry    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
747	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.SHORT_TARGET)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.SHORT_TARGET)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  isEnabled(Feature.QUOTE_TARGET)||  isEnabled(Feature.SHORT_TARGET)||  hasHitEOF)  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_TARGET)||    isEnabled(Feature.SHORT_TARGET))    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
748	[BUG]  [BUGGY]  if(hasHitEOF  ||  hasNextEntry  ||  entryOffset  <  0)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  hasNextEntry  ||  entryOffset  <  0)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  hasNextEntry  ||  entryOffset  <  0)  {	  if(hasHitEOF    ||    hasNextEntry)    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
749	[BUG]  [BUGGY]  if(hasHitEOF  ||  hasNextEntry  ||  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  hasNextEntry  ||  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  hasNextEntry  ||  isEnabled(TarArchiveEntry.class))  {	  if(hasHitEOF    ||    hasNextEntry)    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
750	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.NON_NULL_VALUE))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.NON_NULL_VALUE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(TarArchiveEntry.NON_NULL_VALUE))  {	  if(isEnabled(Feature.QUOTE_NON_NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
751	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.NUMBER_INT_VALUE))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.NUMBER_INT_VALUE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(TarArchiveEntry.NUMBER_INT_VALUE))  {	  if(isEnabled(Feature.QUOTE_NON_NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
752	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextStandardEntry();  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =  getNextStandardEntry();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =  getNextStandardEntry();	  TarArchiveEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
753	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEOF  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isEOF  ||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  isEOF  ||  hasHitEOF)  {	  if(hasHitEOF    ||    isEOF)    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
754	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextFileEntry();  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextFileEntry();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	final  TarArchiveEntry  currEntry  =  getNextFileEntry();	  final    TarArchiveEntry    currEntry    =    getNextTarEntry();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
755	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARN_ENTRY)||  isEnabled(TarBuffer.DEFAULT_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARN_ENTRY)||  isEnabled(TarBuffer.DEFAULT_BUFFER_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARN_ENTRY)||  isEnabled(TarBuffer.DEFAULT_BUFFER_SIZE))  {	  if(hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TARN_ENTRY))    {    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
756	[BUG]  [BUGGY]  if(this.hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  hasHitEOF))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(this.hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  hasHitEOF))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(this.hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  hasHitEOF))  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES    ||    hasHitEOF))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
757	[BUG]  [BUGGY]  if(HitEOF  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(HitEOF  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(HitEOF  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {	  if(HitEOF    &&    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
758	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  containsHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  containsHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  containsHitEOF)  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
759	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.currEntry.getData();  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.currEntry.getData();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)this.currEntry.getData();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)this.currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
760	[BUG]  [BUGGY]  if(!hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
761	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF  ||  isEnabled(TarArchiveEntry.BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF  ||  isEnabled(TarArchiveEntry.BUFFER_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF  ||  isEnabled(TarArchiveEntry.BUFFER_SIZE))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAME)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
762	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH)||  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH)||  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH)||  isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))  {	  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||    isEnabled(Feature.QUOTE_NON_NUMERIC_BACKSLASH))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
763	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARNING_ERROR,  this))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARNING_ERROR,  this))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARNING_ERROR,  this))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TARNING_ERROR))    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
764	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARNING_ERROR)||  isEnabled(TarBuffer.DEFAULT_SIZE))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARNING_ERROR)||  isEnabled(TarBuffer.DEFAULT_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TARNING_ERROR)||  isEnabled(TarBuffer.DEFAULT_SIZE))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TARNING_ERROR))    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
765	[BUG]  [BUGGY]  if(!hasHitEOF  &&  getNextTarEntry()  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  getNextTarEntry()  ||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  getNextTarEntry()  ||  hasHitEOF)  {	  if(!hasHitEOF    &&    getNextTarEntry())    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
766	[BUG]  [BUGGY]  if(!hasHitEOF  &&  getNextTarEntry()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  getNextTarEntry()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  getNextTarEntry()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!hasHitEOF    &&    getNextTarEntry())    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
767	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true)||  hasHitEOF)  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES,    true))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
768	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.first.getValue();  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)this.first.getValue();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)this.first.getValue();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
769	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_TARGET)||  hasHitEOF  ||  isEnabled(TarArchiveEntry.BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_TARGET)||  hasHitEOF  ||  isEnabled(TarArchiveEntry.BUFFER_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_TARGET)||  hasHitEOF  ||  isEnabled(TarArchiveEntry.BUFFER_SIZE))  {	  if(isEnabled(Feature.QUOTE_TARGET)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
770	[BUG]  [BUGGY]  if(!hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  ||  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES))  {	  if(hasHitEOF    ||    isEnabled(TarArchiveEntry.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
771	[BUG]  [BUGGY]  if(this.getNextTarEntry()  ==  null  ||  this.getNextTarEntry()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(this.getNextTarEntry()  ==  null  ||  this.getNextTarEntry()  ==  null)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(this.getNextTarEntry()  ==  null  ||  this.getNextTarEntry()  ==  null)  {	  if(this.getNextTarEntry()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
772	[BUG]  [BUGGY]  if(getNextTarEntry()!=  null  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()!=  null  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()!=  null  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {	  if(getNextTarEntry()    ==    null    ||    hasHitEOF    ||    isEnabled(Feature.QUOTE_NON_NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
773	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  hasNextTarEntry)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(entryOffset  <  0  ||  hasNextTarEntry)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(entryOffset  <  0  ||  hasNextTarEntry)  {	  if(!hasHitEOF    ||    hasNextTarEntry)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
774	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(entryOffset  <  0  ||  hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(entryOffset  <  0  ||  hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {	  if(!hasHitEOF    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
775	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(entryOffset  <  0  ||  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(entryOffset  <  0  ||  isEnabled(TarArchiveEntry.class))  {	  if(!hasHitEOF    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
776	[BUG]  [BUGGY]  if(!hasHitEOF  ||  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  ||  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  ||  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {	  if(!hasHitEOF    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
777	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ERROR,  this))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ERROR,  this))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ERROR,  this))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TAR_ERROR))    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
778	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.hasNext())  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(currEntry  ==  null  ||  currEntry.hasNext())  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(currEntry  ==  null  ||  currEntry.hasNext())  {	  if(currEntry    ==    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
779	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.START_TARGET_NAME))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.START_TARGET_NAME))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.START_TARGET_NAME))  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
780	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAME)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAME)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.QUOTE_FIELD_NAME)||  hasHitEOF)  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
781	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT))  {	  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||    isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
782	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class,  getName()))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class,  getName()))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class,  getName()))  {	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
783	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.NAME_QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.NAME_QUOTE_FIELD_NAME))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  ||  isEnabled(TarArchiveEntry.NAME_QUOTE_FIELD_NAME))  {	  if(hasHitEOF    ||    isEnabled(TarArchiveEntry.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
784	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)getArgument();  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)getArgument();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)getArgument();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)getObject();    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
785	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)getObject().clone();  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  TarArchiveEntry  currEntry  =(TarArchiveEntry)getObject().clone();  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	TarArchiveEntry  currEntry  =(TarArchiveEntry)getObject().clone();	  TarArchiveEntry    currEntry    =(TarArchiveEntry)getObject();    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
786	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY_NAME,  this))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY_NAME,  this))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(!hasHitEOF  &&  isEnabled(TarBuffer.DEFAULT_TAR_ENTRY_NAME,  this))  {	  if(!hasHitEOF    &&    isEnabled(TarBuffer.DEFAULT_TAR_ENTRY_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
787	[BUG]  [BUGGY]  if(HitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(HitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(HitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(HitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
788	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.NAME_QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.NAME_QUOTE_FIELD_NAME))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.NAME_QUOTE_FIELD_NAME))  {	  if(HitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
789	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
790	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF  ||  isEnabled(TarArchiveEntry.BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF  ||  isEnabled(TarArchiveEntry.BUFFER_SIZE))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF  ||  isEnabled(TarArchiveEntry.BUFFER_SIZE))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
791	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  hasHitEOF  ||  isEnabled(TarArchiveEntry.class)||  isEnabled(TarBuffer.class))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  hasHitEOF  ||  isEnabled(TarArchiveEntry.class)||  isEnabled(TarBuffer.class))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  hasHitEOF  ||  isEnabled(TarArchiveEntry.class)||  isEnabled(TarBuffer.class))  {	  if(getNextTarEntry()    ==    null    ||    hasHitEOF    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
792	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextTarEntry())  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextTarEntry())  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  getNextTarEntry())  {	  if(getNextTarEntry()    ==    null    ||    isNewTarEntry())    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
793	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextSize().getName()!=  null)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  getNextSize().getName()!=  null)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  getNextSize().getName()!=  null)  {	  if(getNextTarEntry()    ==    null    ||    getNextTarEntry().getName()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
794	[BUG]  [BUGGY]  if(getNextTarEntry()!=  null  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()!=  null  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()!=  null  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(getNextTarEntry()    ==    null    ||    hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
795	[BUG]  [BUGGY]  if(getNextTarEntry()  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  TarArchiveEntry  getNextTarEntry()  throws  IOException  {      [BUGGY]  if(getNextTarEntry()  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [BUGGY]      return  null;  }  if  (currEntry  !=  null)  {  long  numToSkip  =  entrySize  -  entryOffset;  while  (numToSkip  >  0)  {  long  skipped  =  skip(numToSkip);  if  (skipped  <=  0)  {  throw  new  RuntimeException(     "failed  to  skip  current  tar  entry     ");  [CLASS]  TarArchiveInputStream  1  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  StringBuffer  longName  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	173	173	1	replace	if(getNextTarEntry()  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {	  if(getNextTarEntry()    ==    null    ||    hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
