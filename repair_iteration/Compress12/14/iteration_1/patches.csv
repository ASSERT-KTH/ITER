bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(hasHitEOF  &&  buffer.isEOFRecord(getRecord()))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(hasHitEOF  &&  buffer.isEOFRecord(getRecord()))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hasHitEOF  &&  buffer.isEOFRecord(getRecord()))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
2	[BUG]  [BUGGY]  if(buffer.isEOFRecord(getRecord()))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer.isEOFRecord(getRecord()))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(getRecord()))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
3	[BUG]  [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(getRecord()))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(getRecord()))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!hasHitEOF  &&  buffer.isEOFRecord(getRecord()))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
4	[BUG]  [BUGGY]  if(getRecord()  ==  null  ||  buffer.isEOFRecord(getRecord()))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(getRecord()  ==  null  ||  buffer.isEOFRecord(getRecord()))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(getRecord()  ==  null  ||  buffer.isEOFRecord(getRecord()))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
5	[BUG]  [BUGGY]  if(record  ==  null  ||  buffer.isEOFRecord(getRecord()))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(record  ==  null  ||  buffer.isEOFRecord(getRecord()))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(record  ==  null  ||  buffer.isEOFRecord(getRecord()))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
6	[BUG]  [BUGGY]  if(isEOF()  ||  buffer.isEOFRecord(getRecord()))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(isEOF()  ||  buffer.isEOFRecord(getRecord()))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(isEOF()  ||  buffer.isEOFRecord(getRecord()))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
7	[BUG]  [BUGGY]  if(getRecord()!=  null  ||  buffer.isEOFRecord(getRecord()))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(getRecord()!=  null  ||  buffer.isEOFRecord(getRecord()))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(getRecord()!=  null  ||  buffer.isEOFRecord(getRecord()))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
8	[BUG]  [BUGGY]  if(HitEOF.equals(buffer.getEOF()))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(HitEOF.equals(buffer.getEOF()))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF.equals(buffer.getEOF()))  {	  if(HitEOF.equals(buffer.readRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
9	[BUG]  [BUGGY]  if(HitEOF.equals(buffer.readRecord())||  buffer.isEOFRecord(hashEOF))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(HitEOF.equals(buffer.readRecord())||  buffer.isEOFRecord(hashEOF))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF.equals(buffer.readRecord())||  buffer.isEOFRecord(hashEOF))  {	  if(HitEOF.equals(buffer.readRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
10	[BUG]  [BUGGY]  if(HitEOF.equals(buffer.readRecord())||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(HitEOF.equals(buffer.readRecord())||  hasHitEOF)  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF.equals(buffer.readRecord())||  hasHitEOF)  {	  if(HitEOF.equals(buffer.readRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
11	[BUG]  [BUGGY]  if(HitEOF.equals(buffer.getRecord()))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(HitEOF.equals(buffer.getRecord()))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF.equals(buffer.getRecord()))  {	  if(HitEOF.equals(buffer.readRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
12	[BUG]  [BUGGY]  if(!HitEOF.equals(buffer.readRecord()))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(!HitEOF.equals(buffer.readRecord()))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!HitEOF.equals(buffer.readRecord()))  {	  if(HitEOF.equals(buffer.readRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
13	[BUG]  [BUGGY]  if(HitEOF.equals(buffer.readRecord())&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(HitEOF.equals(buffer.readRecord())&&  hasHitEOF)  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF.equals(buffer.readRecord())&&  hasHitEOF)  {	  if(HitEOF.equals(buffer.readRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
14	[BUG]  [BUGGY]  if(HitEOF.equals(buffer.readRecord())||  HitEOF.equals(buffer.getEOF()))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(HitEOF.equals(buffer.readRecord())||  HitEOF.equals(buffer.getEOF()))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF.equals(buffer.readRecord())||  HitEOF.equals(buffer.getEOF()))  {	  if(HitEOF.equals(buffer.readRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
15	[BUG]  [BUGGY]  if(HitEOF  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(HitEOF  ||  hasHitEOF)  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF  ||  hasHitEOF)  {	  if(hasHitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
16	[BUG]  [BUGGY]  if(hashEOF  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(hashEOF  ||  hasHitEOF)  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hashEOF  ||  hasHitEOF)  {	  if(hasHitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
17	[BUG]  [BUGGY]  if(hasHitEOF  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(hasHitEOF  &&  hasHitEOF)  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hasHitEOF  &&  hasHitEOF)  {	  if(hasHitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
18	[BUG]  [BUGGY]  if(record  ==  null  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(record  ==  null  ||  hasHitEOF)  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(record  ==  null  ||  hasHitEOF)  {	  if(hasHitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
19	[BUG]  [BUGGY]  if(isEOF()  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(isEOF()  ||  hasHitEOF)  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(isEOF()  ||  hasHitEOF)  {	  if(hasHitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
20	[BUG]  [BUGGY]  if(!hasHitEOF  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(!hasHitEOF  &&  hasHitEOF)  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!hasHitEOF  &&  hasHitEOF)  {	  if(hasHitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
21	[BUG]  [BUGGY]  byte[]  buf  =  buffer.readRecord();  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  byte[]  buf  =  buffer.readRecord();  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	byte[]  buf  =  buffer.readRecord();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
22	[BUG]  [BUGGY]  ||  buffer.isEOFRecord(record))  {  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  ||  buffer.isEOFRecord(record))  {  hasHitEOF  =  true;  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	||  buffer.isEOFRecord(record))  {  hasHitEOF  =  true;	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
23	[BUG]  [BUGGY]  ||  buffer.isEOFRecord(record))  {  hasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  ||  buffer.isEOFRecord(record))  {  hasHitEOF  =  false;  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	||  buffer.isEOFRecord(record))  {  hasHitEOF  =  false;	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
24	[BUG]  [BUGGY]  TarBuffer  buffer  =(TarBuffer)this.currEntry.getValue();  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  TarBuffer  buffer  =(TarBuffer)this.currEntry.getValue();  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	TarBuffer  buffer  =(TarBuffer)this.currEntry.getValue();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
25	[BUG]  [BUGGY]  byte[]  buf  =  getRecord();  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  byte[]  buf  =  getRecord();  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	byte[]  buf  =  getRecord();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
26	[BUG]  [BUGGY]  TarBuffer  buffer  =(TarBuffer)getRecord();  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  TarBuffer  buffer  =(TarBuffer)getRecord();  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	TarBuffer  buffer  =(TarBuffer)getRecord();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
27	[BUG]  [BUGGY]  if(buffer.isEOFRecord(getRecord()))  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer.isEOFRecord(getRecord()))  {  hasHitEOF  =  true;  }  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(getRecord()))  {  hasHitEOF  =  true;  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
28	[BUG]  [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(headerBuf))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!hasHitEOF  &&  buffer.isEOFRecord(headerBuf))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
29	[BUG]  [BUGGY]  if(hasHitEOF  &&  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(hasHitEOF  &&  buffer.isEOFRecord(headerBuf))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hasHitEOF  &&  buffer.isEOFRecord(headerBuf))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
30	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(headerBuf  ==  null  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(headerBuf  ==  null  ||  buffer.isEOFRecord(headerBuf))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
31	[BUG]  [BUGGY]  if(headerBuf.isEOFRecord(hasHitEOF)||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(headerBuf.isEOFRecord(hasHitEOF)||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(headerBuf.isEOFRecord(hasHitEOF)||  buffer.isEOFRecord(headerBuf))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
32	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(headerBuf!=  null  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(headerBuf!=  null  ||  buffer.isEOFRecord(headerBuf))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
33	[BUG]  [BUGGY]  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
34	[BUG]  [BUGGY]  if(buffer.isEOFRecord(hashBuf))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer.isEOFRecord(hashBuf))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(hashBuf))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
35	[BUG]  [BUGGY]  if(hasHitEOF  &&  buffer.isEOFRecord(hashBuf))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(hasHitEOF  &&  buffer.isEOFRecord(hashBuf))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hasHitEOF  &&  buffer.isEOFRecord(hashBuf))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
36	[BUG]  [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(hashBuf))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(hashBuf))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!hasHitEOF  &&  buffer.isEOFRecord(hashBuf))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
37	[BUG]  [BUGGY]  if(buffer.isEOFRecord(hashBuf)||  buffer.isEOFRecord(hashBuf))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer.isEOFRecord(hashBuf)||  buffer.isEOFRecord(hashBuf))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(hashBuf)||  buffer.isEOFRecord(hashBuf))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
38	[BUG]  [BUGGY]  if(hashEOF  &&  buffer.isEOFRecord(hashBuf))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(hashEOF  &&  buffer.isEOFRecord(hashBuf))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hashEOF  &&  buffer.isEOFRecord(hashBuf))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
39	[BUG]  [BUGGY]  if(hashEOF  ||  buffer.isEOFRecord(hashBuf))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(hashEOF  ||  buffer.isEOFRecord(hashBuf))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hashEOF  ||  buffer.isEOFRecord(hashBuf))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
40	[BUG]  [BUGGY]  if(buffer.hasHitEOF  ||  buffer.isEOFRecord(hashBuf))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer.hasHitEOF  ||  buffer.isEOFRecord(hashBuf))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.hasHitEOF  ||  buffer.isEOFRecord(hashBuf))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
41	[BUG]  [BUGGY]  if(buffer.isEOFRecord(hashCode))  {  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer.isEOFRecord(hashCode))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(hashCode))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
42	[BUG]  [BUGGY]  if(hasHitEOF  &&  buffer.isEOFRecord(hashCode))  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(hasHitEOF  &&  buffer.isEOFRecord(hashCode))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hasHitEOF  &&  buffer.isEOFRecord(hashCode))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
43	[BUG]  [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(hashCode))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(hashCode))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!hasHitEOF  &&  buffer.isEOFRecord(hashCode))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
44	[BUG]  [BUGGY]  if(buffer.isEOFRecord(hashCode)||  buffer.isEOFRecord(hashCode))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer.isEOFRecord(hashCode)||  buffer.isEOFRecord(hashCode))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(hashCode)||  buffer.isEOFRecord(hashCode))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
45	[BUG]  [BUGGY]  if(record.length  ==  0  ||  buffer.isEOFRecord(hashCode))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(record.length  ==  0  ||  buffer.isEOFRecord(hashCode))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(record.length  ==  0  ||  buffer.isEOFRecord(hashCode))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
46	[BUG]  [BUGGY]  if(hashCode  ==  EOF  ||  buffer.isEOFRecord(hashCode))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(hashCode  ==  EOF  ||  buffer.isEOFRecord(hashCode))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hashCode  ==  EOF  ||  buffer.isEOFRecord(hashCode))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
47	[BUG]  [BUGGY]  if(buffer.isEOFRecord(hashOffset))  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer.isEOFRecord(hashOffset))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(hashOffset))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
48	[BUG]  [BUGGY]  if(hasHitEOF  &&  buffer.isEOFRecord(hashOffset))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(hasHitEOF  &&  buffer.isEOFRecord(hashOffset))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hasHitEOF  &&  buffer.isEOFRecord(hashOffset))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
49	[BUG]  [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(hashOffset))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(hashOffset))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!hasHitEOF  &&  buffer.isEOFRecord(hashOffset))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
50	[BUG]  [BUGGY]  if(hashOffset  ||  buffer.isEOFRecord(hashEOF))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(hashOffset  ||  buffer.isEOFRecord(hashEOF))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hashOffset  ||  buffer.isEOFRecord(hashEOF))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
51	[BUG]  [BUGGY]  if(record.length  ==  0  ||  buffer.isEOFRecord(hashOffset))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(record.length  ==  0  ||  buffer.isEOFRecord(hashOffset))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(record.length  ==  0  ||  buffer.isEOFRecord(hashOffset))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
52	[BUG]  [BUGGY]  if(hashOffset  ||  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(hashOffset  ||  buffer.isEOFRecord(hash))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hashOffset  ||  buffer.isEOFRecord(hash))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
53	[BUG]  [BUGGY]  if(buffer.isEOFRecord(record)||  buffer.isEOFRecord(record))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer.isEOFRecord(record)||  buffer.isEOFRecord(record))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(record)||  buffer.isEOFRecord(record))  {	  if(buffer.isEOFRecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
54	[BUG]  [BUGGY]  if(buffer.isEOF()  ||  buffer.isEOFRecord(record))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer.isEOF()  ||  buffer.isEOFRecord(record))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF()  ||  buffer.isEOFRecord(record))  {	  if(buffer.isEOFRecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
55	[BUG]  [BUGGY]  if(buffer.isEOF())  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer.isEOF())  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF())  {	  if(buffer.isEOFRecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
56	[BUG]  [BUGGY]  if(buffer.isEOFRecord(record)||  buffer.isEOF())  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer.isEOFRecord(record)||  buffer.isEOF())  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(record)||  buffer.isEOF())  {	  if(buffer.isEOFRecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
57	[BUG]  [BUGGY]  if(record  ==  null  ||  buffer.isEOFRecord(record))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(record  ==  null  ||  buffer.isEOFRecord(record))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(record  ==  null  ||  buffer.isEOFRecord(record))  {	  if(buffer.isEOFRecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
58	[BUG]  [BUGGY]  if(buffer.isEOF()  ||  record.isEOFRecord(record))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer.isEOF()  ||  record.isEOFRecord(record))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF()  ||  record.isEOFRecord(record))  {	  if(buffer.isEOFRecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
59	[BUG]  [BUGGY]  if(buffer.isEOFRecord(record)||  buffer.isEORFecord(record))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer.isEOFRecord(record)||  buffer.isEORFecord(record))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(record)||  buffer.isEORFecord(record))  {	  if(buffer.isEOFRecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
60	[BUG]  [BUGGY]  if(buffer.isEOFRecord(hashToSkip))  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer.isEOFRecord(hashToSkip))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(hashToSkip))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
61	[BUG]  [BUGGY]  if(hasHitEOF  &&  buffer.isEOFRecord(hashToSkip))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(hasHitEOF  &&  buffer.isEOFRecord(hashToSkip))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hasHitEOF  &&  buffer.isEOFRecord(hashToSkip))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
62	[BUG]  [BUGGY]  if(hashToSkip  ||  buffer.isEOFRecord(hashToSkip))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(hashToSkip  ||  buffer.isEOFRecord(hashToSkip))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hashToSkip  ||  buffer.isEOFRecord(hashToSkip))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
63	[BUG]  [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(hashToSkip))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(hashToSkip))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!hasHitEOF  &&  buffer.isEOFRecord(hashToSkip))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
64	[BUG]  [BUGGY]  if(HitEOF  &&  buffer.isEOFRecord(hashToSkip))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(HitEOF  &&  buffer.isEOFRecord(hashToSkip))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF  &&  buffer.isEOFRecord(hashToSkip))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
65	[BUG]  [BUGGY]  if(record.length  ==  0  ||  buffer.isEOFRecord(hashToSkip))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(record.length  ==  0  ||  buffer.isEOFRecord(hashToSkip))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(record.length  ==  0  ||  buffer.isEOFRecord(hashToSkip))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
66	[BUG]  [BUGGY]  if(HitEOF  ||  buffer.isEOFRecord(hashToSkip))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(HitEOF  ||  buffer.isEOFRecord(hashToSkip))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF  ||  buffer.isEOFRecord(hashToSkip))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
67	[BUG]  [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(hash))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!hasHitEOF  &&  buffer.isEOFRecord(hash))  {	  if(!hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
68	[BUG]  [BUGGY]  if(!hasHitEOF  ||  buffer.isEOFRecord(hashBuf))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(!hasHitEOF  ||  buffer.isEOFRecord(hashBuf))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!hasHitEOF  ||  buffer.isEOFRecord(hashBuf))  {	  if(!hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
69	[BUG]  [BUGGY]  if(buffer.isEOF()  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer.isEOF()  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF()  ||  buffer.isEOFRecord(headerBuf))  {	  if(buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
70	[BUG]  [BUGGY]  if(buffer.readRecord()  ==  null  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer.readRecord()  ==  null  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.readRecord()  ==  null  ||  buffer.isEOFRecord(headerBuf))  {	  if(buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
71	[BUG]  [BUGGY]  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF())  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF())  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF())  {	  if(buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
72	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer!=  null  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer!=  null  ||  buffer.isEOFRecord(headerBuf))  {	  if(buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
73	[BUG]  [BUGGY]  if(buffer.isEOFRecord(headerBuf)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer.isEOFRecord(headerBuf)&&  hasHitEOF)  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(headerBuf)&&  hasHitEOF)  {	  if(buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
74	[BUG]  [BUGGY]  if(buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer.isEOFRecord(hash))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(hash))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
75	[BUG]  [BUGGY]  if(hasHitEOF  &&  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(hasHitEOF  &&  buffer.isEOFRecord(hash))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hasHitEOF  &&  buffer.isEOFRecord(hash))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
76	[BUG]  [BUGGY]  if(buffer.isEOFRecord(hash)||  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer.isEOFRecord(hash)||  buffer.isEOFRecord(hash))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(hash)||  buffer.isEOFRecord(hash))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
77	[BUG]  [BUGGY]  if(buffer.isEOFRecord(hasHitEOF)||  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer.isEOFRecord(hasHitEOF)||  buffer.isEOFRecord(hash))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(hasHitEOF)||  buffer.isEOFRecord(hash))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
78	[BUG]  [BUGGY]  if(hash  ||  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(hash  ||  buffer.isEOFRecord(hash))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hash  ||  buffer.isEOFRecord(hash))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
79	[BUG]  [BUGGY]  if(hash  <  =  0  ||  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(hash  <  =  0  ||  buffer.isEOFRecord(hash))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hash  <  =  0  ||  buffer.isEOFRecord(hash))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
80	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.isEOFRecord(hashCode))  {  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer  ==  null  ||  buffer.isEOFRecord(hashCode))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.isEOFRecord(hashCode))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
81	[BUG]  [BUGGY]  if(buffer.isEOFRecord(header))  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer.isEOFRecord(header))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(header))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
82	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.isEOFRecord(hashCode))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer!=  null  ||  buffer.isEOFRecord(hashCode))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer!=  null  ||  buffer.isEOFRecord(hashCode))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
83	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.isEOFRecord(hashBuf))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer  ==  null  ||  buffer.isEOFRecord(hashBuf))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.isEOFRecord(hashBuf))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
84	[BUG]  [BUGGY]  if(buffer.isEOFRecord(hashBuf)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer.isEOFRecord(hashBuf)||  hasHitEOF)  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(hashBuf)||  hasHitEOF)  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
85	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.isEOFRecord(hashOffset))  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer  ==  null  ||  buffer.isEOFRecord(hashOffset))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.isEOFRecord(hashOffset))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
86	[BUG]  [BUGGY]  if(buffer.isEOFRecord(hashOffset)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer.isEOFRecord(hashOffset)||  hasHitEOF)  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(hashOffset)||  hasHitEOF)  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
87	[BUG]  [BUGGY]  if(buffer.isEOF(hashOffset))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer.isEOF(hashOffset))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF(hashOffset))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
88	[BUG]  [BUGGY]  if(buffer.isEOFRecord(hashToSkip)||  buffer.isEOFRecord(hashToSkip))  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer.isEOFRecord(hashToSkip)||  buffer.isEOFRecord(hashToSkip))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(hashToSkip)||  buffer.isEOFRecord(hashToSkip))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
89	[BUG]  [BUGGY]  if(buffer.isEOFRecord(hashToSkip)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer.isEOFRecord(hashToSkip)||  hasHitEOF)  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(hashToSkip)||  hasHitEOF)  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
90	[BUG]  [BUGGY]  if(buffer.length  ==  0  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer.length  ==  0  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.length  ==  0  ||  buffer.isEOFRecord(headerBuf))  {	  if(buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
91	[BUG]  [BUGGY]  if(buffer.readRecord()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer.readRecord()  ==  null)  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.readRecord()  ==  null)  {	  if(buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
92	[BUG]  [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(hashBuffer))  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(hashBuffer))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!hasHitEOF  &&  buffer.isEOFRecord(hashBuffer))  {	  if(!hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
93	[BUG]  [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(record))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(record))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!hasHitEOF  &&  buffer.isEOFRecord(record))  {	  if(!hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
94	[BUG]  [BUGGY]  if(buffer.isEOF()  ||  headerBuf.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer.isEOF()  ||  headerBuf.isEOFRecord(headerBuf))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF()  ||  headerBuf.isEOFRecord(headerBuf))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
95	[BUG]  [BUGGY]  if(HitEOF!=  null  &&  buffer.readRecord().equals(HitEOF))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(HitEOF!=  null  &&  buffer.readRecord().equals(HitEOF))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF!=  null  &&  buffer.readRecord().equals(HitEOF))  {	  if(HitEOF.equals(buffer.readRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
96	[BUG]  [BUGGY]  if(buffer.equals(HitEOF))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer.equals(HitEOF))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.equals(HitEOF))  {	  if(HitEOF.equals(buffer.readRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
97	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer  ==  null  ||  buffer.isEOFRecord(hash))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.isEOFRecord(hash))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
98	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer!=  null  ||  buffer.isEOFRecord(hash))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer!=  null  ||  buffer.isEOFRecord(hash))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
99	[BUG]  [BUGGY]  if(buffer.isEOFRecord(hash)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer.isEOFRecord(hash)||  hasHitEOF)  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(hash)||  hasHitEOF)  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
100	[BUG]  [BUGGY]  if(buffer.isEOF()  ||  buffer.isEOFRecord(getRecord()))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer.isEOF()  ||  buffer.isEOFRecord(getRecord()))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF()  ||  buffer.isEOFRecord(getRecord()))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
101	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.isEOFRecord(getRecord()))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer  ==  null  ||  buffer.isEOFRecord(getRecord()))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.isEOFRecord(getRecord()))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
102	[BUG]  [BUGGY]  if(buffer.isEOFRecord(getRecord())||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer.isEOFRecord(getRecord())||  hasHitEOF)  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(getRecord())||  hasHitEOF)  {	  if(hasHitEOF    ||    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
103	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  0,  buffer.length);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  System.arraycopy(buffer,  0,  buf,  0,  buffer.length);  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	System.arraycopy(buffer,  0,  buf,  0,  buffer.length);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
104	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  readBuf,  0,  numToSkip);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  System.arraycopy(buffer,  0,  buf,  readBuf,  0,  numToSkip);  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	System.arraycopy(buffer,  0,  buf,  readBuf,  0,  numToSkip);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
105	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  readBuf,  0,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  System.arraycopy(buffer,  0,  buf,  readBuf,  0,  hasHitEOF);  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	System.arraycopy(buffer,  0,  buf,  readBuf,  0,  hasHitEOF);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
106	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  0,  recordSize);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  System.arraycopy(buffer,  0,  buf,  0,  recordSize);  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	System.arraycopy(buffer,  0,  buf,  0,  recordSize);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
107	[BUG]  [BUGGY]  if(buffer.isEOFRecord(getRecord()))  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer.isEOFRecord(getRecord()))  {  return  null;  }  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(getRecord()))  {  return  null;  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
108	[BUG]  [BUGGY]  ((  TarArchiveEntry)buffer).getRecord();  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  ((  TarArchiveEntry)buffer).getRecord();  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	((  TarArchiveEntry)buffer).getRecord();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
109	[BUG]  [BUGGY]  if(buffer.isEOFRecord(record)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer.isEOFRecord(record)&&  hasHitEOF)  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(record)&&  hasHitEOF)  {	  if(buffer.isEOFRecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
110	[BUG]  [BUGGY]  if(getRecord()  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(getRecord()))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(getRecord()  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(getRecord()))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(getRecord()  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(getRecord()))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
111	[BUG]  [BUGGY]  if(buffer.isEOFRecord(record)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer.isEOFRecord(record)||  hasHitEOF)  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(record)||  hasHitEOF)  {	  if(buffer.isEOFRecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
112	[BUG]  [BUGGY]  if(buffer  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(hashBuf))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(hashBuf))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(hashBuf))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
113	[BUG]  [BUGGY]  if(HitEOF  ||  buffer.isEOFRecord(hashBuf))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(HitEOF  ||  buffer.isEOFRecord(hashBuf))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF  ||  buffer.isEOFRecord(hashBuf))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
114	[BUG]  [BUGGY]  if(buffer  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(hash))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(hash))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
115	[BUG]  [BUGGY]  if(hash  ==  hasHitEOF  ||  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(hash  ==  hasHitEOF  ||  buffer.isEOFRecord(hash))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hash  ==  hasHitEOF  ||  buffer.isEOFRecord(hash))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
116	[BUG]  [BUGGY]  if(hash  ==  0  ||  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(hash  ==  0  ||  buffer.isEOFRecord(hash))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hash  ==  0  ||  buffer.isEOFRecord(hash))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
117	[BUG]  [BUGGY]  if(!hasHitEOF  ||  buffer.isEOFRecord(hashCode))  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(!hasHitEOF  ||  buffer.isEOFRecord(hashCode))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!hasHitEOF  ||  buffer.isEOFRecord(hashCode))  {	  if(!hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
118	[BUG]  [BUGGY]  if(hashToSkip  ==  hasHitEOF  ||  buffer.isEOFRecord(hashToSkip))  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(hashToSkip  ==  hasHitEOF  ||  buffer.isEOFRecord(hashToSkip))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hashToSkip  ==  hasHitEOF  ||  buffer.isEOFRecord(hashToSkip))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
119	[BUG]  [BUGGY]  if(hashToSkip  ==  null  ||  buffer.isEOFRecord(hashToSkip))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(hashToSkip  ==  null  ||  buffer.isEOFRecord(hashToSkip))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hashToSkip  ==  null  ||  buffer.isEOFRecord(hashToSkip))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
120	[BUG]  [BUGGY]  if(HitEOF.equals(buffer.readRecord())||  buffer.isEOFRecord(record))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(HitEOF.equals(buffer.readRecord())||  buffer.isEOFRecord(record))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF.equals(buffer.readRecord())||  buffer.isEOFRecord(record))  {	  if(HitEOF.equals(buffer.readRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
121	[BUG]  [BUGGY]  if(HitEOF.equals(buffer.getEOFRecord()))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(HitEOF.equals(buffer.getEOFRecord()))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF.equals(buffer.getEOFRecord()))  {	  if(HitEOF.equals(buffer.readRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
122	[BUG]  [BUGGY]  if(buffer.isEOFRecord(backerBuf))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer.isEOFRecord(backerBuf))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(backerBuf))  {	  if(buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
123	[BUG]  [BUGGY]  if(buffer  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(headerBuf))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
124	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(headerBuf  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(headerBuf  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(headerBuf))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
125	[BUG]  [BUGGY]  if(buffer  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(hashCode))  {  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(hashCode))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(hashCode))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
126	[BUG]  [BUGGY]  if(hashOffset  ==  hasHitEOF  ||  buffer.isEOFRecord(hashOffset))  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(hashOffset  ==  hasHitEOF  ||  buffer.isEOFRecord(hashOffset))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hashOffset  ==  hasHitEOF  ||  buffer.isEOFRecord(hashOffset))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
127	[BUG]  [BUGGY]  if(hashOffset  ==  HASH_EOF  ||  buffer.isEOFRecord(hashOffset))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(hashOffset  ==  HASH_EOF  ||  buffer.isEOFRecord(hashOffset))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hashOffset  ==  HASH_EOF  ||  buffer.isEOFRecord(hashOffset))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
128	[BUG]  [BUGGY]  if(buffer  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(hashOffset))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(hashOffset))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(hashOffset))  {	  if(hasHitEOF    ||    buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
129	[BUG]  [BUGGY]  if(!hasHitEOF  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(!hasHitEOF  ||  hasHitEOF)  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!hasHitEOF  ||  hasHitEOF)  {	  if(hasHitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
130	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(hasHitEOF  ||  isEOFRecord(headerBuf))  {  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hasHitEOF  ||  isEOFRecord(headerBuf))  {	  if(hasHitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
131	[BUG]  [BUGGY]  if(buffer.isEOFRecord(record))  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer.isEOFRecord(record))  {  hasHitEOF  =  true;  }  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(record))  {  hasHitEOF  =  true;  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
132	[BUG]  [BUGGY]  if(buffer.isEOFRecord(getRecord()))  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer.isEOFRecord(getRecord()))  {  throw  new  IOException( " ");  }  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(getRecord()))  {  throw  new  IOException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
133	[BUG]  [BUGGY]  if(buffer.isEOFRecord(getRecord()))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer.isEOFRecord(getRecord()))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(getRecord()))  {  throw  new  IllegalStateException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
134	[BUG]  [BUGGY]  if(buffer.isEOFRecord(record))  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {    [BUGGY]  if(buffer.isEOFRecord(record))  {  throw  new  IOException( " ");  }  [BUGGY]    return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(record))  {  throw  new  IOException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
