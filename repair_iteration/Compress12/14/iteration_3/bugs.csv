bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(buffer.readRecord()!=  null)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.readRecord()!=  null)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.readRecord()!=  null)  {	  if(buffer.readRecord()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
2	[BUG]  [BUGGY]  if(buffer.readRecord()  ==  null  ||  buffer.isEOFRecord(record))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.readRecord()  ==  null  ||  buffer.isEOFRecord(record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.readRecord()  ==  null  ||  buffer.isEOFRecord(record))  {	  if(buffer.readRecord()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
3	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.readRecord()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.readRecord()  ==  null)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.readRecord()  ==  null)  {	  if(buffer.readRecord()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
4	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.readRecord()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  buffer.readRecord()  ==  null)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer!=  null  ||  buffer.readRecord()  ==  null)  {	  if(buffer.readRecord()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
5	[BUG]  [BUGGY]  if(buffer.getRecord()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.getRecord()  ==  null)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.getRecord()  ==  null)  {	  if(buffer.readRecord()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
6	[BUG]  [BUGGY]  if(buffer.isEOF()  ||  buffer.readRecord()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF()  ||  buffer.readRecord()  ==  null)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF()  ||  buffer.readRecord()  ==  null)  {	  if(buffer.readRecord()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
7	[BUG]  [BUGGY]  if(buffer.equals(record))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.equals(record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.equals(record))  {	  if(buffer.equals(HitEOF))    {    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
8	[BUG]  [BUGGY]  if(buffer.equals(HitEOF)||  buffer.equals(HitEOF))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.equals(HitEOF)||  buffer.equals(HitEOF))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.equals(HitEOF)||  buffer.equals(HitEOF))  {	  if(buffer.equals(HitEOF))    {    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
9	[BUG]  [BUGGY]  if(buffer.equals(HitEOF)||  buffer.isEOFRecord(HitEOF))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.equals(HitEOF)||  buffer.isEOFRecord(HitEOF))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.equals(HitEOF)||  buffer.isEOFRecord(HitEOF))  {	  if(buffer.equals(HitEOF))    {    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
10	[BUG]  [BUGGY]  if(buffer.equals(getRecord()))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.equals(getRecord()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.equals(getRecord()))  {	  if(buffer.equals(HitEOF))    {    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
11	[BUG]  [BUGGY]  if(!buffer.equals(HitEOF))  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(!buffer.equals(HitEOF))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!buffer.equals(HitEOF))  {	  if(buffer.equals(HitEOF))    {    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
12	[BUG]  [BUGGY]  if(buffer.equals(HitEOF)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.equals(HitEOF)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.equals(HitEOF)&&  hasHitEOF)  {	  if(buffer.equals(HitEOF))    {    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
13	[BUG]  [BUGGY]  if(HitEOF.equals(buffer))  {  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(HitEOF.equals(buffer))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF.equals(buffer))  {	  if(buffer.equals(HitEOF))    {    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
14	[BUG]  [BUGGY]  if(buffer.length  ==  0  ||  record.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.length  ==  0  ||  record.length  ==  0)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.length  ==  0  ||  record.length  ==  0)  {	  if(record.length    ==    0    ||    buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
15	[BUG]  [BUGGY]  if(record.length  ==  0  ||  buffer.isEOFRecord(record.length))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(record.length  ==  0  ||  buffer.isEOFRecord(record.length))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(record.length  ==  0  ||  buffer.isEOFRecord(record.length))  {	  if(record.length    ==    0    ||    buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
16	[BUG]  [BUGGY]  if(buffer.length  ==  0  ||  record.length  ==  0  ||  buffer.isEOFRecord(hashOffset))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.length  ==  0  ||  record.length  ==  0  ||  buffer.isEOFRecord(hashOffset))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.length  ==  0  ||  record.length  ==  0  ||  buffer.isEOFRecord(hashOffset))  {	  if(record.length    ==    0    ||    buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
17	[BUG]  [BUGGY]  if(record  ==  null  ||  buffer.isEOFRecord(hashOffset))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(record  ==  null  ||  buffer.isEOFRecord(hashOffset))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(record  ==  null  ||  buffer.isEOFRecord(hashOffset))  {	  if(record.length    ==    0    ||    buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
18	[BUG]  [BUGGY]  if(record!=  null  ||  buffer.isEOFRecord(hashOffset))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(record!=  null  ||  buffer.isEOFRecord(hashOffset))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(record!=  null  ||  buffer.isEOFRecord(hashOffset))  {	  if(record.length    ==    0    ||    buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
19	[BUG]  [BUGGY]  if(buffer.length  ==  0  ||  record.length!=  0)  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.length  ==  0  ||  record.length!=  0)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.length  ==  0  ||  record.length!=  0)  {	  if(record.length    ==    0    ||    buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
20	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.isEOFRecord(record))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.isEOFRecord(record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.isEOFRecord(record))  {	  if(buffer!=    null    ||    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
21	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.isEOFRecord(record))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  buffer.isEOFRecord(record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer!=  null  ||  buffer.isEOFRecord(record))  {	  if(buffer!=    null    ||    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
22	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.isEOFRecord(recordSize))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.isEOFRecord(recordSize))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.isEOFRecord(recordSize))  {	  if(buffer!=    null    ||    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
23	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.isEOFRecord(headerBuf))  {	  if(buffer!=    null    ||    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
24	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.isEOFRecord(recordSize))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  buffer.isEOFRecord(recordSize))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer!=  null  ||  buffer.isEOFRecord(recordSize))  {	  if(buffer!=    null    ||    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
25	[BUG]  [BUGGY]  if(buffer!=  null  &&  buffer.readRecord().equals(HitEOF))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer!=  null  &&  buffer.readRecord().equals(HitEOF))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer!=  null  &&  buffer.readRecord().equals(HitEOF))  {	  if(HitEOF!=    null    &&    buffer.readRecord().equals(HitEOF))    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
26	[BUG]  [BUGGY]  if(buffer.readRecord()!=  null  &&  buffer.readRecord().equals(HitEOF))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.readRecord()!=  null  &&  buffer.readRecord().equals(HitEOF))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.readRecord()!=  null  &&  buffer.readRecord().equals(HitEOF))  {	  if(HitEOF!=    null    &&    buffer.readRecord().equals(HitEOF))    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
27	[BUG]  [BUGGY]  if(buffer  ==  null  &&  buffer.readRecord().equals(HitEOF))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  &&  buffer.readRecord().equals(HitEOF))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  &&  buffer.readRecord().equals(HitEOF))  {	  if(HitEOF!=    null    &&    buffer.readRecord().equals(HitEOF))    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
28	[BUG]  [BUGGY]  if(buffer.readRecord()  ==  null  &&  buffer.readRecord().equals(HitEOF))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.readRecord()  ==  null  &&  buffer.readRecord().equals(HitEOF))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.readRecord()  ==  null  &&  buffer.readRecord().equals(HitEOF))  {	  if(HitEOF!=    null    &&    buffer.readRecord().equals(HitEOF))    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
29	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.readRecord().equals(HitEOF))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  buffer.readRecord().equals(HitEOF))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer!=  null  ||  buffer.readRecord().equals(HitEOF))  {	  if(HitEOF!=    null    &&    buffer.readRecord().equals(HitEOF))    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
30	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.readRecord().equals(HitEOF))  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.readRecord().equals(HitEOF))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.readRecord().equals(HitEOF))  {	  if(HitEOF!=    null    &&    buffer.readRecord().equals(HitEOF))    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
31	[BUG]  [BUGGY]  if(buffered!=  null  &&  buffer.readRecord().equals(HitEOF))  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffered!=  null  &&  buffer.readRecord().equals(HitEOF))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffered!=  null  &&  buffer.readRecord().equals(HitEOF))  {	  if(HitEOF!=    null    &&    buffer.readRecord().equals(HitEOF))    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
32	[BUG]  [BUGGY]  if(buffer.isEOF(entrySize))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF(entrySize))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF(entrySize))  {	  if(buffer.isEOF(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
33	[BUG]  [BUGGY]  if(buffer.isEOF(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF(headerBuf))  {	  if(buffer.isEOF(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
34	[BUG]  [BUGGY]  if(buffer.isEOF(entryOffset))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF(entryOffset))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF(entryOffset))  {	  if(buffer.isEOF(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
35	[BUG]  [BUGGY]  if(buffer.isEOF(hashOffset)||  buffer.isEOFRecord(hashOffset))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF(hashOffset)||  buffer.isEOFRecord(hashOffset))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF(hashOffset)||  buffer.isEOFRecord(hashOffset))  {	  if(buffer.isEOF(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
36	[BUG]  [BUGGY]  if(buffer.isEOF(hashOffset)||  buffer.isEOF(hashOffset))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF(hashOffset)||  buffer.isEOF(hashOffset))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF(hashOffset)||  buffer.isEOF(hashOffset))  {	  if(buffer.isEOF(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
37	[BUG]  [BUGGY]  if(buffer.isEOF(record))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF(record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF(record))  {	  if(buffer.isEOF(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
38	[BUG]  [BUGGY]  if(buffer.isEOF(entrySize)||  buffer.isEOF(entrySize))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF(entrySize)||  buffer.isEOF(entrySize))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF(entrySize)||  buffer.isEOF(entrySize))  {	  if(buffer.isEOF(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
39	[BUG]  [BUGGY]  if(buffer.isEOF(hashToSkip)||  buffer.isEOFRecord(hashToSkip))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF(hashToSkip)||  buffer.isEOFRecord(hashToSkip))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF(hashToSkip)||  buffer.isEOFRecord(hashToSkip))  {	  if(hashToSkip    ||    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
40	[BUG]  [BUGGY]  if(hashToSkip  ==  buffer.length  ||  buffer.isEOFRecord(hashToSkip))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hashToSkip  ==  buffer.length  ||  buffer.isEOFRecord(hashToSkip))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hashToSkip  ==  buffer.length  ||  buffer.isEOFRecord(hashToSkip))  {	  if(hashToSkip    ||    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
41	[BUG]  [BUGGY]  if(hashToSkip  <  =  0  ||  buffer.isEOFRecord(hashToSkip))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hashToSkip  <  =  0  ||  buffer.isEOFRecord(hashToSkip))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hashToSkip  <  =  0  ||  buffer.isEOFRecord(hashToSkip))  {	  if(hashToSkip    ||    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
42	[BUG]  [BUGGY]  if(hashToSkip!=  buffer.length  ||  buffer.isEOFRecord(hashToSkip))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hashToSkip!=  buffer.length  ||  buffer.isEOFRecord(hashToSkip))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hashToSkip!=  buffer.length  ||  buffer.isEOFRecord(hashToSkip))  {	  if(hashToSkip    ||    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
43	[BUG]  [BUGGY]  if(record.isEOF()  ||  buffer.isEOFRecord(record))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(record.isEOF()  ||  buffer.isEOFRecord(record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(record.isEOF()  ||  buffer.isEOFRecord(record))  {	  if(buffer.isEOF()    ||    record.isEOFRecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
44	[BUG]  [BUGGY]  if(record  ==  null  ||  buffer.isEOF()  ||  record.isEOFRecord(record))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(record  ==  null  ||  buffer.isEOF()  ||  record.isEOFRecord(record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(record  ==  null  ||  buffer.isEOF()  ||  record.isEOFRecord(record))  {	  if(buffer.isEOF()    ||    record.isEOFRecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
45	[BUG]  [BUGGY]  if(record.isEOF()  ||  record.isEOFRecord(buffer))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(record.isEOF()  ||  record.isEOFRecord(buffer))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(record.isEOF()  ||  record.isEOFRecord(buffer))  {	  if(buffer.isEOF()    ||    record.isEOFRecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
46	[BUG]  [BUGGY]  if(record!=  null  ||  buffer.isEOF()  ||  record.isEOFRecord(record))  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(record!=  null  ||  buffer.isEOF()  ||  record.isEOFRecord(record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(record!=  null  ||  buffer.isEOF()  ||  record.isEOFRecord(record))  {	  if(buffer.isEOF()    ||    record.isEOFRecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
47	[BUG]  [BUGGY]  if(buffer.isEOF()  ||  record.equals(record))  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF()  ||  record.equals(record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF()  ||  record.equals(record))  {	  if(buffer.isEOF()    ||    record.isEOFRecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
48	[BUG]  [BUGGY]  if(buffer.isEOF()  ||  record.isEOFRecord(record)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF()  ||  record.isEOFRecord(record)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF()  ||  record.isEOFRecord(record)&&  hasHitEOF)  {	  if(buffer.isEOF()    ||    record.isEOFRecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
49	[BUG]  [BUGGY]  if(buffer  ==  null  ||  hasHitEOF  &&  buffer.isEOFRecord(hashBuf))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  hasHitEOF  &&  buffer.isEOFRecord(hashBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  hasHitEOF  &&  buffer.isEOFRecord(hashBuf))  {	  if(buffer    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
50	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.equals(hashBuf)||  buffer.isEOFRecord(hashBuf))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.equals(hashBuf)||  buffer.isEOFRecord(hashBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.equals(hashBuf)||  buffer.isEOFRecord(hashBuf))  {	  if(buffer    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
51	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.isEOFRecord(hashBuf))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  buffer.isEOFRecord(hashBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer!=  null  ||  buffer.isEOFRecord(hashBuf))  {	  if(buffer    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
52	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length()  ==  0  ||  buffer.isEOFRecord(hashBuf))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length()  ==  0  ||  buffer.isEOFRecord(hashBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.length()  ==  0  ||  buffer.isEOFRecord(hashBuf))  {	  if(buffer    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
53	[BUG]  [BUGGY]  if(buffer!=  null  ||  hasHitEOF  &&  buffer.isEOFRecord(hashBuf))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  hasHitEOF  &&  buffer.isEOFRecord(hashBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer!=  null  ||  hasHitEOF  &&  buffer.isEOFRecord(hashBuf))  {	  if(buffer    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
54	[BUG]  [BUGGY]  if(buffer.isEOFRecord(hashEOF))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(hashEOF))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(hashEOF))  {	  if(hashOffset    ||    buffer.isEOFRecord(hashEOF))    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
55	[BUG]  [BUGGY]  if(hashEOF  ||  buffer.isEOFRecord(hashOffset))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hashEOF  ||  buffer.isEOFRecord(hashOffset))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hashEOF  ||  buffer.isEOFRecord(hashOffset))  {	  if(hashOffset    ||    buffer.isEOFRecord(hashEOF))    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
56	[BUG]  [BUGGY]  if(buffer.isEOFRecord(hashEOF)||  buffer.isEOFRecord(hashEOF))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(hashEOF)||  buffer.isEOFRecord(hashEOF))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(hashEOF)||  buffer.isEOFRecord(hashEOF))  {	  if(hashOffset    ||    buffer.isEOFRecord(hashEOF))    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
57	[BUG]  [BUGGY]  if(hashOffset  ==  0  ||  buffer.isEOFRecord(hashEOF))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hashOffset  ==  0  ||  buffer.isEOFRecord(hashEOF))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hashOffset  ==  0  ||  buffer.isEOFRecord(hashEOF))  {	  if(hashOffset    ||    buffer.isEOFRecord(hashEOF))    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
58	[BUG]  [BUGGY]  if(buffer.isEOFRecord(hashOffset)||  buffer.isEOFRecord(hashEOF))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(hashOffset)||  buffer.isEOFRecord(hashEOF))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(hashOffset)||  buffer.isEOFRecord(hashEOF))  {	  if(hashOffset    ||    buffer.isEOFRecord(hashEOF))    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
59	[BUG]  [BUGGY]  if(buffered  ||  buffer.isEOFRecord(hashEOF))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffered  ||  buffer.isEOFRecord(hashEOF))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffered  ||  buffer.isEOFRecord(hashEOF))  {	  if(hashOffset    ||    buffer.isEOFRecord(hashEOF))    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
60	[BUG]  [BUGGY]  if(record.length  ==  0  ||  buffer.isEOFRecord(hashEOF))  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(record.length  ==  0  ||  buffer.isEOFRecord(hashEOF))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(record.length  ==  0  ||  buffer.isEOFRecord(hashEOF))  {	  if(hashOffset    ||    buffer.isEOFRecord(hashEOF))    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
61	[BUG]  [BUGGY]  if(buffer  ==  null  ||  headerBuf.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  headerBuf.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  headerBuf.isEOFRecord(headerBuf))  {	  if(headerBuf    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
62	[BUG]  [BUGGY]  if(buffer  ==  null  ||  headerBuf!=  null  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  headerBuf!=  null  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  headerBuf!=  null  ||  buffer.isEOFRecord(headerBuf))  {	  if(headerBuf    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
63	[BUG]  [BUGGY]  if(buffer  ==  null  ||  headerBuf.length  ==  0  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  headerBuf.length  ==  0  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  headerBuf.length  ==  0  ||  buffer.isEOFRecord(headerBuf))  {	  if(headerBuf    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
64	[BUG]  [BUGGY]  if(buffer  ==  null  ||  headerBuf.length  <  0  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  headerBuf.length  <  0  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  headerBuf.length  <  0  ||  buffer.isEOFRecord(headerBuf))  {	  if(headerBuf    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
65	[BUG]  [BUGGY]  if(buffer  ==  null  ||  headerBuf.equals(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  headerBuf.equals(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  headerBuf.equals(headerBuf)||  buffer.isEOFRecord(headerBuf))  {	  if(headerBuf    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
66	[BUG]  [BUGGY]  if(buffer.equals(getRecord())||  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.equals(getRecord())||  buffer.isEOFRecord(hash))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.equals(getRecord())||  buffer.isEOFRecord(hash))  {	  if(hash    ||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
67	[BUG]  [BUGGY]  if(buffer.readRecord()  ==  null  ||  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.readRecord()  ==  null  ||  buffer.isEOFRecord(hash))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.readRecord()  ==  null  ||  buffer.isEOFRecord(hash))  {	  if(hash    ||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
68	[BUG]  [BUGGY]  if(buffer.equals(record)||  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.equals(record)||  buffer.isEOFRecord(hash))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.equals(record)||  buffer.isEOFRecord(hash))  {	  if(hash    ||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
69	[BUG]  [BUGGY]  if(buffer.isEOF(hash)||  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF(hash)||  buffer.isEOFRecord(hash))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF(hash)||  buffer.isEOFRecord(hash))  {	  if(hash    ||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
70	[BUG]  [BUGGY]  if(HitEOF.equals(buffer.readRecord())&&  buffer.isEOFRecord(record))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(HitEOF.equals(buffer.readRecord())&&  buffer.isEOFRecord(record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF.equals(buffer.readRecord())&&  buffer.isEOFRecord(record))  {	  if(HitEOF.equals(buffer.readRecord())||    buffer.isEOFRecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
71	[BUG]  [BUGGY]  if(HitEOF.equals(record)||  buffer.isEOFRecord(record))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(HitEOF.equals(record)||  buffer.isEOFRecord(record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF.equals(record)||  buffer.isEOFRecord(record))  {	  if(HitEOF.equals(buffer.readRecord())||    buffer.isEOFRecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
72	[BUG]  [BUGGY]  if(record.equals(buffer.readRecord())||  buffer.isEOFRecord(HitEOF))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(record.equals(buffer.readRecord())||  buffer.isEOFRecord(HitEOF))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(record.equals(buffer.readRecord())||  buffer.isEOFRecord(HitEOF))  {	  if(HitEOF.equals(buffer.readRecord())||    buffer.isEOFRecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
73	[BUG]  [BUGGY]  if(HitEOF.equals(buffer.getRecord())||  buffer.isEOFRecord(record))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(HitEOF.equals(buffer.getRecord())||  buffer.isEOFRecord(record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF.equals(buffer.getRecord())||  buffer.isEOFRecord(record))  {	  if(HitEOF.equals(buffer.readRecord())||    buffer.isEOFRecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
74	[BUG]  [BUGGY]  if(HitEOF.equals(buffer.getRecord())&&  buffer.isEOFRecord(record))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(HitEOF.equals(buffer.getRecord())&&  buffer.isEOFRecord(record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF.equals(buffer.getRecord())&&  buffer.isEOFRecord(record))  {	  if(HitEOF.equals(buffer.readRecord())||    buffer.isEOFRecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
75	[BUG]  [BUGGY]  if(buffer.equals(record)||  buffer.isEOFRecord(record))  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.equals(record)||  buffer.isEOFRecord(record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.equals(record)||  buffer.isEOFRecord(record))  {	  if(HitEOF.equals(buffer.readRecord())||    buffer.isEOFRecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
76	[BUG]  [BUGGY]  if(buffer.isEOFRecord(headerBuf)&&  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(headerBuf)&&  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(headerBuf)&&  buffer.isEOFRecord(headerBuf))  {	  if(buffer.isEOFRecord(headerBuf)||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
77	[BUG]  [BUGGY]  if(buffer.length  ==  0  ||  buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.length  ==  0  ||  buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.length  ==  0  ||  buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {	  if(buffer.isEOFRecord(headerBuf)||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
78	[BUG]  [BUGGY]  if(buffer.readRecord()  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.readRecord()  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.readRecord()  ||  buffer.isEOFRecord(headerBuf))  {	  if(buffer.isEOFRecord(headerBuf)||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
79	[BUG]  [BUGGY]  if(buffer.isEORFecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEORFecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEORFecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {	  if(buffer.isEOFRecord(headerBuf)||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
80	[BUG]  [BUGGY]  if(buffer.isEOFRecord(headerBuf)||  buffer.readRecord())  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(headerBuf)||  buffer.readRecord())  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(headerBuf)||  buffer.readRecord())  {	  if(buffer.isEOFRecord(headerBuf)||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
81	[BUG]  [BUGGY]  if(buffer  ==  null  ||  record  ==  null  ||  buffer.isEOFRecord(record))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  record  ==  null  ||  buffer.isEOFRecord(record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  record  ==  null  ||  buffer.isEOFRecord(record))  {	  if(record    ==    null    ||    buffer.isEOFRecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
82	[BUG]  [BUGGY]  if(buffer  ==  null  ||  record.isEOFRecord(record))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  record.isEOFRecord(record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  record.isEOFRecord(record))  {	  if(record    ==    null    ||    buffer.isEOFRecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
83	[BUG]  [BUGGY]  if(buffer  ==  null  ||  record!=  null  ||  buffer.isEOFRecord(record))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  record!=  null  ||  buffer.isEOFRecord(record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  record!=  null  ||  buffer.isEOFRecord(record))  {	  if(record    ==    null    ||    buffer.isEOFRecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
84	[BUG]  [BUGGY]  if(buffer!=  null  ||  record  ==  null  ||  buffer.isEOFRecord(record))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  record  ==  null  ||  buffer.isEOFRecord(record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer!=  null  ||  record  ==  null  ||  buffer.isEOFRecord(record))  {	  if(record    ==    null    ||    buffer.isEOFRecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
85	[BUG]  [BUGGY]  if(buffer.isEOF()  ||  buffer.isEOF())  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF()  ||  buffer.isEOF())  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF()  ||  buffer.isEOF())  {	  if(buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
86	[BUG]  [BUGGY]  if(buffer.isEOF()  ||  buffer.isEOFRecord(recordSize))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF()  ||  buffer.isEOFRecord(recordSize))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF()  ||  buffer.isEOFRecord(recordSize))  {	  if(buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
87	[BUG]  [BUGGY]  if(buffer.isEOF()  ||  buffer.isEOFRecord(backerBuf))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF()  ||  buffer.isEOFRecord(backerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF()  ||  buffer.isEOFRecord(backerBuf))  {	  if(buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
88	[BUG]  [BUGGY]  if(hash  ==  hasHitEOF  &&  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hash  ==  hasHitEOF  &&  buffer.isEOFRecord(hash))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hash  ==  hasHitEOF  &&  buffer.isEOFRecord(hash))  {	  if(hash    ==    hasHitEOF    ||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
89	[BUG]  [BUGGY]  if(buffer.hashCode()  ==  hasHitEOF  ||  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.hashCode()  ==  hasHitEOF  ||  buffer.isEOFRecord(hash))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.hashCode()  ==  hasHitEOF  ||  buffer.isEOFRecord(hash))  {	  if(hash    ==    hasHitEOF    ||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
90	[BUG]  [BUGGY]  if(buffer  ==  null  ||  hasHitEOF  &&  buffer.isEOFRecord(hashCode))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  hasHitEOF  &&  buffer.isEOFRecord(hashCode))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  hasHitEOF  &&  buffer.isEOFRecord(hashCode))  {	  if(buffer    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
91	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.equals(hashCode)||  buffer.isEOFRecord(hashCode))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.equals(hashCode)||  buffer.isEOFRecord(hashCode))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.equals(hashCode)||  buffer.isEOFRecord(hashCode))  {	  if(buffer    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
92	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length()  ==  0  ||  buffer.isEOFRecord(hashCode))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length()  ==  0  ||  buffer.isEOFRecord(hashCode))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.length()  ==  0  ||  buffer.isEOFRecord(hashCode))  {	  if(buffer    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
93	[BUG]  [BUGGY]  if(buffer!=  null  ||  hasHitEOF  &&  buffer.isEOFRecord(hashCode))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  hasHitEOF  &&  buffer.isEOFRecord(hashCode))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer!=  null  ||  hasHitEOF  &&  buffer.isEOFRecord(hashCode))  {	  if(buffer    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
94	[BUG]  [BUGGY]  if(!HitEOF.equals(buffer.getRecord()))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(!HitEOF.equals(buffer.getRecord()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!HitEOF.equals(buffer.getRecord()))  {	  if(!HitEOF.equals(buffer.readRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
95	[BUG]  [BUGGY]  if(!HitEOF.equals(buffer.readRecord())&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(!HitEOF.equals(buffer.readRecord())&&  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!HitEOF.equals(buffer.readRecord())&&  hasHitEOF)  {	  if(!HitEOF.equals(buffer.readRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
96	[BUG]  [BUGGY]  if(buffer!=  null  ||  headerBuf.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  headerBuf.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer!=  null  ||  headerBuf.isEOFRecord(headerBuf))  {	  if(headerBuf!=    null    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
97	[BUG]  [BUGGY]  if(buffer  >=  null  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  >=  null  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  >=  null  ||  buffer.isEOFRecord(headerBuf))  {	  if(headerBuf!=    null    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
98	[BUG]  [BUGGY]  if(buffer.isEOF()  ||  buffer.isEOFRecord(hashBuf))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF()  ||  buffer.isEOFRecord(hashBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF()  ||  buffer.isEOFRecord(hashBuf))  {	  if(buffer.isEOFRecord(hashBuf)||    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
99	[BUG]  [BUGGY]  if(buffer.isEOFRecord(hashBuf)&&  buffer.isEOFRecord(hashBuf))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(hashBuf)&&  buffer.isEOFRecord(hashBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(hashBuf)&&  buffer.isEOFRecord(hashBuf))  {	  if(buffer.isEOFRecord(hashBuf)||    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
100	[BUG]  [BUGGY]  if(buffer.isEOFRecord(record)||  buffer.isEOFRecord(hashBuf))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(record)||  buffer.isEOFRecord(hashBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(record)||  buffer.isEOFRecord(hashBuf))  {	  if(buffer.isEOFRecord(hashBuf)||    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
101	[BUG]  [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(recordSize))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(recordSize))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!hasHitEOF  &&  buffer.isEOFRecord(recordSize))  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
102	[BUG]  [BUGGY]  if(!hashToSkip  &&  buffer.isEOFRecord(hashToSkip))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(!hashToSkip  &&  buffer.isEOFRecord(hashToSkip))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!hashToSkip  &&  buffer.isEOFRecord(hashToSkip))  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
103	[BUG]  [BUGGY]  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  hasHitEOF  =  true;  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	hasHitEOF  =  true;	  if(buffer.isEOFRecord(record))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
104	[BUG]  [BUGGY]  HasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  HasHitEOF  =  true;  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	HasHitEOF  =  true;	  if(buffer.isEOFRecord(record))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
105	[BUG]  [BUGGY]  ||  buffer.isEOFRecord(record))  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  ||  buffer.isEOFRecord(record))  {  hasHitEOF  =  true;  }  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	||  buffer.isEOFRecord(record))  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(record))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
106	[BUG]  [BUGGY]  if(buffer.isEOFRecord(record)||  buffer.isEOFRecord(record))  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(record)||  buffer.isEOFRecord(record))  {  hasHitEOF  =  true;  }  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(record)||  buffer.isEOFRecord(record))  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(record))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
107	[BUG]  [BUGGY]  if(buffer.isEOF(record))  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF(record))  {  hasHitEOF  =  true;  }  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF(record))  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(record))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
108	[BUG]  [BUGGY]  if(buffer.isEOFRecord(record)&&  hasHitEOF  ==  false)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(record)&&  hasHitEOF  ==  false)  {  hasHitEOF  =  true;  }  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(record)&&  hasHitEOF  ==  false)  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(record))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
109	[BUG]  [BUGGY]  if(buffer.length  ==  0  ||  buffer.isEOFRecord(getRecord()))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.length  ==  0  ||  buffer.isEOFRecord(getRecord()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.length  ==  0  ||  buffer.isEOFRecord(getRecord()))  {	  if(buffer.isEOF()    ||    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
110	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.isEOF()  ||  buffer.isEOFRecord(getRecord()))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.isEOF()  ||  buffer.isEOFRecord(getRecord()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.isEOF()  ||  buffer.isEOFRecord(getRecord()))  {	  if(buffer.isEOF()    ||    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
111	[BUG]  [BUGGY]  if(buffer.isEOF()  ||  buffer.isEOFRecord(getRecord())&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF()  ||  buffer.isEOFRecord(getRecord())&&  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF()  ||  buffer.isEOFRecord(getRecord())&&  hasHitEOF)  {	  if(buffer.isEOF()    ||    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
112	[BUG]  [BUGGY]  if(buffer.isEOF()  ||  buffer.isEOFRecord(getRecord())||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF()  ||  buffer.isEOFRecord(getRecord())||  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF()  ||  buffer.isEOFRecord(getRecord())||  hasHitEOF)  {	  if(buffer.isEOF()    ||    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
113	[BUG]  [BUGGY]  if(buffer.length!=  0  ||  buffer.isEOFRecord(getRecord()))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.length!=  0  ||  buffer.isEOFRecord(getRecord()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.length!=  0  ||  buffer.isEOFRecord(getRecord()))  {	  if(buffer.isEOF()    ||    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
114	[BUG]  [BUGGY]  if(record  ==  null  ||  buffer.isEOF()  ||  buffer.isEOFRecord(record))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(record  ==  null  ||  buffer.isEOF()  ||  buffer.isEOFRecord(record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(record  ==  null  ||  buffer.isEOF()  ||  buffer.isEOFRecord(record))  {	  if(buffer.isEOF()    ||    buffer.isEOFRecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
115	[BUG]  [BUGGY]  if(record.isEOF()  ||  buffer.isEOFRecord(buffer))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(record.isEOF()  ||  buffer.isEOFRecord(buffer))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(record.isEOF()  ||  buffer.isEOFRecord(buffer))  {	  if(buffer.isEOF()    ||    buffer.isEOFRecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
116	[BUG]  [BUGGY]  if(buffer.isEOF()  ||  buffer.isEOFRecord(record)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF()  ||  buffer.isEOFRecord(record)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF()  ||  buffer.isEOFRecord(record)&&  hasHitEOF)  {	  if(buffer.isEOF()    ||    buffer.isEOFRecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
117	[BUG]  [BUGGY]  if(buffer.isEOF()  ||  buffer.equals(record))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF()  ||  buffer.equals(record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF()  ||  buffer.equals(record))  {	  if(buffer.isEOF()    ||    buffer.isEOFRecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
118	[BUG]  [BUGGY]  if(HitEOF.equals(buffer.getRecord())&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(HitEOF.equals(buffer.getRecord())&&  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF.equals(buffer.getRecord())&&  hasHitEOF)  {	  if(HitEOF.equals(buffer.readRecord())&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
119	[BUG]  [BUGGY]  if(buffer.readRecord().equals(HitEOF)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.readRecord().equals(HitEOF)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.readRecord().equals(HitEOF)&&  hasHitEOF)  {	  if(HitEOF.equals(buffer.readRecord())&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
120	[BUG]  [BUGGY]  if(HitEOF.equals(buffer.readRecord())&&  hasHitEOF  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(HitEOF.equals(buffer.readRecord())&&  hasHitEOF  ||  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF.equals(buffer.readRecord())&&  hasHitEOF  ||  hasHitEOF)  {	  if(HitEOF.equals(buffer.readRecord())&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
121	[BUG]  [BUGGY]  if(hitEOF.equals(buffer.readRecord())&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hitEOF.equals(buffer.readRecord())&&  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hitEOF.equals(buffer.readRecord())&&  hasHitEOF)  {	  if(HitEOF.equals(buffer.readRecord())&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
122	[BUG]  [BUGGY]  if(hasHitEOF()  ||  isEOF())  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hasHitEOF()  ||  isEOF())  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hasHitEOF()  ||  isEOF())  {	  if(isEOF()    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
123	[BUG]  [BUGGY]  if(!isEOF()  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(!isEOF()  ||  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!isEOF()  ||  hasHitEOF)  {	  if(isEOF()    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
124	[BUG]  [BUGGY]  if(getRecord()  ==  null  ||  isEOF()  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(getRecord()  ==  null  ||  isEOF()  ||  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(getRecord()  ==  null  ||  isEOF()  ||  hasHitEOF)  {	  if(isEOF()    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
125	[BUG]  [BUGGY]  if(buffer.isEOF()  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF()  ||  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF()  ||  hasHitEOF)  {	  if(isEOF()    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
126	[BUG]  [BUGGY]  if(!hasHitEOF  ||  isEOF())  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  ||  isEOF())  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!hasHitEOF  ||  isEOF())  {	  if(isEOF()    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
127	[BUG]  [BUGGY]  if(isEOF()  ||  hasHitEOF  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(isEOF()  ||  hasHitEOF  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(isEOF()  ||  hasHitEOF  ||  buffer.isEOFRecord(headerBuf))  {	  if(isEOF()    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
128	[BUG]  [BUGGY]  if(buffer.getRecord()  ==  null  ||  buffer.isEOFRecord(getRecord()))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.getRecord()  ==  null  ||  buffer.isEOFRecord(getRecord()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.getRecord()  ==  null  ||  buffer.isEOFRecord(getRecord()))  {	  if(getRecord()    ==    null    ||    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
129	[BUG]  [BUGGY]  if(buffer.readRecord()  ==  null  ||  buffer.isEOFRecord(getRecord()))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.readRecord()  ==  null  ||  buffer.isEOFRecord(getRecord()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.readRecord()  ==  null  ||  buffer.isEOFRecord(getRecord()))  {	  if(getRecord()    ==    null    ||    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
130	[BUG]  [BUGGY]  if(getRecord()  ==  null  &&  buffer.isEOFRecord(getRecord()))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(getRecord()  ==  null  &&  buffer.isEOFRecord(getRecord()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(getRecord()  ==  null  &&  buffer.isEOFRecord(getRecord()))  {	  if(getRecord()    ==    null    ||    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
131	[BUG]  [BUGGY]  ||  buffer.isEOFRecord(getRecord()))  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  ||  buffer.isEOFRecord(getRecord()))  {  throw  new  IOException( " ");  }  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	||  buffer.isEOFRecord(getRecord()))  {  throw  new  IOException( " ");  }	  if(buffer.isEOFRecord(getRecord()))    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
132	[BUG]  [BUGGY]  while(buffer.isEOF()  &&  buffer.isEOFRecord(getRecord()))  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  while(buffer.isEOF()  &&  buffer.isEOFRecord(getRecord()))  {  throw  new  IOException( " ");  }  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	while(buffer.isEOF()  &&  buffer.isEOFRecord(getRecord()))  {  throw  new  IOException( " ");  }	  if(buffer.isEOFRecord(getRecord()))    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
133	[BUG]  [BUGGY]  while(buffer.isEOFRecord(getRecord()))  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  while(buffer.isEOFRecord(getRecord()))  {  throw  new  IOException( " ");  }  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	while(buffer.isEOFRecord(getRecord()))  {  throw  new  IOException( " ");  }	  if(buffer.isEOFRecord(getRecord()))    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
134	[BUG]  [BUGGY]  while(buffer.isEOF()  &&  buffer.isEOFRecord(getRecord()))  {  throw  new  IOException( " ");  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  while(buffer.isEOF()  &&  buffer.isEOFRecord(getRecord()))  {  throw  new  IOException( " ");  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	while(buffer.isEOF()  &&  buffer.isEOFRecord(getRecord()))  {  throw  new  IOException( " ");	  if(buffer.isEOFRecord(getRecord()))    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
135	[BUG]  [BUGGY]  while(buffer.isEOFRecord(getRecord()))  {  throw  new  IOException( " ");  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  while(buffer.isEOFRecord(getRecord()))  {  throw  new  IOException( " ");  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	while(buffer.isEOFRecord(getRecord()))  {  throw  new  IOException( " ");	  if(buffer.isEOFRecord(getRecord()))    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
136	[BUG]  [BUGGY]  while(buffer.isEOF()  ||  buffer.isEOFRecord(getRecord()))  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  while(buffer.isEOF()  ||  buffer.isEOFRecord(getRecord()))  {  throw  new  IOException( " ");  }  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	while(buffer.isEOF()  ||  buffer.isEOFRecord(getRecord()))  {  throw  new  IOException( " ");  }	  if(buffer.isEOFRecord(getRecord()))    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
137	[BUG]  [BUGGY]  safeGetRecord(buffer,  getRecord()))  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  safeGetRecord(buffer,  getRecord()))  {  throw  new  IOException( " ");  }  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	safeGetRecord(buffer,  getRecord()))  {  throw  new  IOException( " ");  }	  if(buffer.isEOFRecord(getRecord()))    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
138	[BUG]  [BUGGY]  if(hashToSkip  ==  hasHitEOF  &&  buffer.isEOFRecord(hashToSkip))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hashToSkip  ==  hasHitEOF  &&  buffer.isEOFRecord(hashToSkip))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hashToSkip  ==  hasHitEOF  &&  buffer.isEOFRecord(hashToSkip))  {	  if(hasHitEOF    &&    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
139	[BUG]  [BUGGY]  if(hashToSkip!=  hasHitEOF  &&  buffer.isEOFRecord(hashToSkip))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hashToSkip!=  hasHitEOF  &&  buffer.isEOFRecord(hashToSkip))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hashToSkip!=  hasHitEOF  &&  buffer.isEOFRecord(hashToSkip))  {	  if(hasHitEOF    &&    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
140	[BUG]  [BUGGY]  if(hasHitEOF  &&  buffer.isEOFRecord(hashToSkip)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  buffer.isEOFRecord(hashToSkip)||  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hasHitEOF  &&  buffer.isEOFRecord(hashToSkip)||  hasHitEOF)  {	  if(hasHitEOF    &&    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
141	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.isEOFRecord(headerBuffer))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.isEOFRecord(headerBuffer))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.isEOFRecord(headerBuffer))  {	  if(buffer!=    null    ||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
142	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.isEOF(hash))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.isEOF(hash))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.isEOF(hash))  {	  if(buffer!=    null    ||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
143	[BUG]  [BUGGY]  if(buffer  ==  null  ||  hasHitEOF  &&  buffer.isEOFRecord(hashOffset))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  hasHitEOF  &&  buffer.isEOFRecord(hashOffset))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  hasHitEOF  &&  buffer.isEOFRecord(hashOffset))  {	  if(buffer    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
144	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.equals(hashOffset)||  buffer.isEOFRecord(hashOffset))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.equals(hashOffset)||  buffer.isEOFRecord(hashOffset))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.equals(hashOffset)||  buffer.isEOFRecord(hashOffset))  {	  if(buffer    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
145	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.isEOFRecord(hashOffset))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  buffer.isEOFRecord(hashOffset))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer!=  null  ||  buffer.isEOFRecord(hashOffset))  {	  if(buffer    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
146	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length()  ==  0  ||  buffer.isEOFRecord(hashOffset))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length()  ==  0  ||  buffer.isEOFRecord(hashOffset))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.length()  ==  0  ||  buffer.isEOFRecord(hashOffset))  {	  if(buffer    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
147	[BUG]  [BUGGY]  if(buffer!=  null  ||  hasHitEOF  &&  buffer.isEOFRecord(hashOffset))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  hasHitEOF  &&  buffer.isEOFRecord(hashOffset))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer!=  null  ||  hasHitEOF  &&  buffer.isEOFRecord(hashOffset))  {	  if(buffer    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
148	[BUG]  [BUGGY]  if(buffer.isEOF()  ||  buffer.isEOFRecord(getRecord()))  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF()  ||  buffer.isEOFRecord(getRecord()))  {  return  null;  }  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF()  ||  buffer.isEOFRecord(getRecord()))  {  return  null;  }	  if(buffer.isEOFRecord(getRecord()))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
149	[BUG]  [BUGGY]  ||  buffer.isEOFRecord(getRecord()))  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  ||  buffer.isEOFRecord(getRecord()))  {  return  null;  }  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	||  buffer.isEOFRecord(getRecord()))  {  return  null;  }	  if(buffer.isEOFRecord(getRecord()))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
150	[BUG]  [BUGGY]  if(getRecord()!=  null)  {  if(buffer.isEOFRecord(getRecord()))  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(getRecord()!=  null)  {  if(buffer.isEOFRecord(getRecord()))  {  return  null;  }  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(getRecord()!=  null)  {  if(buffer.isEOFRecord(getRecord()))  {  return  null;  }	  if(buffer.isEOFRecord(getRecord()))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
151	[BUG]  [BUGGY]  if(buffer.isEOFRecord(getRecord())||  buffer.isEOFRecord(getRecord()))  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(getRecord())||  buffer.isEOFRecord(getRecord()))  {  return  null;  }  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(getRecord())||  buffer.isEOFRecord(getRecord()))  {  return  null;  }	  if(buffer.isEOFRecord(getRecord()))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
152	[BUG]  [BUGGY]  if(buffer.isEOF())  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF())  {  return  null;  }  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF())  {  return  null;  }	  if(buffer.isEOFRecord(getRecord()))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
153	[BUG]  [BUGGY]  if(buffer.isEOFRecord(record))  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(record))  {  return  null;  }  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(record))  {  return  null;  }	  if(buffer.isEOFRecord(getRecord()))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
154	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!hasHitEOF  &&  isEOFRecord(headerBuf))  {	  if(hasHitEOF    ||    isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
155	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(headerBuf  ==  null  ||  isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(headerBuf  ==  null  ||  isEOFRecord(headerBuf))  {	  if(hasHitEOF    ||    isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
156	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  hasHitEOF  ||  isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(headerBuf  ==  null  ||  hasHitEOF  ||  isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(headerBuf  ==  null  ||  hasHitEOF  ||  isEOFRecord(headerBuf))  {	  if(hasHitEOF    ||    isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
157	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hasHitEOF  &&  isEOFRecord(headerBuf))  {	  if(hasHitEOF    ||    isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
158	[BUG]  [BUGGY]  if(headerBuf!=  null  ||  isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(headerBuf!=  null  ||  isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(headerBuf!=  null  ||  isEOFRecord(headerBuf))  {	  if(hasHitEOF    ||    isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
159	[BUG]  [BUGGY]  if(buffer.isEOFRecord(headerBuf)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(headerBuf)||  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(headerBuf)||  hasHitEOF)  {	  if(hasHitEOF    ||    isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
160	[BUG]  [BUGGY]  if(getRecord()  ==  null  ||  isEOF()  ||  buffer.isEOFRecord(getRecord()))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(getRecord()  ==  null  ||  isEOF()  ||  buffer.isEOFRecord(getRecord()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(getRecord()  ==  null  ||  isEOF()  ||  buffer.isEOFRecord(getRecord()))  {	  if(isEOF()    ||    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
161	[BUG]  [BUGGY]  if(buffer.length  ==  0  ||  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.length  ==  0  ||  buffer.isEOFRecord(hash))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.length  ==  0  ||  buffer.isEOFRecord(hash))  {	  if(hash    ==    0    ||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
162	[BUG]  [BUGGY]  if(record.length  ==  0  ||  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(record.length  ==  0  ||  buffer.isEOFRecord(hash))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(record.length  ==  0  ||  buffer.isEOFRecord(hash))  {	  if(hash    ==    0    ||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
163	[BUG]  [BUGGY]  ((  TarArchiveEntry)buffer).record();  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  ((  TarArchiveEntry)buffer).record();  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	((  TarArchiveEntry)buffer).record();	  ((    TarArchiveEntry)buffer).getRecord();    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
164	[BUG]  [BUGGY]  ((  TarArchiveEntry)buffer).setRecord(null);  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  ((  TarArchiveEntry)buffer).setRecord(null);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	((  TarArchiveEntry)buffer).setRecord(null);	  ((    TarArchiveEntry)buffer).getRecord();    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
165	[BUG]  [BUGGY]  ((  TarArchiveEntry)buffer).setRecord(true);  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  ((  TarArchiveEntry)buffer).setRecord(true);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	((  TarArchiveEntry)buffer).setRecord(true);	  ((    TarArchiveEntry)buffer).getRecord();    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
166	[BUG]  [BUGGY]  ((  TarArchiveEntry)buffer).setRecord(getRecord());  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  ((  TarArchiveEntry)buffer).setRecord(getRecord());  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	((  TarArchiveEntry)buffer).setRecord(getRecord());	  ((    TarArchiveEntry)buffer).getRecord();    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
167	[BUG]  [BUGGY]  (TarArchiveEntry)buffer.getRecord();  [CE]  illegal  start  of  type  [FE]                                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  (TarArchiveEntry)buffer.getRecord();  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	(TarArchiveEntry)buffer.getRecord();	  ((    TarArchiveEntry)buffer).getRecord();    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
168	[BUG]  [BUGGY]  ((  TarArchiveEntry)buffer).setRecord(this);  [CE]  illegal  start  of  type  [FE]                                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  ((  TarArchiveEntry)buffer).setRecord(this);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	((  TarArchiveEntry)buffer).setRecord(this);	  ((    TarArchiveEntry)buffer).getRecord();    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
169	[BUG]  [BUGGY]  if(hashOffset  ==  0  ||  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hashOffset  ==  0  ||  buffer.isEOFRecord(hash))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hashOffset  ==  0  ||  buffer.isEOFRecord(hash))  {	  if(hashOffset    ||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
170	[BUG]  [BUGGY]  if(buffer.length()  ==  0  ||  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.length()  ==  0  ||  buffer.isEOFRecord(hash))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.length()  ==  0  ||  buffer.isEOFRecord(hash))  {	  if(hashOffset    ||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
171	[BUG]  [BUGGY]  if(buffer.isEOFRecord(hashOffset)||  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(hashOffset)||  buffer.isEOFRecord(hash))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(hashOffset)||  buffer.isEOFRecord(hash))  {	  if(hashOffset    ||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
172	[BUG]  [BUGGY]  if(hashOffset  ==  buffer.length  ||  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hashOffset  ==  buffer.length  ||  buffer.isEOFRecord(hash))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hashOffset  ==  buffer.length  ||  buffer.isEOFRecord(hash))  {	  if(hashOffset    ||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
173	[BUG]  [BUGGY]  if(buffered  ||  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffered  ||  buffer.isEOFRecord(hash))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffered  ||  buffer.isEOFRecord(hash))  {	  if(hashOffset    ||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
174	[BUG]  [BUGGY]  if(getRecord()!=  null  &&  buffer.isEOFRecord(getRecord()))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(getRecord()!=  null  &&  buffer.isEOFRecord(getRecord()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(getRecord()!=  null  &&  buffer.isEOFRecord(getRecord()))  {	  if(getRecord()!=    null    ||    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
175	[BUG]  [BUGGY]  if(buffer.getRecord()!=  null  ||  buffer.isEOFRecord(getRecord()))  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.getRecord()!=  null  ||  buffer.isEOFRecord(getRecord()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.getRecord()!=  null  ||  buffer.isEOFRecord(getRecord()))  {	  if(getRecord()!=    null    ||    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
176	[BUG]  [BUGGY]  if(buffer.length  ==  0  ||  record.length  ==  0  ||  buffer.isEOFRecord(hashCode))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.length  ==  0  ||  record.length  ==  0  ||  buffer.isEOFRecord(hashCode))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.length  ==  0  ||  record.length  ==  0  ||  buffer.isEOFRecord(hashCode))  {	  if(record.length    ==    0    ||    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
177	[BUG]  [BUGGY]  if(record  ==  null  ||  buffer.isEOFRecord(hashCode))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(record  ==  null  ||  buffer.isEOFRecord(hashCode))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(record  ==  null  ||  buffer.isEOFRecord(hashCode))  {	  if(record.length    ==    0    ||    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
178	[BUG]  [BUGGY]  if(buffer.length  ==  0  ||  record.isEOFRecord(hashCode))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.length  ==  0  ||  record.isEOFRecord(hashCode))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.length  ==  0  ||  record.isEOFRecord(hashCode))  {	  if(record.length    ==    0    ||    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
179	[BUG]  [BUGGY]  if(record  ==  null  ||  buffer.isEOFRecord(record.length))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(record  ==  null  ||  buffer.isEOFRecord(record.length))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(record  ==  null  ||  buffer.isEOFRecord(record.length))  {	  if(record.length    ==    0    ||    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
180	[BUG]  [BUGGY]  if(headerBuf.isEOFRecord(hasHitEOF)&&  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(headerBuf.isEOFRecord(hasHitEOF)&&  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(headerBuf.isEOFRecord(hasHitEOF)&&  buffer.isEOFRecord(headerBuf))  {	  if(hasHitEOF    &&    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
181	[BUG]  [BUGGY]  if(hasHitEOF  &&  buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hasHitEOF  &&  buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {	  if(hasHitEOF    &&    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
182	[BUG]  [BUGGY]  if(headerBuf!=  null  &&  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(headerBuf!=  null  &&  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(headerBuf!=  null  &&  buffer.isEOFRecord(headerBuf))  {	  if(hasHitEOF    &&    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
183	[BUG]  [BUGGY]  if(record.length  ==  0  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(record.length  ==  0  ||  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(record.length  ==  0  ||  hasHitEOF)  {	  if(hasHitEOF    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
184	[BUG]  [BUGGY]  if(buffer.readRecord()!=  null  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.readRecord()!=  null  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.readRecord()!=  null  ||  buffer.isEOFRecord(headerBuf))  {	  if(buffer.readRecord()    ==    null    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
185	[BUG]  [BUGGY]  if(buffer.readRecord()  ==  null  ||  buffer.isEOF(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.readRecord()  ==  null  ||  buffer.isEOF(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.readRecord()  ==  null  ||  buffer.isEOF(headerBuf))  {	  if(buffer.readRecord()    ==    null    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
186	[BUG]  [BUGGY]  if(buffer.readRecord()!=  null  ||  buffer.isEOFRecord(record))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.readRecord()!=  null  ||  buffer.isEOFRecord(record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.readRecord()!=  null  ||  buffer.isEOFRecord(record))  {	  if(buffer.readRecord()    ==    null    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
187	[BUG]  [BUGGY]  if(buffer.getRecord()  ==  null  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.getRecord()  ==  null  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.getRecord()  ==  null  ||  buffer.isEOFRecord(headerBuf))  {	  if(buffer.readRecord()    ==    null    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
188	[BUG]  [BUGGY]  if(buffer.readRecord()  ==  null  ||  buffer.isEOFRecord(bodyBuf))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.readRecord()  ==  null  ||  buffer.isEOFRecord(bodyBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.readRecord()  ==  null  ||  buffer.isEOFRecord(bodyBuf))  {	  if(buffer.readRecord()    ==    null    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
189	[BUG]  [BUGGY]  if(hashEOF  ||  hasHitEOF  ||  buffer.isEOFRecord(hashEOF))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hashEOF  ||  hasHitEOF  ||  buffer.isEOFRecord(hashEOF))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hashEOF  ||  hasHitEOF  ||  buffer.isEOFRecord(hashEOF))  {	  if(hashEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
190	[BUG]  [BUGGY]  if(hasHitEOF  ||  buffer.isEOFRecord(hashEOF))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  buffer.isEOFRecord(hashEOF))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hasHitEOF  ||  buffer.isEOFRecord(hashEOF))  {	  if(hashEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
191	[BUG]  [BUGGY]  if(buffer.isEOFRecord(hashEOF)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(hashEOF)||  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(hashEOF)||  hasHitEOF)  {	  if(hashEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
192	[BUG]  [BUGGY]  if(HashEOF  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(HashEOF  ||  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HashEOF  ||  hasHitEOF)  {	  if(hashEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
193	[BUG]  [BUGGY]  if(record  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(record  ||  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(record  ||  hasHitEOF)  {	  if(hashEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
194	[BUG]  [BUGGY]  if(record.isEOFRecord(buffer)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(record.isEOFRecord(buffer)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(record.isEOFRecord(buffer)&&  hasHitEOF)  {	  if(buffer.isEOFRecord(record)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
195	[BUG]  [BUGGY]  if(buffer.readRecord()  ||  buffer.isEOFRecord(record)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.readRecord()  ||  buffer.isEOFRecord(record)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.readRecord()  ||  buffer.isEOFRecord(record)&&  hasHitEOF)  {	  if(buffer.isEOFRecord(record)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
196	[BUG]  [BUGGY]  if(buffer.isEOFRecord(record)&&  hasHitEOF  ||  buffer.isEOFRecord(record))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(record)&&  hasHitEOF  ||  buffer.isEOFRecord(record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(record)&&  hasHitEOF  ||  buffer.isEOFRecord(record))  {	  if(buffer.isEOFRecord(record)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
197	[BUG]  [BUGGY]  if(!buffer.isEOFRecord(record)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(!buffer.isEOFRecord(record)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!buffer.isEOFRecord(record)&&  hasHitEOF)  {	  if(buffer.isEOFRecord(record)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
198	[BUG]  [BUGGY]  if(buffer.isEOF(record)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF(record)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF(record)&&  hasHitEOF)  {	  if(buffer.isEOFRecord(record)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
199	[BUG]  [BUGGY]  if(!hashEOF  &&  buffer.isEOFRecord(hashBuf))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(!hashEOF  &&  buffer.isEOFRecord(hashBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!hashEOF  &&  buffer.isEOFRecord(hashBuf))  {	  if(hashEOF    &&    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
200	[BUG]  [BUGGY]  if(hashEOF  &&  buffer.isEOFRecord(hashBuf)||  buffer.isEOFRecord(hashBuf))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hashEOF  &&  buffer.isEOFRecord(hashBuf)||  buffer.isEOFRecord(hashBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hashEOF  &&  buffer.isEOFRecord(hashBuf)||  buffer.isEOFRecord(hashBuf))  {	  if(hashEOF    &&    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
201	[BUG]  [BUGGY]  if(record.length  ==  0  ||  buffer.isEOFRecord(hashBuf))  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(record.length  ==  0  ||  buffer.isEOFRecord(hashBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(record.length  ==  0  ||  buffer.isEOFRecord(hashBuf))  {	  if(hashEOF    &&    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
202	[BUG]  [BUGGY]  if(buffer.isEOF()  ||  buffer.isEOFRecord(hashOffset))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF()  ||  buffer.isEOFRecord(hashOffset))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF()  ||  buffer.isEOFRecord(hashOffset))  {	  if(buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
203	[BUG]  [BUGGY]  if(buffer.isEOFRecord(recordSize))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(recordSize))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(recordSize))  {	  if(buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
204	[BUG]  [BUGGY]  if(buffer.isEOFRecord(hashOffset)||  buffer.isEOFRecord(hashOffset))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(hashOffset)||  buffer.isEOFRecord(hashOffset))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(hashOffset)||  buffer.isEOFRecord(hashOffset))  {	  if(buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
205	[BUG]  [BUGGY]  if(buffer.isEOFRecord(entryOffset))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(entryOffset))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(entryOffset))  {	  if(buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
206	[BUG]  [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(hashCode)||  buffer.isEOFRecord(hashCode))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(hashCode)||  buffer.isEOFRecord(hashCode))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!hasHitEOF  &&  buffer.isEOFRecord(hashCode)||  buffer.isEOFRecord(hashCode))  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
207	[BUG]  [BUGGY]  if(!hashEOF  &&  buffer.isEOFRecord(hashCode))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(!hashEOF  &&  buffer.isEOFRecord(hashCode))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!hashEOF  &&  buffer.isEOFRecord(hashCode))  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
208	[BUG]  [BUGGY]  TarBuffer  buffer  =(TarBuffer)this.record();  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  TarBuffer  buffer  =(TarBuffer)this.record();  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	TarBuffer  buffer  =(TarBuffer)this.record();	  TarBuffer    buffer    =(TarBuffer)getRecord();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
209	[BUG]  [BUGGY]  TarBuffer  buffer  =(TarBuffer)this.getRecord();  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  TarBuffer  buffer  =(TarBuffer)this.getRecord();  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	TarBuffer  buffer  =(TarBuffer)this.getRecord();	  TarBuffer    buffer    =(TarBuffer)getRecord();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
210	[BUG]  [BUGGY]  TarBuffer  buffer  =(TarBuffer)this.record;  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  TarBuffer  buffer  =(TarBuffer)this.record;  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	TarBuffer  buffer  =(TarBuffer)this.record;	  TarBuffer    buffer    =(TarBuffer)getRecord();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
211	[BUG]  [BUGGY]  TarBuffer  buffer  =(TarBuffer)getSize();  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  TarBuffer  buffer  =(TarBuffer)getSize();  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	TarBuffer  buffer  =(TarBuffer)getSize();	  TarBuffer    buffer    =(TarBuffer)getRecord();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
212	[BUG]  [BUGGY]  TarBuffer  buffer  =(TarBuffer)getRecord().cloneTarBuffer();  [CE]  illegal  start  of  type  [FE]                                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  TarBuffer  buffer  =(TarBuffer)getRecord().cloneTarBuffer();  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	TarBuffer  buffer  =(TarBuffer)getRecord().cloneTarBuffer();	  TarBuffer    buffer    =(TarBuffer)getRecord();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
213	[BUG]  [BUGGY]  TarBuffer  buffer  =(TarBuffer)getBinaryRecord();  [CE]  illegal  start  of  type  [FE]                                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  TarBuffer  buffer  =(TarBuffer)getBinaryRecord();  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	TarBuffer  buffer  =(TarBuffer)getBinaryRecord();	  TarBuffer    buffer    =(TarBuffer)getRecord();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
214	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.isEOF(hashBuf))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.isEOF(hashBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.isEOF(hashBuf))  {	  if(buffer    ==    null    ||    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
215	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.isEOFRecord(hashBuf)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.isEOFRecord(hashBuf)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.isEOFRecord(hashBuf)&&  hasHitEOF)  {	  if(buffer    ==    null    ||    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
216	[BUG]  [BUGGY]  if(getRecord()  ==  null  ||  hasHitEOF  &&  buffer.isEOFRecord(getRecord()))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(getRecord()  ==  null  ||  hasHitEOF  &&  buffer.isEOFRecord(getRecord()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(getRecord()  ==  null  ||  hasHitEOF  &&  buffer.isEOFRecord(getRecord()))  {	  if(getRecord()    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
217	[BUG]  [BUGGY]  if(buffer.getRecord()  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(getRecord()))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.getRecord()  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(getRecord()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.getRecord()  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(getRecord()))  {	  if(getRecord()    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
218	[BUG]  [BUGGY]  if(buffer.readRecord()  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(getRecord()))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.readRecord()  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(getRecord()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.readRecord()  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(getRecord()))  {	  if(getRecord()    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
219	[BUG]  [BUGGY]  if(getRecord()!=  null  ||  hasHitEOF  &&  buffer.isEOFRecord(getRecord()))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(getRecord()!=  null  ||  hasHitEOF  &&  buffer.isEOFRecord(getRecord()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(getRecord()!=  null  ||  hasHitEOF  &&  buffer.isEOFRecord(getRecord()))  {	  if(getRecord()    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
220	[BUG]  [BUGGY]  if(record  ==  null  ||!hasHitEOF  &&  buffer.isEOFRecord(record))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(record  ==  null  ||!hasHitEOF  &&  buffer.isEOFRecord(record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(record  ==  null  ||!hasHitEOF  &&  buffer.isEOFRecord(record))  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
221	[BUG]  [BUGGY]  if(record!=  null  ||!hasHitEOF  &&  buffer.isEOFRecord(record))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(record!=  null  ||!hasHitEOF  &&  buffer.isEOFRecord(record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(record!=  null  ||!hasHitEOF  &&  buffer.isEOFRecord(record))  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
222	[BUG]  [BUGGY]  if(hasHitEOF  &&  buffer.isEOFRecord(record))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  buffer.isEOFRecord(record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hasHitEOF  &&  buffer.isEOFRecord(record))  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
223	[BUG]  [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(record)||  buffer.isEOFRecord(record))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(record)||  buffer.isEOFRecord(record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!hasHitEOF  &&  buffer.isEOFRecord(record)||  buffer.isEOFRecord(record))  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
224	[BUG]  [BUGGY]  if(record  ==  null  &&  buffer.isEOFRecord(record))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(record  ==  null  &&  buffer.isEOFRecord(record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(record  ==  null  &&  buffer.isEOFRecord(record))  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
225	[BUG]  [BUGGY]  if(hasHitEOF  &&  buffer.isEOFRecord(hashBuf)||  buffer.isEOFRecord(hashBuf))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  buffer.isEOFRecord(hashBuf)||  buffer.isEOFRecord(hashBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hasHitEOF  &&  buffer.isEOFRecord(hashBuf)||  buffer.isEOFRecord(hashBuf))  {	  if(hasHitEOF    &&    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
226	[BUG]  [BUGGY]  if(buffer.isEOFRecord(hashBuffer))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(hashBuffer))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(hashBuffer))  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(hashBuffer))    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
227	[BUG]  [BUGGY]  if(hasHitEOF  &&  buffer.isEOFRecord(hashBuffer))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  buffer.isEOFRecord(hashBuffer))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hasHitEOF  &&  buffer.isEOFRecord(hashBuffer))  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(hashBuffer))    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
228	[BUG]  [BUGGY]  if(!hashEOF  &&  buffer.isEOFRecord(hashBuffer))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(!hashEOF  &&  buffer.isEOFRecord(hashBuffer))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!hashEOF  &&  buffer.isEOFRecord(hashBuffer))  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(hashBuffer))    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
229	[BUG]  [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(buffer))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(buffer))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!hasHitEOF  &&  buffer.isEOFRecord(buffer))  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(hashBuffer))    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
230	[BUG]  [BUGGY]  if(buffer.isEOF()  ||  buffer.isEOFRecord(hashToSkip))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF()  ||  buffer.isEOFRecord(hashToSkip))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF()  ||  buffer.isEOFRecord(hashToSkip))  {	  if(buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
231	[BUG]  [BUGGY]  if(buffer.isEOFRecord(realSkip))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(realSkip))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(realSkip))  {	  if(buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
232	[BUG]  [BUGGY]  if(buffer.isEOFRecord(entrySize))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(entrySize))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(entrySize))  {	  if(buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
233	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.isEOFRecord(getRecord()))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  buffer.isEOFRecord(getRecord()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer!=  null  ||  buffer.isEOFRecord(getRecord()))  {	  if(buffer    ==    null    ||    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
234	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.isEOF(getRecord()))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.isEOF(getRecord()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.isEOF(getRecord()))  {	  if(buffer    ==    null    ||    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
235	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.equals(getRecord()))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.equals(getRecord()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.equals(getRecord()))  {	  if(buffer    ==    null    ||    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
236	[BUG]  [BUGGY]  if(buffered  ==  null  ||  buffer.isEOFRecord(getRecord()))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffered  ==  null  ||  buffer.isEOFRecord(getRecord()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffered  ==  null  ||  buffer.isEOFRecord(getRecord()))  {	  if(buffer    ==    null    ||    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
237	[BUG]  [BUGGY]  if(HitEOF.equals(buffer.getRecord())||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(HitEOF.equals(buffer.getRecord())||  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF.equals(buffer.getRecord())||  hasHitEOF)  {	  if(HitEOF.equals(buffer.readRecord())||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
238	[BUG]  [BUGGY]  if(buffer.readRecord().equals(HitEOF)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.readRecord().equals(HitEOF)||  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.readRecord().equals(HitEOF)||  hasHitEOF)  {	  if(HitEOF.equals(buffer.readRecord())||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
239	[BUG]  [BUGGY]  if(buffer.isEOFRecord(record)||  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(record)||  buffer.isEOFRecord(hash))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(record)||  buffer.isEOFRecord(hash))  {	  if(buffer.isEOFRecord(hasHitEOF)||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
240	[BUG]  [BUGGY]  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(hash))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(hash))  {	  if(buffer.isEOFRecord(hasHitEOF)||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
241	[BUG]  [BUGGY]  if(buffer.isEOFRecord(recordSize)||  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(recordSize)||  buffer.isEOFRecord(hash))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(recordSize)||  buffer.isEOFRecord(hash))  {	  if(buffer.isEOFRecord(hasHitEOF)||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
242	[BUG]  [BUGGY]  if(buffer.isEOFRecord(getRecord())||  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(getRecord())||  buffer.isEOFRecord(hash))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(getRecord())||  buffer.isEOFRecord(hash))  {	  if(buffer.isEOFRecord(hasHitEOF)||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
243	[BUG]  [BUGGY]  if(buffer.isEOF()  ||  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF()  ||  buffer.isEOFRecord(hash))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF()  ||  buffer.isEOFRecord(hash))  {	  if(buffer.isEOFRecord(hasHitEOF)||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
244	[BUG]  [BUGGY]  if(buffer.isEOFRecord(record)&&  buffer.isEOFRecord(record))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(record)&&  buffer.isEOFRecord(record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(record)&&  buffer.isEOFRecord(record))  {	  if(buffer.isEOFRecord(record)||    buffer.isEOFRecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
245	[BUG]  [BUGGY]  if(record.isEOFRecord(buffer)||  buffer.isEOFRecord(record))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(record.isEOFRecord(buffer)||  buffer.isEOFRecord(record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(record.isEOFRecord(buffer)||  buffer.isEOFRecord(record))  {	  if(buffer.isEOFRecord(record)||    buffer.isEOFRecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
246	[BUG]  [BUGGY]  if(buffer.isEOF(record)||  buffer.isEOFRecord(record))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF(record)||  buffer.isEOFRecord(record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF(record)||  buffer.isEOFRecord(record))  {	  if(buffer.isEOFRecord(record)||    buffer.isEOFRecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
247	[BUG]  [BUGGY]  if(buffer.isEORFecord(record)||  buffer.isEOFRecord(record))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEORFecord(record)||  buffer.isEOFRecord(record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEORFecord(record)||  buffer.isEOFRecord(record))  {	  if(buffer.isEOFRecord(record)||    buffer.isEOFRecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
248	[BUG]  [BUGGY]  if(buffer.isEOFRecord(record)||  buffer.isEOF(record))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(record)||  buffer.isEOF(record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(record)||  buffer.isEOF(record))  {	  if(buffer.isEOFRecord(record)||    buffer.isEOFRecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
249	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  0,  buffer.length  -  1);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  0,  buf,  0,  buffer.length  -  1);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	System.arraycopy(buffer,  0,  buf,  0,  buffer.length  -  1);	  System.arraycopy(buffer,    0,    buf,    0,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
250	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  1,  buffer.length);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  0,  buf,  1,  buffer.length);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	System.arraycopy(buffer,  0,  buf,  1,  buffer.length);	  System.arraycopy(buffer,    0,    buf,    0,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
251	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  buffer.length);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  buffer.length);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  buffer.length);	  System.arraycopy(buffer,    0,    buf,    0,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
252	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  0,  buffer.length  -  2);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  0,  buf,  0,  buffer.length  -  2);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	System.arraycopy(buffer,  0,  buf,  0,  buffer.length  -  2);	  System.arraycopy(buffer,    0,    buf,    0,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
253	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  0,  buffer.length  +  1);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  0,  buf,  0,  buffer.length  +  1);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	System.arraycopy(buffer,  0,  buf,  0,  buffer.length  +  1);	  System.arraycopy(buffer,    0,    buf,    0,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
254	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  0,  buffer.length  -  4);  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  0,  buf,  0,  buffer.length  -  4);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	System.arraycopy(buffer,  0,  buf,  0,  buffer.length  -  4);	  System.arraycopy(buffer,    0,    buf,    0,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
255	[BUG]  [BUGGY]  if(hashOffset  ==  HASH_EOF  &&  buffer.isEOFRecord(hashOffset))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hashOffset  ==  HASH_EOF  &&  buffer.isEOFRecord(hashOffset))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hashOffset  ==  HASH_EOF  &&  buffer.isEOFRecord(hashOffset))  {	  if(hashOffset    ==    HASH_EOF    ||    buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
256	[BUG]  [BUGGY]  if(buffer.length  ==  HASH_EOF  ||  buffer.isEOFRecord(hashOffset))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.length  ==  HASH_EOF  ||  buffer.isEOFRecord(hashOffset))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.length  ==  HASH_EOF  ||  buffer.isEOFRecord(hashOffset))  {	  if(hashOffset    ==    HASH_EOF    ||    buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
257	[BUG]  [BUGGY]  if(buffer.isEOFRecord(HASH_EOF)||  buffer.isEOFRecord(hashOffset))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(HASH_EOF)||  buffer.isEOFRecord(hashOffset))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(HASH_EOF)||  buffer.isEOFRecord(hashOffset))  {	  if(hashOffset    ==    HASH_EOF    ||    buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
258	[BUG]  [BUGGY]  if(record.length  ==  0  ||  hasHitEOF  &&  buffer.isEOFRecord(hashOffset))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(record.length  ==  0  ||  hasHitEOF  &&  buffer.isEOFRecord(hashOffset))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(record.length  ==  0  ||  hasHitEOF  &&  buffer.isEOFRecord(hashOffset))  {	  if(hasHitEOF    &&    buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
259	[BUG]  [BUGGY]  if(hasHitEOF  &&  buffer.isEOFRecord(hashOffset)||  buffer.isEOFRecord(hashOffset))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  buffer.isEOFRecord(hashOffset)||  buffer.isEOFRecord(hashOffset))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hasHitEOF  &&  buffer.isEOFRecord(hashOffset)||  buffer.isEOFRecord(hashOffset))  {	  if(hasHitEOF    &&    buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
260	[BUG]  [BUGGY]  ||  buffer.isEOFRecord(hashCode,  record))  {  hasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  ||  buffer.isEOFRecord(hashCode,  record))  {  hasHitEOF  =  false;  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	||  buffer.isEOFRecord(hashCode,  record))  {  hasHitEOF  =  false;	  ||    buffer.isEOFRecord(record))    {    hasHitEOF    =    false;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
261	[BUG]  [BUGGY]  ||  record.isEOFRecord(buffer))  {  hasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  ||  record.isEOFRecord(buffer))  {  hasHitEOF  =  false;  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	||  record.isEOFRecord(buffer))  {  hasHitEOF  =  false;	  ||    buffer.isEOFRecord(record))    {    hasHitEOF    =    false;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
262	[BUG]  [BUGGY]  &&  buffer.isEOFRecord(record))  {  hasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  &&  buffer.isEOFRecord(record))  {  hasHitEOF  =  false;  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	&&  buffer.isEOFRecord(record))  {  hasHitEOF  =  false;	  ||    buffer.isEOFRecord(record))    {    hasHitEOF    =    false;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
263	[BUG]  [BUGGY]  ||  buffer.isEOFRecord(record)&&  hasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  ||  buffer.isEOFRecord(record)&&  hasHitEOF  =  false;  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	||  buffer.isEOFRecord(record)&&  hasHitEOF  =  false;	  ||    buffer.isEOFRecord(record))    {    hasHitEOF    =    false;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
264	[BUG]  [BUGGY]  ||  buffer.equals(record))  {  hasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  ||  buffer.equals(record))  {  hasHitEOF  =  false;  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	||  buffer.equals(record))  {  hasHitEOF  =  false;	  ||    buffer.isEOFRecord(record))    {    hasHitEOF    =    false;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
265	[BUG]  [BUGGY]  if(hash  <  0  ||  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hash  <  0  ||  buffer.isEOFRecord(hash))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hash  <  0  ||  buffer.isEOFRecord(hash))  {	  if(hash    <    =    0    ||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
266	[BUG]  [BUGGY]  if(buffer.length  <  =  0  ||  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.length  <  =  0  ||  buffer.isEOFRecord(hash))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.length  <  =  0  ||  buffer.isEOFRecord(hash))  {	  if(hash    <    =    0    ||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
267	[BUG]  [BUGGY]  if(hash  >=  0  ||  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hash  >=  0  ||  buffer.isEOFRecord(hash))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hash  >=  0  ||  buffer.isEOFRecord(hash))  {	  if(hash    <    =    0    ||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
268	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.isEOF(hashCode))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.isEOF(hashCode))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.isEOF(hashCode))  {	  if(buffer    ==    null    ||    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
269	[BUG]  [BUGGY]  if(buffer.isEOF()  ||  buffer.isEORFecord(record))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF()  ||  buffer.isEORFecord(record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF()  ||  buffer.isEORFecord(record))  {	  if(buffer.isEOFRecord(record)||    buffer.isEORFecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
270	[BUG]  [BUGGY]  if(buffer.isEOFRecord(record)&&  buffer.isEORFecord(record))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(record)&&  buffer.isEORFecord(record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(record)&&  buffer.isEORFecord(record))  {	  if(buffer.isEOFRecord(record)||    buffer.isEORFecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
271	[BUG]  [BUGGY]  if(buffer.isEORFecord(record)||  buffer.isEORFecord(record))  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEORFecord(record)||  buffer.isEORFecord(record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEORFecord(record)||  buffer.isEORFecord(record))  {	  if(buffer.isEOFRecord(record)||    buffer.isEORFecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
272	[BUG]  [BUGGY]  if(record.isEOFRecord(buffer)||  buffer.isEORFecord(record))  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(record.isEOFRecord(buffer)||  buffer.isEORFecord(record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(record.isEOFRecord(buffer)||  buffer.isEORFecord(record))  {	  if(buffer.isEOFRecord(record)||    buffer.isEORFecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
273	[BUG]  [BUGGY]  if(buffer.isEOF(record)||  buffer.isEORFecord(record))  {  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF(record)||  buffer.isEORFecord(record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF(record)||  buffer.isEORFecord(record))  {	  if(buffer.isEOFRecord(record)||    buffer.isEORFecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
274	[BUG]  [BUGGY]  if(buffer.equals(record)||  buffer.equals(record))  {  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.equals(record)||  buffer.equals(record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.equals(record)||  buffer.equals(record))  {	  if(buffer.isEOFRecord(record)||    buffer.isEORFecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
275	[BUG]  [BUGGY]  if(HitEOF  &&  buffer.isEOFRecord(hashToSkip)||  buffer.isEOFRecord(hashToSkip))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(HitEOF  &&  buffer.isEOFRecord(hashToSkip)||  buffer.isEOFRecord(hashToSkip))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF  &&  buffer.isEOFRecord(hashToSkip)||  buffer.isEOFRecord(hashToSkip))  {	  if(HitEOF    &&    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
276	[BUG]  [BUGGY]  if(hashToSkip  &&  buffer.isEOFRecord(hashToSkip))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hashToSkip  &&  buffer.isEOFRecord(hashToSkip))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hashToSkip  &&  buffer.isEOFRecord(hashToSkip))  {	  if(HitEOF    &&    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
277	[BUG]  [BUGGY]  if(buffer.readRecord()  ||  buffer.isEOFRecord(headerBuf)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.readRecord()  ||  buffer.isEOFRecord(headerBuf)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.readRecord()  ||  buffer.isEOFRecord(headerBuf)&&  hasHitEOF)  {	  if(buffer.isEOFRecord(headerBuf)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
278	[BUG]  [BUGGY]  if(buffer.isEOFRecord(headerBuf)&&  hasHitEOF  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(headerBuf)&&  hasHitEOF  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(headerBuf)&&  hasHitEOF  ||  buffer.isEOFRecord(headerBuf))  {	  if(buffer.isEOFRecord(headerBuf)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
279	[BUG]  [BUGGY]  if(!buffer.isEOFRecord(headerBuf)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(!buffer.isEOFRecord(headerBuf)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!buffer.isEOFRecord(headerBuf)&&  hasHitEOF)  {	  if(buffer.isEOFRecord(headerBuf)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
280	[BUG]  [BUGGY]  if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOFRecord(headerBuf))  {	  if(buffer.isEOFRecord(headerBuf)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
281	[BUG]  [BUGGY]  if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOF)  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOF)  {	  if(buffer.isEOFRecord(headerBuf)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
282	[BUG]  [BUGGY]  if(hasHitEOF  &&  buffer.isEOFRecord(hashCode)||  buffer.isEOFRecord(hashCode))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  buffer.isEOFRecord(hashCode)||  buffer.isEOFRecord(hashCode))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hasHitEOF  &&  buffer.isEOFRecord(hashCode)||  buffer.isEOFRecord(hashCode))  {	  if(hasHitEOF    &&    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
283	[BUG]  [BUGGY]  if(hashCode  ==  hasHitEOF  &&  buffer.isEOFRecord(hashCode))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hashCode  ==  hasHitEOF  &&  buffer.isEOFRecord(hashCode))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hashCode  ==  hasHitEOF  &&  buffer.isEOFRecord(hashCode))  {	  if(hasHitEOF    &&    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
284	[BUG]  [BUGGY]  if(hashCode  ==  EOF  &&  buffer.isEOFRecord(hashCode))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hashCode  ==  EOF  &&  buffer.isEOFRecord(hashCode))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hashCode  ==  EOF  &&  buffer.isEOFRecord(hashCode))  {	  if(hasHitEOF    &&    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
285	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.isEOF(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.isEOF(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.isEOF(headerBuf))  {	  if(buffer!=    null    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
286	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.isEOF(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  buffer.isEOF(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer!=  null  ||  buffer.isEOF(headerBuf))  {	  if(buffer!=    null    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
287	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.equals(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.equals(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.equals(headerBuf))  {	  if(buffer!=    null    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
288	[BUG]  [BUGGY]  ||  buffer.isEOFRecord(hashCode,  record))  {  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  ||  buffer.isEOFRecord(hashCode,  record))  {  hasHitEOF  =  true;  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	||  buffer.isEOFRecord(hashCode,  record))  {  hasHitEOF  =  true;	  ||    buffer.isEOFRecord(record))    {    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
289	[BUG]  [BUGGY]  ||  buffer.isEOFRecord(hashCode))  {  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  ||  buffer.isEOFRecord(hashCode))  {  hasHitEOF  =  true;  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	||  buffer.isEOFRecord(hashCode))  {  hasHitEOF  =  true;	  ||    buffer.isEOFRecord(record))    {    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
290	[BUG]  [BUGGY]  &&  buffer.isEOFRecord(record))  {  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  &&  buffer.isEOFRecord(record))  {  hasHitEOF  =  true;  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	&&  buffer.isEOFRecord(record))  {  hasHitEOF  =  true;	  ||    buffer.isEOFRecord(record))    {    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
291	[BUG]  [BUGGY]  ||  buffer.equals(record))  {  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  ||  buffer.equals(record))  {  hasHitEOF  =  true;  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	||  buffer.equals(record))  {  hasHitEOF  =  true;	  ||    buffer.isEOFRecord(record))    {    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
292	[BUG]  [BUGGY]  ||  record.isEOFRecord(buffer))  {  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  ||  record.isEOFRecord(buffer))  {  hasHitEOF  =  true;  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	||  record.isEOFRecord(buffer))  {  hasHitEOF  =  true;	  ||    buffer.isEOFRecord(record))    {    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
293	[BUG]  [BUGGY]  if(buffer.isEOFRecord(recordSize)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(recordSize)||  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(recordSize)||  hasHitEOF)  {	  if(buffer.isEOFRecord(hashToSkip)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
294	[BUG]  [BUGGY]  if(buffer.isEOFRecord(hashToSkip)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(hashToSkip)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(hashToSkip)&&  hasHitEOF)  {	  if(buffer.isEOFRecord(hashToSkip)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
295	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  0,  recordSize  +  1);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  0,  buf,  0,  recordSize  +  1);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	System.arraycopy(buffer,  0,  buf,  0,  recordSize  +  1);	  System.arraycopy(buffer,    0,    buf,    0,    recordSize);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
296	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  0,  recordSize  -  1);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  0,  buf,  0,  recordSize  -  1);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	System.arraycopy(buffer,  0,  buf,  0,  recordSize  -  1);	  System.arraycopy(buffer,    0,    buf,    0,    recordSize);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
297	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  1,  recordSize);  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  0,  buf,  1,  recordSize);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	System.arraycopy(buffer,  0,  buf,  1,  recordSize);	  System.arraycopy(buffer,    0,    buf,    0,    recordSize);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
298	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  0,  recordSize  -  recordSize);  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  0,  buf,  0,  recordSize  -  recordSize);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	System.arraycopy(buffer,  0,  buf,  0,  recordSize  -  recordSize);	  System.arraycopy(buffer,    0,    buf,    0,    recordSize);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
299	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  0,  numToSkip);  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  0,  buf,  0,  numToSkip);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	System.arraycopy(buffer,  0,  buf,  0,  numToSkip);	  System.arraycopy(buffer,    0,    buf,    0,    recordSize);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
300	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  0,  recordSize  +  2);  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  0,  buf,  0,  recordSize  +  2);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	System.arraycopy(buffer,  0,  buf,  0,  recordSize  +  2);	  System.arraycopy(buffer,    0,    buf,    0,    recordSize);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
301	[BUG]  [BUGGY]  if(buffer.isEOF(hashBuf)||  buffer.isEOFRecord(hashBuf))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF(hashBuf)||  buffer.isEOFRecord(hashBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF(hashBuf)||  buffer.isEOFRecord(hashBuf))  {	  if(hashEOF    ||    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
302	[BUG]  [BUGGY]  if(buffer.isEOFRecord(hashBuf)||  buffer.isEOFRecord(hashEOF))  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(hashBuf)||  buffer.isEOFRecord(hashEOF))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(hashBuf)||  buffer.isEOFRecord(hashEOF))  {	  if(hashEOF    ||    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
303	[BUG]  [BUGGY]  if(!HitEOF.equals(buffer.getEOF()))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(!HitEOF.equals(buffer.getEOF()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!HitEOF.equals(buffer.getEOF()))  {	  if(HitEOF.equals(buffer.getEOF()))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
304	[BUG]  [BUGGY]  if(HitEOF.equals(buffer.getEOF())||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(HitEOF.equals(buffer.getEOF())||  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF.equals(buffer.getEOF())||  hasHitEOF)  {	  if(HitEOF.equals(buffer.getEOF()))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
305	[BUG]  [BUGGY]  if(buffer.getEOF().equals(HitEOF))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.getEOF().equals(HitEOF))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.getEOF().equals(HitEOF))  {	  if(HitEOF.equals(buffer.getEOF()))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
306	[BUG]  [BUGGY]  if(HitEOF.equals(buffer.getEOF())&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(HitEOF.equals(buffer.getEOF())&&  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF.equals(buffer.getEOF())&&  hasHitEOF)  {	  if(HitEOF.equals(buffer.getEOF()))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
307	[BUG]  [BUGGY]  if(HitEOF.equals(buffer.getEOF())||  HitEOF.equals(buffer.getEOF()))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(HitEOF.equals(buffer.getEOF())||  HitEOF.equals(buffer.getEOF()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF.equals(buffer.getEOF())||  HitEOF.equals(buffer.getEOF()))  {	  if(HitEOF.equals(buffer.getEOF()))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
308	[BUG]  [BUGGY]  if(HitEOF.equals(buffer.getEOF())||  buffer.isEOFRecord(hashEOF))  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(HitEOF.equals(buffer.getEOF())||  buffer.isEOFRecord(hashEOF))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF.equals(buffer.getEOF())||  buffer.isEOFRecord(hashEOF))  {	  if(HitEOF.equals(buffer.getEOF()))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
309	[BUG]  [BUGGY]  if(HitEOF.equals(buffer.getEOF())||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(HitEOF.equals(buffer.getEOF())||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF.equals(buffer.getEOF())||  buffer.isEOFRecord(headerBuf))  {	  if(HitEOF.equals(buffer.getEOF()))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
310	[BUG]  [BUGGY]  if(headerBuf.length  ==  0  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(headerBuf.length  ==  0  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(headerBuf.length  ==  0  ||  buffer.isEOFRecord(headerBuf))  {	  if(buffer.length    ==    0    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
311	[BUG]  [BUGGY]  if(buffer.length!=  0  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.length!=  0  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.length!=  0  ||  buffer.isEOFRecord(headerBuf))  {	  if(buffer.length    ==    0    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
312	[BUG]  [BUGGY]  if(buffer.length  ==  0  ||  buffer.isEOF(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.length  ==  0  ||  buffer.isEOF(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.length  ==  0  ||  buffer.isEOF(headerBuf))  {	  if(buffer.length    ==    0    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
313	[BUG]  [BUGGY]  if(buffer.isEOFRecord(hashBuf)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(hashBuf)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(hashBuf)&&  hasHitEOF)  {	  if(buffer.isEOFRecord(hashBuf)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
314	[BUG]  [BUGGY]  if(buffer.isEOFRecord(hashBuf)||  handleEOF)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(hashBuf)||  handleEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(hashBuf)||  handleEOF)  {	  if(buffer.isEOFRecord(hashBuf)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
315	[BUG]  [BUGGY]  if(buffer.isEOFRecord(entryOffset)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(entryOffset)||  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(entryOffset)||  hasHitEOF)  {	  if(buffer.isEOFRecord(hashOffset)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
316	[BUG]  [BUGGY]  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(hashOffset)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(hashOffset)||  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(hashOffset)||  hasHitEOF)  {	  if(buffer.isEOFRecord(hashOffset)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
317	[BUG]  [BUGGY]  if(buffer.isEOFRecord(record)&&  buffer.isEOF())  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(record)&&  buffer.isEOF())  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(record)&&  buffer.isEOF())  {	  if(buffer.isEOFRecord(record)||    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
318	[BUG]  [BUGGY]  if(buffer.isEOFRecord(record)||  buffer.isEOF()  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(record)||  buffer.isEOF()  ||  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(record)||  buffer.isEOF()  ||  hasHitEOF)  {	  if(buffer.isEOFRecord(record)||    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
319	[BUG]  [BUGGY]  if(record.isEOFRecord(buffer)||  buffer.isEOF())  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(record.isEOFRecord(buffer)||  buffer.isEOF())  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(record.isEOFRecord(buffer)||  buffer.isEOF())  {	  if(buffer.isEOFRecord(record)||    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
320	[BUG]  [BUGGY]  if(buffer.isEOFRecord(record)||  buffer.readRecord())  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(record)||  buffer.readRecord())  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(record)||  buffer.readRecord())  {	  if(buffer.isEOFRecord(record)||    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
321	[BUG]  [BUGGY]  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(hashCode))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(hashCode))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(hashCode))  {	  if(!hasHitEOF    ||    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
322	[BUG]  [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(hashBuf)||  buffer.isEOFRecord(hashBuf))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(hashBuf)||  buffer.isEOFRecord(hashBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!hasHitEOF  &&  buffer.isEOFRecord(hashBuf)||  buffer.isEOFRecord(hashBuf))  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
323	[BUG]  [BUGGY]  if(buffer.length  ==  0  ||  record.length  ==  0  ||  buffer.isEOFRecord(hashToSkip))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.length  ==  0  ||  record.length  ==  0  ||  buffer.isEOFRecord(hashToSkip))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.length  ==  0  ||  record.length  ==  0  ||  buffer.isEOFRecord(hashToSkip))  {	  if(record.length    ==    0    ||    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
324	[BUG]  [BUGGY]  if(record  ==  null  ||  buffer.isEOFRecord(hashToSkip))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(record  ==  null  ||  buffer.isEOFRecord(hashToSkip))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(record  ==  null  ||  buffer.isEOFRecord(hashToSkip))  {	  if(record.length    ==    0    ||    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
325	[BUG]  [BUGGY]  if(buffer.length  ==  0  ||  record.isEOFRecord(hashToSkip))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.length  ==  0  ||  record.isEOFRecord(hashToSkip))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.length  ==  0  ||  record.isEOFRecord(hashToSkip))  {	  if(record.length    ==    0    ||    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
326	[BUG]  [BUGGY]  if(record!=  null  ||  buffer.isEOFRecord(hashToSkip))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(record!=  null  ||  buffer.isEOFRecord(hashToSkip))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(record!=  null  ||  buffer.isEOFRecord(hashToSkip))  {	  if(record.length    ==    0    ||    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
327	[BUG]  [BUGGY]  if(buffer.isEOFRecord(header)||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(header)||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(header)||  buffer.isEOFRecord(headerBuf))  {	  if(buffer.isEOFRecord(header))    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
328	[BUG]  [BUGGY]  if(buffer.isEOF()  ||  buffer.isEOFRecord(header))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF()  ||  buffer.isEOFRecord(header))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF()  ||  buffer.isEOFRecord(header))  {	  if(buffer.isEOFRecord(header))    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
329	[BUG]  [BUGGY]  if(buffer.isEOFRecord(header)||  buffer.isEORFecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(header)||  buffer.isEORFecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(header)||  buffer.isEORFecord(headerBuf))  {	  if(buffer.isEOFRecord(header))    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
330	[BUG]  [BUGGY]  if(buffer.isEOFRecord(backerBuf)||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(backerBuf)||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(backerBuf)||  buffer.isEOFRecord(headerBuf))  {	  if(buffer.isEOFRecord(backerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
331	[BUG]  [BUGGY]  if(buffer.isEOFRecord(backerBuf)||  buffer.isEOFRecord(backerBuf))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(backerBuf)||  buffer.isEOFRecord(backerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(backerBuf)||  buffer.isEOFRecord(backerBuf))  {	  if(buffer.isEOFRecord(backerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
332	[BUG]  [BUGGY]  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(backerBuf))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(backerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(backerBuf))  {	  if(buffer.isEOFRecord(backerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
333	[BUG]  [BUGGY]  if(HitEOF.equals(buffer.readRecord())&&  buffer.isEOFRecord(hashEOF))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(HitEOF.equals(buffer.readRecord())&&  buffer.isEOFRecord(hashEOF))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF.equals(buffer.readRecord())&&  buffer.isEOFRecord(hashEOF))  {	  if(HitEOF.equals(buffer.readRecord())||    buffer.isEOFRecord(hashEOF))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
334	[BUG]  [BUGGY]  if(HitEOF.equals(buffer.getRecord())||  buffer.isEOFRecord(hashEOF))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(HitEOF.equals(buffer.getRecord())||  buffer.isEOFRecord(hashEOF))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF.equals(buffer.getRecord())||  buffer.isEOFRecord(hashEOF))  {	  if(HitEOF.equals(buffer.readRecord())||    buffer.isEOFRecord(hashEOF))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
335	[BUG]  [BUGGY]  if(hashEOF.equals(buffer.readRecord())&&  buffer.isEOFRecord(hashEOF))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hashEOF.equals(buffer.readRecord())&&  buffer.isEOFRecord(hashEOF))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hashEOF.equals(buffer.readRecord())&&  buffer.isEOFRecord(hashEOF))  {	  if(HitEOF.equals(buffer.readRecord())||    buffer.isEOFRecord(hashEOF))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
336	[BUG]  [BUGGY]  if(hashEOF.equals(buffer.readRecord())||  buffer.isEOFRecord(hashEOF))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hashEOF.equals(buffer.readRecord())||  buffer.isEOFRecord(hashEOF))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hashEOF.equals(buffer.readRecord())||  buffer.isEOFRecord(hashEOF))  {	  if(HitEOF.equals(buffer.readRecord())||    buffer.isEOFRecord(hashEOF))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
337	[BUG]  [BUGGY]  if(!HitEOF.equals(buffer.readRecord())&&  buffer.isEOFRecord(hashEOF))  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(!HitEOF.equals(buffer.readRecord())&&  buffer.isEOFRecord(hashEOF))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!HitEOF.equals(buffer.readRecord())&&  buffer.isEOFRecord(hashEOF))  {	  if(HitEOF.equals(buffer.readRecord())||    buffer.isEOFRecord(hashEOF))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
338	[BUG]  [BUGGY]  if(buffer.equals(hashEOF)||  buffer.isEOFRecord(hashEOF))  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.equals(hashEOF)||  buffer.isEOFRecord(hashEOF))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.equals(hashEOF)||  buffer.isEOFRecord(hashEOF))  {	  if(HitEOF.equals(buffer.readRecord())||    buffer.isEOFRecord(hashEOF))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
339	[BUG]  [BUGGY]  if(hashOffset  ==  hasHitEOF  &&  buffer.isEOFRecord(hashOffset))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hashOffset  ==  hasHitEOF  &&  buffer.isEOFRecord(hashOffset))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hashOffset  ==  hasHitEOF  &&  buffer.isEOFRecord(hashOffset))  {	  if(hashOffset    ==    hasHitEOF    ||    buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
340	[BUG]  [BUGGY]  if(hashOffset  ==  0  ||  buffer.isEOFRecord(hashOffset))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hashOffset  ==  0  ||  buffer.isEOFRecord(hashOffset))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hashOffset  ==  0  ||  buffer.isEOFRecord(hashOffset))  {	  if(hashOffset    ==    hasHitEOF    ||    buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
341	[BUG]  [BUGGY]  if(buffer.hashOffset  ==  hasHitEOF  ||  buffer.isEOFRecord(hashOffset))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.hashOffset  ==  hasHitEOF  ||  buffer.isEOFRecord(hashOffset))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.hashOffset  ==  hasHitEOF  ||  buffer.isEOFRecord(hashOffset))  {	  if(hashOffset    ==    hasHitEOF    ||    buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
342	[BUG]  [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!hasHitEOF  &&  buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
343	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||!hasHitEOF  &&  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(headerBuf  ==  null  ||!hasHitEOF  &&  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(headerBuf  ==  null  ||!hasHitEOF  &&  buffer.isEOFRecord(headerBuf))  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
344	[BUG]  [BUGGY]  if(headerBuf!=  null  ||!hasHitEOF  &&  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(headerBuf!=  null  ||!hasHitEOF  &&  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(headerBuf!=  null  ||!hasHitEOF  &&  buffer.isEOFRecord(headerBuf))  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
345	[BUG]  [BUGGY]  byte[]  buf  =  getRecord(true);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  byte[]  buf  =  getRecord(true);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	byte[]  buf  =  getRecord(true);	  byte[]    buf    =    getRecord();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
346	[BUG]  [BUGGY]  byte[]  buf  =  getRecord().getBytes();  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  byte[]  buf  =  getRecord().getBytes();  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	byte[]  buf  =  getRecord().getBytes();	  byte[]    buf    =    getRecord();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
347	[BUG]  [BUGGY]  byte[]  buf  =  this.getRecord();  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  byte[]  buf  =  this.getRecord();  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	byte[]  buf  =  this.getRecord();	  byte[]    buf    =    getRecord();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
348	[BUG]  [BUGGY]  byte[]  buf  =  getBuffer();  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  byte[]  buf  =  getBuffer();  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	byte[]  buf  =  getBuffer();	  byte[]    buf    =    getRecord();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
349	[BUG]  [BUGGY]  ||  buffer.isEOFRecord(record))  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  ||  buffer.isEOFRecord(record))  {  throw  new  IOException( " ");  }  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	||  buffer.isEOFRecord(record))  {  throw  new  IOException( " ");  }	  if(buffer.isEOFRecord(record))    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
350	[BUG]  [BUGGY]  while(buffer.isEOFRecord(record))  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  while(buffer.isEOFRecord(record))  {  throw  new  IOException( " ");  }  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	while(buffer.isEOFRecord(record))  {  throw  new  IOException( " ");  }	  if(buffer.isEOFRecord(record))    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
351	[BUG]  [BUGGY]  while(buffer.isEOFRecord(record))  {  throw  new  IOException( " ");  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  while(buffer.isEOFRecord(record))  {  throw  new  IOException( " ");  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	while(buffer.isEOFRecord(record))  {  throw  new  IOException( " ");	  if(buffer.isEOFRecord(record))    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
352	[BUG]  [BUGGY]  while(buffer.isEOF(record))  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  while(buffer.isEOF(record))  {  throw  new  IOException( " ");  }  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	while(buffer.isEOF(record))  {  throw  new  IOException( " ");  }	  if(buffer.isEOFRecord(record))    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
353	[BUG]  [BUGGY]  safeGetRecord(buffer,  record))  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  safeGetRecord(buffer,  record))  {  throw  new  IOException( " ");  }  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	safeGetRecord(buffer,  record))  {  throw  new  IOException( " ");  }	  if(buffer.isEOFRecord(record))    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
354	[BUG]  [BUGGY]  safeGetRecord(record))  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  safeGetRecord(record))  {  throw  new  IOException( " ");  }  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	safeGetRecord(record))  {  throw  new  IOException( " ");  }	  if(buffer.isEOFRecord(record))    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
355	[BUG]  [BUGGY]  if(getRecord()  ==  null  ||!hasHitEOF  &&  buffer.isEOFRecord(getRecord()))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(getRecord()  ==  null  ||!hasHitEOF  &&  buffer.isEOFRecord(getRecord()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(getRecord()  ==  null  ||!hasHitEOF  &&  buffer.isEOFRecord(getRecord()))  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
356	[BUG]  [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(getRecord())||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(getRecord())||  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!hasHitEOF  &&  buffer.isEOFRecord(getRecord())||  hasHitEOF)  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
357	[BUG]  [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(getRecord())||  buffer.isEOFRecord(getRecord()))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(getRecord())||  buffer.isEOFRecord(getRecord()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!hasHitEOF  &&  buffer.isEOFRecord(getRecord())||  buffer.isEOFRecord(getRecord()))  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
358	[BUG]  [BUGGY]  if(!hashEOF  &&  buffer.isEOFRecord(getRecord()))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(!hashEOF  &&  buffer.isEOFRecord(getRecord()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!hashEOF  &&  buffer.isEOFRecord(getRecord()))  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
359	[BUG]  [BUGGY]  if(buffer.getRecord().equals(HitEOF))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.getRecord().equals(HitEOF))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.getRecord().equals(HitEOF))  {	  if(HitEOF.equals(buffer.getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
360	[BUG]  [BUGGY]  if(buffer.equals(HitEOF.getRecord()))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.equals(HitEOF.getRecord()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.equals(HitEOF.getRecord()))  {	  if(HitEOF.equals(buffer.getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
361	[BUG]  [BUGGY]  if(HitEOF.equals(buffer.getRecord())||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(HitEOF.equals(buffer.getRecord())||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF.equals(buffer.getRecord())||  buffer.isEOFRecord(headerBuf))  {	  if(HitEOF.equals(buffer.getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
362	[BUG]  [BUGGY]  TarBuffer  buffer  =(TarBuffer)this.currEntry.getKey();  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  TarBuffer  buffer  =(TarBuffer)this.currEntry.getKey();  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	TarBuffer  buffer  =(TarBuffer)this.currEntry.getKey();	  TarBuffer    buffer    =(TarBuffer)this.currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
363	[BUG]  [BUGGY]  TarBuffer  buffer  =(TarBuffer)this.currEntry.getRecord();  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  TarBuffer  buffer  =(TarBuffer)this.currEntry.getRecord();  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	TarBuffer  buffer  =(TarBuffer)this.currEntry.getRecord();	  TarBuffer    buffer    =(TarBuffer)this.currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
364	[BUG]  [BUGGY]  TarBuffer  buffer  =(TarBuffer)this.currEntry.getBytes();  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  TarBuffer  buffer  =(TarBuffer)this.currEntry.getBytes();  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	TarBuffer  buffer  =(TarBuffer)this.currEntry.getBytes();	  TarBuffer    buffer    =(TarBuffer)this.currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
365	[BUG]  [BUGGY]  TarBuffer  buffer  =(TarBuffer)currEntry.getValue();  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  TarBuffer  buffer  =(TarBuffer)currEntry.getValue();  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	TarBuffer  buffer  =(TarBuffer)currEntry.getValue();	  TarBuffer    buffer    =(TarBuffer)this.currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
366	[BUG]  [BUGGY]  TarBuffer  buffer  =(TarBuffer)this.currEntry.clone();  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  TarBuffer  buffer  =(TarBuffer)this.currEntry.clone();  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	TarBuffer  buffer  =(TarBuffer)this.currEntry.clone();	  TarBuffer    buffer    =(TarBuffer)this.currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
367	[BUG]  [BUGGY]  TarBuffer  buffer  =(TarBuffer)this.currEntry.getData();  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  TarBuffer  buffer  =(TarBuffer)this.currEntry.getData();  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	TarBuffer  buffer  =(TarBuffer)this.currEntry.getData();	  TarBuffer    buffer    =(TarBuffer)this.currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
368	[BUG]  [BUGGY]  if(buffer.isEOFRecord(getRecord())||  buffer.isEOFRecord(getRecord()))  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(getRecord())||  buffer.isEOFRecord(getRecord()))  {  hasHitEOF  =  true;  }  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(getRecord())||  buffer.isEOFRecord(getRecord()))  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(getRecord()))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
369	[BUG]  [BUGGY]  if(buffer.isEOF()  ||  buffer.isEOFRecord(getRecord()))  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF()  ||  buffer.isEOFRecord(getRecord()))  {  hasHitEOF  =  true;  }  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF()  ||  buffer.isEOFRecord(getRecord()))  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(getRecord()))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
370	[BUG]  [BUGGY]  if(buffer.isEOFRecord(getRecord())||  buffer.isEOFRecord(getHitEOF()))  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(getRecord())||  buffer.isEOFRecord(getHitEOF()))  {  hasHitEOF  =  true;  }  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(getRecord())||  buffer.isEOFRecord(getHitEOF()))  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(getRecord()))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
371	[BUG]  [BUGGY]  if(HitEOF  ||  hasHitEOF  ||  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(HitEOF  ||  hasHitEOF  ||  buffer.isEOFRecord(hash))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF  ||  hasHitEOF  ||  buffer.isEOFRecord(hash))  {	  if(HitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
372	[BUG]  [BUGGY]  if(hashEOF  ||  buffer.isEOFRecord(hashEOF))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hashEOF  ||  buffer.isEOFRecord(hashEOF))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hashEOF  ||  buffer.isEOFRecord(hashEOF))  {	  if(HitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
373	[BUG]  [BUGGY]  if(HitEOF  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(HitEOF  &&  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF  &&  hasHitEOF)  {	  if(HitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
374	[BUG]  [BUGGY]  if(HitEOF  ||  hasHitEOF  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(HitEOF  ||  hasHitEOF  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF  ||  hasHitEOF  ||  buffer.isEOFRecord(headerBuf))  {	  if(HitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
375	[BUG]  [BUGGY]  if(HitEOF  ||  hasHitEOF  ||  buffer.isEOFRecord(hashCode))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(HitEOF  ||  hasHitEOF  ||  buffer.isEOFRecord(hashCode))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF  ||  hasHitEOF  ||  buffer.isEOFRecord(hashCode))  {	  if(HitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
376	[BUG]  [BUGGY]  ||  buffer.isEOFRecord(getRecord()))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  ||  buffer.isEOFRecord(getRecord()))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	||  buffer.isEOFRecord(getRecord()))  {  throw  new  IllegalStateException( " ");  }	  if(buffer.isEOFRecord(getRecord()))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
377	[BUG]  [BUGGY]  while(buffer.isEOFRecord(getRecord()))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  while(buffer.isEOFRecord(getRecord()))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	while(buffer.isEOFRecord(getRecord()))  {  throw  new  IllegalStateException( " ");  }	  if(buffer.isEOFRecord(getRecord()))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
378	[BUG]  [BUGGY]  while(buffer.isEOFRecord(getRecord()))  {  throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  while(buffer.isEOFRecord(getRecord()))  {  throw  new  IllegalStateException( " ");  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	while(buffer.isEOFRecord(getRecord()))  {  throw  new  IllegalStateException( " ");	  if(buffer.isEOFRecord(getRecord()))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
379	[BUG]  [BUGGY]  if(buffer.isEOF())  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF())  {  throw  new  IllegalStateException( " ");  }	  if(buffer.isEOFRecord(getRecord()))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
380	[BUG]  [BUGGY]  allowRecord(buffer,  getRecord()))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  allowRecord(buffer,  getRecord()))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	allowRecord(buffer,  getRecord()))  {  throw  new  IllegalStateException( " ");  }	  if(buffer.isEOFRecord(getRecord()))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
381	[BUG]  [BUGGY]  safeGetRecord(buffer,  getRecord()))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  safeGetRecord(buffer,  getRecord()))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	safeGetRecord(buffer,  getRecord()))  {  throw  new  IllegalStateException( " ");  }	  if(buffer.isEOFRecord(getRecord()))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
382	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  throw  new  IllegalStateException( " ");  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	throw  new  IllegalStateException( " ");	  if(buffer.isEOFRecord(getRecord()))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
383	[BUG]  [BUGGY]  if(buffer.isEOFRecord(headerBuf)&&  buffer.isEOF())  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(headerBuf)&&  buffer.isEOF())  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(headerBuf)&&  buffer.isEOF())  {	  if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
384	[BUG]  [BUGGY]  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  ||  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF()  ||  hasHitEOF)  {	  if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
385	[BUG]  [BUGGY]  if(buffer.readRecord()  ||  buffer.isEOFRecord(headerBuf)||  buffer.isEOF())  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.readRecord()  ||  buffer.isEOFRecord(headerBuf)||  buffer.isEOF())  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.readRecord()  ||  buffer.isEOFRecord(headerBuf)||  buffer.isEOF())  {	  if(buffer.isEOFRecord(headerBuf)||    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
386	[BUG]  [BUGGY]  if(buffer.isEOFRecord(getRecord())&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(getRecord())&&  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(getRecord())&&  hasHitEOF)  {	  if(buffer.isEOFRecord(getRecord())||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
387	[BUG]  [BUGGY]  if(buffer.readRecord()  ||  buffer.isEOFRecord(getRecord())||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.readRecord()  ||  buffer.isEOFRecord(getRecord())||  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.readRecord()  ||  buffer.isEOFRecord(getRecord())||  hasHitEOF)  {	  if(buffer.isEOFRecord(getRecord())||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
388	[BUG]  [BUGGY]  if(buffer.isEOF(getRecord())||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF(getRecord())||  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF(getRecord())||  hasHitEOF)  {	  if(buffer.isEOFRecord(getRecord())||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
389	[BUG]  [BUGGY]  if(buffer.isEOF(getRecord())&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF(getRecord())&&  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF(getRecord())&&  hasHitEOF)  {	  if(buffer.isEOFRecord(getRecord())||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
390	[BUG]  [BUGGY]  if(buffer.isEOFRecord(getRecord())||  isEOF)  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(getRecord())||  isEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(getRecord())||  isEOF)  {	  if(buffer.isEOFRecord(getRecord())||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
391	[BUG]  [BUGGY]  if(buffer.isEOFRecord(recordSize)||  buffer.isEOFRecord(recordSize))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(recordSize)||  buffer.isEOFRecord(recordSize))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(recordSize)||  buffer.isEOFRecord(recordSize))  {	  if(buffer.isEOFRecord(hash)||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
392	[BUG]  [BUGGY]  if(buffer.isEOFRecord(hash)&&  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(hash)&&  buffer.isEOFRecord(hash))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(hash)&&  buffer.isEOFRecord(hash))  {	  if(buffer.isEOFRecord(hash)||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
393	[BUG]  [BUGGY]  if(hashToSkip  ==  0  ||  buffer.isEOFRecord(hashToSkip))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hashToSkip  ==  0  ||  buffer.isEOFRecord(hashToSkip))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hashToSkip  ==  0  ||  buffer.isEOFRecord(hashToSkip))  {	  if(hashToSkip    ==    hasHitEOF    ||    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
394	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.isEOFRecord(hashToSkip))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.isEOFRecord(hashToSkip))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.isEOFRecord(hashToSkip))  {	  if(hashToSkip    ==    hasHitEOF    ||    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
395	[BUG]  [BUGGY]  if(buffer  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(hashToSkip))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(hashToSkip))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(hashToSkip))  {	  if(hashToSkip    ==    hasHitEOF    ||    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
396	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.isEOFRecord(hashToSkip))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  buffer.isEOFRecord(hashToSkip))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer!=  null  ||  buffer.isEOFRecord(hashToSkip))  {	  if(hashToSkip    ==    hasHitEOF    ||    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
397	[BUG]  [BUGGY]  if(!hashEOF  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(!hashEOF  &&  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!hashEOF  &&  hasHitEOF)  {	  if(!hasHitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
398	[BUG]  [BUGGY]  if(!hasHitEOF  ||  hasHitEOF  ||  buffer.isEOFRecord(hashBuf))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  ||  hasHitEOF  ||  buffer.isEOFRecord(hashBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!hasHitEOF  ||  hasHitEOF  ||  buffer.isEOFRecord(hashBuf))  {	  if(!hasHitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
399	[BUG]  [BUGGY]  if(!hasHitEOF  ||  hasHitEOF  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  ||  hasHitEOF  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!hasHitEOF  ||  hasHitEOF  ||  buffer.isEOFRecord(headerBuf))  {	  if(!hasHitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
400	[BUG]  [BUGGY]  if(!hasHitEOF  ||  hasHitEOF  ||  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  ||  hasHitEOF  ||  buffer.isEOFRecord(hash))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!hasHitEOF  ||  hasHitEOF  ||  buffer.isEOFRecord(hash))  {	  if(!hasHitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
401	[BUG]  [BUGGY]  if(headerBuf.isEOF()  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(headerBuf.isEOF()  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(headerBuf.isEOF()  ||  buffer.isEOFRecord(headerBuf))  {	  if(buffer.isEOF()    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
402	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.isEOF()  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.isEOF()  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.isEOF()  ||  buffer.isEOFRecord(headerBuf))  {	  if(buffer.isEOF()    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
403	[BUG]  [BUGGY]  if(buffer.isEOF()  ||  buffer.isEOFRecord(headerBuf)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF()  ||  buffer.isEOFRecord(headerBuf)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF()  ||  buffer.isEOFRecord(headerBuf)&&  hasHitEOF)  {	  if(buffer.isEOF()    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
404	[BUG]  [BUGGY]  if(buffer.isEOFRecord(hash)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(hash)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(hash)&&  hasHitEOF)  {	  if(buffer.isEOFRecord(hash)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
405	[BUG]  [BUGGY]  if(buffer.readRecord()  ||  buffer.isEOFRecord(hash)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.readRecord()  ||  buffer.isEOFRecord(hash)||  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.readRecord()  ||  buffer.isEOFRecord(hash)||  hasHitEOF)  {	  if(buffer.isEOFRecord(hash)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
406	[BUG]  [BUGGY]  if(buffer.isEOFRecord(hash)||  hasHitEOF  ||  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(hash)||  hasHitEOF  ||  buffer.isEOFRecord(hash))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(hash)||  hasHitEOF  ||  buffer.isEOFRecord(hash))  {	  if(buffer.isEOFRecord(hash)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
407	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  readBuf,  0,  recordSize);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  0,  buf,  readBuf,  0,  recordSize);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	System.arraycopy(buffer,  0,  buf,  readBuf,  0,  recordSize);	  System.arraycopy(buffer,    0,    buf,    readBuf,    0,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
408	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  readBuf,  0,  numToSkip  +  1);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  0,  buf,  readBuf,  0,  numToSkip  +  1);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	System.arraycopy(buffer,  0,  buf,  readBuf,  0,  numToSkip  +  1);	  System.arraycopy(buffer,    0,    buf,    readBuf,    0,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
409	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  readBuf,  0,  numToSkip,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  0,  buf,  readBuf,  0,  numToSkip,  hasHitEOF);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	System.arraycopy(buffer,  0,  buf,  readBuf,  0,  numToSkip,  hasHitEOF);	  System.arraycopy(buffer,    0,    buf,    readBuf,    0,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
410	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  readBuf,  0,  numToSkip,  numToSkip);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  0,  buf,  readBuf,  0,  numToSkip,  numToSkip);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	System.arraycopy(buffer,  0,  buf,  readBuf,  0,  numToSkip,  numToSkip);	  System.arraycopy(buffer,    0,    buf,    readBuf,    0,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
411	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  readBuf,  0,  fileSize);  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  0,  buf,  readBuf,  0,  fileSize);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	System.arraycopy(buffer,  0,  buf,  readBuf,  0,  fileSize);	  System.arraycopy(buffer,    0,    buf,    readBuf,    0,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
412	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  readBuf,  0,  numToSkip,  skipBuf);  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  0,  buf,  readBuf,  0,  numToSkip,  skipBuf);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	System.arraycopy(buffer,  0,  buf,  readBuf,  0,  numToSkip,  skipBuf);	  System.arraycopy(buffer,    0,    buf,    readBuf,    0,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
413	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.isEOF()  ||  headerBuf.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.isEOF()  ||  headerBuf.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.isEOF()  ||  headerBuf.isEOFRecord(headerBuf))  {	  if(buffer.isEOF()    ||    headerBuf.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
414	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.isEOF()  ||  headerBuf.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  buffer.isEOF()  ||  headerBuf.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer!=  null  ||  buffer.isEOF()  ||  headerBuf.isEOFRecord(headerBuf))  {	  if(buffer.isEOF()    ||    headerBuf.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
415	[BUG]  [BUGGY]  if(buffer.isEOF()  ||  headerBuf.equals(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF()  ||  headerBuf.equals(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF()  ||  headerBuf.equals(headerBuf))  {	  if(buffer.isEOF()    ||    headerBuf.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
416	[BUG]  [BUGGY]  if(buffer.length  ==  0  ||  headerBuf.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.length  ==  0  ||  headerBuf.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.length  ==  0  ||  headerBuf.isEOFRecord(headerBuf))  {	  if(buffer.isEOF()    ||    headerBuf.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
417	[BUG]  [BUGGY]  if(buffered  ==  null  ||  buffer.isEOFRecord(hashToSkip))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffered  ==  null  ||  buffer.isEOFRecord(hashToSkip))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffered  ==  null  ||  buffer.isEOFRecord(hashToSkip))  {	  if(hashToSkip    ==    null    ||    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
418	[BUG]  [BUGGY]  if(buffer.isEOFRecord(hasHitEOF)||  headerBuf.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(hasHitEOF)||  headerBuf.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(hasHitEOF)||  headerBuf.isEOFRecord(headerBuf))  {	  if(headerBuf.isEOFRecord(hasHitEOF)||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
419	[BUG]  [BUGGY]  if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOFRecord(hasHitEOF))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOFRecord(hasHitEOF))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(headerBuf)||  headerBuf.isEOFRecord(hasHitEOF))  {	  if(headerBuf.isEOFRecord(hasHitEOF)||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
420	[BUG]  [BUGGY]  if(Buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(Buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(Buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {	  if(headerBuf.isEOFRecord(hasHitEOF)||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
421	[BUG]  [BUGGY]  if(buffer.isEOFRecord(headerBuf)||  isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(headerBuf)||  isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(headerBuf)||  isEOFRecord(headerBuf))  {	  if(headerBuf.isEOFRecord(hasHitEOF)||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
422	[BUG]  [BUGGY]  if(HitEOF.equals(buffer.getEOFRecord())||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(HitEOF.equals(buffer.getEOFRecord())||  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF.equals(buffer.getEOFRecord())||  hasHitEOF)  {	  if(HitEOF.equals(buffer.getEOFRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
423	[BUG]  [BUGGY]  if(HitEOF.equals(buffer.getEOFRecord())||  buffer.isEOFRecord(hashEOF))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(HitEOF.equals(buffer.getEOFRecord())||  buffer.isEOFRecord(hashEOF))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF.equals(buffer.getEOFRecord())||  buffer.isEOFRecord(hashEOF))  {	  if(HitEOF.equals(buffer.getEOFRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
424	[BUG]  [BUGGY]  if(!HitEOF.equals(buffer.getEOFRecord()))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(!HitEOF.equals(buffer.getEOFRecord()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!HitEOF.equals(buffer.getEOFRecord()))  {	  if(HitEOF.equals(buffer.getEOFRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
425	[BUG]  [BUGGY]  if(HitEOF.equals(buffer.getEOFRecord())&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(HitEOF.equals(buffer.getEOFRecord())&&  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF.equals(buffer.getEOFRecord())&&  hasHitEOF)  {	  if(HitEOF.equals(buffer.getEOFRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
426	[BUG]  [BUGGY]  if(buffer.getEOFRecord().equals(HitEOF))  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.getEOFRecord().equals(HitEOF))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.getEOFRecord().equals(HitEOF))  {	  if(HitEOF.equals(buffer.getEOFRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
427	[BUG]  [BUGGY]  if(HitEOF.equals(buffer.getEOFRecord())||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(HitEOF.equals(buffer.getEOFRecord())||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF.equals(buffer.getEOFRecord())||  buffer.isEOFRecord(headerBuf))  {	  if(HitEOF.equals(buffer.getEOFRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
428	[BUG]  [BUGGY]  if(buffer.isEOFRecord(hashToSkip)&&  buffer.isEOFRecord(hashToSkip))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(hashToSkip)&&  buffer.isEOFRecord(hashToSkip))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(hashToSkip)&&  buffer.isEOFRecord(hashToSkip))  {	  if(buffer.isEOFRecord(hashToSkip)||    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
429	[BUG]  [BUGGY]  if(buffer.isEOFRecord(recordSize)||  buffer.isEOFRecord(hashToSkip))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(recordSize)||  buffer.isEOFRecord(hashToSkip))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(recordSize)||  buffer.isEOFRecord(hashToSkip))  {	  if(buffer.isEOFRecord(hashToSkip)||    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
430	[BUG]  [BUGGY]  if(buffer.isEOFRecord(entrySize)||  buffer.isEOFRecord(entrySize))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(entrySize)||  buffer.isEOFRecord(entrySize))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(entrySize)||  buffer.isEOFRecord(entrySize))  {	  if(buffer.isEOFRecord(hashToSkip)||    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
431	[BUG]  [BUGGY]  if(buffer.isEOFRecord(numToSkip)||  buffer.isEOFRecord(numToSkip))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(numToSkip)||  buffer.isEOFRecord(numToSkip))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(numToSkip)||  buffer.isEOFRecord(numToSkip))  {	  if(buffer.isEOFRecord(hashToSkip)||    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
432	[BUG]  [BUGGY]  if(buffer.isEOFRecord(hashToSkip)||  buffer.isEOFRecord(hashToSkip  +  1))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(hashToSkip)||  buffer.isEOFRecord(hashToSkip  +  1))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(hashToSkip)||  buffer.isEOFRecord(hashToSkip  +  1))  {	  if(buffer.isEOFRecord(hashToSkip)||    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
433	[BUG]  [BUGGY]  if(hashBuf  ==  null  ||  buffer.isEOFRecord(hashBuf))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hashBuf  ==  null  ||  buffer.isEOFRecord(hashBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hashBuf  ==  null  ||  buffer.isEOFRecord(hashBuf))  {	  if(!hasHitEOF    ||    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
434	[BUG]  [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(hash)||  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(hash)||  buffer.isEOFRecord(hash))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!hasHitEOF  &&  buffer.isEOFRecord(hash)||  buffer.isEOFRecord(hash))  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
435	[BUG]  [BUGGY]  if(!hashEOF  &&  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(!hashEOF  &&  buffer.isEOFRecord(hash))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!hashEOF  &&  buffer.isEOFRecord(hash))  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
436	[BUG]  [BUGGY]  if(buffer.hasHitEOF  &&  buffer.isEOFRecord(hashBuf))  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.hasHitEOF  &&  buffer.isEOFRecord(hashBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.hasHitEOF  &&  buffer.isEOFRecord(hashBuf))  {	  if(buffer.hasHitEOF    ||    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
437	[BUG]  [BUGGY]  if(buffer.length  ==  0  ||  buffer.isEOFRecord(hashBuf))  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.length  ==  0  ||  buffer.isEOFRecord(hashBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.length  ==  0  ||  buffer.isEOFRecord(hashBuf))  {	  if(buffer.hasHitEOF    ||    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
438	[BUG]  [BUGGY]  if(buffer.length!=  0  ||  buffer.isEOFRecord(hashBuf))  {  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.length!=  0  ||  buffer.isEOFRecord(hashBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.length!=  0  ||  buffer.isEOFRecord(hashBuf))  {	  if(buffer.hasHitEOF    ||    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
439	[BUG]  [BUGGY]  if(hashToSkip  ||  buffer.isEOFRecord(HitEOF))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hashToSkip  ||  buffer.isEOFRecord(HitEOF))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hashToSkip  ||  buffer.isEOFRecord(HitEOF))  {	  if(HitEOF    ||    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
440	[BUG]  [BUGGY]  if(buffer.isEOF()  ||  buffer.isEOFRecord(hashCode))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF()  ||  buffer.isEOFRecord(hashCode))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF()  ||  buffer.isEOFRecord(hashCode))  {	  if(buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
441	[BUG]  [BUGGY]  if(buffer.isEOFRecord(record)||  buffer.isEOFRecord(hashCode))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(record)||  buffer.isEOFRecord(hashCode))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(record)||  buffer.isEOFRecord(hashCode))  {	  if(buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
442	[BUG]  [BUGGY]  if(hasHitEOF  &&  buffer.isEOFRecord(getRecord())||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  buffer.isEOFRecord(getRecord())||  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hasHitEOF  &&  buffer.isEOFRecord(getRecord())||  hasHitEOF)  {	  if(hasHitEOF    &&    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
443	[BUG]  [BUGGY]  if(record  ==  null  ||  hasHitEOF  &&  buffer.isEOFRecord(getRecord()))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(record  ==  null  ||  hasHitEOF  &&  buffer.isEOFRecord(getRecord()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(record  ==  null  ||  hasHitEOF  &&  buffer.isEOFRecord(getRecord()))  {	  if(hasHitEOF    &&    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
444	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.isEOF(hashOffset))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.isEOF(hashOffset))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.isEOF(hashOffset))  {	  if(buffer    ==    null    ||    buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
445	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.isEOFRecord(offset))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.isEOFRecord(offset))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.isEOFRecord(offset))  {	  if(buffer    ==    null    ||    buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
446	[BUG]  [BUGGY]  if(buffer  ==  null  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  hasHitEOF)  {	  if(record    ==    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
447	[BUG]  [BUGGY]  if(buffer  ==  null  ||  record  ==  null  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  record  ==  null  ||  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  record  ==  null  ||  hasHitEOF)  {	  if(record    ==    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
448	[BUG]  [BUGGY]  if(record!=  null  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(record!=  null  ||  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(record!=  null  ||  hasHitEOF)  {	  if(record    ==    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
449	[BUG]  [BUGGY]  if(buffer  ==  null  ||  record  ==  null)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  record  ==  null)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  record  ==  null)  {	  if(record    ==    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
450	[BUG]  [BUGGY]  if(record  ==  null  ||  isEOF())  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(record  ==  null  ||  isEOF())  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(record  ==  null  ||  isEOF())  {	  if(record    ==    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
451	[BUG]  [BUGGY]  if(buffer  ==  null  ||  record.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  record.length  ==  0)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  record.length  ==  0)  {	  if(record    ==    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
452	[BUG]  [BUGGY]  if(HitEOF.equals(buffer.readRecord())&&  HitEOF.equals(buffer.getEOF()))  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(HitEOF.equals(buffer.readRecord())&&  HitEOF.equals(buffer.getEOF()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF.equals(buffer.readRecord())&&  HitEOF.equals(buffer.getEOF()))  {	  if(HitEOF.equals(buffer.readRecord())||    HitEOF.equals(buffer.getEOF()))    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
453	[BUG]  [BUGGY]  if(HitEOF.equals(buffer.getRecord())||  HitEOF.equals(buffer.getEOF()))  {  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(HitEOF.equals(buffer.getRecord())||  HitEOF.equals(buffer.getEOF()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF.equals(buffer.getRecord())||  HitEOF.equals(buffer.getEOF()))  {	  if(HitEOF.equals(buffer.readRecord())||    HitEOF.equals(buffer.getEOF()))    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
454	[BUG]  [BUGGY]  if(HitEOF.equals(buffer.getRecord())&&  HitEOF.equals(buffer.getEOF()))  {  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(HitEOF.equals(buffer.getRecord())&&  HitEOF.equals(buffer.getEOF()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF.equals(buffer.getRecord())&&  HitEOF.equals(buffer.getEOF()))  {	  if(HitEOF.equals(buffer.readRecord())||    HitEOF.equals(buffer.getEOF()))    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
455	[BUG]  [BUGGY]  if(HitEOF.equals(buffer.getEOF())&&  HitEOF.equals(buffer.getEOF()))  {  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(HitEOF.equals(buffer.getEOF())&&  HitEOF.equals(buffer.getEOF()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF.equals(buffer.getEOF())&&  HitEOF.equals(buffer.getEOF()))  {	  if(HitEOF.equals(buffer.readRecord())||    HitEOF.equals(buffer.getEOF()))    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
456	[BUG]  [BUGGY]  if(!HitEOF.equals(buffer.readRecord())&&!HitEOF.equals(buffer.getEOF()))  {  [CE]  illegal  start  of  type  [FE]                                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(!HitEOF.equals(buffer.readRecord())&&!HitEOF.equals(buffer.getEOF()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!HitEOF.equals(buffer.readRecord())&&!HitEOF.equals(buffer.getEOF()))  {	  if(HitEOF.equals(buffer.readRecord())||    HitEOF.equals(buffer.getEOF()))    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
457	[BUG]  [BUGGY]  if(buffer  ==  null  ||  record.isEOFRecord(getRecord()))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  record.isEOFRecord(getRecord()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  record.isEOFRecord(getRecord()))  {	  if(record    ==    null    ||    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
458	[BUG]  [BUGGY]  if(hasHitEOF  &&  buffer.isEOFRecord(hash)||  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  buffer.isEOFRecord(hash)||  buffer.isEOFRecord(hash))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hasHitEOF  &&  buffer.isEOFRecord(hash)||  buffer.isEOFRecord(hash))  {	  if(hasHitEOF    &&    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
459	[BUG]  [BUGGY]  if(buffer.isEOFRecord(hashCode)&&  buffer.isEOFRecord(hashCode))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(hashCode)&&  buffer.isEOFRecord(hashCode))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(hashCode)&&  buffer.isEOFRecord(hashCode))  {	  if(buffer.isEOFRecord(hashCode)||    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
460	[BUG]  [BUGGY]  System.arraycopy(buf,  0,  buf,  readBuf,  0,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  System.arraycopy(buf,  0,  buf,  readBuf,  0,  hasHitEOF);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	System.arraycopy(buf,  0,  buf,  readBuf,  0,  hasHitEOF);	  System.arraycopy(buffer,    0,    buf,    readBuf,    0,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
461	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  readBuf,  0,  0);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  0,  buf,  readBuf,  0,  0);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	System.arraycopy(buffer,  0,  buf,  readBuf,  0,  0);	  System.arraycopy(buffer,    0,    buf,    readBuf,    0,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
462	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  readBuf,  0,  hasHitEOF  +  1);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  0,  buf,  readBuf,  0,  hasHitEOF  +  1);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	System.arraycopy(buffer,  0,  buf,  readBuf,  0,  hasHitEOF  +  1);	  System.arraycopy(buffer,    0,    buf,    readBuf,    0,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
463	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  readBuf,  0,  hasHitEOF  -  1);  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  0,  buf,  readBuf,  0,  hasHitEOF  -  1);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	System.arraycopy(buffer,  0,  buf,  readBuf,  0,  hasHitEOF  -  1);	  System.arraycopy(buffer,    0,    buf,    readBuf,    0,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
464	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  readBuf,  0,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  0,  buf,  readBuf,  0,  headerBuf.length);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	System.arraycopy(buffer,  0,  buf,  readBuf,  0,  headerBuf.length);	  System.arraycopy(buffer,    0,    buf,    readBuf,    0,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
465	[BUG]  [BUGGY]  byte[]  buf  =  buffer.getRecord();  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  byte[]  buf  =  buffer.getRecord();  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	byte[]  buf  =  buffer.getRecord();	  byte[]    buf    =    buffer.readRecord();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
466	[BUG]  [BUGGY]  byte[]  buf  =  this.buffer.readRecord();  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  byte[]  buf  =  this.buffer.readRecord();  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	byte[]  buf  =  this.buffer.readRecord();	  byte[]    buf    =    buffer.readRecord();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
467	[BUG]  [BUGGY]  byte[]  buf  =  buffer.readRecord(record);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  byte[]  buf  =  buffer.readRecord(record);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	byte[]  buf  =  buffer.readRecord(record);	  byte[]    buf    =    buffer.readRecord();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
468	[BUG]  [BUGGY]  byte[]  buf  =  buffer.readRecord(true);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  byte[]  buf  =  buffer.readRecord(true);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	byte[]  buf  =  buffer.readRecord(true);	  byte[]    buf    =    buffer.readRecord();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
469	[BUG]  [BUGGY]  byte[]  buf  =  buffer.readRecord(this.record);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  byte[]  buf  =  buffer.readRecord(this.record);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	byte[]  buf  =  buffer.readRecord(this.record);	  byte[]    buf    =    buffer.readRecord();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
470	[BUG]  [BUGGY]  if(buffer.isEOF(record)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF(record)||  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF(record)||  hasHitEOF)  {	  if(buffer.isEOFRecord(record)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
471	[BUG]  [BUGGY]  if(record.isEOFRecord(buffer)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(record.isEOFRecord(buffer)||  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(record.isEOFRecord(buffer)||  hasHitEOF)  {	  if(buffer.isEOFRecord(record)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
472	[BUG]  [BUGGY]  if(!buffer.isEOFRecord(record)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(!buffer.isEOFRecord(record)||  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!buffer.isEOFRecord(record)||  hasHitEOF)  {	  if(buffer.isEOFRecord(record)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
473	[BUG]  [BUGGY]  if(buffer.isEOFRecord(record)||  hasHitEOF  ||  buffer.isEOFRecord(record))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(record)||  hasHitEOF  ||  buffer.isEOFRecord(record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(record)||  hasHitEOF  ||  buffer.isEOFRecord(record))  {	  if(buffer.isEOFRecord(record)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
474	[BUG]  [BUGGY]  if(buffer.isEOFRecord(record)||  record.length  <  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(record)||  record.length  <  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(record)||  record.length  <  hasHitEOF)  {	  if(buffer.isEOFRecord(record)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
475	[BUG]  [BUGGY]  if(buffer.isEOFRecord(getRecord())||  buffer.isEOFRecord(getRecord()))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(getRecord())||  buffer.isEOFRecord(getRecord()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(getRecord())||  buffer.isEOFRecord(getRecord()))  {	  if(buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
476	[BUG]  [BUGGY]  if(buffer.isEOFRecord(getRecord())||  buffer.isEORFecord(getRecord()))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(getRecord())||  buffer.isEORFecord(getRecord()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(getRecord())||  buffer.isEORFecord(getRecord()))  {	  if(buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
477	[BUG]  [BUGGY]  if(buffer.isEOFRecord(getRecord())||  buffer.isEOF())  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(getRecord())||  buffer.isEOF())  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(getRecord())||  buffer.isEOF())  {	  if(buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
478	[BUG]  [BUGGY]  if(buffer.isEOF(hashCode)||  buffer.isEOFRecord(hashCode))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF(hashCode)||  buffer.isEOFRecord(hashCode))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF(hashCode)||  buffer.isEOFRecord(hashCode))  {	  if(hashCode    ==    EOF    ||    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
479	[BUG]  [BUGGY]  if(buffer  ==  null  ||  hasHitEOF  &&  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  hasHitEOF  &&  buffer.isEOFRecord(hash))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  hasHitEOF  &&  buffer.isEOFRecord(hash))  {	  if(buffer    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
480	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length()  ==  0  ||  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length()  ==  0  ||  buffer.isEOFRecord(hash))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.length()  ==  0  ||  buffer.isEOFRecord(hash))  {	  if(buffer    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
481	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.equals(hash)||  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.equals(hash)||  buffer.isEOFRecord(hash))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.equals(hash)||  buffer.isEOFRecord(hash))  {	  if(buffer    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
482	[BUG]  [BUGGY]  if(HitEOF  &&  buffer.isEOFRecord(hashBuf))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(HitEOF  &&  buffer.isEOFRecord(hashBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF  &&  buffer.isEOFRecord(hashBuf))  {	  if(HitEOF    ||    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
483	[BUG]  [BUGGY]  if(buffer  ==  null  ||  hasHitEOF  &&  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  hasHitEOF  &&  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  hasHitEOF  &&  buffer.isEOFRecord(headerBuf))  {	  if(buffer    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
484	[BUG]  [BUGGY]  if(buffer  ==  null  ||  headerBuf  ==  null  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  headerBuf  ==  null  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  headerBuf  ==  null  ||  buffer.isEOFRecord(headerBuf))  {	  if(buffer    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
485	[BUG]  [BUGGY]  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(hashBuf))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(hashBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(hashBuf))  {	  if(buffer.isEOFRecord(hashBuf)||    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
486	[BUG]  [BUGGY]  if(buffer.isEOFRecord(hashEOF)||  buffer.isEOFRecord(hashOffset))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(hashEOF)||  buffer.isEOFRecord(hashOffset))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(hashEOF)||  buffer.isEOFRecord(hashOffset))  {	  if(hashOffset    ||    buffer.isEOFRecord(hashEOF))    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
487	[BUG]  [BUGGY]  if(buffer.equals(hashEOF)||  buffer.isEOFRecord(hashOffset))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.equals(hashEOF)||  buffer.isEOFRecord(hashOffset))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.equals(hashEOF)||  buffer.isEOFRecord(hashOffset))  {	  if(hashOffset    ||    buffer.isEOFRecord(hashEOF))    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
488	[BUG]  [BUGGY]  if(buffer.isEOFRecord(hashEOF)||  buffer.isEOFRecord(hashToSkip))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(hashEOF)||  buffer.isEOFRecord(hashToSkip))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(hashEOF)||  buffer.isEOFRecord(hashToSkip))  {	  if(buffer.isEOFRecord(hashToSkip)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
489	[BUG]  [BUGGY]  if(buffer.isEOFRecord(realSkip)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(realSkip)||  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(realSkip)||  hasHitEOF)  {	  if(buffer.isEOFRecord(hashToSkip)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
490	[BUG]  [BUGGY]  if(buffer.isEOFRecord(hashEOF)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(hashEOF)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(hashEOF)&&  hasHitEOF)  {	  if(buffer.isEOFRecord(hashToSkip)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
491	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.isEOFRecord(header))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.isEOFRecord(header))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.isEOFRecord(header))  {	  if(buffer    ==    null    ||    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
492	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.equals(hash))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.equals(hash))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.equals(hash))  {	  if(buffer!=    null    ||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
493	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.isEOFRecord(header))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  buffer.isEOFRecord(header))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer!=  null  ||  buffer.isEOFRecord(header))  {	  if(buffer!=    null    ||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
494	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.isEOF(hashBuffer))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.isEOF(hashBuffer))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.isEOF(hashBuffer))  {	  if(buffer    ==    null    ||    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
495	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.isEOFRecord(buffer))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.isEOFRecord(buffer))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.isEOFRecord(buffer))  {	  if(buffer    ==    null    ||    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
496	[BUG]  [BUGGY]  if(buffer  ==  null  ||  headerBuf  >=  null  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  headerBuf  >=  null  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  headerBuf  >=  null  ||  buffer.isEOFRecord(headerBuf))  {	  if(buffer    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
497	[BUG]  [BUGGY]  if(buffer.isEOFRecord(header)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(header)||  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(header)||  hasHitEOF)  {	  if(buffer.isEOFRecord(hash)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
498	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  ==  0  ||  buffer.isEOFRecord(hashBuf))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  ==  0  ||  buffer.isEOFRecord(hashBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.length  ==  0  ||  buffer.isEOFRecord(hashBuf))  {	  if(buffer    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
499	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.isEOF())  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.isEOF())  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.isEOF())  {	  if(buffer    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
500	[BUG]  [BUGGY]  if(record  ==  null  ||  buffer.isEOF())  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(record  ==  null  ||  buffer.isEOF())  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(record  ==  null  ||  buffer.isEOF())  {	  if(buffer.isEOF()    ||    record.isEOFRecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
501	[BUG]  [BUGGY]  if(record!=  null  ||  buffer.isEOF())  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(record!=  null  ||  buffer.isEOF())  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(record!=  null  ||  buffer.isEOF())  {	  if(buffer.isEOF()    ||    record.isEOFRecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
502	[BUG]  [BUGGY]  if(buffer.hasEOF()  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.hasEOF()  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.hasEOF()  ||  buffer.isEOFRecord(headerBuf))  {	  if(buffer.isEOFRecord(headerBuf)||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
503	[BUG]  [BUGGY]  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(headerBuf)||  buffer.isEOF(headerBuf))  {	  if(buffer.isEOFRecord(headerBuf)||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
504	[BUG]  [BUGGY]  if(buffer.isEOFRecord(getRecord())||  buffer.isEORFecord(getRecord()))  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(getRecord())||  buffer.isEORFecord(getRecord()))  {  return  null;  }  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(getRecord())||  buffer.isEORFecord(getRecord()))  {  return  null;  }	  if(buffer.isEOFRecord(getRecord()))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
505	[BUG]  [BUGGY]  if(buffer.isEOFRecord(getRecord())||  buffer.isEOF())  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(getRecord())||  buffer.isEOF())  {  return  null;  }  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(getRecord())||  buffer.isEOF())  {  return  null;  }	  if(buffer.isEOFRecord(getRecord()))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
506	[BUG]  [BUGGY]  if(buffer.isEOF()  ||  buffer.readRecord())  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF()  ||  buffer.readRecord())  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF()  ||  buffer.readRecord())  {	  if(buffer.isEOF()    ||    headerBuf.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
507	[BUG]  [BUGGY]  if(buffer.isEOF()  ||  headerBuf  ==  null)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF()  ||  headerBuf  ==  null)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF()  ||  headerBuf  ==  null)  {	  if(buffer.isEOF()    ||    headerBuf.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
508	[BUG]  [BUGGY]  if(buffer.isEOF()  ||  headerBuf!=  null)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF()  ||  headerBuf!=  null)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF()  ||  headerBuf!=  null)  {	  if(buffer.isEOF()    ||    headerBuf.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
509	[BUG]  [BUGGY]  if(buffer!=  null  ||  hasHitEOF  ||  buffer.isEOFRecord(hashToSkip))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  hasHitEOF  ||  buffer.isEOFRecord(hashToSkip))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer!=  null  ||  hasHitEOF  ||  buffer.isEOFRecord(hashToSkip))  {	  if(hashToSkip    ==    hasHitEOF    ||    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
510	[BUG]  [BUGGY]  if(buffer.isEOF(hashEOF)||  buffer.isEOFRecord(hashBuf))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF(hashEOF)||  buffer.isEOFRecord(hashBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF(hashEOF)||  buffer.isEOFRecord(hashBuf))  {	  if(hashEOF    ||    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
511	[BUG]  [BUGGY]  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(hashOffset))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(hashOffset))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(hashOffset))  {	  if(buffer.isEOFRecord(hashOffset)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
512	[BUG]  [BUGGY]  if(buffer.isEOFRecord(header)||  buffer.isEOFRecord(header))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(header)||  buffer.isEOFRecord(header))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(header)||  buffer.isEOFRecord(header))  {	  if(buffer.isEOFRecord(hashCode)||    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
513	[BUG]  [BUGGY]  safeGet(buffer,  record))  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  safeGet(buffer,  record))  {  throw  new  IOException( " ");  }  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	safeGet(buffer,  record))  {  throw  new  IOException( " ");  }	  if(buffer.isEOFRecord(record))    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
514	[BUG]  [BUGGY]  safeRecord(buffer,  record))  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  safeRecord(buffer,  record))  {  throw  new  IOException( " ");  }  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	safeRecord(buffer,  record))  {  throw  new  IOException( " ");  }	  if(buffer.isEOFRecord(record))    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
515	[BUG]  [BUGGY]  while(buffer.isEOF())  {  record  =  buffer.readRecord();  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  while(buffer.isEOF())  {  record  =  buffer.readRecord();  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	while(buffer.isEOF())  {  record  =  buffer.readRecord();	  if(buffer.isEOFRecord(record))    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
516	[BUG]  [BUGGY]  array[record.length  -  1]  =  buffer.readRecord();  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  array[record.length  -  1]  =  buffer.readRecord();  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	array[record.length  -  1]  =  buffer.readRecord();	  if(buffer.isEOFRecord(record))    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
517	[BUG]  [BUGGY]  while(buffer.isEOFRecord(record))  {  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  while(buffer.isEOFRecord(record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	while(buffer.isEOFRecord(record))  {	  if(buffer.isEOFRecord(record))    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
518	[BUG]  [BUGGY]  TarBuffer  buffer  =(TarBuffer)getRecord(0);  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  TarBuffer  buffer  =(TarBuffer)getRecord(0);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	TarBuffer  buffer  =(TarBuffer)getRecord(0);	  TarBuffer    buffer    =(TarBuffer)getRecord();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
519	[BUG]  [BUGGY]  TarBuffer  buffer  =(TarBuffer)getRecord().clone();  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  TarBuffer  buffer  =(TarBuffer)getRecord().clone();  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	TarBuffer  buffer  =(TarBuffer)getRecord().clone();	  TarBuffer    buffer    =(TarBuffer)getRecord();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
520	[BUG]  [BUGGY]  TarBuffer  buffer  =(TarBuffer)getRecordBytes();  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  TarBuffer  buffer  =(TarBuffer)getRecordBytes();  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	TarBuffer  buffer  =(TarBuffer)getRecordBytes();	  TarBuffer    buffer    =(TarBuffer)getRecord();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
521	[BUG]  [BUGGY]  if(getRecord()  ==  null  ||  buffer.isEOF(getRecord()))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(getRecord()  ==  null  ||  buffer.isEOF(getRecord()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(getRecord()  ==  null  ||  buffer.isEOF(getRecord()))  {	  if(getRecord()    ==    null    ||    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
522	[BUG]  [BUGGY]  if(!HitEOF.equals(buffer.readRecord())&&  buffer.isEOFRecord(record))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(!HitEOF.equals(buffer.readRecord())&&  buffer.isEOFRecord(record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!HitEOF.equals(buffer.readRecord())&&  buffer.isEOFRecord(record))  {	  if(HitEOF.equals(buffer.readRecord())||    buffer.isEOFRecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
523	[BUG]  [BUGGY]  byte[]  buf  =  buffer.readRecord(buffer);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  byte[]  buf  =  buffer.readRecord(buffer);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	byte[]  buf  =  buffer.readRecord(buffer);	  byte[]    buf    =    buffer.readRecord();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
524	[BUG]  [BUGGY]  byte[]  buf  =  buffer.readRecord(recordSize);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  byte[]  buf  =  buffer.readRecord(recordSize);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	byte[]  buf  =  buffer.readRecord(recordSize);	  byte[]    buf    =    buffer.readRecord();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
525	[BUG]  [BUGGY]  if(buffer  ==  null  ||!hasHitEOF  &&  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||!hasHitEOF  &&  buffer.isEOFRecord(hash))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||!hasHitEOF  &&  buffer.isEOFRecord(hash))  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
526	[BUG]  [BUGGY]  if(buffer!=  null  ||!hasHitEOF  &&  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||!hasHitEOF  &&  buffer.isEOFRecord(hash))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer!=  null  ||!hasHitEOF  &&  buffer.isEOFRecord(hash))  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
527	[BUG]  [BUGGY]  if(buffer  ==  null  ||!hasHitEOF  &&  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||!hasHitEOF  &&  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||!hasHitEOF  &&  buffer.isEOFRecord(headerBuf))  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
528	[BUG]  [BUGGY]  if(!hasHitEOF  &&  buffer.readRecord())  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  buffer.readRecord())  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!hasHitEOF  &&  buffer.readRecord())  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
529	[BUG]  [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(headerBuf)||  buffer.readRecord()  ==  false)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(headerBuf)||  buffer.readRecord()  ==  false)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!hasHitEOF  &&  buffer.isEOFRecord(headerBuf)||  buffer.readRecord()  ==  false)  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
530	[BUG]  [BUGGY]  if(buffer.isEOF(hashBuf))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF(hashBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF(hashBuf))  {	  if(HitEOF    ||    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
531	[BUG]  [BUGGY]  if(buffer.isEOF(hashToSkip))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF(hashToSkip))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF(hashToSkip))  {	  if(HitEOF    ||    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
532	[BUG]  [BUGGY]  if(buffer.hasEOF()  ||  buffer.isEOFRecord(hashCode))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.hasEOF()  ||  buffer.isEOFRecord(hashCode))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.hasEOF()  ||  buffer.isEOFRecord(hashCode))  {	  if(hasHitEOF    &&    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
533	[BUG]  [BUGGY]  if(record  ==  null  ||  buffer.isEOF(record))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(record  ==  null  ||  buffer.isEOF(record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(record  ==  null  ||  buffer.isEOF(record))  {	  if(record    ==    null    ||    buffer.isEOFRecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
534	[BUG]  [BUGGY]  if(record!=  null  ||  buffer.isEOFRecord(record))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(record!=  null  ||  buffer.isEOFRecord(record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(record!=  null  ||  buffer.isEOFRecord(record))  {	  if(record    ==    null    ||    buffer.isEOFRecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
535	[BUG]  [BUGGY]  if(buffer  ==  null  ||  record.equals(record))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  record.equals(record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  record.equals(record))  {	  if(record    ==    null    ||    buffer.isEOFRecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
536	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  readBuf,  0,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  readBuf,  0,  hasHitEOF);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	System.arraycopy(buffer,  0,  buffer,  readBuf,  0,  hasHitEOF);	  System.arraycopy(buffer,    0,    buf,    readBuf,    0,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
537	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  readBuf,  0,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  0,  readBuf,  0,  hasHitEOF);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	System.arraycopy(buffer,  0,  readBuf,  0,  hasHitEOF);	  System.arraycopy(buffer,    0,    buf,    readBuf,    0,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
538	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.isEOFRecord(null))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.isEOFRecord(null))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.isEOFRecord(null))  {	  if(buffer    ==    null    ||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
539	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.equals(hashCode))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.equals(hashCode))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.equals(hashCode))  {	  if(buffer!=    null    ||    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
540	[BUG]  [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(hashToSkip)||  buffer.isEOFRecord(hashToSkip))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(hashToSkip)||  buffer.isEOFRecord(hashToSkip))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!hasHitEOF  &&  buffer.isEOFRecord(hashToSkip)||  buffer.isEOFRecord(hashToSkip))  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
541	[BUG]  [BUGGY]  if(buffer  ==  null  ||!hasHitEOF  &&  buffer.isEOFRecord(hashToSkip))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||!hasHitEOF  &&  buffer.isEOFRecord(hashToSkip))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||!hasHitEOF  &&  buffer.isEOFRecord(hashToSkip))  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
542	[BUG]  [BUGGY]  if(buffer.length  ==  0  ||  buffer.isEOF()  ||  buffer.isEOFRecord(getRecord()))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.length  ==  0  ||  buffer.isEOF()  ||  buffer.isEOFRecord(getRecord()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.length  ==  0  ||  buffer.isEOF()  ||  buffer.isEOFRecord(getRecord()))  {	  if(buffer.isEOF()    ||    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
543	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.isEOF()  ||  buffer.isEOFRecord(getRecord()))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  buffer.isEOF()  ||  buffer.isEOFRecord(getRecord()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer!=  null  ||  buffer.isEOF()  ||  buffer.isEOFRecord(getRecord()))  {	  if(buffer.isEOF()    ||    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
544	[BUG]  [BUGGY]  if(record!=  null  ||  buffer.isEOFRecord(record.length))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(record!=  null  ||  buffer.isEOFRecord(record.length))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(record!=  null  ||  buffer.isEOFRecord(record.length))  {	  if(record.length    ==    0    ||    buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
545	[BUG]  [BUGGY]  if(buffer.isEOFRecord(record)||  buffer.isEOFRecord(hashOffset))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(record)||  buffer.isEOFRecord(hashOffset))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(record)||  buffer.isEOFRecord(hashOffset))  {	  if(buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
546	[BUG]  [BUGGY]  if(!HitEOF.equals(buffer.readRecord())||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(!HitEOF.equals(buffer.readRecord())||  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!HitEOF.equals(buffer.readRecord())||  hasHitEOF)  {	  if(!HitEOF.equals(buffer.readRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
547	[BUG]  [BUGGY]  if(hitEOF  ||!HitEOF.equals(buffer.readRecord()))  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hitEOF  ||!HitEOF.equals(buffer.readRecord()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hitEOF  ||!HitEOF.equals(buffer.readRecord()))  {	  if(!HitEOF.equals(buffer.readRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
548	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  buffer.isEOF(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(headerBuf  ==  null  ||  buffer.isEOF(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(headerBuf  ==  null  ||  buffer.isEOF(headerBuf))  {	  if(headerBuf    ==    null    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
549	[BUG]  [BUGGY]  if(buffer  ==  null  ||!hasHitEOF  &&  buffer.isEOFRecord(record))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||!hasHitEOF  &&  buffer.isEOFRecord(record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||!hasHitEOF  &&  buffer.isEOFRecord(record))  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
550	[BUG]  [BUGGY]  if(buffer.isEOFRecord(body)||  buffer.isEOFRecord(body))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(body)||  buffer.isEOFRecord(body))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(body)||  buffer.isEOFRecord(body))  {	  if(buffer.isEOFRecord(hash)||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
551	[BUG]  [BUGGY]  if(hashEOF  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hashEOF  &&  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hashEOF  &&  hasHitEOF)  {	  if(hashEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
552	[BUG]  [BUGGY]  if(hashOffset  ==  0  &&  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hashOffset  ==  0  &&  buffer.isEOFRecord(hash))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hashOffset  ==  0  &&  buffer.isEOFRecord(hash))  {	  if(hashOffset    ||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
553	[BUG]  [BUGGY]  if(hashEOF  ||  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hashEOF  ||  buffer.isEOFRecord(hash))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hashEOF  ||  buffer.isEOFRecord(hash))  {	  if(hashOffset    ||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
554	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.isEOFRecord(getRecord())&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.isEOFRecord(getRecord())&&  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.isEOFRecord(getRecord())&&  hasHitEOF)  {	  if(buffer    ==    null    ||    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
555	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.isEORFecord(getRecord()))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.isEORFecord(getRecord()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.isEORFecord(getRecord()))  {	  if(buffer    ==    null    ||    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
556	[BUG]  [BUGGY]  while(buffer.isEOFRecord(getRecord()))  {  if(!hasHitEOF)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  while(buffer.isEOFRecord(getRecord()))  {  if(!hasHitEOF)  {  throw  new  IOException( " ");  }  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	while(buffer.isEOFRecord(getRecord()))  {  if(!hasHitEOF)  {  throw  new  IOException( " ");  }	  if(buffer.isEOFRecord(getRecord()))    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
557	[BUG]  [BUGGY]  while(buffer.isEOFRecord(getRecord()))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  while(buffer.isEOFRecord(getRecord()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	while(buffer.isEOFRecord(getRecord()))  {	  if(buffer.isEOFRecord(getRecord()))    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
558	[BUG]  [BUGGY]  if(buffer.isEOF(header))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF(header))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF(header))  {	  if(buffer.isEOF(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
559	[BUG]  [BUGGY]  if(buffer.isEOFRecord(hashEOF)||  buffer.isEOFRecord(hashBuf))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(hashEOF)||  buffer.isEOFRecord(hashBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(hashEOF)||  buffer.isEOFRecord(hashBuf))  {	  if(hashEOF    &&    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
560	[BUG]  [BUGGY]  if(buffer.isEOFRecord(header)||  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(header)||  buffer.isEOFRecord(hash))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(header)||  buffer.isEOFRecord(hash))  {	  if(buffer.isEOFRecord(hasHitEOF)||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
561	[BUG]  [BUGGY]  if(buffer.isEOFRecord(hash)||  buffer.isEOFRecord(hasHitEOF))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(hash)||  buffer.isEOFRecord(hasHitEOF))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(hash)||  buffer.isEOFRecord(hasHitEOF))  {	  if(buffer.isEOFRecord(hasHitEOF)||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
562	[BUG]  [BUGGY]  if(buffer.isEOF(hash))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF(hash))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF(hash))  {	  if(hash    ||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
563	[BUG]  [BUGGY]  if(buffer  ==  null  ||!hasHitEOF  &&  buffer.isEOFRecord(hashOffset))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||!hasHitEOF  &&  buffer.isEOFRecord(hashOffset))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||!hasHitEOF  &&  buffer.isEOFRecord(hashOffset))  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
564	[BUG]  [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(hashOffset)||  buffer.isEOFRecord(hashOffset))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(hashOffset)||  buffer.isEOFRecord(hashOffset))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!hasHitEOF  &&  buffer.isEOFRecord(hashOffset)||  buffer.isEOFRecord(hashOffset))  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
565	[BUG]  [BUGGY]  if(HitEOF.equals(buffer.getRecord())&&  buffer.isEOFRecord(hashEOF))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(HitEOF.equals(buffer.getRecord())&&  buffer.isEOFRecord(hashEOF))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF.equals(buffer.getRecord())&&  buffer.isEOFRecord(hashEOF))  {	  if(HitEOF.equals(buffer.readRecord())||    buffer.isEOFRecord(hashEOF))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
566	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  ==  0  ||  buffer.isEOFRecord(hashOffset))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  ==  0  ||  buffer.isEOFRecord(hashOffset))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.length  ==  0  ||  buffer.isEOFRecord(hashOffset))  {	  if(buffer    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
567	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length!=  0  ||  buffer.isEOFRecord(hashOffset))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length!=  0  ||  buffer.isEOFRecord(hashOffset))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.length!=  0  ||  buffer.isEOFRecord(hashOffset))  {	  if(buffer    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
568	[BUG]  [BUGGY]  if(buffer.isEOFRecord(record)||  isEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(record)||  isEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(record)||  isEOF)  {	  if(buffer.isEOFRecord(record)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
569	[BUG]  [BUGGY]  if(buffer.isEOFRecord(record)||  hasHitEOF  ||  buffer.readRecord())  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(record)||  hasHitEOF  ||  buffer.readRecord())  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(record)||  hasHitEOF  ||  buffer.readRecord())  {	  if(buffer.isEOFRecord(record)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
570	[BUG]  [BUGGY]  if(headerBuf  ==  0  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(headerBuf  ==  0  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(headerBuf  ==  0  ||  buffer.isEOFRecord(headerBuf))  {	  if(buffer.length    ==    0    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
571	[BUG]  [BUGGY]  safeGet(buffer,  getRecord()))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  safeGet(buffer,  getRecord()))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	safeGet(buffer,  getRecord()))  {  throw  new  IllegalStateException( " ");  }	  if(buffer.isEOFRecord(getRecord()))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
572	[BUG]  [BUGGY]  safeRecord(buffer,  getRecord()))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  safeRecord(buffer,  getRecord()))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	safeRecord(buffer,  getRecord()))  {  throw  new  IllegalStateException( " ");  }	  if(buffer.isEOFRecord(getRecord()))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
573	[BUG]  [BUGGY]  if(buffer.isEOFRecord(buffer.getRecord()))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(buffer.getRecord()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(buffer.getRecord()))  {	  if(HitEOF.equals(buffer.getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
574	[BUG]  [BUGGY]  if(!hasHitEOF  &&  buffer.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  buffer.length  >  0)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!hasHitEOF  &&  buffer.length  >  0)  {	  if(!hasHitEOF    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
575	[BUG]  [BUGGY]  if(hitEOF.equals(buffer.readRecord())||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hitEOF.equals(buffer.readRecord())||  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hitEOF.equals(buffer.readRecord())||  hasHitEOF)  {	  if(HitEOF.equals(buffer.readRecord())||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
576	[BUG]  [BUGGY]  if(hash!=  0  ||  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hash!=  0  ||  buffer.isEOFRecord(hash))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hash!=  0  ||  buffer.isEOFRecord(hash))  {	  if(hash    <    =    0    ||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
577	[BUG]  [BUGGY]  if(buffer  ==  null  ||!hasHitEOF  &&  buffer.isEOFRecord(hashBuffer))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||!hasHitEOF  &&  buffer.isEOFRecord(hashBuffer))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||!hasHitEOF  &&  buffer.isEOFRecord(hashBuffer))  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(hashBuffer))    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
578	[BUG]  [BUGGY]  if(buffer!=  null  ||!hasHitEOF  &&  buffer.isEOFRecord(hashBuffer))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||!hasHitEOF  &&  buffer.isEOFRecord(hashBuffer))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer!=  null  ||!hasHitEOF  &&  buffer.isEOFRecord(hashBuffer))  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(hashBuffer))    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
579	[BUG]  [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(hashBuffer)||  buffer.isEOFRecord(hashBuffer))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(hashBuffer)||  buffer.isEOFRecord(hashBuffer))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!hasHitEOF  &&  buffer.isEOFRecord(hashBuffer)||  buffer.isEOFRecord(hashBuffer))  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(hashBuffer))    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
580	[BUG]  [BUGGY]  if(buffer.length  ==  0  ||  buffer.isEOFRecord(hashCode))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.length  ==  0  ||  buffer.isEOFRecord(hashCode))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.length  ==  0  ||  buffer.isEOFRecord(hashCode))  {	  if(buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
581	[BUG]  [BUGGY]  if(buffer.isEOFRecord(header)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(header)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(header)&&  hasHitEOF)  {	  if(buffer.isEOFRecord(header))    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
582	[BUG]  [BUGGY]  if(buffer.isEOFRecord(header)||  buffer.isEOF())  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(header)||  buffer.isEOF())  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(header)||  buffer.isEOF())  {	  if(buffer.isEOFRecord(header))    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
583	[BUG]  [BUGGY]  if(buffer  ==  null  ||!hasHitEOF  &&  buffer.isEOFRecord(hashBuf))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||!hasHitEOF  &&  buffer.isEOFRecord(hashBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||!hasHitEOF  &&  buffer.isEOFRecord(hashBuf))  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
584	[BUG]  [BUGGY]  if(buffer!=  null  ||!hasHitEOF  &&  buffer.isEOFRecord(hashBuf))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||!hasHitEOF  &&  buffer.isEOFRecord(hashBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer!=  null  ||!hasHitEOF  &&  buffer.isEOFRecord(hashBuf))  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
585	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.isEOF()  ||  buffer.isEOFRecord(record))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.isEOF()  ||  buffer.isEOFRecord(record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.isEOF()  ||  buffer.isEOFRecord(record))  {	  if(buffer.isEOF()    ||    buffer.isEOFRecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
586	[BUG]  [BUGGY]  if(buffer.isEOF()  ||  buffer.isEOFRecord(record)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF()  ||  buffer.isEOFRecord(record)||  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF()  ||  buffer.isEOFRecord(record)||  hasHitEOF)  {	  if(buffer.isEOF()    ||    buffer.isEOFRecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
587	[BUG]  [BUGGY]  ||  buffer.isEOFRecord(record)&&  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  ||  buffer.isEOFRecord(record)&&  hasHitEOF  =  true;  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	||  buffer.isEOFRecord(record)&&  hasHitEOF  =  true;	  ||    buffer.isEOFRecord(record))    {    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
588	[BUG]  [BUGGY]  ||  buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  ||  buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	||  buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;	  ||    buffer.isEOFRecord(record))    {    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
589	[BUG]  [BUGGY]  ||  buffer.getEOFRecord(record))  {  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  ||  buffer.getEOFRecord(record))  {  hasHitEOF  =  true;  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	||  buffer.getEOFRecord(record))  {  hasHitEOF  =  true;	  ||    buffer.isEOFRecord(record))    {    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
590	[BUG]  [BUGGY]  ||  buffer.eOLFRecord(record))  {  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  ||  buffer.eOLFRecord(record))  {  hasHitEOF  =  true;  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	||  buffer.eOLFRecord(record))  {  hasHitEOF  =  true;	  ||    buffer.isEOFRecord(record))    {    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
591	[BUG]  [BUGGY]  ||  buffer.readEOFRecord(record))  {  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  ||  buffer.readEOFRecord(record))  {  hasHitEOF  =  true;  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	||  buffer.readEOFRecord(record))  {  hasHitEOF  =  true;	  ||    buffer.isEOFRecord(record))    {    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
592	[BUG]  [BUGGY]  if(buffer.isEOFRecord(backerBuf)||  buffer.isEOF())  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(backerBuf)||  buffer.isEOF())  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(backerBuf)||  buffer.isEOF())  {	  if(buffer.isEOFRecord(backerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
593	[BUG]  [BUGGY]  if(buffer.isEOFRecord(realSkip)||  buffer.isEOFRecord(realSkip))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(realSkip)||  buffer.isEOFRecord(realSkip))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(realSkip)||  buffer.isEOFRecord(realSkip))  {	  if(buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
594	[BUG]  [BUGGY]  if(buffer!=  null  ||  hasHitEOF  ||  buffer.isEOFRecord(hashOffset))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  hasHitEOF  ||  buffer.isEOFRecord(hashOffset))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer!=  null  ||  hasHitEOF  ||  buffer.isEOFRecord(hashOffset))  {	  if(hashOffset    ==    hasHitEOF    ||    buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
595	[BUG]  [BUGGY]  if(hashOffset  ==  buffer.length  ||  buffer.isEOFRecord(hashOffset))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hashOffset  ==  buffer.length  ||  buffer.isEOFRecord(hashOffset))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hashOffset  ==  buffer.length  ||  buffer.isEOFRecord(hashOffset))  {	  if(hashOffset    ==    hasHitEOF    ||    buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
596	[BUG]  [BUGGY]  if(buffer.readRecord()  ==  null  &&  HitEOF!=  null  &&  buffer.readRecord().equals(HitEOF))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.readRecord()  ==  null  &&  HitEOF!=  null  &&  buffer.readRecord().equals(HitEOF))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.readRecord()  ==  null  &&  HitEOF!=  null  &&  buffer.readRecord().equals(HitEOF))  {	  if(HitEOF!=    null    &&    buffer.readRecord().equals(HitEOF))    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
597	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  ==  0  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  ==  0  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(headerBuf  ==  null  ||  headerBuf.length  ==  0  ||  buffer.isEOFRecord(headerBuf))  {	  if(headerBuf    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
598	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  hasHitEOF  &&  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(headerBuf  ==  null  ||  hasHitEOF  &&  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(headerBuf  ==  null  ||  hasHitEOF  &&  buffer.isEOFRecord(headerBuf))  {	  if(headerBuf    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
599	[BUG]  [BUGGY]  if(buffer.equals(HitEOF_BACKSLASH))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.equals(HitEOF_BACKSLASH))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.equals(HitEOF_BACKSLASH))  {	  if(buffer.equals(HitEOF))    {    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
600	[BUG]  [BUGGY]  byte[]  buf  =  getRecord().toByteArray();  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  byte[]  buf  =  getRecord().toByteArray();  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	byte[]  buf  =  getRecord().toByteArray();	  byte[]    buf    =    getRecord();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
601	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.isEOF()  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  buffer.isEOF()  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer!=  null  ||  buffer.isEOF()  ||  buffer.isEOFRecord(headerBuf))  {	  if(buffer.isEOF()    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
602	[BUG]  [BUGGY]  if(buffer.length  ==  0  ||  buffer.isEOF())  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.length  ==  0  ||  buffer.isEOF())  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.length  ==  0  ||  buffer.isEOF())  {	  if(buffer.isEOF()    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
603	[BUG]  [BUGGY]  if(buffer  ==  null  ||!hasHitEOF  &&  buffer.isEOFRecord(getRecord()))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||!hasHitEOF  &&  buffer.isEOFRecord(getRecord()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||!hasHitEOF  &&  buffer.isEOFRecord(getRecord()))  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
604	[BUG]  [BUGGY]  if(buffer.hasRecord()  ||!hasHitEOF  &&  buffer.isEOFRecord(getRecord()))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.hasRecord()  ||!hasHitEOF  &&  buffer.isEOFRecord(getRecord()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.hasRecord()  ||!hasHitEOF  &&  buffer.isEOFRecord(getRecord()))  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
605	[BUG]  [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(getRecord())||  buffer.readRecord()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(getRecord())||  buffer.readRecord()  ==  0)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!hasHitEOF  &&  buffer.isEOFRecord(getRecord())||  buffer.readRecord()  ==  0)  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
606	[BUG]  [BUGGY]  if(buffer  ==  null  ||  getRecord()  ==  null  ||  buffer.isEOFRecord(getRecord()))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  getRecord()  ==  null  ||  buffer.isEOFRecord(getRecord()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  getRecord()  ==  null  ||  buffer.isEOFRecord(getRecord()))  {	  if(getRecord()    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
607	[BUG]  [BUGGY]  if(buffer  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(getRecord()))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(getRecord()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(getRecord()))  {	  if(getRecord()    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
608	[BUG]  [BUGGY]  if(buffer.readRecord()!=  null  ||  buffer.isEOFRecord(getRecord()))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.readRecord()!=  null  ||  buffer.isEOFRecord(getRecord()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.readRecord()!=  null  ||  buffer.isEOFRecord(getRecord()))  {	  if(getRecord()!=    null    ||    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
609	[BUG]  [BUGGY]  if(!hasHitEOF())  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(!hasHitEOF())  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!hasHitEOF())  {	  if(isEOF()    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
610	[BUG]  [BUGGY]  if(hashEOF()  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hashEOF()  ||  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hashEOF()  ||  hasHitEOF)  {	  if(isEOF()    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
611	[BUG]  [BUGGY]  if(getRecord()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(getRecord()  ==  null)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(getRecord()  ==  null)  {	  if(isEOF()    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
612	[BUG]  [BUGGY]  if(hasHitEOF())  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hasHitEOF())  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hasHitEOF())  {	  if(isEOF()    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
613	[BUG]  [BUGGY]  if(buffer  ==  null  ||  record.length  ==  0  ||  buffer.isEOFRecord(hashCode))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  record.length  ==  0  ||  buffer.isEOFRecord(hashCode))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  record.length  ==  0  ||  buffer.isEOFRecord(hashCode))  {	  if(record.length    ==    0    ||    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
614	[BUG]  [BUGGY]  if(hashCode  ==  0  ||  buffer.isEOFRecord(hashCode))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hashCode  ==  0  ||  buffer.isEOFRecord(hashCode))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hashCode  ==  0  ||  buffer.isEOFRecord(hashCode))  {	  if(hashCode    ==    EOF    ||    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
615	[BUG]  [BUGGY]  if(buffer  ==  null)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null)  {	  if(hashCode    ==    EOF    ||    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
616	[BUG]  [BUGGY]  if(hasHitEOF  &&  buffer.isEOFRecord(hashToSkip)||  buffer.isEOFRecord(hashToSkip))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  buffer.isEOFRecord(hashToSkip)||  buffer.isEOFRecord(hashToSkip))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hasHitEOF  &&  buffer.isEOFRecord(hashToSkip)||  buffer.isEOFRecord(hashToSkip))  {	  if(HitEOF    &&    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
617	[BUG]  [BUGGY]  if(buffered  ==  null  ||  buffer.isEOFRecord(buffered))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffered  ==  null  ||  buffer.isEOFRecord(buffered))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffered  ==  null  ||  buffer.isEOFRecord(buffered))  {	  if(hashToSkip    ==    null    ||    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
618	[BUG]  [BUGGY]  if(buffer.isEOF(headerBuf)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF(headerBuf)||  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF(headerBuf)||  hasHitEOF)  {	  if(buffer.isEOFRecord(headerBuf)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
619	[BUG]  [BUGGY]  if(buffer.isEOFRecord(headerBuf)&&  isEOF)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(headerBuf)&&  isEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(headerBuf)&&  isEOF)  {	  if(buffer.isEOFRecord(headerBuf)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
620	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  0,  recordSize,  numToSkip);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  0,  buf,  0,  recordSize,  numToSkip);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	System.arraycopy(buffer,  0,  buf,  0,  recordSize,  numToSkip);	  System.arraycopy(buffer,    0,    buf,    0,    recordSize);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
621	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  0,  recordSize  -  fileSize);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  0,  buf,  0,  recordSize  -  fileSize);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	System.arraycopy(buffer,  0,  buf,  0,  recordSize  -  fileSize);	  System.arraycopy(buffer,    0,    buf,    0,    recordSize);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
622	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  readBuf,  0,  numToSkip);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  0,  readBuf,  0,  numToSkip);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	System.arraycopy(buffer,  0,  readBuf,  0,  numToSkip);	  System.arraycopy(buffer,    0,    buf,    readBuf,    0,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
623	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  readBuf,  0,  buffer.length);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  0,  buf,  readBuf,  0,  buffer.length);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	System.arraycopy(buffer,  0,  buf,  readBuf,  0,  buffer.length);	  System.arraycopy(buffer,    0,    buf,    readBuf,    0,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
624	[BUG]  [BUGGY]  if(hashToSkip  ||  buffer.isEOFRecord(hashToSkip)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hashToSkip  ||  buffer.isEOFRecord(hashToSkip)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hashToSkip  ||  buffer.isEOFRecord(hashToSkip)&&  hasHitEOF)  {	  if(hashToSkip    ||    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
625	[BUG]  [BUGGY]  if(hashToSkip  ||  buffer.isEOFRecord(hashToSkip)||  buffer.isEOFRecord(hashToSkip))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hashToSkip  ||  buffer.isEOFRecord(hashToSkip)||  buffer.isEOFRecord(hashToSkip))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hashToSkip  ||  buffer.isEOFRecord(hashToSkip)||  buffer.isEOFRecord(hashToSkip))  {	  if(hashToSkip    ||    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
626	[BUG]  [BUGGY]  if(buffer.hasEOF()  ||  buffer.isEOFRecord(hashBuf))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.hasEOF()  ||  buffer.isEOFRecord(hashBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.hasEOF()  ||  buffer.isEOFRecord(hashBuf))  {	  if(hasHitEOF    &&    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
627	[BUG]  [BUGGY]  if(isEOF()  ||  buffer.isEOFRecord(getRecord())||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(isEOF()  ||  buffer.isEOFRecord(getRecord())||  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(isEOF()  ||  buffer.isEOFRecord(getRecord())||  hasHitEOF)  {	  if(isEOF()    ||    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
628	[BUG]  [BUGGY]  if(buffer.length  ==  0  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.length  ==  0  ||  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.length  ==  0  ||  hasHitEOF)  {	  if(hash    ==    0    ||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
629	[BUG]  [BUGGY]  ((  TarArchiveEntry)buffer).setRecord(false);  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  ((  TarArchiveEntry)buffer).setRecord(false);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	((  TarArchiveEntry)buffer).setRecord(false);	  ((    TarArchiveEntry)buffer).getRecord();    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
630	[BUG]  [BUGGY]  ((  TarArchiveEntry)buffer).reset();  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  ((  TarArchiveEntry)buffer).reset();  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	((  TarArchiveEntry)buffer).reset();	  ((    TarArchiveEntry)buffer).getRecord();    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
631	[BUG]  [BUGGY]  ((  TarArchiveEntry)buffer).readRecord();  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  ((  TarArchiveEntry)buffer).readRecord();  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	((  TarArchiveEntry)buffer).readRecord();	  ((    TarArchiveEntry)buffer).getRecord();    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
632	[BUG]  [BUGGY]  if(record  ==  null  ||  buffer.isEOF(getRecord()))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(record  ==  null  ||  buffer.isEOF(getRecord()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(record  ==  null  ||  buffer.isEOF(getRecord()))  {	  if(record    ==    null    ||    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
633	[BUG]  [BUGGY]  if(record!=  null  ||  buffer.isEOFRecord(getRecord()))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(record!=  null  ||  buffer.isEOFRecord(getRecord()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(record!=  null  ||  buffer.isEOFRecord(getRecord()))  {	  if(record    ==    null    ||    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
634	[BUG]  [BUGGY]  if(record  ==  null  ||  buffer.readRecord())  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(record  ==  null  ||  buffer.readRecord())  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(record  ==  null  ||  buffer.readRecord())  {	  if(record    ==    null    ||    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
635	[BUG]  [BUGGY]  if(buffer.isEOF()  ||  HitEOF.equals(buffer.getEOF()))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF()  ||  HitEOF.equals(buffer.getEOF()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF()  ||  HitEOF.equals(buffer.getEOF()))  {	  if(HitEOF.equals(buffer.getEOF()))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
636	[BUG]  [BUGGY]  if(buffer  ==  null  ||  record.length  ==  0  ||  buffer.isEOFRecord(hashToSkip))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  record.length  ==  0  ||  buffer.isEOFRecord(hashToSkip))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  record.length  ==  0  ||  buffer.isEOFRecord(hashToSkip))  {	  if(record.length    ==    0    ||    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
637	[BUG]  [BUGGY]  if(buffer.isEOF())  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF())  {  hasHitEOF  =  true;  }  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF())  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(record))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
638	[BUG]  [BUGGY]  if(buffer.isEOFRecord(record)&&  hasHitEOF!=  false)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(record)&&  hasHitEOF!=  false)  {  hasHitEOF  =  true;  }  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(record)&&  hasHitEOF!=  false)  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(record))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
639	[BUG]  [BUGGY]  if(buffer  ==  null  ||!hasHitEOF  &&  buffer.isEOFRecord(hashCode))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||!hasHitEOF  &&  buffer.isEOFRecord(hashCode))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||!hasHitEOF  &&  buffer.isEOFRecord(hashCode))  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
640	[BUG]  [BUGGY]  if(buffer!=  null  ||!hasHitEOF  &&  buffer.isEOFRecord(hashCode))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||!hasHitEOF  &&  buffer.isEOFRecord(hashCode))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer!=  null  ||!hasHitEOF  &&  buffer.isEOFRecord(hashCode))  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
641	[BUG]  [BUGGY]  if(buffer.isEOF(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF(headerBuf)||  buffer.isEOFRecord(headerBuf))  {	  if(headerBuf.isEOFRecord(hasHitEOF)||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
642	[BUG]  [BUGGY]  if(buffer.isEOFRecord(record)||  buffer.isEOFRecord(hashToSkip))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(record)||  buffer.isEOFRecord(hashToSkip))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(record)||  buffer.isEOFRecord(hashToSkip))  {	  if(buffer.isEOFRecord(hashToSkip)||    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
643	[BUG]  [BUGGY]  HashTraversal.traverse(compiler,  buffer,  new  byte[]  {  hasHitEOF  }  );  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  HashTraversal.traverse(compiler,  buffer,  new  byte[]  {  hasHitEOF  }  );  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	HashTraversal.traverse(compiler,  buffer,  new  byte[]  {  hasHitEOF  }  );	  if(buffer.isEOFRecord(getRecord()))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
644	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  ==  0  ||  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  ==  0  ||  buffer.isEOFRecord(hash))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.length  ==  0  ||  buffer.isEOFRecord(hash))  {	  if(buffer    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
645	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length!=  0  ||  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length!=  0  ||  buffer.isEOFRecord(hash))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.length!=  0  ||  buffer.isEOFRecord(hash))  {	  if(buffer    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
646	[BUG]  [BUGGY]  if(buffer.hasEOF()  ||  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.hasEOF()  ||  buffer.isEOFRecord(hash))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.hasEOF()  ||  buffer.isEOFRecord(hash))  {	  if(hasHitEOF    &&    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
647	[BUG]  [BUGGY]  if(buffer.hasHitEOF  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.hasHitEOF  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.hasHitEOF  ||  buffer.isEOFRecord(headerBuf))  {	  if(buffer.hasHitEOF    ||    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
648	[BUG]  [BUGGY]  if(buffer.isEOF()  ||  isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF()  ||  isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF()  ||  isEOFRecord(headerBuf))  {	  if(hasHitEOF    ||    isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
649	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  ==  0  ||  buffer.isEOFRecord(hashCode))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  ==  0  ||  buffer.isEOFRecord(hashCode))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.length  ==  0  ||  buffer.isEOFRecord(hashCode))  {	  if(buffer    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
650	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length!=  0  ||  buffer.isEOFRecord(hashCode))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length!=  0  ||  buffer.isEOFRecord(hashCode))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.length!=  0  ||  buffer.isEOFRecord(hashCode))  {	  if(buffer    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
651	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  buffer.isEOFRecord(hashCode))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  buffer.isEOFRecord(hashCode))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.length  <  0  ||  buffer.isEOFRecord(hashCode))  {	  if(buffer    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
652	[BUG]  [BUGGY]  if(buffer.isEOF()  ||  buffer.isEOFRecord())  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF()  ||  buffer.isEOFRecord())  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF()  ||  buffer.isEOFRecord())  {	  if(buffer.isEOFRecord(record)||    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
653	[BUG]  [BUGGY]  if(buffer.isEOFRecord(record)||  buffer.isOSF())  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(record)||  buffer.isOSF())  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(record)||  buffer.isOSF())  {	  if(buffer.isEOFRecord(record)||    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
654	[BUG]  [BUGGY]  if(buffer.isEOFRecord(getRecord())||  buffer.readRecord()!=  null)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(getRecord())||  buffer.readRecord()!=  null)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(getRecord())||  buffer.readRecord()!=  null)  {	  if(buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
655	[BUG]  [BUGGY]  if(record  ==  null)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(record  ==  null)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(record  ==  null)  {	  if(record    ==    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
656	[BUG]  [BUGGY]  if(record  ==  null  ||  record.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(record  ==  null  ||  record.length  ==  0)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(record  ==  null  ||  record.length  ==  0)  {	  if(record    ==    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
657	[BUG]  [BUGGY]  if(buffer.isEOF()  ||  buffer.equals(getRecord()))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF()  ||  buffer.equals(getRecord()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF()  ||  buffer.equals(getRecord()))  {	  if(buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
658	[BUG]  [BUGGY]  if(buffer.isEOF()  ||  buffer.isUTF8())  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF()  ||  buffer.isUTF8())  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF()  ||  buffer.isUTF8())  {	  if(buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
659	[BUG]  [BUGGY]  if(buffer.readRecord()  ==  null  ||  buffer.equals(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.readRecord()  ==  null  ||  buffer.equals(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.readRecord()  ==  null  ||  buffer.equals(headerBuf))  {	  if(buffer.readRecord()    ==    null    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
660	[BUG]  [BUGGY]  ||  buffer.getEOFRecord(record))  {  hasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  ||  buffer.getEOFRecord(record))  {  hasHitEOF  =  false;  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	||  buffer.getEOFRecord(record))  {  hasHitEOF  =  false;	  ||    buffer.isEOFRecord(record))    {    hasHitEOF    =    false;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
661	[BUG]  [BUGGY]  ||  buffer.readEOFRecord(record))  {  hasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  ||  buffer.readEOFRecord(record))  {  hasHitEOF  =  false;  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	||  buffer.readEOFRecord(record))  {  hasHitEOF  =  false;	  ||    buffer.isEOFRecord(record))    {    hasHitEOF    =    false;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
662	[BUG]  [BUGGY]  ||  buffer.isEOFRecord(record1))  {  hasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  ||  buffer.isEOFRecord(record1))  {  hasHitEOF  =  false;  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	||  buffer.isEOFRecord(record1))  {  hasHitEOF  =  false;	  ||    buffer.isEOFRecord(record))    {    hasHitEOF    =    false;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
663	[BUG]  [BUGGY]  if(hash  ==  0  ||  buffer.isEOFRecord(0))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hash  ==  0  ||  buffer.isEOFRecord(0))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hash  ==  0  ||  buffer.isEOFRecord(0))  {	  if(hash    ==    hasHitEOF    ||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
664	[BUG]  [BUGGY]  if(buffer!=  null  ||  hasHitEOF  ||  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  hasHitEOF  ||  buffer.isEOFRecord(hash))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer!=  null  ||  hasHitEOF  ||  buffer.isEOFRecord(hash))  {	  if(hash    ==    hasHitEOF    ||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
665	[BUG]  [BUGGY]  TarBuffer  buffer  =(TarBuffer)currEntry.getKey();  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  TarBuffer  buffer  =(TarBuffer)currEntry.getKey();  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	TarBuffer  buffer  =(TarBuffer)currEntry.getKey();	  TarBuffer    buffer    =(TarBuffer)this.currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
666	[BUG]  [BUGGY]  if(hashOffset  ==  len  ||  buffer.isEOFRecord(hashOffset))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hashOffset  ==  len  ||  buffer.isEOFRecord(hashOffset))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hashOffset  ==  len  ||  buffer.isEOFRecord(hashOffset))  {	  if(hashOffset    ==    hasHitEOF    ||    buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
667	[BUG]  [BUGGY]  if(HitEOF  ||  buffer.isEOFRecord(hashToSkip)||  buffer.isEOFRecord(hashToSkip))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(HitEOF  ||  buffer.isEOFRecord(hashToSkip)||  buffer.isEOFRecord(hashToSkip))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF  ||  buffer.isEOFRecord(hashToSkip)||  buffer.isEOFRecord(hashToSkip))  {	  if(HitEOF    ||    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
668	[BUG]  [BUGGY]  if(buffer  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(hashCode  +  1))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(hashCode  +  1))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(hashCode  +  1))  {	  if(buffer    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
669	[BUG]  [BUGGY]  if(buffer  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(hasHitEOF))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(hasHitEOF))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(hasHitEOF))  {	  if(buffer    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
670	[BUG]  [BUGGY]  if(buffer  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(height))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(height))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(height))  {	  if(buffer    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
671	[BUG]  [BUGGY]  if(buffer  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(record))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(record))  {	  if(buffer    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
672	[BUG]  [BUGGY]  if(buffer.isEOFRecord(record)||  buffer.read())  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(record)||  buffer.read())  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(record)||  buffer.read())  {	  if(buffer.isEOFRecord(record)||    buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
673	[BUG]  [BUGGY]  if(record  ==  null  ||  hasHitEOF  &&  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(record  ==  null  ||  hasHitEOF  &&  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(record  ==  null  ||  hasHitEOF  &&  buffer.isEOFRecord(headerBuf))  {	  if(hasHitEOF    &&    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
674	[BUG]  [BUGGY]  if(buffer.isEOFRecord(backerBuf)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(backerBuf)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(backerBuf)&&  hasHitEOF)  {	  if(buffer.isEOFRecord(backerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
675	[BUG]  [BUGGY]  if(buffer!=  null  &&  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer!=  null  &&  buffer.isEOFRecord(hash))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer!=  null  &&  buffer.isEOFRecord(hash))  {	  if(buffer!=    null    ||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
676	[BUG]  [BUGGY]  if(buffer.length  <  =  0  ||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.length  <  =  0  ||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.length  <  =  0  ||  buffer.isEOFRecord(headerBuf))  {	  if(buffer.length    ==    0    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
677	[BUG]  [BUGGY]  if(buffer.length  ==  0  ||  headerBuf.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.length  ==  0  ||  headerBuf.length  ==  0)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.length  ==  0  ||  headerBuf.length  ==  0)  {	  if(buffer.length    ==    0    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
678	[BUG]  [BUGGY]  if(buffer.isEOFRecord(getRecord())||  buffer.isEOFRecord(getHeaderSize()))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(getRecord())||  buffer.isEOFRecord(getHeaderSize()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(getRecord())||  buffer.isEOFRecord(getHeaderSize()))  {	  if(buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
679	[BUG]  [BUGGY]  if(buffer.isEOFRecord(getRecord())||  buffer.isEOFRecord(getSize()))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(getRecord())||  buffer.isEOFRecord(getSize()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(getRecord())||  buffer.isEOFRecord(getSize()))  {	  if(buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
680	[BUG]  [BUGGY]  if(getRecord()!=  null  ||  hasHitEOF  ||  buffer.isEOFRecord(getRecord()))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(getRecord()!=  null  ||  hasHitEOF  ||  buffer.isEOFRecord(getRecord()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(getRecord()!=  null  ||  hasHitEOF  ||  buffer.isEOFRecord(getRecord()))  {	  if(getRecord()    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
681	[BUG]  [BUGGY]  if(hashToSkip  ==  null  ||  hasHitEOF  &&  buffer.isEOFRecord(hashToSkip))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hashToSkip  ==  null  ||  hasHitEOF  &&  buffer.isEOFRecord(hashToSkip))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hashToSkip  ==  null  ||  hasHitEOF  &&  buffer.isEOFRecord(hashToSkip))  {	  if(hasHitEOF    &&    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
682	[BUG]  [BUGGY]  if(hashCode  ==  EORECORD  ||  buffer.isEOFRecord(hashCode))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hashCode  ==  EORECORD  ||  buffer.isEOFRecord(hashCode))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hashCode  ==  EORECORD  ||  buffer.isEOFRecord(hashCode))  {	  if(hashCode    ==    EOF    ||    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
683	[BUG]  [BUGGY]  if(buffer.isEOF()  ||  buffer.isEOFRecord(release))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF()  ||  buffer.isEOFRecord(release))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF()  ||  buffer.isEOFRecord(release))  {	  if(buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
684	[BUG]  [BUGGY]  if(buffer.isEOF()  ||  buffer.isEOFRecord(currEntry))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF()  ||  buffer.isEOFRecord(currEntry))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF()  ||  buffer.isEOFRecord(currEntry))  {	  if(buffer.isEOF())    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
685	[BUG]  [BUGGY]  HashCodeBuffer  hasHitEOF  =  buffer.isEOFRecord(getRecord());  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  HashCodeBuffer  hasHitEOF  =  buffer.isEOFRecord(getRecord());  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	HashCodeBuffer  hasHitEOF  =  buffer.isEOFRecord(getRecord());	  if(buffer.isEOFRecord(getRecord()))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
686	[BUG]  [BUGGY]  HashTraversal.traverse(compiler,  getRecord(),  this);  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  HashTraversal.traverse(compiler,  getRecord(),  this);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	HashTraversal.traverse(compiler,  getRecord(),  this);	  if(buffer.isEOFRecord(getRecord()))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
687	[BUG]  [BUGGY]  HashTraversal.traverse(compiler,  getRecord(),  buffer);  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  HashTraversal.traverse(compiler,  getRecord(),  buffer);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	HashTraversal.traverse(compiler,  getRecord(),  buffer);	  if(buffer.isEOFRecord(getRecord()))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
688	[BUG]  [BUGGY]  HashTraversal.traverse(compiler,  getRecord(),  buffer);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  HashTraversal.traverse(compiler,  getRecord(),  buffer);  hasHitEOF  =  true;  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	HashTraversal.traverse(compiler,  getRecord(),  buffer);  hasHitEOF  =  true;	  if(buffer.isEOFRecord(getRecord()))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
689	[BUG]  [BUGGY]  if(buffer.isEOFRecord(hasHitEOF)||  buffer.isEOFRecord(hashBuf))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(hasHitEOF)||  buffer.isEOFRecord(hashBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(hasHitEOF)||  buffer.isEOFRecord(hashBuf))  {	  if(buffer.isEOFRecord(hashBuf)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
690	[BUG]  [BUGGY]  if(buffer.isEOFRecord(hashBuf)||  hasHitEOF  ||  buffer.isEOFRecord(hashBuf))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(hashBuf)||  hasHitEOF  ||  buffer.isEOFRecord(hashBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(hashBuf)||  hasHitEOF  ||  buffer.isEOFRecord(hashBuf))  {	  if(buffer.isEOFRecord(hashBuf)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
691	[BUG]  [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(hashCode,  record))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(hashCode,  record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!hasHitEOF  &&  buffer.isEOFRecord(hashCode,  record))  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
692	[BUG]  [BUGGY]  if(hasHitEOF  ||  buffer.isEOFRecord(record))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  buffer.isEOFRecord(record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hasHitEOF  ||  buffer.isEOFRecord(record))  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
693	[BUG]  [BUGGY]  if(buffer.isEOFRecord(record)&&  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(record)&&  buffer.isEOFRecord(hash))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(record)&&  buffer.isEOFRecord(hash))  {	  if(buffer.isEOFRecord(hash)||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
694	[BUG]  [BUGGY]  if(buffer.isEOFRecord(record)&&  buffer.isEOFRecord(hashCode))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(record)&&  buffer.isEOFRecord(hashCode))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(record)&&  buffer.isEOFRecord(hashCode))  {	  if(buffer.isEOFRecord(hashCode)||    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
695	[BUG]  [BUGGY]  if(buffer.isEOFRecord(getRecord()))  {  return  new  byte[0];  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(getRecord()))  {  return  new  byte[0];  }  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(getRecord()))  {  return  new  byte[0];  }	  if(buffer.isEOFRecord(getRecord()))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
696	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.isEOFRecord(s))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.isEOFRecord(s))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.isEOFRecord(s))  {	  if(buffer    ==    null    ||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
697	[BUG]  [BUGGY]  if(buffer.isEOFRecord(record.length))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(record.length))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(record.length))  {	  if(record.length    ==    0    ||    buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
698	[BUG]  [BUGGY]  if(record.length  ==  0  ||  buffer.isEOFRecord(record))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(record.length  ==  0  ||  buffer.isEOFRecord(record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(record.length  ==  0  ||  buffer.isEOFRecord(record))  {	  if(record.length    ==    0    ||    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
699	[BUG]  [BUGGY]  if(HitEOF  ||  hasHitEOF  ||  buffer.isEOFRecord(hashEOF))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(HitEOF  ||  hasHitEOF  ||  buffer.isEOFRecord(hashEOF))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF  ||  hasHitEOF  ||  buffer.isEOFRecord(hashEOF))  {	  if(HitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
700	[BUG]  [BUGGY]  if(buffer  ==  null  ||  hasHitEOF  ||  headerBuf.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  hasHitEOF  ||  headerBuf.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  hasHitEOF  ||  headerBuf.isEOFRecord(headerBuf))  {	  if(headerBuf    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
701	[BUG]  [BUGGY]  ((  TarArchiveEntry)buffer).setRecord(record);  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  ((  TarArchiveEntry)buffer).setRecord(record);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	((  TarArchiveEntry)buffer).setRecord(record);	  ((    TarArchiveEntry)buffer).getRecord();    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
702	[BUG]  [BUGGY]  if(buffer!=  null  ||  hasHitEOF  ||  buffer.isEOFRecord(hashBuf))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  hasHitEOF  ||  buffer.isEOFRecord(hashBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer!=  null  ||  hasHitEOF  ||  buffer.isEOFRecord(hashBuf))  {	  if(buffer    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
703	[BUG]  [BUGGY]  if(buffer  ==  null  ||  isEOF  ||  buffer.isEOFRecord(hashBuf))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  isEOF  ||  buffer.isEOFRecord(hashBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  isEOF  ||  buffer.isEOFRecord(hashBuf))  {	  if(buffer    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
704	[BUG]  [BUGGY]  if(buffer  ==  null  ||  hasHitEOF  ||  buffer.equals(hashBuf))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  hasHitEOF  ||  buffer.equals(hashBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  hasHitEOF  ||  buffer.equals(hashBuf))  {	  if(buffer    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
705	[BUG]  [BUGGY]  if(buffer!=  null  &&  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer!=  null  &&  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer!=  null  &&  buffer.isEOFRecord(headerBuf))  {	  if(buffer!=    null    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
706	[BUG]  [BUGGY]  if(record  ==  null  ||  buffer.isEOFRecord(record)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(record  ==  null  ||  buffer.isEOFRecord(record)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(record  ==  null  ||  buffer.isEOFRecord(record)&&  hasHitEOF)  {	  if(buffer.isEOFRecord(record)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
707	[BUG]  [BUGGY]  if(buffer.isEOFRecord(record)&&  hasHitEOF  ||  buffer.isEOFRecord(hashEOF))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(record)&&  hasHitEOF  ||  buffer.isEOFRecord(hashEOF))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(record)&&  hasHitEOF  ||  buffer.isEOFRecord(hashEOF))  {	  if(buffer.isEOFRecord(record)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
708	[BUG]  [BUGGY]  if(buffer.isEOFRecord(record)&&  hasHitEOF  ||  buffer.isEOFRecord(hasHitEOF))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(record)&&  hasHitEOF  ||  buffer.isEOFRecord(hasHitEOF))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(record)&&  hasHitEOF  ||  buffer.isEOFRecord(hasHitEOF))  {	  if(buffer.isEOFRecord(record)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
709	[BUG]  [BUGGY]  if(buffer.isEOF()  ||  buffer.isEOFRecord(bodyBuf))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF()  ||  buffer.isEOFRecord(bodyBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF()  ||  buffer.isEOFRecord(bodyBuf))  {	  if(buffer.isEOF()    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
710	[BUG]  [BUGGY]  if(HashEOF  ||  buffer.isEOFRecord(hashBuf))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(HashEOF  ||  buffer.isEOFRecord(hashBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HashEOF  ||  buffer.isEOFRecord(hashBuf))  {	  if(hashEOF    &&    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
711	[BUG]  [BUGGY]  if(hashBuf  ==  null  ||!hasHitEOF  &&  buffer.isEOFRecord(hashBuf))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hashBuf  ==  null  ||!hasHitEOF  &&  buffer.isEOFRecord(hashBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hashBuf  ==  null  ||!hasHitEOF  &&  buffer.isEOFRecord(hashBuf))  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
712	[BUG]  [BUGGY]  if(HitEOF.equals(buffer.getEOFRecord())||  buffer.isEOFRecord(hasHitEOF))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(HitEOF.equals(buffer.getEOFRecord())||  buffer.isEOFRecord(hasHitEOF))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF.equals(buffer.getEOFRecord())||  buffer.isEOFRecord(hasHitEOF))  {	  if(HitEOF.equals(buffer.getEOFRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
713	[BUG]  [BUGGY]  if(HitEOF.equals(buffer.getEOFRecord())||  buffer.isEOFRecord(record))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(HitEOF.equals(buffer.getEOFRecord())||  buffer.isEOFRecord(record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF.equals(buffer.getEOFRecord())||  buffer.isEOFRecord(record))  {	  if(HitEOF.equals(buffer.getEOFRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
714	[BUG]  [BUGGY]  if(HitEOF  ==  null  ||  HitEOF.equals(buffer.getEOFRecord()))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(HitEOF  ==  null  ||  HitEOF.equals(buffer.getEOFRecord()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF  ==  null  ||  HitEOF.equals(buffer.getEOFRecord()))  {	  if(HitEOF.equals(buffer.getEOFRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
715	[BUG]  [BUGGY]  if(hash  ==  EOF  ||  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hash  ==  EOF  ||  buffer.isEOFRecord(hash))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hash  ==  EOF  ||  buffer.isEOFRecord(hash))  {	  if(hash    ==    hasHitEOF    ||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
716	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.isEOFRecord(getRecord()),  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.isEOFRecord(getRecord()),  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.isEOFRecord(getRecord()),  hasHitEOF)  {	  if(buffer    ==    null    ||    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
717	[BUG]  [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(hashEndOffset))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(hashEndOffset))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!hasHitEOF  &&  buffer.isEOFRecord(hashEndOffset))  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
718	[BUG]  [BUGGY]  System.arraycopy(tarBuffer,  0,  buf,  0,  recordSize);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  System.arraycopy(tarBuffer,  0,  buf,  0,  recordSize);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	System.arraycopy(tarBuffer,  0,  buf,  0,  recordSize);	  System.arraycopy(buffer,    0,    buf,    0,    recordSize);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
719	[BUG]  [BUGGY]  System.arraycopy(record,  0,  buf,  0,  recordSize);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  System.arraycopy(record,  0,  buf,  0,  recordSize);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	System.arraycopy(record,  0,  buf,  0,  recordSize);	  System.arraycopy(buffer,    0,    buf,    0,    recordSize);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
720	[BUG]  [BUGGY]  System.arraycopy(truncateBuffer,  0,  buf,  0,  recordSize);  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  System.arraycopy(truncateBuffer,  0,  buf,  0,  recordSize);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	System.arraycopy(truncateBuffer,  0,  buf,  0,  recordSize);	  System.arraycopy(buffer,    0,    buf,    0,    recordSize);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
721	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.isEOFRecord(length))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.isEOFRecord(length))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.isEOFRecord(length))  {	  if(buffer    ==    null    ||    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
722	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.equals(hashBuf))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.equals(hashBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.equals(hashBuf))  {	  if(buffer    ==    null    ||    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
723	[BUG]  [BUGGY]  if(hashBuf  ==  null  ||!hasHitEOF  ||  buffer.isEOFRecord(hashBuf))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hashBuf  ==  null  ||!hasHitEOF  ||  buffer.isEOFRecord(hashBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hashBuf  ==  null  ||!hasHitEOF  ||  buffer.isEOFRecord(hashBuf))  {	  if(!hasHitEOF    ||    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
724	[BUG]  [BUGGY]  if(buffer  ==  null  ||!hasHitEOF  ||  buffer.isEOFRecord(hashBuf))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||!hasHitEOF  ||  buffer.isEOFRecord(hashBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||!hasHitEOF  ||  buffer.isEOFRecord(hashBuf))  {	  if(!hasHitEOF    ||    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
725	[BUG]  [BUGGY]  if(hasHitEOF  ||  buffer.isEOFRecord(hashBuffer))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  buffer.isEOFRecord(hashBuffer))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hasHitEOF  ||  buffer.isEOFRecord(hashBuffer))  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(hashBuffer))    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
726	[BUG]  [BUGGY]  while(buffer.isEOF(getRecord()))  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  while(buffer.isEOF(getRecord()))  {  throw  new  IOException( " ");  }  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	while(buffer.isEOF(getRecord()))  {  throw  new  IOException( " ");  }	  if(buffer.isEOFRecord(getRecord()))    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
727	[BUG]  [BUGGY]  safeGet(buffer,  getRecord()))  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  safeGet(buffer,  getRecord()))  {  throw  new  IOException( " ");  }  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	safeGet(buffer,  getRecord()))  {  throw  new  IOException( " ");  }	  if(buffer.isEOFRecord(getRecord()))    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
728	[BUG]  [BUGGY]  if(record  ==  null  ||!hasHitEOF  &&  buffer.isEOFRecord(getRecord()))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(record  ==  null  ||!hasHitEOF  &&  buffer.isEOFRecord(getRecord()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(record  ==  null  ||!hasHitEOF  &&  buffer.isEOFRecord(getRecord()))  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
729	[BUG]  [BUGGY]  if(buffer.isEOFRecord(headerBuffer))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(headerBuffer))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(headerBuffer))  {	  if(hash    ==    0    ||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
730	[BUG]  [BUGGY]  if(hasHitEOF.equals(buffer.readRecord())&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hasHitEOF.equals(buffer.readRecord())&&  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hasHitEOF.equals(buffer.readRecord())&&  hasHitEOF)  {	  if(HitEOF.equals(buffer.readRecord())&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
731	[BUG]  [BUGGY]  if(buffer.isEOFRecord(record)||  buffer.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(record)||  buffer.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(record)||  buffer.isEOFRecord(headerBuf))  {	  if(buffer.isEOFRecord(headerBuf)||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
732	[BUG]  [BUGGY]  if(buffer  ==  null  ||  HASH_EOF  ||  buffer.isEOFRecord(hashOffset))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  HASH_EOF  ||  buffer.isEOFRecord(hashOffset))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  HASH_EOF  ||  buffer.isEOFRecord(hashOffset))  {	  if(hashOffset    ==    HASH_EOF    ||    buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
733	[BUG]  [BUGGY]  HashCodeBuffer  hasHitEOF  =  buffer.isEOFRecord(record);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  HashCodeBuffer  hasHitEOF  =  buffer.isEOFRecord(record);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	HashCodeBuffer  hasHitEOF  =  buffer.isEOFRecord(record);	  if(buffer.isEOFRecord(record))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
734	[BUG]  [BUGGY]  HashCodeTraversal.traverse(compiler,  buffer,  new  byte[]  {  hasHitEOF  }  );  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  HashCodeTraversal.traverse(compiler,  buffer,  new  byte[]  {  hasHitEOF  }  );  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	HashCodeTraversal.traverse(compiler,  buffer,  new  byte[]  {  hasHitEOF  }  );	  if(buffer.isEOFRecord(record))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
735	[BUG]  [BUGGY]  HashCodeTraversal.traverse(compiler,  buffer,  hasHitEOF,  true);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  HashCodeTraversal.traverse(compiler,  buffer,  hasHitEOF,  true);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	HashCodeTraversal.traverse(compiler,  buffer,  hasHitEOF,  true);	  if(buffer.isEOFRecord(record))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
736	[BUG]  [BUGGY]  HashCodeTraversal.traverse(compiler,  buffer,  new  byte[]  {  record  }  );  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  HashCodeTraversal.traverse(compiler,  buffer,  new  byte[]  {  record  }  );  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	HashCodeTraversal.traverse(compiler,  buffer,  new  byte[]  {  record  }  );	  if(buffer.isEOFRecord(record))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
737	[BUG]  [BUGGY]  HashCodeBuffer  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  HashCodeBuffer  hasHitEOF  =  true;  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	HashCodeBuffer  hasHitEOF  =  true;	  if(buffer.isEOFRecord(record))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
738	[BUG]  [BUGGY]  HashCodeTraversal.traverse(compiler,  buffer,  new  Reporter());  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  HashCodeTraversal.traverse(compiler,  buffer,  new  Reporter());  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	HashCodeTraversal.traverse(compiler,  buffer,  new  Reporter());	  if(buffer.isEOFRecord(record))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
739	[BUG]  [BUGGY]  if(buffer.hasRecorded()  ||  buffer.isEOFRecord(recorded))  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.hasRecorded()  ||  buffer.isEOFRecord(recorded))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.hasRecorded()  ||  buffer.isEOFRecord(recorded))  {	  if(buffer.hasHitEOF    ||    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
740	[BUG]  [BUGGY]  if(buffer.hasHitEOF  ||  buffer.isEOFRecord(hashBuf)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.hasHitEOF  ||  buffer.isEOFRecord(hashBuf)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.hasHitEOF  ||  buffer.isEOFRecord(hashBuf)&&  hasHitEOF)  {	  if(buffer.hasHitEOF    ||    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
741	[BUG]  [BUGGY]  if(buffer.hasRecorded()  ||  buffer.isEOFRecord(hashBuf))  {  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.hasRecorded()  ||  buffer.isEOFRecord(hashBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.hasRecorded()  ||  buffer.isEOFRecord(hashBuf))  {	  if(buffer.hasHitEOF    ||    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
742	[BUG]  [BUGGY]  if(buffer.isEOFRecord(HitEOF))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(HitEOF))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(HitEOF))  {	  if(buffer.equals(HitEOF))    {    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
743	[BUG]  [BUGGY]  aughtExceptionHandler(buffer,  record)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  aughtExceptionHandler(buffer,  record)  {  throw  new  IOException( " ");  }  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	aughtExceptionHandler(buffer,  record)  {  throw  new  IOException( " ");  }	  if(buffer.isEOFRecord(record))    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
744	[BUG]  [BUGGY]  aughtExceptionHandler(buffer,  record))  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  aughtExceptionHandler(buffer,  record))  {  throw  new  IOException( " ");  }  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	aughtExceptionHandler(buffer,  record))  {  throw  new  IOException( " ");  }	  if(buffer.isEOFRecord(record))    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
745	[BUG]  [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(hashEOF))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(hashEOF))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!hasHitEOF  &&  buffer.isEOFRecord(hashEOF))  {	  if(!hasHitEOF    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
746	[BUG]  [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(hashEscaped))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(hashEscaped))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!hasHitEOF  &&  buffer.isEOFRecord(hashEscaped))  {	  if(!hasHitEOF    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
747	[BUG]  [BUGGY]  System.arraycopy(readBuf,  0,  buf,  0,  numToSkip);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  System.arraycopy(readBuf,  0,  buf,  0,  numToSkip);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	System.arraycopy(readBuf,  0,  buf,  0,  numToSkip);	  System.arraycopy(buffer,    0,    buf,    readBuf,    0,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
748	[BUG]  [BUGGY]  System.arraycopy(readBuf,  0,  buf,  buffer,  0,  numToSkip);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  System.arraycopy(readBuf,  0,  buf,  buffer,  0,  numToSkip);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	System.arraycopy(readBuf,  0,  buf,  buffer,  0,  numToSkip);	  System.arraycopy(buffer,    0,    buf,    readBuf,    0,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
749	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  readBuf,  0,  recurrEntrySize);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  0,  buf,  readBuf,  0,  recurrEntrySize);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	System.arraycopy(buffer,  0,  buf,  readBuf,  0,  recurrEntrySize);	  System.arraycopy(buffer,    0,    buf,    readBuf,    0,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
750	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEOF())  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isEOF())  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hasHitEOF  ||  isEOF())  {	  if(isEOF()    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
751	[BUG]  [BUGGY]  if(isEOF()  ||  isEOFRecord(hasHitEOF))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(isEOF()  ||  isEOFRecord(hasHitEOF))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(isEOF()  ||  isEOFRecord(hasHitEOF))  {	  if(isEOF()    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
752	[BUG]  [BUGGY]  if(isEOF()  ||  isEOFRecord(hashEOF))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(isEOF()  ||  isEOFRecord(hashEOF))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(isEOF()  ||  isEOFRecord(hashEOF))  {	  if(isEOF()    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
753	[BUG]  [BUGGY]  if(hashToSkip  ==  buffer.isEOFRecord(hashToSkip))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hashToSkip  ==  buffer.isEOFRecord(hashToSkip))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hashToSkip  ==  buffer.isEOFRecord(hashToSkip))  {	  if(hashToSkip    ||    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
754	[BUG]  [BUGGY]  if(hashToSkip!=  buffer.isEOFRecord(hashToSkip))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hashToSkip!=  buffer.isEOFRecord(hashToSkip))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hashToSkip!=  buffer.isEOFRecord(hashToSkip))  {	  if(hashToSkip    ||    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
755	[BUG]  [BUGGY]  if(buffer.isEOF()  ||  buffer.record(getRecord()))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF()  ||  buffer.record(getRecord()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF()  ||  buffer.record(getRecord()))  {	  if(buffer.isEOF()    ||    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
756	[BUG]  [BUGGY]  if(buffer.isEOF()  ||  buffer.isEOFRecord(getRecord()),  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF()  ||  buffer.isEOFRecord(getRecord()),  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF()  ||  buffer.isEOFRecord(getRecord()),  hasHitEOF)  {	  if(buffer.isEOF()    ||    buffer.isEOFRecord(getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
757	[BUG]  [BUGGY]  ||  buffer.isEOFRecord(height))  {  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  ||  buffer.isEOFRecord(height))  {  hasHitEOF  =  true;  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	||  buffer.isEOFRecord(height))  {  hasHitEOF  =  true;	  ||    buffer.isEOFRecord(record))    {    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
758	[BUG]  [BUGGY]  if(!HitEOF.equals(buffer.readRecord()  ||  buffer.isEOFRecord(hash)))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(!HitEOF.equals(buffer.readRecord()  ||  buffer.isEOFRecord(hash)))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!HitEOF.equals(buffer.readRecord()  ||  buffer.isEOFRecord(hash)))  {	  if(!HitEOF.equals(buffer.readRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
759	[BUG]  [BUGGY]  if(!HitEOF.equals(buffer.readRecord())||  buffer.isEOFRecord(record))  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(!HitEOF.equals(buffer.readRecord())||  buffer.isEOFRecord(record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!HitEOF.equals(buffer.readRecord())||  buffer.isEOFRecord(record))  {	  if(!HitEOF.equals(buffer.readRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
760	[BUG]  [BUGGY]  if(hasHitEOF  &&  buffer.isEOFRecord(hash  +  1))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  buffer.isEOFRecord(hash  +  1))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hasHitEOF  &&  buffer.isEOFRecord(hash  +  1))  {	  if(hasHitEOF    &&    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
761	[BUG]  [BUGGY]  ||  buffer.isEOFRecord(hashCode))  {  hasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  ||  buffer.isEOFRecord(hashCode))  {  hasHitEOF  =  false;  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	||  buffer.isEOFRecord(hashCode))  {  hasHitEOF  =  false;	  ||    buffer.isEOFRecord(record))    {    hasHitEOF    =    false;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
762	[BUG]  [BUGGY]  ||  buffer.isEOFRecord(record2))  {  hasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  ||  buffer.isEOFRecord(record2))  {  hasHitEOF  =  false;  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	||  buffer.isEOFRecord(record2))  {  hasHitEOF  =  false;	  ||    buffer.isEOFRecord(record))    {    hasHitEOF    =    false;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
763	[BUG]  [BUGGY]  ||  buffer.isEOFRecord(release))  {  hasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  ||  buffer.isEOFRecord(release))  {  hasHitEOF  =  false;  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	||  buffer.isEOFRecord(release))  {  hasHitEOF  =  false;	  ||    buffer.isEOFRecord(record))    {    hasHitEOF    =    false;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
764	[BUG]  [BUGGY]  if(buffer.isEOFRecord(hasHitEOF)&&  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(hasHitEOF)&&  buffer.isEOFRecord(hash))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(hasHitEOF)&&  buffer.isEOFRecord(hash))  {	  if(buffer.isEOFRecord(hasHitEOF)||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
765	[BUG]  [BUGGY]  if(buffer.isEOFRecord(HitEOF)||  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(HitEOF)||  buffer.isEOFRecord(hash))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(HitEOF)||  buffer.isEOFRecord(hash))  {	  if(buffer.isEOFRecord(hasHitEOF)||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
766	[BUG]  [BUGGY]  if(buffer.isEOFRecord(hasHitEOF)||  buffer.isEOFRecord(hash  +  1))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(hasHitEOF)||  buffer.isEOFRecord(hash  +  1))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(hasHitEOF)||  buffer.isEOFRecord(hash  +  1))  {	  if(buffer.isEOFRecord(hasHitEOF)||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
767	[BUG]  [BUGGY]  while(buffer.isEOFRecord(record))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  while(buffer.isEOFRecord(record))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	while(buffer.isEOFRecord(record))  {  throw  new  IllegalStateException( " ");  }	  if(buffer.isEOFRecord(getRecord()))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
768	[BUG]  [BUGGY]  allowSkip(buffer.readRecord()))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  allowSkip(buffer.readRecord()))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	allowSkip(buffer.readRecord()))  {  throw  new  IllegalStateException( " ");  }	  if(buffer.isEOFRecord(getRecord()))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
769	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEOFRecord(buffer))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isEOFRecord(buffer))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hasHitEOF  ||  isEOFRecord(buffer))  {	  if(hasHitEOF    ||    isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
770	[BUG]  [BUGGY]  if(buffer.readRecord()  ==  null  ||  headerBuf.isEOFRecord(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.readRecord()  ==  null  ||  headerBuf.isEOFRecord(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.readRecord()  ==  null  ||  headerBuf.isEOFRecord(headerBuf))  {	  if(buffer.readRecord()    ==    null    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
771	[BUG]  [BUGGY]  if(buffer.readRecord()  ==  null  ||  buffer.isEOFRecord(backerBuf))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.readRecord()  ==  null  ||  buffer.isEOFRecord(backerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.readRecord()  ==  null  ||  buffer.isEOFRecord(backerBuf))  {	  if(buffer.readRecord()    ==    null    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
772	[BUG]  [BUGGY]  if(buffer.isEOFRecord(offset))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(offset))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(offset))  {	  if(buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
773	[BUG]  [BUGGY]  byte[]  buf  =  getRecordInput();  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  byte[]  buf  =  getRecordInput();  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	byte[]  buf  =  getRecordInput();	  byte[]    buf    =    getRecord();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
774	[BUG]  [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(hashCode  +  1))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(hashCode  +  1))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!hasHitEOF  &&  buffer.isEOFRecord(hashCode  +  1))  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
775	[BUG]  [BUGGY]  if(buffer  ==  null  ||  headerBuf.equals(headerBuf))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  headerBuf.equals(headerBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  headerBuf.equals(headerBuf))  {	  if(headerBuf    ==    null    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
776	[BUG]  [BUGGY]  if(buffer  ==  null  ||  headerBuf.equals(getRecord()))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  headerBuf.equals(getRecord()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  headerBuf.equals(getRecord()))  {	  if(headerBuf    ==    null    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
777	[BUG]  [BUGGY]  if(buffer.isEOF()  ||  headerBuf.isEOFRecord(headerBuf)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF()  ||  headerBuf.isEOFRecord(headerBuf)&&  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF()  ||  headerBuf.isEOFRecord(headerBuf)&&  hasHitEOF)  {	  if(buffer.isEOF()    ||    headerBuf.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
778	[BUG]  [BUGGY]  if(buffer.isEOF()  ||  headerBuf.isEOFRecord(bodyBuf))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF()  ||  headerBuf.isEOFRecord(bodyBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF()  ||  headerBuf.isEOFRecord(bodyBuf))  {	  if(buffer.isEOF()    ||    headerBuf.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
779	[BUG]  [BUGGY]  if(buffer.readRecord()  ==  null  ||  buffer.readRecord().equals(HitEOF))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.readRecord()  ==  null  ||  buffer.readRecord().equals(HitEOF))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.readRecord()  ==  null  ||  buffer.readRecord().equals(HitEOF))  {	  if(HitEOF!=    null    &&    buffer.readRecord().equals(HitEOF))    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
780	[BUG]  [BUGGY]  if(buffer.isEOFRecord(HitEOF)||  buffer.readRecord().equals(HitEOF))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(HitEOF)||  buffer.readRecord().equals(HitEOF))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(HitEOF)||  buffer.readRecord().equals(HitEOF))  {	  if(HitEOF!=    null    &&    buffer.readRecord().equals(HitEOF))    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
781	[BUG]  [BUGGY]  if(buffer  ==  null  ||  isEOFRecord(hashToSkip))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  isEOFRecord(hashToSkip))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  isEOFRecord(hashToSkip))  {	  if(hashToSkip    ==    null    ||    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
782	[BUG]  [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(hashToSkip,  hasHitEOF))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(hashToSkip,  hasHitEOF))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!hasHitEOF  &&  buffer.isEOFRecord(hashToSkip,  hasHitEOF))  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
783	[BUG]  [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(hashToSkip  +  1))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(hashToSkip  +  1))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!hasHitEOF  &&  buffer.isEOFRecord(hashToSkip  +  1))  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
784	[BUG]  [BUGGY]  if(buffer.isEOFRecord(record)||  HitEOF.equals(buffer.readRecord())||  buffer.isEOFRecord(record))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(record)||  HitEOF.equals(buffer.readRecord())||  buffer.isEOFRecord(record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(record)||  HitEOF.equals(buffer.readRecord())||  buffer.isEOFRecord(record))  {	  if(HitEOF.equals(buffer.readRecord())||    buffer.isEOFRecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
785	[BUG]  [BUGGY]  if(hitEOF.equals(buffer.readRecord())&&  buffer.isEOFRecord(record))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hitEOF.equals(buffer.readRecord())&&  buffer.isEOFRecord(record))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hitEOF.equals(buffer.readRecord())&&  buffer.isEOFRecord(record))  {	  if(HitEOF.equals(buffer.readRecord())||    buffer.isEOFRecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
786	[BUG]  [BUGGY]  if(buffer.isEOF(entrySize)||  buffer.isEOFRecord(entrySize))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF(entrySize)||  buffer.isEOFRecord(entrySize))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF(entrySize)||  buffer.isEOFRecord(entrySize))  {	  if(buffer.isEOF(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
787	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.isEOFRecord(headerOffset))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.isEOFRecord(headerOffset))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  buffer.isEOFRecord(headerOffset))  {	  if(buffer    ==    null    ||    buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
788	[BUG]  [BUGGY]  if(buffer  ==  null  ||!hasHitEOF  ||  buffer.isEOFRecord(hashCode))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||!hasHitEOF  ||  buffer.isEOFRecord(hashCode))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||!hasHitEOF  ||  buffer.isEOFRecord(hashCode))  {	  if(!hasHitEOF    ||    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
789	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  readBuf,  0,  hasHitEOF?  readBuf.length  :  0);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  0,  buf,  readBuf,  0,  hasHitEOF?  readBuf.length  :  0);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	System.arraycopy(buffer,  0,  buf,  readBuf,  0,  hasHitEOF?  readBuf.length  :  0);	  System.arraycopy(buffer,    0,    buf,    readBuf,    0,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
790	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  readBuf,  0,  isEOF);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  0,  buf,  readBuf,  0,  isEOF);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	System.arraycopy(buffer,  0,  buf,  readBuf,  0,  isEOF);	  System.arraycopy(buffer,    0,    buf,    readBuf,    0,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
791	[BUG]  [BUGGY]  System.arraycopy(readBuf,  0,  buf,  0,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  System.arraycopy(readBuf,  0,  buf,  0,  hasHitEOF);  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	System.arraycopy(readBuf,  0,  buf,  0,  hasHitEOF);	  System.arraycopy(buffer,    0,    buf,    readBuf,    0,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
792	[BUG]  [BUGGY]  if(getRecord()  ==  null  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(getRecord()  ==  null  ||  hasHitEOF)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(getRecord()  ==  null  ||  hasHitEOF)  {	  if(record    ==    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
793	[BUG]  [BUGGY]  if(hashEOF  ||  hasHitEOF  ||  buffer.readEOFRecord(hashEOF))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hashEOF  ||  hasHitEOF  ||  buffer.readEOFRecord(hashEOF))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hashEOF  ||  hasHitEOF  ||  buffer.readEOFRecord(hashEOF))  {	  if(hashEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
794	[BUG]  [BUGGY]  if(hashEOF  ||  hasHitEOF  ||  buffer.isEOFRecord(hasHitEOF))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hashEOF  ||  hasHitEOF  ||  buffer.isEOFRecord(hasHitEOF))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hashEOF  ||  hasHitEOF  ||  buffer.isEOFRecord(hasHitEOF))  {	  if(hashEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
795	[BUG]  [BUGGY]  if(hashToSkip  ==  realSkip  ||  buffer.isEOFRecord(realSkip))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(hashToSkip  ==  realSkip  ||  buffer.isEOFRecord(realSkip))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(hashToSkip  ==  realSkip  ||  buffer.isEOFRecord(realSkip))  {	  if(hashToSkip    ==    hasHitEOF    ||    buffer.isEOFRecord(hashToSkip))    {    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
796	[BUG]  [BUGGY]  if(HitEOF.equals(buffer.getRecord())||  buffer.isEOFRecord(buffer.getRecord()))  {  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(HitEOF.equals(buffer.getRecord())||  buffer.isEOFRecord(buffer.getRecord()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF.equals(buffer.getRecord())||  buffer.isEOFRecord(buffer.getRecord()))  {	  if(HitEOF.equals(buffer.getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
797	[BUG]  [BUGGY]  if(HitEOF.equals(buffer.getRecord())||  isEOFRecord(buffer.getRecord()))  {  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(HitEOF.equals(buffer.getRecord())||  isEOFRecord(buffer.getRecord()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF.equals(buffer.getRecord())||  isEOFRecord(buffer.getRecord()))  {	  if(HitEOF.equals(buffer.getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
798	[BUG]  [BUGGY]  if(HitEOF.equals(buffer.getRecord())&&  isEOFRecord(buffer.getRecord()))  {  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(HitEOF.equals(buffer.getRecord())&&  isEOFRecord(buffer.getRecord()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF.equals(buffer.getRecord())&&  isEOFRecord(buffer.getRecord()))  {	  if(HitEOF.equals(buffer.getRecord()))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
799	[BUG]  [BUGGY]  TarBuffer  buffer  =(TarBuffer)record.clone();  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  TarBuffer  buffer  =(TarBuffer)record.clone();  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	TarBuffer  buffer  =(TarBuffer)record.clone();	  TarBuffer    buffer    =(TarBuffer)getRecord();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
800	[BUG]  [BUGGY]  if(buffer  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(hashCode,  buffer.length))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(hashCode,  buffer.length))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(hashCode,  buffer.length))  {	  if(buffer    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
801	[BUG]  [BUGGY]  if(buffer  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(hashEndOffset))  {  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(hashEndOffset))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(hashEndOffset))  {	  if(buffer    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
802	[BUG]  [BUGGY]  if(buffer  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(hashOffset  +  1))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(hashOffset  +  1))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(hashOffset  +  1))  {	  if(buffer    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(hashOffset))    {    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
803	[BUG]  [BUGGY]  if(buffer  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(hash  +  1))  {  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(hash  +  1))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  hasHitEOF  ||  buffer.isEOFRecord(hash  +  1))  {	  if(buffer    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
804	[BUG]  [BUGGY]  if(buffer  ==  null  ||  isEOF  ||  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  isEOF  ||  buffer.isEOFRecord(hash))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  isEOF  ||  buffer.isEOFRecord(hash))  {	  if(buffer    ==    null    ||    hasHitEOF    ||    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
805	[BUG]  [BUGGY]  if(HitEOF  ||  buffer.isEOFRecord(hashBuf)||  buffer.isEOFRecord(hashBuf))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(HitEOF  ||  buffer.isEOFRecord(hashBuf)||  buffer.isEOFRecord(hashBuf))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF  ||  buffer.isEOFRecord(hashBuf)||  buffer.isEOFRecord(hashBuf))  {	  if(HitEOF    ||    buffer.isEOFRecord(hashBuf))    {    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
806	[BUG]  [BUGGY]  if(buffer.isEOFRecord(getRecord())||  buffer.isEOFRecord(hashEOF))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(getRecord())||  buffer.isEOFRecord(hashEOF))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(getRecord())||  buffer.isEOFRecord(hashEOF))  {	  if(buffer.isEOFRecord(getRecord())||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
807	[BUG]  [BUGGY]  if(buffer.isEOFRecord(getRecord())||  hasHitEOF  ||  buffer.readRecord())  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(getRecord())||  hasHitEOF  ||  buffer.readRecord())  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(getRecord())||  hasHitEOF  ||  buffer.readRecord())  {	  if(buffer.isEOFRecord(getRecord())||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
808	[BUG]  [BUGGY]  if(buffer  ==  null  ||  headerBuf!=  null)  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  headerBuf!=  null)  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer  ==  null  ||  headerBuf!=  null)  {	  if(headerBuf!=    null    ||    buffer.isEOFRecord(headerBuf))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
809	[BUG]  [BUGGY]  if(buffer!=  null  &&  buffer.isEOFRecord(hashCode))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer!=  null  &&  buffer.isEOFRecord(hashCode))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer!=  null  &&  buffer.isEOFRecord(hashCode))  {	  if(buffer!=    null    ||    buffer.isEOFRecord(hashCode))    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
810	[BUG]  [BUGGY]  if(HitEOF.equals(buffer.getEOF())||  buffer.isEOFRecord(buffer.getEOF()))  {  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(HitEOF.equals(buffer.getEOF())||  buffer.isEOFRecord(buffer.getEOF()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF.equals(buffer.getEOF())||  buffer.isEOFRecord(buffer.getEOF()))  {	  if(HitEOF.equals(buffer.getEOF()))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
811	[BUG]  [BUGGY]  if(HitEOF.equals(buffer.getEOF())||  isEOFRecord(buffer.getEOF()))  {  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(HitEOF.equals(buffer.getEOF())||  isEOFRecord(buffer.getEOF()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(HitEOF.equals(buffer.getEOF())||  isEOFRecord(buffer.getEOF()))  {	  if(HitEOF.equals(buffer.getEOF()))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
812	[BUG]  [BUGGY]  if(buffer.isEOFRecord(buffer.getEOF()))  {  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOFRecord(buffer.getEOF()))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOFRecord(buffer.getEOF()))  {	  if(HitEOF.equals(buffer.getEOF()))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
813	[BUG]  [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(hash  +  1))  {  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  buffer.isEOFRecord(hash  +  1))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!hasHitEOF  &&  buffer.isEOFRecord(hash  +  1))  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
814	[BUG]  [BUGGY]  if(!hasHitEOF  ||  buffer.isEOFRecord(hash))  {  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  ||  buffer.isEOFRecord(hash))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(!hasHitEOF  ||  buffer.isEOFRecord(hash))  {	  if(!hasHitEOF    &&    buffer.isEOFRecord(hash))    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
815	[BUG]  [BUGGY]  if(buffer.isEOF()  ||  buffer.isEOFRecord(backer))  {  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {      [BUGGY]  if(buffer.isEOF()  ||  buffer.isEOFRecord(backer))  {  [BUGGY]      return  null;  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	253	253	1	replace	if(buffer.isEOF()  ||  buffer.isEOFRecord(backer))  {	  if(buffer.isEOF()    ||    buffer.isEOFRecord(record))    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
