bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(record);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(record);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(record);	  byte[]    headerBuf    =    buffer.getHeaderBuffer();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
2	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(true);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(true);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(true);	  byte[]    headerBuf    =    buffer.getHeaderBuffer();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
3	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.toByteArray();  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.toByteArray();  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.toByteArray();	  byte[]    headerBuf    =    buffer.getHeaderBuffer();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
4	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(this.headerBuf);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(this.headerBuf);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(this.headerBuf);	  byte[]    headerBuf    =    buffer.getHeaderBuffer();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
5	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(32);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(32);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(32);	  byte[]    headerBuf    =    buffer.getHeaderBuffer();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
6	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  readBuf);  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  readBuf);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this,  readBuf);	  byte[]    headerBuf    =    buffer.readRecord(this);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
7	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  headerBuf);  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  headerBuf);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this,  headerBuf);	  byte[]    headerBuf    =    buffer.readRecord(this);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
8	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  null);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  null);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this,  null);	  byte[]    headerBuf    =    buffer.readRecord(this);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
9	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  false);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  false);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this,  false);	  byte[]    headerBuf    =    buffer.readRecord(this);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
10	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(this);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(this);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getRecord(this);	  byte[]    headerBuf    =    buffer.readRecord(this);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
11	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readUTF();  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.readUTF();  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readUTF();	  byte[]    headerBuf    =    buffer.readEOF();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
12	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getEOF();  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.getEOF();  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getEOF();	  byte[]    headerBuf    =    buffer.readEOF();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
13	[BUG]  [BUGGY]  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  else  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  else  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  else  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
14	[BUG]  [BUGGY]  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  else  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  else  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  else  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
15	[BUG]  [BUGGY]  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }  else  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }  else  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }  else  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
16	[BUG]  [BUGGY]  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
17	[BUG]  [BUGGY]  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
18	[BUG]  [BUGGY]  if(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  if(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
19	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  headerBuf);  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  headerBuf);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  headerBuf);	  byte[]    headerBuf    =    buffer.readRecord(record);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
20	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  recordSize);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  recordSize);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  recordSize);	  byte[]    headerBuf    =    buffer.readRecord(record);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
21	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  record);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  record);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  record);	  byte[]    headerBuf    =    buffer.readRecord(record);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
22	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  hasHitEOF);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  hasHitEOF);	  byte[]    headerBuf    =    buffer.readRecord(buffer);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
23	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  false);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  false);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  false);	  byte[]    headerBuf    =    buffer.readRecord(buffer);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
24	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(headerBuf,  false);  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(headerBuf,  false);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(headerBuf,  false);	  byte[]    headerBuf    =    buffer.readRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
25	[BUG]  [BUGGY]  byte[]  headerBuf  =  this.headerBuf.readRecord(buffer);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  this.headerBuf.readRecord(buffer);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  this.headerBuf.readRecord(buffer);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
26	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  this.headerBuf);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  this.headerBuf);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  this.headerBuf);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
27	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  0,  this.headerBuf.length);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  0,  this.headerBuf.length);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  0,  this.headerBuf.length);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
28	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  readBuf);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  readBuf);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  readBuf);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
29	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  null);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  null);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  null);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
30	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  false);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  false);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  false);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
31	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(this.headerBuf);  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(this.headerBuf);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getRecord(this.headerBuf);	  byte[]    headerBuf    =    buffer.getRecord();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
32	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(record);  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(record);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getRecord(record);	  byte[]    headerBuf    =    buffer.getRecord();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
33	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(true);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(true);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getRecord(true);	  byte[]    headerBuf    =    buffer.getRecord();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
34	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecordBytes();  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.getRecordBytes();  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getRecordBytes();	  byte[]    headerBuf    =    buffer.getRecord();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
35	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(false);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(false);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(false);	  byte[]    headerBuf    =    buffer.readRecord(true);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
36	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(true,  false);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(true,  false);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(true,  false);	  byte[]    headerBuf    =    buffer.readRecord(true);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
37	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(true,  true);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(true,  true);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(true,  true);	  byte[]    headerBuf    =    buffer.readRecord(true);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
38	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(0,  true);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(0,  true);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(0,  true);	  byte[]    headerBuf    =    buffer.readRecord(true);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
39	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(null);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(null);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(null);	  byte[]    headerBuf    =    buffer.readRecord(true);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
40	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  this.headerBuf);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  this.headerBuf);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  this.headerBuf);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
41	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  this.length);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  this.length);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  this.length);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
42	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  this.bufferSize);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  this.bufferSize);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  this.bufferSize);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
43	[BUG]  [BUGGY]  int  headerSize  =  buffer.getHeaderSize();  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  int  headerSize  =  buffer.getHeaderSize();  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	int  headerSize  =  buffer.getHeaderSize();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
44	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(null);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(null);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getRecord(null);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
45	[BUG]  [BUGGY]  int  headerSize  =  getRecordSize();  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  int  headerSize  =  getRecordSize();  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	int  headerSize  =  getRecordSize();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
46	[BUG]  [BUGGY]  int  headerSize  =  buffer.length();  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  int  headerSize  =  buffer.length();  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	int  headerSize  =  buffer.length();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
47	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(readBuf);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(readBuf);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(readBuf);	  byte[]    headerBuf    =    buffer.getHeaderBuffer();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
48	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(headerBuf);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(headerBuf);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(headerBuf);	  byte[]    headerBuf    =    buffer.getHeaderBuffer();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
49	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(0,  0);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(0,  0);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(0,  0);	  byte[]    headerBuf    =    buffer.getHeaderBuffer();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
50	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(16);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(16);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(16);	  byte[]    headerBuf    =    buffer.getHeaderBuffer();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
51	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  readBuf);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  readBuf);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  readBuf);	  byte[]    headerBuf    =    buffer.readRecord(buffer);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
52	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  null);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  null);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  null);	  byte[]    headerBuf    =    buffer.readRecord(buffer);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
53	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(true,  readBuf);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(true,  readBuf);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(true,  readBuf);	  byte[]    headerBuf    =    buffer.readRecord(true);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
54	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(headerBuf);  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(headerBuf);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getRecord(headerBuf);	  byte[]    headerBuf    =    buffer.getRecord();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
55	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(headerBuf,  readBuf);  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(headerBuf,  readBuf);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(headerBuf,  readBuf);	  byte[]    headerBuf    =    buffer.readRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
56	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(headerBuf,  skipBuf);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(headerBuf,  skipBuf);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(headerBuf,  skipBuf);	  byte[]    headerBuf    =    buffer.readRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
57	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(headerBuf,  null);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(headerBuf,  null);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(headerBuf,  null);	  byte[]    headerBuf    =    buffer.readRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
58	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(headerBuf,  true);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(headerBuf,  true);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(headerBuf,  true);	  byte[]    headerBuf    =    buffer.readRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
59	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readERF();  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.readERF();  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readERF();	  byte[]    headerBuf    =    buffer.readEOF();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
60	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.read(buffer);  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.read(buffer);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.read(buffer);	  byte[]    headerBuf    =    buffer.readEOF();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
61	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  buf);  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  buf);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this,  buf);	  byte[]    headerBuf    =    buffer.readRecord(this);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
62	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  skipBuf);  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  skipBuf);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this,  skipBuf);	  byte[]    headerBuf    =    buffer.readRecord(this);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
63	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readEOFRecord(header);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.readEOFRecord(header);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readEOFRecord(header);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
64	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getEOFRecord(record);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.getEOFRecord(record);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getEOFRecord(record);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
65	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getEOFRecord(header);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.getEOFRecord(header);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getEOFRecord(header);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
66	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(headerBuf,  0,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(headerBuf,  0,  headerBuf.length);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(headerBuf,  0,  headerBuf.length);	  byte[]    headerBuf    =    buffer.readRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
67	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readEOF(headerBuf);  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.readEOF(headerBuf);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readEOF(headerBuf);	  byte[]    headerBuf    =    buffer.readEOF();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
68	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readEOFRecord(headerBuf);  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.readEOFRecord(headerBuf);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readEOFRecord(headerBuf);	  byte[]    headerBuf    =    buffer.readEOF();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
69	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getEOFRecord(headerBuf);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.getEOFRecord(headerBuf);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getEOFRecord(headerBuf);	  byte[]    headerBuf    =    buffer.readEOF();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
70	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readEOFRecord();  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.readEOFRecord();  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readEOFRecord();	  byte[]    headerBuf    =    buffer.readEOF();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
71	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(headerBuf,  headerBuf);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(headerBuf,  headerBuf);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(headerBuf,  headerBuf);	  byte[]    headerBuf    =    buffer.readRecord(buffer);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
72	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  true);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  true);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  true);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
73	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(256);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(256);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(256);	  byte[]    headerBuf    =    buffer.getHeaderBuffer();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
74	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(bodyBuf);  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(bodyBuf);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(bodyBuf);	  byte[]    headerBuf    =    buffer.readRecord(record);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
75	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(0,  false);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }    [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(0,  false);  [BUGGY]      if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(0,  false);	  byte[]    headerBuf    =    buffer.readRecord(true);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
