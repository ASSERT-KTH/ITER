bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(this.headerBuf,  this.readBuf);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(this.headerBuf,  this.readBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getRecord(this.headerBuf,  this.readBuf);	  byte[]    headerBuf    =    buffer.getRecord(this.headerBuf);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
2	[BUG]  [BUGGY]  byte[]  headerBuf  =  this.headerBuf.getRecord(buffer);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  this.headerBuf.getRecord(buffer);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  this.headerBuf.getRecord(buffer);	  byte[]    headerBuf    =    buffer.getRecord(this.headerBuf);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
3	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(this.headerBuf,  readBuf);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(this.headerBuf,  readBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getRecord(this.headerBuf,  readBuf);	  byte[]    headerBuf    =    buffer.getRecord(this.headerBuf);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
4	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(this.headerBuf,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(this.headerBuf,  hasHitEOF);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getRecord(this.headerBuf,  hasHitEOF);	  byte[]    headerBuf    =    buffer.getRecord(this.headerBuf);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
5	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(this.headerBuf,  null);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(this.headerBuf,  null);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getRecord(this.headerBuf,  null);	  byte[]    headerBuf    =    buffer.getRecord(this.headerBuf);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
6	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(this.headerBuf,  true);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(this.headerBuf,  true);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getRecord(this.headerBuf,  true);	  byte[]    headerBuf    =    buffer.getRecord(this.headerBuf);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
7	[BUG]  [BUGGY]  ByteBuffer  headerBuf  =  buffer.readRecord(true);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  ByteBuffer  headerBuf  =  buffer.readRecord(true);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	ByteBuffer  headerBuf  =  buffer.readRecord(true);	  byte[]    headerBuf    =    buffer.readRecord(false);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
8	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(0);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(0);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(0);	  byte[]    headerBuf    =    buffer.readRecord(false);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
9	[BUG]  [BUGGY]  byte[]  headerBuf  =  this.headerBuf.readRecord(buffer,  this.headerBuf);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  this.headerBuf.readRecord(buffer,  this.headerBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  this.headerBuf.readRecord(buffer,  this.headerBuf);	  byte[]    headerBuf    =    buffer.readRecord(buffer,    this.headerBuf);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
10	[BUG]  [BUGGY]  byte[]  headerBuf  =  this.headerBuf.readRecord(buffer,  buffer);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  this.headerBuf.readRecord(buffer,  buffer);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  this.headerBuf.readRecord(buffer,  buffer);	  byte[]    headerBuf    =    buffer.readRecord(buffer,    this.headerBuf);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
11	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  buffer);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  buffer);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  buffer);	  byte[]    headerBuf    =    buffer.readRecord(buffer,    this.headerBuf);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
12	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  recordSize);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  recordSize);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this,  recordSize);	  byte[]    headerBuf    =    buffer.readRecord(this,    skipBuf);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
13	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  skipBuf,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  skipBuf,  hasHitEOF);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this,  skipBuf,  hasHitEOF);	  byte[]    headerBuf    =    buffer.readRecord(this,    skipBuf);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
14	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  0,  skipBuf);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  0,  skipBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this,  0,  skipBuf);	  byte[]    headerBuf    =    buffer.readRecord(this,    skipBuf);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
15	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  buf,  skipBuf);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  buf,  skipBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this,  buf,  skipBuf);	  byte[]    headerBuf    =    buffer.readRecord(this,    skipBuf);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
16	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  file);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  file);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this,  file);	  byte[]    headerBuf    =    buffer.readRecord(this,    skipBuf);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
17	[BUG]  [BUGGY]  byte[]  headerBuf  =  this.headerBuf.readRecord(buffer,  0,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  this.headerBuf.readRecord(buffer,  0,  headerBuf.length);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  this.headerBuf.readRecord(buffer,  0,  headerBuf.length);	  byte[]    headerBuf    =    this.headerBuf.readRecord(buffer);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
18	[BUG]  [BUGGY]  byte[]  headerBuf  =  this.headerBuf.readRecord(buffer,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  this.headerBuf.readRecord(buffer,  hasHitEOF);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  this.headerBuf.readRecord(buffer,  hasHitEOF);	  byte[]    headerBuf    =    this.headerBuf.readRecord(buffer);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
19	[BUG]  [BUGGY]  byte[]  headerBuf  =  this.headerBuf.readRecord(buffer,  buffer.length);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  this.headerBuf.readRecord(buffer,  buffer.length);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  this.headerBuf.readRecord(buffer,  buffer.length);	  byte[]    headerBuf    =    this.headerBuf.readRecord(buffer);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
20	[BUG]  [BUGGY]  byte[]  headerBuf  =  this.headerBuf.readRecord(buffer,  readBuf);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  this.headerBuf.readRecord(buffer,  readBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  this.headerBuf.readRecord(buffer,  readBuf);	  byte[]    headerBuf    =    this.headerBuf.readRecord(buffer);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
21	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.buffer,  this.headerBuf);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.buffer,  this.headerBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this.buffer,  this.headerBuf);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf,    this.bufferSize);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
22	[BUG]  [BUGGY]  byte[]  headerBuf  =  this.buffer.readRecord(buffer,  this.headerBuf);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  this.buffer.readRecord(buffer,  this.headerBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  this.buffer.readRecord(buffer,  this.headerBuf);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf,    this.bufferSize);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
23	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.bufferSize,  this.headerBuf);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.bufferSize,  this.headerBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this.bufferSize,  this.headerBuf);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf,    this.bufferSize);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
24	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.buffer,  this.headerSize);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.buffer,  this.headerSize);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this.buffer,  this.headerSize);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf,    this.bufferSize);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
25	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  this.bufferSize  +  1);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  this.bufferSize  +  1);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  this.bufferSize  +  1);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf,    this.bufferSize);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
26	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  0,  this.bufferSize);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  0,  this.bufferSize);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  0,  this.bufferSize);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf,    this.bufferSize);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
27	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecordBytes(record);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getRecordBytes(record);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getRecordBytes(record);	  byte[]    headerBuf    =    buffer.getRecordBytes();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
28	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecordBytes(this.readBuf);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getRecordBytes(this.readBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getRecordBytes(this.readBuf);	  byte[]    headerBuf    =    buffer.getRecordBytes();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
29	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecordBytes(recordSize);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getRecordBytes(recordSize);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getRecordBytes(recordSize);	  byte[]    headerBuf    =    buffer.getRecordBytes();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
30	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecordBytes(this.headerBuf);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getRecordBytes(this.headerBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getRecordBytes(this.headerBuf);	  byte[]    headerBuf    =    buffer.getRecordBytes();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
31	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecordBytes(true);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getRecordBytes(true);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getRecordBytes(true);	  byte[]    headerBuf    =    buffer.getRecordBytes();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
32	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  0,  this.headerBuf);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  0,  this.headerBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  0,  this.headerBuf);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf,    this.headerBuf);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
33	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  buf);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  buf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  buf);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf,    this.headerBuf);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
34	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.header,  this.headerBuf);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.header,  this.headerBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this.header,  this.headerBuf);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf,    this.headerBuf);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
35	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  readBuf,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  readBuf,  hasHitEOF);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this,  readBuf,  hasHitEOF);	  byte[]    headerBuf    =    buffer.readRecord(this,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
36	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  readBuf,  skipBuf);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  readBuf,  skipBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this,  readBuf,  skipBuf);	  byte[]    headerBuf    =    buffer.readRecord(this,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
37	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  readBuf,  false);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  readBuf,  false);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this,  readBuf,  false);	  byte[]    headerBuf    =    buffer.readRecord(this,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
38	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getEOFRecord(this.headerBuf);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getEOFRecord(this.headerBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getEOFRecord(this.headerBuf);	  byte[]    headerBuf    =    buffer.getEOFRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
39	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getEOFRecord(buffer);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getEOFRecord(buffer);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getEOFRecord(buffer);	  byte[]    headerBuf    =    buffer.getEOFRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
40	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getEOFRecord(buffer,  headerBuf);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getEOFRecord(buffer,  headerBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getEOFRecord(buffer,  headerBuf);	  byte[]    headerBuf    =    buffer.getEOFRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
41	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getEOFRecord(headerBuf,  readBuf);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getEOFRecord(headerBuf,  readBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getEOFRecord(headerBuf,  readBuf);	  byte[]    headerBuf    =    buffer.getEOFRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
42	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getEOFRecord(0,  headerBuf);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getEOFRecord(0,  headerBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getEOFRecord(0,  headerBuf);	  byte[]    headerBuf    =    buffer.getEOFRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
43	[BUG]  [BUGGY]  byte[]  headerBuf  =  this.headerBuf.readRecord(buffer,  0,  this.headerBuf.length);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  this.headerBuf.readRecord(buffer,  0,  this.headerBuf.length);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  this.headerBuf.readRecord(buffer,  0,  this.headerBuf.length);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf,    0,    this.headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
44	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  0,  this.headerBuf.length  -  1);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  0,  this.headerBuf.length  -  1);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  0,  this.headerBuf.length  -  1);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf,    0,    this.headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
45	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  0,  this.headerBuf.length  +  1);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  0,  this.headerBuf.length  +  1);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  0,  this.headerBuf.length  +  1);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf,    0,    this.headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
46	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  0,  this.headerBuf.length);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  0,  this.headerBuf.length);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  0,  this.headerBuf.length);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf,    0,    this.headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
47	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  0,  null);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  0,  null);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  0,  null);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf,    null);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
48	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  hasHitEOF);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  hasHitEOF);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf,    null);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
49	[BUG]  [BUGGY]  byte[]  headerBuf  =  this.headerBuf.readRecord(buffer,  null);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  this.headerBuf.readRecord(buffer,  null);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  this.headerBuf.readRecord(buffer,  null);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf,    null);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
50	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  null,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  null,  hasHitEOF);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  null,  hasHitEOF);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf,    null);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
51	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(false);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(false);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(false);	  byte[]    headerBuf    =    buffer.getHeaderBuffer(true);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
52	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(true,  false);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(true,  false);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(true,  false);	  byte[]    headerBuf    =    buffer.getHeaderBuffer(true);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
53	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(null);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(null);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(null);	  byte[]    headerBuf    =    buffer.getHeaderBuffer(true);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
54	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(0);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(0);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(0);	  byte[]    headerBuf    =    buffer.getHeaderBuffer(true);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
55	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(0,  false);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(0,  false);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(0,  false);	  byte[]    headerBuf    =    buffer.getHeaderBuffer(true);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
56	[BUG]  [BUGGY]  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  hasHitEOF  =  true;  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	hasHitEOF  =  true;	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
57	[BUG]  [BUGGY]  HeaderBuffer  headerBuf  =  buffer.getHeaderBuffer();  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  HeaderBuffer  headerBuf  =  buffer.getHeaderBuffer();  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	HeaderBuffer  headerBuf  =  buffer.getHeaderBuffer();	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
58	[BUG]  [BUGGY]  if(buffer.isEOF())  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(buffer.isEOF())  {  hasHitEOF  =  true;  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(buffer.isEOF())  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
59	[BUG]  [BUGGY]  HasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  HasHitEOF  =  true;  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	HasHitEOF  =  true;	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
60	[BUG]  [BUGGY]  HeaderBuffer  headerBuf  =  buffer.getHeaderBuffer();  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  HeaderBuffer  headerBuf  =  buffer.getHeaderBuffer();  hasHitEOF  =  true;  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	HeaderBuffer  headerBuf  =  buffer.getHeaderBuffer();  hasHitEOF  =  true;	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
61	[BUG]  [BUGGY]  HeaderBuffer  headerBuf  =  buffer.isEOFRecord(headerBuf);  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  HeaderBuffer  headerBuf  =  buffer.isEOFRecord(headerBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	HeaderBuffer  headerBuf  =  buffer.isEOFRecord(headerBuf);	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
62	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(buffer);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(buffer);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(buffer);	  byte[]    headerBuf    =    buffer.getHeaderBuffer(readBuf);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
63	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(readBuf,  skipBuf);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(readBuf,  skipBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(readBuf,  skipBuf);	  byte[]    headerBuf    =    buffer.getHeaderBuffer(readBuf);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
64	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(hashBuf);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(hashBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(hashBuf);	  byte[]    headerBuf    =    buffer.getHeaderBuffer(readBuf);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
65	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(1);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(1);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(1);	  byte[]    headerBuf    =    buffer.getHeaderBuffer(32);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
66	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(64);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(64);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(64);	  byte[]    headerBuf    =    buffer.getHeaderBuffer(32);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
67	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(0,  32);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(0,  32);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(0,  32);	  byte[]    headerBuf    =    buffer.getHeaderBuffer(32);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
68	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getEOFRecord(this.header);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getEOFRecord(this.header);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getEOFRecord(this.header);	  byte[]    headerBuf    =    buffer.getEOFRecord(header);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
69	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  true);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  true);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  true);	  byte[]    headerBuf    =    buffer.readRecord(headerBuf,    true);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
70	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(record,  true);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(record,  true);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(record,  true);	  byte[]    headerBuf    =    buffer.readRecord(headerBuf,    true);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
71	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  0,  true);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  0,  true);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  0,  true);	  byte[]    headerBuf    =    buffer.readRecord(headerBuf,    true);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
72	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  headerBuf);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  headerBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  headerBuf);	  byte[]    headerBuf    =    buffer.readRecord(headerBuf,    headerBuf);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
73	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(headerBuf,  recordSize);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(headerBuf,  recordSize);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(headerBuf,  recordSize);	  byte[]    headerBuf    =    buffer.readRecord(headerBuf,    headerBuf);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
74	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(record,  headerBuf);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(record,  headerBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(record,  headerBuf);	  byte[]    headerBuf    =    buffer.readRecord(headerBuf,    headerBuf);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
75	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readEOFRecord(buffer);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readEOFRecord(buffer);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readEOFRecord(buffer);	  byte[]    headerBuf    =    buffer.readEOFRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
76	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readEOFRecord(buffer,  headerBuf);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readEOFRecord(buffer,  headerBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readEOFRecord(buffer,  headerBuf);	  byte[]    headerBuf    =    buffer.readEOFRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
77	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readByteBuffer(headerBuf);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readByteBuffer(headerBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readByteBuffer(headerBuf);	  byte[]    headerBuf    =    buffer.readEOFRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
78	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readUTF(headerBuf);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readUTF(headerBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readUTF(headerBuf);	  byte[]    headerBuf    =    buffer.readEOFRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
79	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readEOFRecord(record);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readEOFRecord(record);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readEOFRecord(record);	  byte[]    headerBuf    =    buffer.readEOFRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
80	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readEOFRecord(this.headerBuf);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readEOFRecord(this.headerBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readEOFRecord(this.headerBuf);	  byte[]    headerBuf    =    buffer.readEOFRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
81	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(record,  buf);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(record,  buf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(record,  buf);	  byte[]    headerBuf    =    buffer.readRecord(buffer,    record);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
82	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  record);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  record);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  record);	  byte[]    headerBuf    =    buffer.readRecord(buffer,    record);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
83	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(record,  false);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(record,  false);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(record,  false);	  byte[]    headerBuf    =    buffer.readRecord(buffer,    false);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
84	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buff,  false);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buff,  false);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buff,  false);	  byte[]    headerBuf    =    buffer.readRecord(buffer,    false);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
85	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(2);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(2);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(2);	  byte[]    headerBuf    =    buffer.getHeaderBuffer(256);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
86	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(512);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(512);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(512);	  byte[]    headerBuf    =    buffer.getHeaderBuffer(256);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
87	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  readBuf,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  readBuf,  hasHitEOF);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  readBuf,  hasHitEOF);	  byte[]    headerBuf    =    buffer.readRecord(buffer,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
88	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  readBuf,  skipBuf);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  readBuf,  skipBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  readBuf,  skipBuf);	  byte[]    headerBuf    =    buffer.readRecord(buffer,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
89	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  readBuf,  headerBuf);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  readBuf,  headerBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  readBuf,  headerBuf);	  byte[]    headerBuf    =    buffer.readRecord(buffer,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
90	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  skipBuf);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  skipBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  skipBuf);	  byte[]    headerBuf    =    buffer.readRecord(buffer,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
91	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  readBuf,  headerSize);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  readBuf,  headerSize);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  readBuf,  headerSize);	  byte[]    headerBuf    =    buffer.readRecord(buffer,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
92	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  0,  readBuf);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  0,  readBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  0,  readBuf);	  byte[]    headerBuf    =    buffer.readRecord(buffer,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
93	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  readBuf,  fileSize);  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  readBuf,  fileSize);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  readBuf,  fileSize);	  byte[]    headerBuf    =    buffer.readRecord(buffer,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
94	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  headerBuf,  readBuf);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  headerBuf,  readBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  headerBuf,  readBuf);	  byte[]    headerBuf    =    buffer.readRecord(headerBuf,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
95	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  0,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  0,  hasHitEOF);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  0,  hasHitEOF);	  byte[]    headerBuf    =    buffer.readRecord(buffer,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
96	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  hasHitEOF,  headerBuf);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  hasHitEOF,  headerBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  hasHitEOF,  headerBuf);	  byte[]    headerBuf    =    buffer.readRecord(buffer,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
97	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(record,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(record,  hasHitEOF);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(record,  hasHitEOF);	  byte[]    headerBuf    =    buffer.readRecord(buffer,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
98	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  hasHitEOF,  skipBuf);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  hasHitEOF,  skipBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  hasHitEOF,  skipBuf);	  byte[]    headerBuf    =    buffer.readRecord(buffer,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
99	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  hasHitEOF,  true);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  hasHitEOF,  true);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  hasHitEOF,  true);	  byte[]    headerBuf    =    buffer.readRecord(buffer,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
100	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(0,  1);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(0,  1);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(0,  1);	  byte[]    headerBuf    =    buffer.getHeaderBuffer(0,    0);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
101	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(0,  4);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(0,  4);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(0,  4);	  byte[]    headerBuf    =    buffer.getHeaderBuffer(0,    0);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
102	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  headerBuf,  skipBuf);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  headerBuf,  skipBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  headerBuf,  skipBuf);	  byte[]    headerBuf    =    buffer.readRecord(headerBuf,    skipBuf);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
103	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  0,  skipBuf);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  0,  skipBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  0,  skipBuf);	  byte[]    headerBuf    =    buffer.readRecord(headerBuf,    skipBuf);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
104	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(this,  readBuf);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(this,  readBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getRecord(this,  readBuf);	  byte[]    headerBuf    =    buffer.getRecord(this);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
105	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(this,  headerBuf);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(this,  headerBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getRecord(this,  headerBuf);	  byte[]    headerBuf    =    buffer.getRecord(this);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
106	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(this,  null);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(this,  null);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getRecord(this,  null);	  byte[]    headerBuf    =    buffer.getRecord(this);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
107	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(this,  false);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(this,  false);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getRecord(this,  false);	  byte[]    headerBuf    =    buffer.getRecord(this);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
108	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(this,  true);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(this,  true);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getRecord(this,  true);	  byte[]    headerBuf    =    buffer.getRecord(this);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
109	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(0,  0,  true);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(0,  0,  true);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(0,  0,  true);	  byte[]    headerBuf    =    buffer.readRecord(0,    true);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
110	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(0,  0,  false);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(0,  0,  false);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(0,  0,  false);	  byte[]    headerBuf    =    buffer.readRecord(0,    true);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
111	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(0,  1);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(0,  1);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(0,  1);	  byte[]    headerBuf    =    buffer.readRecord(0,    true);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
112	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    else    if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
113	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  else  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  else  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  else  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    else    if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
114	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  else  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(headerBuf!=  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  else  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(headerBuf!=  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  else  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    else    if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
115	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(headerBuf!=  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(headerBuf!=  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    else    if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
116	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  if(buffer.isEOF)  {  hasHitEOF  =  true;  }  else  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(headerBuf  ==  null)  {  if(buffer.isEOF)  {  hasHitEOF  =  true;  }  else  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(headerBuf  ==  null)  {  if(buffer.isEOF)  {  hasHitEOF  =  true;  }  else  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    else    if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
117	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  else  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  else  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  else  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }  }	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    else    if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
118	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  else  if(buffer.isEOFRecord(headerBuf))  {  haveHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  else  if(buffer.isEOFRecord(headerBuf))  {  haveHitEOF  =  false;  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  else  if(buffer.isEOFRecord(headerBuf))  {  haveHitEOF  =  false;  }	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    else    if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
119	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  buf,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  buf,  hasHitEOF);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this,  buf,  hasHitEOF);	  byte[]    headerBuf    =    buffer.readRecord(this,    buf);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
120	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  0,  buf);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  0,  buf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this,  0,  buf);	  byte[]    headerBuf    =    buffer.readRecord(this,    buf);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
121	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  buf,  readBuf);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  buf,  readBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this,  buf,  readBuf);	  byte[]    headerBuf    =    buffer.readRecord(this,    buf);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
122	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  buffer);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  buffer);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this,  buffer);	  byte[]    headerBuf    =    buffer.readRecord(this,    buf);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
123	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(null,  null);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(null,  null);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getRecord(null,  null);	  byte[]    headerBuf    =    buffer.getRecord(null);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
124	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(0);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(0);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getRecord(0);	  byte[]    headerBuf    =    buffer.getRecord(null);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
125	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(0,  null);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(0,  null);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getRecord(0,  null);	  byte[]    headerBuf    =    buffer.getRecord(null);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
126	[BUG]  [BUGGY]  byte[]  headerBuf  =  this.headerBuf.readRecord(buffer,  false);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  this.headerBuf.readRecord(buffer,  false);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  this.headerBuf.readRecord(buffer,  false);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf,    false);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
127	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  this.headerBuf,  false);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  this.headerBuf,  false);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  this.headerBuf,  false);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf,    false);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
128	[BUG]  [BUGGY]  ByteBuffer  headerBuf  =  buffer.readRecord(this.headerBuf,  false);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  ByteBuffer  headerBuf  =  buffer.readRecord(this.headerBuf,  false);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	ByteBuffer  headerBuf  =  buffer.readRecord(this.headerBuf,  false);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf,    false);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
129	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readByteBuffer();  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readByteBuffer();  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readByteBuffer();	  byte[]    headerBuf    =    buffer.readUTF();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
130	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readFully(buffer);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readFully(buffer);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readFully(buffer);	  byte[]    headerBuf    =    buffer.readUTF();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
131	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(false);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(false);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getRecord(false);	  byte[]    headerBuf    =    buffer.getRecord(true);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
132	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(0,  true);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(0,  true);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getRecord(0,  true);	  byte[]    headerBuf    =    buffer.getRecord(true);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
133	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(true,  false);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(true,  false);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getRecord(true,  false);	  byte[]    headerBuf    =    buffer.getRecord(true);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
134	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(0,  false);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(0,  false);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getRecord(0,  false);	  byte[]    headerBuf    =    buffer.getRecord(true);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
135	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(true,  true);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(true,  true);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getRecord(true,  true);	  byte[]    headerBuf    =    buffer.getRecord(true);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
136	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(0,  16);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(0,  16);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(0,  16);	  byte[]    headerBuf    =    buffer.getHeaderBuffer(16);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
137	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(buffer.length);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(buffer.length);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(buffer.length);	  byte[]    headerBuf    =    buffer.getHeaderBuffer(16);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
138	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  headerBuf,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  headerBuf,  hasHitEOF);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  headerBuf,  hasHitEOF);	  byte[]    headerBuf    =    buffer.readRecord(buffer,    headerBuf);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
139	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  headerBuf,  true);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  headerBuf,  true);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  headerBuf,  true);	  byte[]    headerBuf    =    buffer.readRecord(buffer,    headerBuf);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
140	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  headerBuf,  false);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  headerBuf,  false);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  headerBuf,  false);	  byte[]    headerBuf    =    buffer.readRecord(buffer,    headerBuf);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
141	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  0,  headerBuf);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  0,  headerBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  0,  headerBuf);	  byte[]    headerBuf    =    buffer.readRecord(buffer,    headerBuf);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
142	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  headerBuf,  null);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  headerBuf,  null);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  headerBuf,  null);	  byte[]    headerBuf    =    buffer.readRecord(headerBuf,    null);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
143	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(record,  null);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(record,  null);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(record,  null);	  byte[]    headerBuf    =    buffer.readRecord(headerBuf,    null);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
144	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(headerBuf,  this);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(headerBuf,  this);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(headerBuf,  this);	  byte[]    headerBuf    =    buffer.readRecord(headerBuf,    null);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
145	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(headerBuf,  0,  null);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(headerBuf,  0,  null);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(headerBuf,  0,  null);	  byte[]    headerBuf    =    buffer.readRecord(headerBuf,    null);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
146	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  0,  null);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  0,  null);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  0,  null);	  byte[]    headerBuf    =    buffer.readRecord(buffer,    null);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
147	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  null,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  null,  hasHitEOF);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  null,  hasHitEOF);	  byte[]    headerBuf    =    buffer.readRecord(buffer,    null);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
148	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  this);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  this);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  this);	  byte[]    headerBuf    =    buffer.readRecord(buffer,    null);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
149	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(false,  readBuf);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(false,  readBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(false,  readBuf);	  byte[]    headerBuf    =    buffer.readRecord(true,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
150	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(true,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(true,  hasHitEOF);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(true,  hasHitEOF);	  byte[]    headerBuf    =    buffer.readRecord(true,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
151	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(true,  readBuf,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(true,  readBuf,  hasHitEOF);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(true,  readBuf,  hasHitEOF);	  byte[]    headerBuf    =    buffer.readRecord(true,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
152	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(false,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(false,  hasHitEOF);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(false,  hasHitEOF);	  byte[]    headerBuf    =    buffer.readRecord(true,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
153	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(0,  readBuf);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(0,  readBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(0,  readBuf);	  byte[]    headerBuf    =    buffer.readRecord(true,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
154	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(null,  readBuf);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(null,  readBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(null,  readBuf);	  byte[]    headerBuf    =    buffer.readRecord(true,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
155	[BUG]  [BUGGY]  int  headerSize  =  getRecordSize()  +  1;  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  int  headerSize  =  getRecordSize()  +  1;  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	int  headerSize  =  getRecordSize()  +  1;	  int    headerSize    =    getRecordSize();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
156	[BUG]  [BUGGY]  int  headerSize  =  getRecordSize()  -  1;  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  int  headerSize  =  getRecordSize()  -  1;  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	int  headerSize  =  getRecordSize()  -  1;	  int    headerSize    =    getRecordSize();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
157	[BUG]  [BUGGY]  int  headerSize  =  getRecordSize()  /  BUFFER_SIZE;  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  int  headerSize  =  getRecordSize()  /  BUFFER_SIZE;  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	int  headerSize  =  getRecordSize()  /  BUFFER_SIZE;	  int    headerSize    =    getRecordSize();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
158	[BUG]  [BUGGY]  int  headerSize  =  getRecordSize()  -  BUFFER_SIZE;  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  int  headerSize  =  getRecordSize()  -  BUFFER_SIZE;  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	int  headerSize  =  getRecordSize()  -  BUFFER_SIZE;	  int    headerSize    =    getRecordSize();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
159	[BUG]  [BUGGY]  long  headerSize  =  getRecordSize();  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  long  headerSize  =  getRecordSize();  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	long  headerSize  =  getRecordSize();	  int    headerSize    =    getRecordSize();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
160	[BUG]  [BUGGY]  int  headerSize  =  getRecordSize()  -  2;  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  int  headerSize  =  getRecordSize()  -  2;  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	int  headerSize  =  getRecordSize()  -  2;	  int    headerSize    =    getRecordSize();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
161	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(this.headerBuf,  this.readBuf);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(this.headerBuf,  this.readBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(this.headerBuf,  this.readBuf);	  byte[]    headerBuf    =    buffer.getHeaderBuffer(this.headerBuf);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
162	[BUG]  [BUGGY]  byte[]  headerBuf  =  this.headerBuf.getHeaderBuffer(buffer);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  this.headerBuf.getHeaderBuffer(buffer);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  this.headerBuf.getHeaderBuffer(buffer);	  byte[]    headerBuf    =    buffer.getHeaderBuffer(this.headerBuf);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
163	[BUG]  [BUGGY]  byte[]  headerBuf  =  this.headerBuf.getHeaderBuffer();  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  this.headerBuf.getHeaderBuffer();  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  this.headerBuf.getHeaderBuffer();	  byte[]    headerBuf    =    buffer.getHeaderBuffer(this.headerBuf);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
164	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(this.headerBuf,  readBuf);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(this.headerBuf,  readBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(this.headerBuf,  readBuf);	  byte[]    headerBuf    =    buffer.getHeaderBuffer(this.headerBuf);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
165	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(this.headerBuf,  this.length);  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(this.headerBuf,  this.length);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(this.headerBuf,  this.length);	  byte[]    headerBuf    =    buffer.getHeaderBuffer(this.headerBuf);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
166	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(this.headerBuf,  this.bufferSize);  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(this.headerBuf,  this.bufferSize);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(this.headerBuf,  this.bufferSize);	  byte[]    headerBuf    =    buffer.getHeaderBuffer(this.headerBuf);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
167	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(0,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(0,  hasHitEOF);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(0,  hasHitEOF);	  byte[]    headerBuf    =    buffer.readRecord(0,    false);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
168	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(0,  null);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(0,  null);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(0,  null);	  byte[]    headerBuf    =    buffer.readRecord(0,    false);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
169	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getEOFRecord();  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getEOFRecord();  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getEOFRecord();	  byte[]    headerBuf    =    buffer.readEOFRecord();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
170	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  true);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  true);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this,  true);	  byte[]    headerBuf    =    buffer.readRecord(this,    false);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
171	[BUG]  [BUGGY]  ByteBuffer  headerBuf  =  buffer.readRecord(this,  false);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  ByteBuffer  headerBuf  =  buffer.readRecord(this,  false);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	ByteBuffer  headerBuf  =  buffer.readRecord(this,  false);	  byte[]    headerBuf    =    buffer.readRecord(this,    false);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
172	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.toByteArray(this.headerBuf);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.toByteArray(this.headerBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.toByteArray(this.headerBuf);	  byte[]    headerBuf    =    buffer.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
173	[BUG]  [BUGGY]  byte[]  headerBuf  =  this.buffer.toByteArray();  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  this.buffer.toByteArray();  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  this.buffer.toByteArray();	  byte[]    headerBuf    =    buffer.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
174	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.toByteArray(record);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.toByteArray(record);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.toByteArray(record);	  byte[]    headerBuf    =    buffer.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
175	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.toByteArray()  +  1;  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.toByteArray()  +  1;  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.toByteArray()  +  1;	  byte[]    headerBuf    =    buffer.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
176	[BUG]  [BUGGY]  ByteArray  buf  =  buffer.toByteArray();  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  ByteArray  buf  =  buffer.toByteArray();  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	ByteArray  buf  =  buffer.toByteArray();	  byte[]    headerBuf    =    buffer.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
177	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(0,  record);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(0,  record);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getRecord(0,  record);	  byte[]    headerBuf    =    buffer.getRecord(record);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
178	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(record)+  1;  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(record)+  1;  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getRecord(record)+  1;	  byte[]    headerBuf    =    buffer.getRecord(record);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
179	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(buffer);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(buffer);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getRecord(buffer);	  byte[]    headerBuf    =    buffer.getRecord(record);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
180	[BUG]  [BUGGY]  int  headerSize  =  buffer.getHeaderSize()  +  1;  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  int  headerSize  =  buffer.getHeaderSize()  +  1;  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	int  headerSize  =  buffer.getHeaderSize()  +  1;	  int    headerSize    =    buffer.getHeaderSize();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
181	[BUG]  [BUGGY]  int  headerSize  =  this.buffer.getHeaderSize();  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  int  headerSize  =  this.buffer.getHeaderSize();  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	int  headerSize  =  this.buffer.getHeaderSize();	  int    headerSize    =    buffer.getHeaderSize();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
182	[BUG]  [BUGGY]  int  headerSize  =  buffer.getHeaderSize()  -  1;  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  int  headerSize  =  buffer.getHeaderSize()  -  1;  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	int  headerSize  =  buffer.getHeaderSize()  -  1;	  int    headerSize    =    buffer.getHeaderSize();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
183	[BUG]  [BUGGY]  int  headerSize  =  buffer.getHeaderSize()  /  BUFFER_SIZE;  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  int  headerSize  =  buffer.getHeaderSize()  /  BUFFER_SIZE;  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	int  headerSize  =  buffer.getHeaderSize()  /  BUFFER_SIZE;	  int    headerSize    =    buffer.getHeaderSize();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
184	[BUG]  [BUGGY]  int  headerSize  =  buffer.getHeaderSize()  -  BUFFER_SIZE;  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  int  headerSize  =  buffer.getHeaderSize()  -  BUFFER_SIZE;  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	int  headerSize  =  buffer.getHeaderSize()  -  BUFFER_SIZE;	  int    headerSize    =    buffer.getHeaderSize();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
185	[BUG]  [BUGGY]  int  headerSize  =  buffer.getHeaderSize()  -  2;  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  int  headerSize  =  buffer.getHeaderSize()  -  2;  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	int  headerSize  =  buffer.getHeaderSize()  -  2;	  int    headerSize    =    buffer.getHeaderSize();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
186	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  0,  null);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  0,  null);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this,  0,  null);	  byte[]    headerBuf    =    buffer.readRecord(this,    null);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
187	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  this);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  this);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this,  this);	  byte[]    headerBuf    =    buffer.readRecord(this,    null);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
188	[BUG]  [BUGGY]  byte[]  headerBuf  =  this.headerBuf.readRecord(buffer,  this.length);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  this.headerBuf.readRecord(buffer,  this.length);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  this.headerBuf.readRecord(buffer,  this.length);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf,    this.length);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
189	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  this.length  +  1);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  this.length  +  1);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  this.length  +  1);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf,    this.length);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
190	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  this.length  -  1);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  this.length  -  1);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  this.length  -  1);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf,    this.length);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
191	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  0,  this.length);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  0,  this.length);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  0,  this.length);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf,    this.length);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
192	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.read(buffer,  headerBuf);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.read(buffer,  headerBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.read(buffer,  headerBuf);	  byte[]    headerBuf    =    buffer.read(buffer);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
193	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.read(buffer,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.read(buffer,  hasHitEOF);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.read(buffer,  hasHitEOF);	  byte[]    headerBuf    =    buffer.read(buffer);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
194	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.read(buffer,  0,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.read(buffer,  0,  headerBuf.length);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.read(buffer,  0,  headerBuf.length);	  byte[]    headerBuf    =    buffer.read(buffer);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
195	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.read(buffer,  readBuf);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.read(buffer,  readBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.read(buffer,  readBuf);	  byte[]    headerBuf    =    buffer.read(buffer);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
196	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.read();  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.read();  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.read();	  byte[]    headerBuf    =    buffer.read(buffer);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
197	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.read(buffer,  false);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.read(buffer,  false);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.read(buffer,  false);	  byte[]    headerBuf    =    buffer.read(buffer);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
198	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(false,  false);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(false,  false);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(false,  false);	  byte[]    headerBuf    =    buffer.readRecord(true,    false);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
199	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(false,  true);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(false,  true);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(false,  true);	  byte[]    headerBuf    =    buffer.readRecord(true,    false);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
200	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(false,  null);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(false,  null);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(false,  null);	  byte[]    headerBuf    =    buffer.readRecord(true,    false);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
201	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(headerBuf,  readBuf);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(headerBuf,  readBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(headerBuf,  readBuf);	  byte[]    headerBuf    =    buffer.getHeaderBuffer(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
202	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(headerBuf,  false);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(headerBuf,  false);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(headerBuf,  false);	  byte[]    headerBuf    =    buffer.getHeaderBuffer(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
203	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(headerBuf,  true);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(headerBuf,  true);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(headerBuf,  true);	  byte[]    headerBuf    =    buffer.getHeaderBuffer(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
204	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(0,  headerBuf);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(0,  headerBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(0,  headerBuf);	  byte[]    headerBuf    =    buffer.getHeaderBuffer(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
205	[BUG]  [BUGGY]  byte[]  headerBuf  =  this.headerBuf.readRecord(buffer,  true);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  this.headerBuf.readRecord(buffer,  true);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  this.headerBuf.readRecord(buffer,  true);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf,    true);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
206	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  this.headerBuf,  true);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  this.headerBuf,  true);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  this.headerBuf,  true);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf,    true);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
207	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  0,  true);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  0,  true);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  0,  true);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf,    true);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
208	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getEOFRecord(record)+  1;  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getEOFRecord(record)+  1;  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getEOFRecord(record)+  1;	  byte[]    headerBuf    =    buffer.getEOFRecord(record);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
209	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getEOFRecord(record,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getEOFRecord(record,  hasHitEOF);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getEOFRecord(record,  hasHitEOF);	  byte[]    headerBuf    =    buffer.getEOFRecord(record);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
210	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getEOFRecord(record,  false);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getEOFRecord(record,  false);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getEOFRecord(record,  false);	  byte[]    headerBuf    =    buffer.getEOFRecord(record);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
211	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getEOFRecord(0,  record);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getEOFRecord(0,  record);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getEOFRecord(0,  record);	  byte[]    headerBuf    =    buffer.getEOFRecord(record);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
212	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(buffer,  headerBuf);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(buffer,  headerBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getRecord(buffer,  headerBuf);	  byte[]    headerBuf    =    buffer.getRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
213	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(0,  headerBuf);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(0,  headerBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getRecord(0,  headerBuf);	  byte[]    headerBuf    =    buffer.getRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
214	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(headerBuf,  readBuf);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(headerBuf,  readBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getRecord(headerBuf,  readBuf);	  byte[]    headerBuf    =    buffer.getRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
215	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(buffer.getHeaderBuf());  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(buffer.getHeaderBuf());  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getRecord(buffer.getHeaderBuf());	  byte[]    headerBuf    =    buffer.getRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
216	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(null,  true);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(null,  true);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(null,  true);	  byte[]    headerBuf    =    buffer.readRecord(true,    true);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
217	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readUTF(header);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readUTF(header);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readUTF(header);	  byte[]    headerBuf    =    buffer.readEOFRecord(header);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
218	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readEOFRecord(buffer,  header);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readEOFRecord(buffer,  header);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readEOFRecord(buffer,  header);	  byte[]    headerBuf    =    buffer.readEOFRecord(header);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
219	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readByteBuffer(header);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readByteBuffer(header);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readByteBuffer(header);	  byte[]    headerBuf    =    buffer.readEOFRecord(header);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
220	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  0,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  0,  headerBuf.length);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  0,  headerBuf.length);	  byte[]    headerBuf    =    buffer.readRecord(headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
221	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(headerBuf,  0,  headerBuf.length  -  1);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(headerBuf,  0,  headerBuf.length  -  1);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(headerBuf,  0,  headerBuf.length  -  1);	  byte[]    headerBuf    =    buffer.readRecord(headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
222	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  0,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  0,  headerBuf.length);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  0,  headerBuf.length);	  byte[]    headerBuf    =    buffer.readRecord(headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
223	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(record,  0,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(record,  0,  headerBuf.length);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(record,  0,  headerBuf.length);	  byte[]    headerBuf    =    buffer.readRecord(headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
224	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  0,  recordSize);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  0,  recordSize);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  0,  recordSize);	  byte[]    headerBuf    =    buffer.readRecord(buffer,    recordSize);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
225	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  entryOffset);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  entryOffset);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  entryOffset);	  byte[]    headerBuf    =    buffer.readRecord(buffer,    recordSize);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
226	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  fileSize);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  fileSize);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  fileSize);	  byte[]    headerBuf    =    buffer.readRecord(buffer,    recordSize);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
227	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  entrySize);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  entrySize);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  entrySize);	  byte[]    headerBuf    =    buffer.readRecord(buffer,    recordSize);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
228	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  blockSize);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  blockSize);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  blockSize);	  byte[]    headerBuf    =    buffer.readRecord(buffer,    recordSize);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
229	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(recordSize,  buffer);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(recordSize,  buffer);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(recordSize,  buffer);	  byte[]    headerBuf    =    buffer.readRecord(buffer,    recordSize);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
230	[BUG]  [BUGGY]  hasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  hasHitEOF  =  false;  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	hasHitEOF  =  false;	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
231	[BUG]  [BUGGY]  if(buffer.isEOF())  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(buffer.isEOF())  {  hasHitEOF  =  false;  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(buffer.isEOF())  {  hasHitEOF  =  false;  }	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
232	[BUG]  [BUGGY]  HasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  HasHitEOF  =  false;  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	HasHitEOF  =  false;	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
233	[BUG]  [BUGGY]  HeaderBuffer  headerBuf  =  buffer.getHeaderBuffer();  hasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  HeaderBuffer  headerBuf  =  buffer.getHeaderBuffer();  hasHitEOF  =  false;  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	HeaderBuffer  headerBuf  =  buffer.getHeaderBuffer();  hasHitEOF  =  false;	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
234	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  else  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  else  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  else  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    else    if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
235	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  else  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(headerBuf!=  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  else  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(headerBuf!=  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  else  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    else    if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
236	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  else  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  else  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  else  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    else    if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
237	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  else  {  buffer.reset();  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  else  {  buffer.reset();  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  else  {  buffer.reset();  }	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    else    if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
238	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  readBuf,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  readBuf,  hasHitEOF);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  readBuf,  hasHitEOF);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
239	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  skipBuf);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  skipBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  skipBuf);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
240	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  this.readBuf);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  this.readBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  this.readBuf);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
241	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  readBuf,  skipBuf);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  readBuf,  skipBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  readBuf,  skipBuf);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
242	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  readBuf,  true);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  readBuf,  true);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  readBuf,  true);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
243	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readEOF(buffer);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readEOF(buffer);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readEOF(buffer);	  byte[]    headerBuf    =    buffer.readEOF(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
244	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readEOF(buffer,  headerBuf);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readEOF(buffer,  headerBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readEOF(buffer,  headerBuf);	  byte[]    headerBuf    =    buffer.readEOF(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
245	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readEOF(headerBuf,  readBuf);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readEOF(headerBuf,  readBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readEOF(headerBuf,  readBuf);	  byte[]    headerBuf    =    buffer.readEOF(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
246	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readEOF(headerBuf,  skipBuf);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readEOF(headerBuf,  skipBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readEOF(headerBuf,  skipBuf);	  byte[]    headerBuf    =    buffer.readEOF(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
247	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readEOF(headerBuf,  false);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readEOF(headerBuf,  false);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readEOF(headerBuf,  false);	  byte[]    headerBuf    =    buffer.readEOF(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
248	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(record)+  1;  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(record)+  1;  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(record)+  1;	  byte[]    headerBuf    =    buffer.getHeaderBuffer(record);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
249	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(record  +  1);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(record  +  1);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(record  +  1);	  byte[]    headerBuf    =    buffer.getHeaderBuffer(record);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
250	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(0,  record);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(0,  record);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(0,  record);	  byte[]    headerBuf    =    buffer.getHeaderBuffer(record);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
251	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  0,  headerBuf);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  0,  headerBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this,  0,  headerBuf);	  byte[]    headerBuf    =    buffer.readRecord(this,    headerBuf);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
252	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  headerBuf,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  headerBuf,  hasHitEOF);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this,  headerBuf,  hasHitEOF);	  byte[]    headerBuf    =    buffer.readRecord(this,    headerBuf);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
253	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  getHitEOF());  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  getHitEOF());  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this,  getHitEOF());	  byte[]    headerBuf    =    buffer.readRecord(this,    headerBuf);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
254	[BUG]  [BUGGY]  int  headerSize  =  this.buffer.length();  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  int  headerSize  =  this.buffer.length();  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	int  headerSize  =  this.buffer.length();	  int    headerSize    =    buffer.length();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
255	[BUG]  [BUGGY]  int  headerSize  =  buffer.length()  -  1;  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  int  headerSize  =  buffer.length()  -  1;  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	int  headerSize  =  buffer.length()  -  1;	  int    headerSize    =    buffer.length();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
256	[BUG]  [BUGGY]  int  headerSize  =  this.headerBuf.length();  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  int  headerSize  =  this.headerBuf.length();  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	int  headerSize  =  this.headerBuf.length();	  int    headerSize    =    buffer.length();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
257	[BUG]  [BUGGY]  long  headerSize  =  buffer.length();  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  long  headerSize  =  buffer.length();  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	long  headerSize  =  buffer.length();	  int    headerSize    =    buffer.length();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
258	[BUG]  [BUGGY]  int  headerSize  =  buffer.length()  +  1;  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  int  headerSize  =  buffer.length()  +  1;  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	int  headerSize  =  buffer.length()  +  1;	  int    headerSize    =    buffer.length();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
259	[BUG]  [BUGGY]  int  headerSize  =  file.length();  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  int  headerSize  =  file.length();  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	int  headerSize  =  file.length();	  int    headerSize    =    buffer.length();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
260	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  0,  false);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  0,  false);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  0,  false);	  byte[]    headerBuf    =    buffer.readRecord(headerBuf,    false);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
261	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(headerBuf))    {    for(int    i    =    0;    i    <    buffer.length;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
262	[BUG]  [BUGGY]  if(buffer.length!=  headerBuf.length)  {  if(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(buffer.length!=  headerBuf.length)  {  if(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(buffer.length!=  headerBuf.length)  {  if(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(headerBuf))    {    for(int    i    =    0;    i    <    buffer.length;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
263	[BUG]  [BUGGY]  if(buffer.length!=  headerBuf.length)  {  if(headerBuf.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(buffer.length!=  headerBuf.length)  {  if(headerBuf.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(buffer.length!=  headerBuf.length)  {  if(headerBuf.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(headerBuf))    {    for(int    i    =    0;    i    <    buffer.length;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
264	[BUG]  [BUGGY]  if(buffer.length!=  headerBuf.length)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(buffer.length!=  headerBuf.length)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(buffer.length!=  headerBuf.length)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(headerBuf))    {    for(int    i    =    0;    i    <    buffer.length;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
265	[BUG]  [BUGGY]  if(buffer.length!=  headerBuf.length)  {  if(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  }  [CE]  illegal  start  of  type  [FE]                                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(buffer.length!=  headerBuf.length)  {  if(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(buffer.length!=  headerBuf.length)  {  if(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  }	  if(buffer.isEOFRecord(headerBuf))    {    for(int    i    =    0;    i    <    buffer.length;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
266	[BUG]  [BUGGY]  if(buffer.length!=  headerBuf.length)  {  if(headerBuf.isEOFRecord(buffer))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(buffer.length!=  headerBuf.length)  {  if(headerBuf.isEOFRecord(buffer))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(buffer.length!=  headerBuf.length)  {  if(headerBuf.isEOFRecord(buffer))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(headerBuf))    {    for(int    i    =    0;    i    <    buffer.length;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
267	[BUG]  [BUGGY]  if(buffer.length!=  headerBuf.length)  {  if(headerBuf.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  }  [CE]  illegal  start  of  type  [FE]                                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(buffer.length!=  headerBuf.length)  {  if(headerBuf.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(buffer.length!=  headerBuf.length)  {  if(headerBuf.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  }	  if(buffer.isEOFRecord(headerBuf))    {    for(int    i    =    0;    i    <    buffer.length;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
268	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }  else  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }  else  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }  else  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    false;    }    else    if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
269	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    false;    }    else    if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
270	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }  else  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(headerBuf!=  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }  else  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(headerBuf!=  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }  else  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    false;    }    else    if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
271	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(headerBuf!=  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(headerBuf!=  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    false;    }    else    if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
272	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }  else  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }  else  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }  else  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    false;    }    else    if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
273	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  if(buffer.isEOF)  {  hasHitEOF  =  false;  }  else  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(headerBuf  ==  null)  {  if(buffer.isEOF)  {  hasHitEOF  =  false;  }  else  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(headerBuf  ==  null)  {  if(buffer.isEOF)  {  hasHitEOF  =  false;  }  else  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    false;    }    else    if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
274	[BUG]  [BUGGY]  if(headerBuf!=  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }  else  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(headerBuf!=  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }  else  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(headerBuf!=  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }  else  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    false;    }    else    if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
275	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(4);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(4);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(4);	  byte[]    headerBuf    =    buffer.getHeaderBuffer(32);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
276	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(32L);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(32L);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(32L);	  byte[]    headerBuf    =    buffer.getHeaderBuffer(32);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
277	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(5);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(5);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(5);	  byte[]    headerBuf    =    buffer.getHeaderBuffer(32);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
278	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(this.headerBuf,  this.length);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(this.headerBuf,  this.length);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getRecord(this.headerBuf,  this.length);	  byte[]    headerBuf    =    buffer.getRecord(this.headerBuf);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
279	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readEOFRecord(headerBuf,  readBuf);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readEOFRecord(headerBuf,  readBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readEOFRecord(headerBuf,  readBuf);	  byte[]    headerBuf    =    buffer.readEOFRecord(header);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
280	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  0,  record);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  0,  record);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  0,  record);	  byte[]    headerBuf    =    buffer.readRecord(buffer,    record);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
281	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  0,  recordLength);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  0,  recordLength);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  0,  recordLength);	  byte[]    headerBuf    =    buffer.readRecord(buffer,    record);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
282	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(this.headerBuf,  null);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(this.headerBuf,  null);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(this.headerBuf,  null);	  byte[]    headerBuf    =    buffer.getHeaderBuffer(this.headerBuf);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
283	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  if(buffer.isEOF)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(headerBuf  ==  null)  {  if(buffer.isEOF)  {  hasHitEOF  =  true;  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(headerBuf  ==  null)  {  if(buffer.isEOF)  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    else    if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
284	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  else  {  buffer.append(headerBuf);  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  else  {  buffer.append(headerBuf);  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  else  {  buffer.append(headerBuf);  }	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    else    if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
285	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  else  {  buffer.setEOF(headerBuf);  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  else  {  buffer.setEOF(headerBuf);  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  else  {  buffer.setEOF(headerBuf);  }	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    else    if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
286	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  else  {  buffer.reset(headerBuf);  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  else  {  buffer.reset(headerBuf);  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  else  {  buffer.reset(headerBuf);  }	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    else    if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
287	[BUG]  [BUGGY]  if(headerBuf.isEOFRecord(buffer))  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(headerBuf.isEOFRecord(buffer))  {  hasHitEOF  =  true;  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(headerBuf.isEOFRecord(buffer))  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
288	[BUG]  [BUGGY]  this.headerBuf  =  buffer.isEOFRecord(headerBuf);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  this.headerBuf  =  buffer.isEOFRecord(headerBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	this.headerBuf  =  buffer.isEOFRecord(headerBuf);	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
289	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(readBuf);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(readBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getRecord(readBuf);	  byte[]    headerBuf    =    buffer.getRecord(null);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
290	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.toByteArray(readBuf);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.toByteArray(readBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.toByteArray(readBuf);	  byte[]    headerBuf    =    buffer.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
291	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.toByteArray(true);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.toByteArray(true);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.toByteArray(true);	  byte[]    headerBuf    =    buffer.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
292	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  readBuf,  false);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  readBuf,  false);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  readBuf,  false);	  byte[]    headerBuf    =    buffer.readRecord(headerBuf,    false);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
293	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  null,  headerBuf);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  null,  headerBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  null,  headerBuf);	  byte[]    headerBuf    =    buffer.readRecord(buffer,    null);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
294	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getEOFRecord(readBuf);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getEOFRecord(readBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getEOFRecord(readBuf);	  byte[]    headerBuf    =    buffer.getEOFRecord(header);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
295	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  this.headerBuf,  this.headerBuf);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  this.headerBuf,  this.headerBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  this.headerBuf,  this.headerBuf);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf,    this.headerBuf);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
296	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getEOFRecord(hashBuf);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getEOFRecord(hashBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getEOFRecord(hashBuf);	  byte[]    headerBuf    =    buffer.getEOFRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
297	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  getHeaderBuffer());  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  getHeaderBuffer());  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this,  getHeaderBuffer());	  byte[]    headerBuf    =    buffer.readRecord(this,    headerBuf);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
298	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  handleEOF);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  handleEOF);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this,  handleEOF);	  byte[]    headerBuf    =    buffer.readRecord(this,    headerBuf);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
299	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(headerBuf,  buf);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(headerBuf,  buf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(headerBuf,  buf);	  byte[]    headerBuf    =    buffer.readRecord(headerBuf,    headerBuf);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
300	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecordBytes(readBuf);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getRecordBytes(readBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getRecordBytes(readBuf);	  byte[]    headerBuf    =    buffer.getRecordBytes();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
301	[BUG]  [BUGGY]  int  headerSize  =  buffer.getHeaderSize(recordSize);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  int  headerSize  =  buffer.getHeaderSize(recordSize);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	int  headerSize  =  buffer.getHeaderSize(recordSize);	  int    headerSize    =    buffer.getHeaderSize();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
302	[BUG]  [BUGGY]  byte  headerSize  =  buffer.getHeaderSize();  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte  headerSize  =  buffer.getHeaderSize();  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte  headerSize  =  buffer.getHeaderSize();	  int    headerSize    =    buffer.getHeaderSize();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
303	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(readBuf,  readBuf);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(readBuf,  readBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(readBuf,  readBuf);	  byte[]    headerBuf    =    buffer.getHeaderBuffer(readBuf);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
304	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(0,  readBuf);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(0,  readBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(0,  readBuf);	  byte[]    headerBuf    =    buffer.getHeaderBuffer(readBuf);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
305	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  0,  this.buffer.length);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  0,  this.buffer.length);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  0,  this.buffer.length);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf,    0,    this.headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
306	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(null,  false);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(null,  false);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(null,  false);	  byte[]    headerBuf    =    buffer.readRecord(true,    false);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
307	[BUG]  [BUGGY]  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
308	[BUG]  [BUGGY]  if(headerBuf.isEOFRecord(buffer))  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(headerBuf.isEOFRecord(buffer))  {  hasHitEOF  =  false;  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(headerBuf.isEOFRecord(buffer))  {  hasHitEOF  =  false;  }	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
309	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(true,  readBuf);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(true,  readBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(true,  readBuf);	  byte[]    headerBuf    =    buffer.getHeaderBuffer(true);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
310	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(256,  readBuf);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(256,  readBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(256,  readBuf);	  byte[]    headerBuf    =    buffer.getHeaderBuffer(256);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
311	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(headerBuf))    {    for(int    i    =    0;    i    <    buffer.length;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
312	[BUG]  [BUGGY]  if(buffer.length  ==  0)  {  if(headerBuf.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(buffer.length  ==  0)  {  if(headerBuf.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(buffer.length  ==  0)  {  if(headerBuf.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(headerBuf))    {    for(int    i    =    0;    i    <    buffer.length;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
313	[BUG]  [BUGGY]  if(buffer.length!=  0)  {  if(headerBuf.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(buffer.length!=  0)  {  if(headerBuf.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(buffer.length!=  0)  {  if(headerBuf.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(headerBuf))    {    for(int    i    =    0;    i    <    buffer.length;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
314	[BUG]  [BUGGY]  if(buffer.length!=  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(buffer.length!=  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(buffer.length!=  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(headerBuf))    {    for(int    i    =    0;    i    <    buffer.length;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
315	[BUG]  [BUGGY]  if(buffer.length  ==  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(buffer.length  ==  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(buffer.length  ==  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(headerBuf))    {    for(int    i    =    0;    i    <    buffer.length;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
316	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  }  [CE]  illegal  start  of  type  [FE]                                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  }	  if(buffer.isEOFRecord(headerBuf))    {    for(int    i    =    0;    i    <    buffer.length;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
317	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(-1,  true);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(-1,  true);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(-1,  true);	  byte[]    headerBuf    =    buffer.readRecord(0,    true);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
318	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readBuf();  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readBuf();  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readBuf();	  byte[]    headerBuf    =    buffer.getEOF();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
319	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.reset();  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.reset();  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.reset();	  byte[]    headerBuf    =    buffer.getEOF();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
320	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.recordEOF();  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.recordEOF();  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.recordEOF();	  byte[]    headerBuf    =    buffer.getEOF();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
321	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(headerBuf,  readBuf,  skipBuf);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(headerBuf,  readBuf,  skipBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(headerBuf,  readBuf,  skipBuf);	  byte[]    headerBuf    =    buffer.readRecord(headerBuf,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
322	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getERF();  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getERF();  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getERF();	  byte[]    headerBuf    =    buffer.readERF();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
323	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readERF(buffer);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readERF(buffer);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readERF(buffer);	  byte[]    headerBuf    =    buffer.readERF();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
324	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getEOFRecord(record,  readBuf);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getEOFRecord(record,  readBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getEOFRecord(record,  readBuf);	  byte[]    headerBuf    =    buffer.getEOFRecord(record);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
325	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getEOFRecord(this.readBuf);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getEOFRecord(this.readBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getEOFRecord(this.readBuf);	  byte[]    headerBuf    =    buffer.getEOFRecord(record);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
326	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(null,  null);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(null,  null);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(null,  null);	  byte[]    headerBuf    =    buffer.readRecord(null);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
327	[BUG]  [BUGGY]  int  headerSize  =  getRecordSize()  +  SMALL_BUFFER_SIZE;  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  int  headerSize  =  getRecordSize()  +  SMALL_BUFFER_SIZE;  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	int  headerSize  =  getRecordSize()  +  SMALL_BUFFER_SIZE;	  int    headerSize    =    getRecordSize();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
328	[BUG]  [BUGGY]  int  headerSize  =  getRecordSize()  +  BUFFER_SIZE;  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  int  headerSize  =  getRecordSize()  +  BUFFER_SIZE;  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	int  headerSize  =  getRecordSize()  +  BUFFER_SIZE;	  int    headerSize    =    getRecordSize();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
329	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(headerBuf,  skipBuf);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(headerBuf,  skipBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(headerBuf,  skipBuf);	  byte[]    headerBuf    =    buffer.getHeaderBuffer(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
330	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readEOFRecord(0,  0);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readEOFRecord(0,  0);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readEOFRecord(0,  0);	  byte[]    headerBuf    =    buffer.readEOFRecord();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
331	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(true,  readBuf,  false);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(true,  readBuf,  false);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(true,  readBuf,  false);	  byte[]    headerBuf    =    buffer.readRecord(true,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
332	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  length);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  length);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  length);	  byte[]    headerBuf    =    buffer.readRecord(buffer,    recordSize);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
333	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  start,  recordSize);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  start,  recordSize);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  start,  recordSize);	  byte[]    headerBuf    =    buffer.readRecord(buffer,    recordSize);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
334	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  readBuf,  recordSize);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  readBuf,  recordSize);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  readBuf,  recordSize);	  byte[]    headerBuf    =    buffer.readRecord(buffer,    recordSize);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
335	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(0,  2);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(0,  2);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(0,  2);	  byte[]    headerBuf    =    buffer.getHeaderBuffer(0,    0);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
336	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.read(buffer,  skipBuf);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.read(buffer,  skipBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.read(buffer,  skipBuf);	  byte[]    headerBuf    =    buffer.read(buffer);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
337	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.read(buffer,  null);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.read(buffer,  null);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.read(buffer,  null);	  byte[]    headerBuf    =    buffer.read(buffer);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
338	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  readBuf,  null);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  readBuf,  null);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  readBuf,  null);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
339	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  readBuf,  headerBuf);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  readBuf,  headerBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  readBuf,  headerBuf);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
340	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  readBuf,  false);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  readBuf,  false);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  readBuf,  false);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
341	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(0,  this);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(0,  this);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getRecord(0,  this);	  byte[]    headerBuf    =    buffer.getRecord(this);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
342	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }  else  {  buffer.append(headerBuf);  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }  else  {  buffer.append(headerBuf);  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }  else  {  buffer.append(headerBuf);  }	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    false;    }    else    if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
343	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  if(buffer.isEOF)  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(headerBuf  ==  null)  {  if(buffer.isEOF)  {  hasHitEOF  =  false;  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(headerBuf  ==  null)  {  if(buffer.isEOF)  {  hasHitEOF  =  false;  }	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    false;    }    else    if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
344	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }  else  {  buffer.setEOF(headerBuf);  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }  else  {  buffer.setEOF(headerBuf);  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }  else  {  buffer.setEOF(headerBuf);  }	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    false;    }    else    if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
345	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  0,  this.headerBuf);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  0,  this.headerBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  0,  this.headerBuf);	  byte[]    headerBuf    =    buffer.readRecord(buffer,    this.headerBuf);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
346	[BUG]  [BUGGY]  byte[]  headerBuf  =  this.headerBuf.readRecord(buffer,  0,  buffer.length);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  this.headerBuf.readRecord(buffer,  0,  buffer.length);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  this.headerBuf.readRecord(buffer,  0,  buffer.length);	  byte[]    headerBuf    =    buffer.readRecord(buffer,    this.headerBuf);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
347	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(record,  readBuf);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(record,  readBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(record,  readBuf);	  byte[]    headerBuf    =    buffer.getHeaderBuffer(record);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
348	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(buffer,  readBuf);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(buffer,  readBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getRecord(buffer,  readBuf);	  byte[]    headerBuf    =    buffer.getRecord(record);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
349	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buff,  true);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buff,  true);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buff,  true);	  byte[]    headerBuf    =    buffer.readRecord(true,    true);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
350	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(headerBuf,  buffer);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(headerBuf,  buffer);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(headerBuf,  buffer);	  byte[]    headerBuf    =    buffer.readRecord(buffer,    headerBuf);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
351	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  handleEOF);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  handleEOF);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  handleEOF);	  byte[]    headerBuf    =    buffer.readRecord(buffer,    headerBuf);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
352	[BUG]  [BUGGY]  int  headerSize  =  buffer.length()  /  BUFFER_SIZE;  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  int  headerSize  =  buffer.length()  /  BUFFER_SIZE;  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	int  headerSize  =  buffer.length()  /  BUFFER_SIZE;	  int    headerSize    =    buffer.length();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
353	[BUG]  [BUGGY]  int  headerSize  =  getHeaderSize();  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  int  headerSize  =  getHeaderSize();  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	int  headerSize  =  getHeaderSize();	  int    headerSize    =    buffer.length();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
354	[BUG]  [BUGGY]  int  headerSize  =  buffer.length()  -  headerSize;  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  int  headerSize  =  buffer.length()  -  headerSize;  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	int  headerSize  =  buffer.length()  -  headerSize;	  int    headerSize    =    buffer.length();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
355	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  writeBuf);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  writeBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this,  writeBuf);	  byte[]    headerBuf    =    buffer.readRecord(this,    skipBuf);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
356	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  this.headerBuf,  null);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  this.headerBuf,  null);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  this.headerBuf,  null);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf,    null);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
357	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  this);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  this);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  this);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf,    null);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
358	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  this.buffer);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  this.buffer);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  this.buffer);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf,    null);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
359	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  this.bufferSize  -  1);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  this.bufferSize  -  1);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  this.bufferSize  -  1);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf,    this.bufferSize);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
360	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  this.bufferLength);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  this.bufferLength);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  this.bufferLength);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf,    this.bufferSize);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
361	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(true,  readBuf);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(true,  readBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getRecord(true,  readBuf);	  byte[]    headerBuf    =    buffer.getRecord(true);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
362	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  this.length  *  2);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  this.length  *  2);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  this.length  *  2);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf,    this.length);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
363	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  null,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  null,  hasHitEOF);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this,  null,  hasHitEOF);	  byte[]    headerBuf    =    buffer.readRecord(this,    null);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
364	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readEOFRecord(headerBuf,  skipBuf);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readEOFRecord(headerBuf,  skipBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readEOFRecord(headerBuf,  skipBuf);	  byte[]    headerBuf    =    buffer.readEOFRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
365	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readEOFRecord(headerBuf,  false);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readEOFRecord(headerBuf,  false);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readEOFRecord(headerBuf,  false);	  byte[]    headerBuf    =    buffer.readEOFRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
366	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(headerBuf,  0,  headerBuf.length  +  1);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(headerBuf,  0,  headerBuf.length  +  1);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(headerBuf,  0,  headerBuf.length  +  1);	  byte[]    headerBuf    =    buffer.readRecord(headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
367	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(headerBuf,  0,  buf.length);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(headerBuf,  0,  buf.length);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(headerBuf,  0,  buf.length);	  byte[]    headerBuf    =    buffer.readRecord(headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
368	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(headerBuf,  0,  headerBuf.length  -  2);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(headerBuf,  0,  headerBuf.length  -  2);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(headerBuf,  0,  headerBuf.length  -  2);	  byte[]    headerBuf    =    buffer.readRecord(headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
369	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(headerBuf,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(headerBuf,  hasHitEOF);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(headerBuf,  hasHitEOF);	  byte[]    headerBuf    =    buffer.readRecord(buffer,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
370	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  0);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  0);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  0);	  byte[]    headerBuf    =    buffer.readRecord(buffer,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
371	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readFully();  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readFully();  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readFully();	  byte[]    headerBuf    =    buffer.readUTF();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
372	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readUTF(buffer);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readUTF(buffer);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readUTF(buffer);	  byte[]    headerBuf    =    buffer.readUTF();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
373	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  readBuf,  headerBuf);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  readBuf,  headerBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this,  readBuf,  headerBuf);	  byte[]    headerBuf    =    buffer.readRecord(this,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
374	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  readBuf,  null);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  readBuf,  null);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this,  readBuf,  null);	  byte[]    headerBuf    =    buffer.readRecord(this,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
375	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  readBuf,  1);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  readBuf,  1);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this,  readBuf,  1);	  byte[]    headerBuf    =    buffer.readRecord(this,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
376	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  readBuf,  this.headerBuf);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  readBuf,  this.headerBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this.headerBuf,  readBuf,  this.headerBuf);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
377	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getEOFRecord(record  +  1);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getEOFRecord(record  +  1);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getEOFRecord(record  +  1);	  byte[]    headerBuf    =    buffer.getEOFRecord(record);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
378	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getEOFRecord(record,  true);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getEOFRecord(record,  true);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getEOFRecord(record,  true);	  byte[]    headerBuf    =    buffer.getEOFRecord(record);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
379	[BUG]  [BUGGY]  if(buffer.isEOFRecord(header))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(buffer.isEOFRecord(header))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(buffer.isEOFRecord(header))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(headerBuf))    {    for(int    i    =    0;    i    <    buffer.length;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
380	[BUG]  [BUGGY]  if(buffer.isEOF())  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(buffer.isEOF())  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(buffer.isEOF())  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(headerBuf))    {    for(int    i    =    0;    i    <    buffer.length;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
381	[BUG]  [BUGGY]  while(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  while(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	while(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(headerBuf))    {    for(int    i    =    0;    i    <    buffer.length;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
382	[BUG]  [BUGGY]  while(buffer.isEOFRecord(header))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  while(buffer.isEOFRecord(header))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	while(buffer.isEOFRecord(header))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(headerBuf))    {    for(int    i    =    0;    i    <    buffer.length;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
383	[BUG]  [BUGGY]  while(buffer.isEOF())  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  while(buffer.isEOF())  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	while(buffer.isEOF())  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(headerBuf))    {    for(int    i    =    0;    i    <    buffer.length;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
384	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getEOF_headerBuf();  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getEOF_headerBuf();  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getEOF_headerBuf();	  byte[]    headerBuf    =    buffer.getEOF();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
385	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.toEOF();  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.toEOF();  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.toEOF();	  byte[]    headerBuf    =    buffer.getEOF();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
386	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getEOF_BACKSLASH();  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getEOF_BACKSLASH();  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getEOF_BACKSLASH();	  byte[]    headerBuf    =    buffer.getEOF();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
387	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(this.headerBuf,  this.readSize);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(this.headerBuf,  this.readSize);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getRecord(this.headerBuf,  this.readSize);	  byte[]    headerBuf    =    buffer.getRecord(this.headerBuf);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
388	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(this.headerBuf,  this.bufferSize);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(this.headerBuf,  this.bufferSize);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getRecord(this.headerBuf,  this.bufferSize);	  byte[]    headerBuf    =    buffer.getRecord(this.headerBuf);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
389	[BUG]  [BUGGY]  int  headerSize  =  buffer.getHeaderSize()  *  BUFFER_SIZE;  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  int  headerSize  =  buffer.getHeaderSize()  *  BUFFER_SIZE;  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	int  headerSize  =  buffer.getHeaderSize()  *  BUFFER_SIZE;	  int    headerSize    =    buffer.getHeaderSize();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
390	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecordBytes(this.header);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getRecordBytes(this.header);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getRecordBytes(this.header);	  byte[]    headerBuf    =    buffer.getRecordBytes();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
391	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readEOFRecord(headerBuf,  true);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readEOFRecord(headerBuf,  true);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readEOFRecord(headerBuf,  true);	  byte[]    headerBuf    =    buffer.readEOFRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
392	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(this,  headerSize);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(this,  headerSize);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getRecord(this,  headerSize);	  byte[]    headerBuf    =    buffer.getRecord(this);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
393	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  headerBuf,  headerSize);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  headerBuf,  headerSize);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  headerBuf,  headerSize);	  byte[]    headerBuf    =    buffer.readRecord(buffer,    headerBuf);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
394	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  headerBuf,  1);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  headerBuf,  1);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  headerBuf,  1);	  byte[]    headerBuf    =    buffer.readRecord(buffer,    headerBuf);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
395	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(-1);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(-1);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getRecord(-1);	  byte[]    headerBuf    =    buffer.getRecord(true);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
396	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(bodyBuf,  true);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(bodyBuf,  true);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(bodyBuf,  true);	  byte[]    headerBuf    =    buffer.readRecord(headerBuf,    true);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
397	[BUG]  [BUGGY]  if(buffer.isEOFRecord(headerBuf)&&  hasHitEOF)  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(buffer.isEOFRecord(headerBuf)&&  hasHitEOF)  {  hasHitEOF  =  false;  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(buffer.isEOFRecord(headerBuf)&&  hasHitEOF)  {  hasHitEOF  =  false;  }	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
398	[BUG]  [BUGGY]  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
399	[BUG]  [BUGGY]  if(buffer.isEOFRecord(header))  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(buffer.isEOFRecord(header))  {  hasHitEOF  =  false;  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(buffer.isEOFRecord(header))  {  hasHitEOF  =  false;  }	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
400	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.toByteArray(),  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.toByteArray(),  hasHitEOF;  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.toByteArray(),  hasHitEOF;	  byte[]    headerBuf    =    buffer.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
401	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(0,  true);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(0,  true);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(0,  true);	  byte[]    headerBuf    =    buffer.getHeaderBuffer(true);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
402	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(0,  0);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(0,  0);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(0,  0);	  byte[]    headerBuf    =    buffer.readRecord(0,    true);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
403	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(readBuf,  headerBuf);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(readBuf,  headerBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(readBuf,  headerBuf);	  byte[]    headerBuf    =    buffer.getHeaderBuffer(readBuf);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
404	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(256,  headerBuf);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(256,  headerBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(256,  headerBuf);	  byte[]    headerBuf    =    buffer.getHeaderBuffer(256);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
405	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }  else  {  buffer.setEOFRecord(headerBuf);  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }  else  {  buffer.setEOFRecord(headerBuf);  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }  else  {  buffer.setEOFRecord(headerBuf);  }	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    false;    }    else    if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
406	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }  else  {  buffer.setHeader(headerBuf);  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }  else  {  buffer.setHeader(headerBuf);  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }  else  {  buffer.setHeader(headerBuf);  }	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    false;    }    else    if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
407	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }  else  {  buffer.reset();  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }  else  {  buffer.reset();  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }  else  {  buffer.reset();  }	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    false;    }    else    if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
408	[BUG]  [BUGGY]  byte[]  headerBuf  =  this.headerBuf.readRecord(buffer,  headerBuf);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  this.headerBuf.readRecord(buffer,  headerBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  this.headerBuf.readRecord(buffer,  headerBuf);	  byte[]    headerBuf    =    this.headerBuf.readRecord(buffer);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
409	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  buf,  headerSize);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  buf,  headerSize);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this,  buf,  headerSize);	  byte[]    headerBuf    =    buffer.readRecord(this,    buf);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
410	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(this.header);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(this.header);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getRecord(this.header);	  byte[]    headerBuf    =    buffer.getRecord(null);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
411	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(headerBuf,  0,  skipBuf);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(headerBuf,  0,  skipBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(headerBuf,  0,  skipBuf);	  byte[]    headerBuf    =    buffer.readRecord(headerBuf,    skipBuf);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
412	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  headerBuf,  skipped);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  headerBuf,  skipped);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  headerBuf,  skipped);	  byte[]    headerBuf    =    buffer.readRecord(headerBuf,    skipBuf);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
413	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(readBuf,  headerBuf);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(readBuf,  headerBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(readBuf,  headerBuf);	  byte[]    headerBuf    =    buffer.readRecord(headerBuf,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
414	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(headerBuf,  readBuf,  buffer.length);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(headerBuf,  readBuf,  buffer.length);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(headerBuf,  readBuf,  buffer.length);	  byte[]    headerBuf    =    buffer.readRecord(headerBuf,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
415	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(headerBuf,  readBuf,  headerBuf);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(headerBuf,  readBuf,  headerBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(headerBuf,  readBuf,  headerBuf);	  byte[]    headerBuf    =    buffer.readRecord(headerBuf,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
416	[BUG]  [BUGGY]  HashTraversal.traverse(compiler,  headerBuf,  this);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  HashTraversal.traverse(compiler,  headerBuf,  this);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	HashTraversal.traverse(compiler,  headerBuf,  this);	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
417	[BUG]  [BUGGY]  HashTraversal.traverse(compiler,  buffer,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  HashTraversal.traverse(compiler,  buffer,  hasHitEOF);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	HashTraversal.traverse(compiler,  buffer,  hasHitEOF);	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
418	[BUG]  [BUGGY]  HashTraversal.traverse(compiler,  buffer,  hasHitEOF,  true);  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  HashTraversal.traverse(compiler,  buffer,  hasHitEOF,  true);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	HashTraversal.traverse(compiler,  buffer,  hasHitEOF,  true);	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
419	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(record.length);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(record.length);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(record.length);	  byte[]    headerBuf    =    buffer.getHeaderBuffer(record);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
420	[BUG]  [BUGGY]  byte[]  headerBuf  =  this.buffer.readRecord(buffer,  this.headerBuf,  this.bufferSize);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  this.buffer.readRecord(buffer,  this.headerBuf,  this.bufferSize);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  this.buffer.readRecord(buffer,  this.headerBuf,  this.bufferSize);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf,    this.bufferSize);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
421	[BUG]  [BUGGY]  int  headerSize  =  getRecordSize()  *  BUFFER_SIZE;  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  int  headerSize  =  getRecordSize()  *  BUFFER_SIZE;  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	int  headerSize  =  getRecordSize()  *  BUFFER_SIZE;	  int    headerSize    =    getRecordSize();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
422	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(headerBuf,  recordSize);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(headerBuf,  recordSize);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(headerBuf,  recordSize);	  byte[]    headerBuf    =    buffer.getHeaderBuffer(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
423	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  headerBuf,  true);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  headerBuf,  true);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this,  headerBuf,  true);	  byte[]    headerBuf    =    buffer.readRecord(this,    headerBuf);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
424	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  headerBuf,  null);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  headerBuf,  null);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this,  headerBuf,  null);	  byte[]    headerBuf    =    buffer.readRecord(this,    headerBuf);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
425	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  headerBuf,  false);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  headerBuf,  false);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this,  headerBuf,  false);	  byte[]    headerBuf    =    buffer.readRecord(this,    headerBuf);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
426	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  headerBuf,  1);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  headerBuf,  1);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this,  headerBuf,  1);	  byte[]    headerBuf    =    buffer.readRecord(this,    headerBuf);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
427	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(backgroundBuffer,  false);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(backgroundBuffer,  false);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(backgroundBuffer,  false);	  byte[]    headerBuf    =    buffer.readRecord(buffer,    false);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
428	[BUG]  [BUGGY]  ByteBuffer  headerBuf  =  buffer.readRecord(this.headerBuf,  true);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  ByteBuffer  headerBuf  =  buffer.readRecord(this.headerBuf,  true);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	ByteBuffer  headerBuf  =  buffer.readRecord(this.headerBuf,  true);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf,    true);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
429	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  null,  headerBuf);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  null,  headerBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this,  null,  headerBuf);	  byte[]    headerBuf    =    buffer.readRecord(this,    null);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
430	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(this.headerBuf,  this.readSize);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(this.headerBuf,  this.readSize);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(this.headerBuf,  this.readSize);	  byte[]    headerBuf    =    buffer.getHeaderBuffer(this.headerBuf);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
431	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(this.headerBuf  +  1);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(this.headerBuf  +  1);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(this.headerBuf  +  1);	  byte[]    headerBuf    =    buffer.getHeaderBuffer(this.headerBuf);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
432	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  readBuf,  headerSize);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this,  readBuf,  headerSize);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this,  readBuf,  headerSize);	  byte[]    headerBuf    =    buffer.readRecord(this,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
433	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  data.length);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  data.length);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  data.length);	  byte[]    headerBuf    =    buffer.readRecord(buffer,    recordSize);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
434	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  dataLength);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  dataLength);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  dataLength);	  byte[]    headerBuf    =    buffer.readRecord(buffer,    recordSize);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
435	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(header,  headerBuf);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(header,  headerBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(header,  headerBuf);	  byte[]    headerBuf    =    buffer.readRecord(headerBuf,    headerBuf);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
436	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readEOF(headerBuf,  true);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readEOF(headerBuf,  true);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readEOF(headerBuf,  true);	  byte[]    headerBuf    =    buffer.readEOF(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
437	[BUG]  [BUGGY]  int  headerSize  =  this.header.length();  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  int  headerSize  =  this.header.length();  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	int  headerSize  =  this.header.length();	  int    headerSize    =    buffer.length();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
438	[BUG]  [BUGGY]  int  headerSize  =  recordSize.length();  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  int  headerSize  =  recordSize.length();  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	int  headerSize  =  recordSize.length();	  int    headerSize    =    buffer.length();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
439	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  headerBuf,  recordSize);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  headerBuf,  recordSize);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  headerBuf,  recordSize);	  byte[]    headerBuf    =    buffer.readRecord(buffer,    record);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
440	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(headerBuf,  record);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(headerBuf,  record);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(headerBuf,  record);	  byte[]    headerBuf    =    buffer.readRecord(buffer,    record);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
441	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getEOFRecord(hashCode,  header);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getEOFRecord(hashCode,  header);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getEOFRecord(hashCode,  header);	  byte[]    headerBuf    =    buffer.getEOFRecord(header);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
442	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.read(headerBuf);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.read(headerBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.read(headerBuf);	  byte[]    headerBuf    =    buffer.read(buffer);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
443	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.read(buffer,  headerSize);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.read(buffer,  headerSize);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.read(buffer,  headerSize);	  byte[]    headerBuf    =    buffer.read(buffer);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
444	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  else  {  buffer.setHeader(headerBuf);  }  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  else  {  buffer.setHeader(headerBuf);  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  else  {  buffer.setHeader(headerBuf);  }	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    else    if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
445	[BUG]  [BUGGY]  if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  else  {  buffer.setEOFRecord(headerBuf);  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  else  {  buffer.setEOFRecord(headerBuf);  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(headerBuf  ==  null)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  else  {  buffer.setEOFRecord(headerBuf);  }	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    else    if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
446	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(16,  headerBuf);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getHeaderBuffer(16,  headerBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getHeaderBuffer(16,  headerBuf);	  byte[]    headerBuf    =    buffer.getHeaderBuffer(16);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
447	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(true,  readBuf,  headerBuf);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(true,  readBuf,  headerBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(true,  readBuf,  headerBuf);	  byte[]    headerBuf    =    buffer.readRecord(true,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
448	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buff,  readBuf);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buff,  readBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buff,  readBuf);	  byte[]    headerBuf    =    buffer.readRecord(true,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
449	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(record,  readBuf);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(record,  readBuf);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(record,  readBuf);	  byte[]    headerBuf    =    buffer.readRecord(true,    readBuf);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
450	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.header,  0,  this.headerBuf.length);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(this.header,  0,  this.headerBuf.length);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(this.header,  0,  this.headerBuf.length);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf,    0,    this.headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
451	[BUG]  [BUGGY]  ByteBuffer  headerBuf  =  buffer.readRecord(this.headerBuf,  0,  this.headerBuf.length);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  ByteBuffer  headerBuf  =  buffer.readRecord(this.headerBuf,  0,  this.headerBuf.length);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	ByteBuffer  headerBuf  =  buffer.readRecord(this.headerBuf,  0,  this.headerBuf.length);	  byte[]    headerBuf    =    buffer.readRecord(this.headerBuf,    0,    this.headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
452	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(record  +  1);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(record  +  1);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getRecord(record  +  1);	  byte[]    headerBuf    =    buffer.getRecord(record);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
453	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(headerBuf,  true);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.getRecord(headerBuf,  true);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.getRecord(headerBuf,  true);	  byte[]    headerBuf    =    buffer.getRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
454	[BUG]  [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  dataArea,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  byte[]  headerBuf  =  buffer.readRecord(buffer,  dataArea,  hasHitEOF);  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	byte[]  headerBuf  =  buffer.readRecord(buffer,  dataArea,  hasHitEOF);	  byte[]    headerBuf    =    buffer.readRecord(buffer,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
455	[BUG]  [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  <  =  0)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  byte[]  getRecord()  throws  IOException  {  if  (hasHitEOF)  {  return  null;  }      [BUGGY]  if(headerBuf  ==  null  ||  headerBuf.length  <  =  0)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [BUGGY]        if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  return  hasHitEOF  ?  null  :  headerBuf;  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	257	257	1	replace	if(headerBuf  ==  null  ||  headerBuf.length  <  =  0)  {  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    else    if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
