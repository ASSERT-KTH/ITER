bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  headerBuf?  null  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  headerBuf?  null  :  headerBuf.length;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  null  :  headerBuf.length;	  return    headerBuf?    null    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
2	[BUG]  [BUGGY]  return  headerBuf?  null  :  headerBuf.toByteArray();  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  headerBuf?  null  :  headerBuf.toByteArray();  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  null  :  headerBuf.toByteArray();	  return    headerBuf?    null    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
3	[BUG]  [BUGGY]  return  headerBuf?  null  :  headerBuf.toString();  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  headerBuf?  null  :  headerBuf.toString();  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  null  :  headerBuf.toString();	  return    headerBuf?    null    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
4	[BUG]  [BUGGY]  return  headerBuf?  null  :  headerBuf.read();  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  headerBuf?  null  :  headerBuf.read();  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  null  :  headerBuf.read();	  return    headerBuf?    null    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
5	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf.length  :  headerSize;  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  hasHitEOF?  headerBuf.length  :  headerSize;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf.length  :  headerSize;	  return    hasHitEOF?    headerSize    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
6	[BUG]  [BUGGY]  return  headerSize?  hasHitEOF  :  headerBuf;  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  headerSize?  hasHitEOF  :  headerBuf;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerSize?  hasHitEOF  :  headerBuf;	  return    hasHitEOF?    headerSize    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
7	[BUG]  [BUGGY]  return  hasHitEOF?  headerSize  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  hasHitEOF?  headerSize  :  headerBuf.length;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerSize  :  headerBuf.length;	  return    hasHitEOF?    headerSize    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
8	[BUG]  [BUGGY]  return  headerBuf?  headerSize  :  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  headerBuf?  headerSize  :  hasHitEOF;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  headerSize  :  hasHitEOF;	  return    hasHitEOF?    headerSize    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
9	[BUG]  [BUGGY]  return  headerBuf.length?  headerSize  :  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  headerBuf.length?  headerSize  :  hasHitEOF;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length?  headerSize  :  hasHitEOF;	  return    hasHitEOF?    headerSize    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
10	[BUG]  [BUGGY]  return  headerBuf?  hasHitEOF  :  headerBuf;  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  headerBuf?  hasHitEOF  :  headerBuf;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  hasHitEOF  :  headerBuf;	  return    hasHitEOF?    header    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
11	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  header;  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  hasHitEOF?  headerBuf  :  header;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  header;	  return    hasHitEOF?    header    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
12	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  headerBuf;  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  hasHitEOF?  headerBuf  :  headerBuf;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  headerBuf;	  return    hasHitEOF?    header    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
13	[BUG]  [BUGGY]  return  headerBuf.hasHitEOF?  header  :  hasHitEOF;  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  headerBuf.hasHitEOF?  header  :  hasHitEOF;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.hasHitEOF?  header  :  hasHitEOF;	  return    hasHitEOF?    header    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
14	[BUG]  [BUGGY]  return  headerBuf?  hasHitEOF  :  header;  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  headerBuf?  hasHitEOF  :  header;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  hasHitEOF  :  header;	  return    hasHitEOF?    header    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
15	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf.length  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  hasHitEOF?  headerBuf.length  :  headerBuf.length;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf.length  :  headerBuf.length;	  return    hasHitEOF?    headerBuf.length    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
16	[BUG]  [BUGGY]  return  headerBuf.length?  hasHitEOF  :  headerBuf;  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  headerBuf.length?  hasHitEOF  :  headerBuf;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length?  hasHitEOF  :  headerBuf;	  return    hasHitEOF?    headerBuf.length    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
17	[BUG]  [BUGGY]  return  headerBuf.length?  headerBuf.length  :  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  headerBuf.length?  headerBuf.length  :  hasHitEOF;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length?  headerBuf.length  :  hasHitEOF;	  return    hasHitEOF?    headerBuf.length    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
18	[BUG]  [BUGGY]  return  headerBuf.length  hasHitEOF?  headerBuf.length  :  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  headerBuf.length  hasHitEOF?  headerBuf.length  :  hasHitEOF;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  hasHitEOF?  headerBuf.length  :  hasHitEOF;	  return    hasHitEOF?    headerBuf.length    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
19	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf.length  :  headerBuf.length  +  1;  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  hasHitEOF?  headerBuf.length  :  headerBuf.length  +  1;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf.length  :  headerBuf.length  +  1;	  return    hasHitEOF?    headerBuf.length    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
20	[BUG]  [BUGGY]  return  buffer.readRecord();  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  buffer.readRecord();  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  buffer.readRecord();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
21	[BUG]  [BUGGY]  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
22	[BUG]  [BUGGY]  if(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  if(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	if(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
23	[BUG]  [BUGGY]  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
24	[BUG]  [BUGGY]  while(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  while(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	while(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
25	[BUG]  [BUGGY]  if(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  if(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  false;  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	if(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  false;  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
26	[BUG]  [BUGGY]  if(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  if(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	if(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
27	[BUG]  [BUGGY]  return  headerBuf.length?  null  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  headerBuf.length?  null  :  headerBuf.length;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length?  null  :  headerBuf.length;	  return    hasHitEOF?    null    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
28	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf.length  :  null;  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  hasHitEOF?  headerBuf.length  :  null;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf.length  :  null;	  return    hasHitEOF?    null    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
29	[BUG]  [BUGGY]  return  headerBuf!=  null?  null  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  headerBuf!=  null?  null  :  headerBuf.length;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf!=  null?  null  :  headerBuf.length;	  return    hasHitEOF?    null    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
30	[BUG]  [BUGGY]  return  headerBuf,  hasHitEOF?  null  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  headerBuf,  hasHitEOF?  null  :  headerBuf.length;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf,  hasHitEOF?  null  :  headerBuf.length;	  return    hasHitEOF?    null    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
31	[BUG]  [BUGGY]  return  headerBuf  ==  null?  null  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  headerBuf  ==  null?  null  :  headerBuf.length;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf  ==  null?  null  :  headerBuf.length;	  return    hasHitEOF?    null    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
32	[BUG]  [BUGGY]  return  headerBuf?  hasHitEOF  :  null;  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  headerBuf?  hasHitEOF  :  null;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  hasHitEOF  :  null;	  return    hasHitEOF?    headerBuf    :    null;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
33	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readRecord();  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readRecord();  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  buffer.readRecord();	  return    hasHitEOF?    headerBuf    :    null;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
34	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readRecord(headerBuf);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readRecord(headerBuf);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  buffer.readRecord(headerBuf);	  return    hasHitEOF?    headerBuf    :    null;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
35	[BUG]  [BUGGY]  return  hasHitEOF  &  headerBuf  :  null;  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  hasHitEOF  &  headerBuf  :  null;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF  &  headerBuf  :  null;	  return    hasHitEOF?    headerBuf    :    null;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
36	[BUG]  [BUGGY]  return  headerBuf?  null  :  headerBuf  +  1;  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  headerBuf?  null  :  headerBuf  +  1;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  null  :  headerBuf  +  1;	  return    hasHitEOF?    null    :    headerBuf    +    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
37	[BUG]  [BUGGY]  return  hasHitEOF?  null  :  headerBuf.length  +  1;  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  hasHitEOF?  null  :  headerBuf.length  +  1;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  null  :  headerBuf.length  +  1;	  return    hasHitEOF?    null    :    headerBuf    +    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
38	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  null  +  1;  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  hasHitEOF?  headerBuf  :  null  +  1;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  null  +  1;	  return    hasHitEOF?    null    :    headerBuf    +    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
39	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf.length  :  headerBuf  +  1;  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  hasHitEOF?  headerBuf.length  :  headerBuf  +  1;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf.length  :  headerBuf  +  1;	  return    hasHitEOF?    null    :    headerBuf    +    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
40	[BUG]  [BUGGY]  return  headerBuf,  hasHitEOF?  null  :  headerBuf  +  1;  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  headerBuf,  hasHitEOF?  null  :  headerBuf  +  1;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf,  hasHitEOF?  null  :  headerBuf  +  1;	  return    hasHitEOF?    null    :    headerBuf    +    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
41	[BUG]  [BUGGY]  return  headerBuf.toByteArray()?  null  :  headerBuf.toByteArray();  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  headerBuf.toByteArray()?  null  :  headerBuf.toByteArray();  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.toByteArray()?  null  :  headerBuf.toByteArray();	  return    hasHitEOF?    null    :    headerBuf.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
42	[BUG]  [BUGGY]  return  headerBuf.hasHitEOF?  null  :  headerBuf.toByteArray();  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  headerBuf.hasHitEOF?  null  :  headerBuf.toByteArray();  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.hasHitEOF?  null  :  headerBuf.toByteArray();	  return    hasHitEOF?    null    :    headerBuf.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
43	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf.length  :  headerBuf.toByteArray();  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  hasHitEOF?  headerBuf.length  :  headerBuf.toByteArray();  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf.length  :  headerBuf.toByteArray();	  return    hasHitEOF?    null    :    headerBuf.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
44	[BUG]  [BUGGY]  return  headerBuf!=  null?  null  :  headerBuf.toByteArray();  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  headerBuf!=  null?  null  :  headerBuf.toByteArray();  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf!=  null?  null  :  headerBuf.toByteArray();	  return    hasHitEOF?    null    :    headerBuf.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
45	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  null.toByteArray();  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  hasHitEOF?  headerBuf  :  null.toByteArray();  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  null.toByteArray();	  return    hasHitEOF?    null    :    headerBuf.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
46	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf.length  :  buffer.length;  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  hasHitEOF?  headerBuf.length  :  buffer.length;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf.length  :  buffer.length;	  return    hasHitEOF?    buffer.length    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
47	[BUG]  [BUGGY]  return  headerBuf.length  :  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  headerBuf.length  :  hasHitEOF;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  :  hasHitEOF;	  return    hasHitEOF?    buffer.length    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
48	[BUG]  [BUGGY]  return  headerBuf.length?  hasHitEOF  :  buffer.length;  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  headerBuf.length?  hasHitEOF  :  buffer.length;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length?  hasHitEOF  :  buffer.length;	  return    hasHitEOF?    buffer.length    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
49	[BUG]  [BUGGY]  return  buffer.length?  headerBuf.length  :  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  buffer.length?  headerBuf.length  :  hasHitEOF;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  buffer.length?  headerBuf.length  :  hasHitEOF;	  return    hasHitEOF?    buffer.length    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
50	[BUG]  [BUGGY]  return  headerBuf.length  -  hasHitEOF?  buffer.length  :  headerBuf;  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  headerBuf.length  -  hasHitEOF?  buffer.length  :  headerBuf;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  -  hasHitEOF?  buffer.length  :  headerBuf;	  return    hasHitEOF?    buffer.length    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
51	[BUG]  [BUGGY]  return  headerBuf?  null  :  headerBuf.hashCode();  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  headerBuf?  null  :  headerBuf.hashCode();  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  null  :  headerBuf.hashCode();	  return    headerBuf?    null    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
52	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  headerBuf,  0,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  System.arraycopy(buffer,  0,  buf,  headerBuf,  0,  headerBuf.length);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	System.arraycopy(buffer,  0,  buf,  headerBuf,  0,  headerBuf.length);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
53	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  headerBuf,  0,  headerSize);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  System.arraycopy(buffer,  0,  buf,  headerBuf,  0,  headerSize);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	System.arraycopy(buffer,  0,  buf,  headerBuf,  0,  headerSize);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
54	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  headerBuf,  0,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  System.arraycopy(buffer,  0,  headerBuf,  0,  headerBuf.length);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	System.arraycopy(buffer,  0,  headerBuf,  0,  headerBuf.length);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
55	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  headerBuf,  0,  buffer.length);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  System.arraycopy(buffer,  0,  buf,  headerBuf,  0,  buffer.length);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	System.arraycopy(buffer,  0,  buf,  headerBuf,  0,  buffer.length);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
56	[BUG]  [BUGGY]  return  headerBuf?  null  :  buffer.readRecord();  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  headerBuf?  null  :  buffer.readRecord();  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  null  :  buffer.readRecord();	  return    headerBuf?    null    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
57	[BUG]  [BUGGY]  return  headerBuf?  buffer.length  :  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  headerBuf?  buffer.length  :  hasHitEOF;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  buffer.length  :  hasHitEOF;	  return    hasHitEOF?    buffer.length    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
58	[BUG]  [BUGGY]  return  headerBuf.length  :  hasHitEOF?  buffer.length  :  headerBuf;  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  headerBuf.length  :  hasHitEOF?  buffer.length  :  headerBuf;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  :  hasHitEOF?  buffer.length  :  headerBuf;	  return    hasHitEOF?    buffer.length    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
59	[BUG]  [BUGGY]  return  buffer.length  :  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  buffer.length  :  hasHitEOF;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  buffer.length  :  hasHitEOF;	  return    hasHitEOF?    buffer.length    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
60	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf);  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf);	  return    hasHitEOF?    headerBuf    :    null;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
61	[BUG]  [BUGGY]  return  headerBuf?  null  :  headerBuf,  hasHitEOF;  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  headerBuf?  null  :  headerBuf,  hasHitEOF;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  null  :  headerBuf,  hasHitEOF;	  return    headerBuf?    null    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
62	[BUG]  [BUGGY]  return  hasHitEOF?  header  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  hasHitEOF?  header  :  headerBuf.length;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  header  :  headerBuf.length;	  return    hasHitEOF?    header    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
63	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.toByteArray();  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.toByteArray();  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  buffer.toByteArray();	  return    hasHitEOF?    null    :    headerBuf.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
64	[BUG]  [BUGGY]  return  hasHitEOF?  null  :  buffer.toByteArray();  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  hasHitEOF?  null  :  buffer.toByteArray();  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  null  :  buffer.toByteArray();	  return    hasHitEOF?    null    :    headerBuf.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
65	[BUG]  [BUGGY]  return  headerBuf  buzunar?  null  :  headerBuf.toByteArray();  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  headerBuf  buzunar?  null  :  headerBuf.toByteArray();  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf  buzunar?  null  :  headerBuf.toByteArray();	  return    hasHitEOF?    null    :    headerBuf.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
66	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  headerSize;  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  hasHitEOF?  headerBuf  :  headerSize;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  headerSize;	  return    hasHitEOF?    headerSize    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
67	[BUG]  [BUGGY]  return  headerBuf  >  null?  null  :  headerBuf  +  1;  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  headerBuf  >  null?  null  :  headerBuf  +  1;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf  >  null?  null  :  headerBuf  +  1;	  return    hasHitEOF?    null    :    headerBuf    +    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
68	[BUG]  [BUGGY]  return  headerBuf.length  >  hasHitEOF?  headerBuf.length  :  headerBuf;  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  headerBuf.length  >  hasHitEOF?  headerBuf.length  :  headerBuf;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  >  hasHitEOF?  headerBuf.length  :  headerBuf;	  return    hasHitEOF?    headerBuf.length    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
69	[BUG]  [BUGGY]  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  else  {  buffer.readRecord();  }  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  else  {  buffer.readRecord();  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  else  {  buffer.readRecord();  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
70	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  hasHitEOF?  headerBuf  :  headerBuf.length;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  headerBuf.length;	  return    hasHitEOF?    null    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
71	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf,  null  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  hasHitEOF?  headerBuf,  null  :  headerBuf.length;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf,  null  :  headerBuf.length;	  return    hasHitEOF?    null    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
72	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf,  headerBuf.length  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  hasHitEOF?  headerBuf,  headerBuf.length  :  headerBuf.length;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf,  headerBuf.length  :  headerBuf.length;	  return    hasHitEOF?    headerBuf.length    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
73	[BUG]  [BUGGY]  return  headerBuf,  null  :  hasHitEOF;  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  headerBuf,  null  :  hasHitEOF;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf,  null  :  hasHitEOF;	  return    headerBuf?    null    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
74	[BUG]  [BUGGY]  return  hasHitEOF?  buffer.length  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  hasHitEOF?  buffer.length  :  headerBuf.length;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  buffer.length  :  headerBuf.length;	  return    hasHitEOF?    buffer.length    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
75	[BUG]  [BUGGY]  return  hasHitEOF?  header.length  :  buffer.length;  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  hasHitEOF?  header.length  :  buffer.length;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  header.length  :  buffer.length;	  return    hasHitEOF?    buffer.length    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
76	[BUG]  [BUGGY]  return  hasHitEOF?  header  :  headerBuf.toString();  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  hasHitEOF?  header  :  headerBuf.toString();  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  header  :  headerBuf.toString();	  return    hasHitEOF?    header    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
77	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  headerBuf  +  1;  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  hasHitEOF?  headerBuf  :  headerBuf  +  1;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  headerBuf  +  1;	  return    hasHitEOF?    null    :    headerBuf    +    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
78	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  null  :  headerBuf  +  1;  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  hasHitEOF?  headerBuf  null  :  headerBuf  +  1;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  null  :  headerBuf  +  1;	  return    hasHitEOF?    null    :    headerBuf    +    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
79	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.isEOFRecord(headerBuf);  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.isEOFRecord(headerBuf);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  buffer.isEOFRecord(headerBuf);	  return    hasHitEOF?    headerBuf    :    null;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
80	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.isEOFRecord(headerBuf):  null;  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.isEOFRecord(headerBuf):  null;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  buffer.isEOFRecord(headerBuf):  null;	  return    hasHitEOF?    headerBuf    :    null;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
81	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf):  null;  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf):  null;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf):  null;	  return    hasHitEOF?    headerBuf    :    null;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
82	[BUG]  [BUGGY]  return  hasHitEOF?  header.length  :  headerBuf;  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  hasHitEOF?  header.length  :  headerBuf;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  header.length  :  headerBuf;	  return    hasHitEOF?    headerSize    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
83	[BUG]  [BUGGY]  return  hasHitEOF?  headerToSkip  :  headerBuf;  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }    [BUGGY]  return  hasHitEOF?  headerToSkip  :  headerBuf;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerToSkip  :  headerBuf;	  return    hasHitEOF?    headerSize    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
