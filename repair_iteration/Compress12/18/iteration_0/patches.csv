bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  null;  [CE]  illegal  start  of  type  [FE]    IllegalArgumentException  [CONTEXT]  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [BUGGY]  return  hasHitEOF?  headerBuf  :  null;  [BUGGY]  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  null;	return  hasHitEOF  ?  null  :  headerBuf;  	non-compiled	[CE]  illegal  start  of  type	35	None	replace
2	[BUG]  [BUGGY]  return  headerBuf?  null  :  headerBuf;  [CE]  illegal  start  of  type  [FE]      IllegalArgumentException  [CONTEXT]  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [BUGGY]  return  headerBuf?  null  :  headerBuf;  [BUGGY]  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  null  :  headerBuf;	return  hasHitEOF  ?  null  :  headerBuf;  	non-compiled	[CE]  illegal  start  of  type	35	None	replace
3	[BUG]  [BUGGY]  return  hasHitEOF?  null  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException  [CONTEXT]  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [BUGGY]  return  hasHitEOF?  null  :  headerBuf.length;  [BUGGY]  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  null  :  headerBuf.length;	return  hasHitEOF  ?  null  :  headerBuf;  	non-compiled	[CE]  illegal  start  of  type	35	None	replace
4	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf.length  :  headerBuf;  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException  [CONTEXT]  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [BUGGY]  return  hasHitEOF?  headerBuf.length  :  headerBuf;  [BUGGY]  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf.length  :  headerBuf;	return  hasHitEOF  ?  null  :  headerBuf;  	non-compiled	[CE]  illegal  start  of  type	35	None	replace
5	[BUG]  [BUGGY]  return  hasHitEOF?  null  :  headerBuf.toByteArray();  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException  [CONTEXT]  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [BUGGY]  return  hasHitEOF?  null  :  headerBuf.toByteArray();  [BUGGY]  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  null  :  headerBuf.toByteArray();	return  hasHitEOF  ?  null  :  headerBuf;  	non-compiled	[CE]  illegal  start  of  type	35	None	replace
6	[BUG]  [BUGGY]  return  hasHitEOF?  buffer.length  :  headerBuf;  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException  [CONTEXT]  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [BUGGY]  return  hasHitEOF?  buffer.length  :  headerBuf;  [BUGGY]  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  buffer.length  :  headerBuf;	return  hasHitEOF  ?  null  :  headerBuf;  	non-compiled	[CE]  illegal  start  of  type	35	None	replace
7	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]                IllegalArgumentException  [CONTEXT]  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [BUGGY]    [BUGGY]  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	  	return  hasHitEOF  ?  null  :  headerBuf;  	non-compiled	[CE]  illegal  start  of  type	35	None	replace
8	[BUG]  [BUGGY]  return  headerBuf?  null  :  hasHitEOF;  [CE]  illegal  start  of  type  [FE]    IllegalArgumentException  [CONTEXT]  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [BUGGY]  return  headerBuf?  null  :  hasHitEOF;  [BUGGY]  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  null  :  hasHitEOF;	return  hasHitEOF  ?  null  :  headerBuf;  	non-compiled	[CE]  illegal  start  of  type	35	None	replace
9	[BUG]  [BUGGY]  return  hasHitEOF?  null  :  headerBuf  +  1;  [CE]  illegal  start  of  type  [FE]      IllegalArgumentException  [CONTEXT]  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [BUGGY]  return  hasHitEOF?  null  :  headerBuf  +  1;  [BUGGY]  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  null  :  headerBuf  +  1;	return  hasHitEOF  ?  null  :  headerBuf;  	non-compiled	[CE]  illegal  start  of  type	35	None	replace
10	[BUG]  [BUGGY]  return  hasHitEOF?  header  :  headerBuf;  [CE]  illegal  start  of  type  [FE]    IllegalArgumentException  [CONTEXT]  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [BUGGY]  return  hasHitEOF?  header  :  headerBuf;  [BUGGY]  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  header  :  headerBuf;	return  hasHitEOF  ?  null  :  headerBuf;  	non-compiled	[CE]  illegal  start  of  type	35	None	replace
11	[BUG]  [BUGGY]  return  hasHitEOF?  headerSize  :  headerBuf;  [CE]  illegal  start  of  type  [FE]      IllegalArgumentException  [CONTEXT]  }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [BUGGY]  return  hasHitEOF?  headerSize  :  headerBuf;  [BUGGY]  }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerSize  :  headerBuf;	return  hasHitEOF  ?  null  :  headerBuf;  	non-compiled	[CE]  illegal  start  of  type	35	None	replace
