bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  headerBuf.length  -  headerSize  :  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length  -  headerSize  :  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  -  headerSize  :  hasHitEOF;	  return    headerBuf.length?    headerSize    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
2	[BUG]  [BUGGY]  return  headerBuf.length?  headerSize  :  hasHitEOF  +  1;  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length?  headerSize  :  hasHitEOF  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length?  headerSize  :  hasHitEOF  +  1;	  return    headerBuf.length?    headerSize    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
3	[BUG]  [BUGGY]  return  headerBuf.length?  headerSize  :  isEOF;  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length?  headerSize  :  isEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length?  headerSize  :  isEOF;	  return    headerBuf.length?    headerSize    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
4	[BUG]  [BUGGY]  return  headerBuf.length?  headerSize  :  HITEOF;  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length?  headerSize  :  HITEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length?  headerSize  :  HITEOF;	  return    headerBuf.length?    headerSize    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
5	[BUG]  [BUGGY]  return  headerBuf.length?  headerSize  :  buffer.length;  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length?  headerSize  :  buffer.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length?  headerSize  :  buffer.length;	  return    headerBuf.length?    headerSize    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
6	[BUG]  [BUGGY]  return  headerBuf  ==  null?  null  :  headerBuf.toByteArray();  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf  ==  null?  null  :  headerBuf.toByteArray();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf  ==  null?  null  :  headerBuf.toByteArray();	  return    headerBuf!=    null?    null    :    headerBuf.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
7	[BUG]  [BUGGY]  return  headerBuf!=  null?  null  :  buffer.toByteArray();  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf!=  null?  null  :  buffer.toByteArray();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf!=  null?  null  :  buffer.toByteArray();	  return    headerBuf!=    null?    null    :    headerBuf.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
8	[BUG]  [BUGGY]  return  headerBuf  ==  null?  null  :  buffer.toByteArray();  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf  ==  null?  null  :  buffer.toByteArray();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf  ==  null?  null  :  buffer.toByteArray();	  return    headerBuf!=    null?    null    :    headerBuf.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
9	[BUG]  [BUGGY]  return  headerBuf  >=  null?  null  :  headerBuf.toByteArray();  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf  >=  null?  null  :  headerBuf.toByteArray();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf  >=  null?  null  :  headerBuf.toByteArray();	  return    headerBuf!=    null?    null    :    headerBuf.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
10	[BUG]  [BUGGY]  return  headerBuf?  headerBuf  :  null;  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  headerBuf  :  null;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  headerBuf  :  null;	  return    headerBuf?    hasHitEOF    :    null;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
11	[BUG]  [BUGGY]  return  headerBuf?  hasHitEOF  :  buffer.readRecord();  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  hasHitEOF  :  buffer.readRecord();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  hasHitEOF  :  buffer.readRecord();	  return    headerBuf?    hasHitEOF    :    null;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
12	[BUG]  [BUGGY]  while(buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  while(buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	while(buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;	  while(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
13	[BUG]  [BUGGY]  while(buffer.hasHitEOF  &&  buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  while(buffer.hasHitEOF  &&  buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	while(buffer.hasHitEOF  &&  buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;	  while(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
14	[BUG]  [BUGGY]  HeaderBuffer  headerBuf  =  buffer.readRecord();  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  HeaderBuffer  headerBuf  =  buffer.readRecord();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	HeaderBuffer  headerBuf  =  buffer.readRecord();	  while(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
15	[BUG]  [BUGGY]  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  hasHitEOF  =  true;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	hasHitEOF  =  true;	  while(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
16	[BUG]  [BUGGY]  while(buffer.isEOFRecord(headerBuf)&&  headerBuf.length()  >  0)  {  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  while(buffer.isEOFRecord(headerBuf)&&  headerBuf.length()  >  0)  {  hasHitEOF  =  true;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	while(buffer.isEOFRecord(headerBuf)&&  headerBuf.length()  >  0)  {  hasHitEOF  =  true;	  while(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
17	[BUG]  [BUGGY]  while(buffer.isEOFRecord(headerBuf)&&!hasHitEOF)  {  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                          IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  while(buffer.isEOFRecord(headerBuf)&&!hasHitEOF)  {  hasHitEOF  =  true;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	while(buffer.isEOFRecord(headerBuf)&&!hasHitEOF)  {  hasHitEOF  =  true;	  while(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
18	[BUG]  [BUGGY]  while(buffer.isEOFRecord(headerBuf)&&  hasHitEOF!=  false)  {  [CE]  illegal  start  of  type  [FE]                                            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  while(buffer.isEOFRecord(headerBuf)&&  hasHitEOF!=  false)  {  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	while(buffer.isEOFRecord(headerBuf)&&  hasHitEOF!=  false)  {	  while(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
19	[BUG]  [BUGGY]  return  headerBuf?  hasHitEOF  :  buffer.toByteArray();  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  hasHitEOF  :  buffer.toByteArray();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  hasHitEOF  :  buffer.toByteArray();	  return    hasHitEOF?    headerBuf    :    buffer.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
20	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf.length  :  buffer.toByteArray();  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf.length  :  buffer.toByteArray();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf.length  :  buffer.toByteArray();	  return    hasHitEOF?    headerBuf    :    buffer.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
21	[BUG]  [BUGGY]  return  hasHitEOF  &&  headerBuf  :  buffer.toByteArray();  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF  &&  headerBuf  :  buffer.toByteArray();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF  &&  headerBuf  :  buffer.toByteArray();	  return    hasHitEOF?    headerBuf    :    buffer.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
22	[BUG]  [BUGGY]  return  headerBuf.hasHitEOF?  headerBuf  :  buffer.toByteArray();  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.hasHitEOF?  headerBuf  :  buffer.toByteArray();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.hasHitEOF?  headerBuf  :  buffer.toByteArray();	  return    hasHitEOF?    headerBuf    :    buffer.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
23	[BUG]  [BUGGY]  return  isEOF?  headerBuf  :  buffer.toByteArray();  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  isEOF?  headerBuf  :  buffer.toByteArray();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  isEOF?  headerBuf  :  buffer.toByteArray();	  return    hasHitEOF?    headerBuf    :    buffer.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
24	[BUG]  [BUGGY]  return  headerBuf,  hasHitEOF?  null  :  headerBuf.length  +  1;  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf,  hasHitEOF?  null  :  headerBuf.length  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf,  hasHitEOF?  null  :  headerBuf.length  +  1;	  return    headerBuf,    hasHitEOF?    null    :    headerBuf    +    1;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
25	[BUG]  [BUGGY]  return  headerBuf,  headerBuf?  null  :  headerBuf  +  1;  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf,  headerBuf?  null  :  headerBuf  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf,  headerBuf?  null  :  headerBuf  +  1;	  return    headerBuf,    hasHitEOF?    null    :    headerBuf    +    1;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
26	[BUG]  [BUGGY]  return  headerBuf,  null?  null  :  headerBuf  +  1;  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf,  null?  null  :  headerBuf  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf,  null?  null  :  headerBuf  +  1;	  return    headerBuf,    hasHitEOF?    null    :    headerBuf    +    1;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
27	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf.length  :  buffer.readRecord();  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf.length  :  buffer.readRecord();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf.length  :  buffer.readRecord();	  return    hasHitEOF?    headerBuf    :    buffer.readRecord();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
28	[BUG]  [BUGGY]  return  hasHitEOF  &&  headerBuf  :  buffer.readRecord();  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF  &&  headerBuf  :  buffer.readRecord();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF  &&  headerBuf  :  buffer.readRecord();	  return    hasHitEOF?    headerBuf    :    buffer.readRecord();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
29	[BUG]  [BUGGY]  return  headerBuf.hasHitEOF?  headerBuf  :  buffer.readRecord();  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.hasHitEOF?  headerBuf  :  buffer.readRecord();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.hasHitEOF?  headerBuf  :  buffer.readRecord();	  return    hasHitEOF?    headerBuf    :    buffer.readRecord();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
30	[BUG]  [BUGGY]  return  headerBuf.length?  hasHitEOF  :  null;  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length?  hasHitEOF  :  null;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length?  hasHitEOF  :  null;	  return    hasHitEOF?    headerBuf.length    :    null;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
31	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf.length  :  0;  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf.length  :  0;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf.length  :  0;	  return    hasHitEOF?    headerBuf.length    :    null;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
32	[BUG]  [BUGGY]  return  headerBuf.length  :  null;  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length  :  null;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  :  null;	  return    hasHitEOF?    headerBuf.length    :    null;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
33	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf.length  :  1;  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf.length  :  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf.length  :  1;	  return    hasHitEOF?    headerBuf.length    :    null;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
34	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf.length  :  this;  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf.length  :  this;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf.length  :  this;	  return    hasHitEOF?    headerBuf.length    :    null;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
35	[BUG]  [BUGGY]  return  headerBuf?  null  :  headerBuf.length  +  1;  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  null  :  headerBuf.length  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  null  :  headerBuf.length  +  1;	  return    hasHitEOF?    null    :    headerBuf.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
36	[BUG]  [BUGGY]  return  headerBuf.length  :  hasHitEOF  +  1;  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length  :  hasHitEOF  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  :  hasHitEOF  +  1;	  return    hasHitEOF?    null    :    headerBuf.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
37	[BUG]  [BUGGY]  return  headerBuf.length  -  hasHitEOF?  null  :  headerBuf.length  +  1;  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length  -  hasHitEOF?  null  :  headerBuf.length  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  -  hasHitEOF?  null  :  headerBuf.length  +  1;	  return    hasHitEOF?    null    :    headerBuf.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
38	[BUG]  [BUGGY]  return  headerBuf.length?  null  :  headerBuf.length  +  1;  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length?  null  :  headerBuf.length  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length?  null  :  headerBuf.length  +  1;	  return    hasHitEOF?    null    :    headerBuf.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
39	[BUG]  [BUGGY]  return  headerBuf,  null  :  headerBuf.length  +  1;  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf,  null  :  headerBuf.length  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf,  null  :  headerBuf.length  +  1;	  return    hasHitEOF?    null    :    headerBuf.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
40	[BUG]  [BUGGY]  return  headerBuf?  hasHitEOF  :  headerBuf  +  1;  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  hasHitEOF  :  headerBuf  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  hasHitEOF  :  headerBuf  +  1;	  return    hasHitEOF?    headerBuf    :    headerBuf    +    1;    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
41	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  headerBuf.length  +  1;  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  headerBuf.length  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  headerBuf.length  +  1;	  return    hasHitEOF?    headerBuf    :    headerBuf    +    1;    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
42	[BUG]  [BUGGY]  return  headerBuf.hasHitEOF?  headerBuf  :  hasHitEOF  +  1;  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.hasHitEOF?  headerBuf  :  hasHitEOF  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.hasHitEOF?  headerBuf  :  hasHitEOF  +  1;	  return    hasHitEOF?    headerBuf    :    headerBuf    +    1;    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
43	[BUG]  [BUGGY]  return  headerBuf.hashCode()?  headerBuf  :  hasHitEOF  +  1;  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.hashCode()?  headerBuf  :  hasHitEOF  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.hashCode()?  headerBuf  :  hasHitEOF  +  1;	  return    hasHitEOF?    headerBuf    :    headerBuf    +    1;    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
44	[BUG]  [BUGGY]  return  headerBuf.length?  hasHitEOF  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length?  hasHitEOF  :  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length?  hasHitEOF  :  headerBuf.length;	  return    hasHitEOF?    headerBuf    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
45	[BUG]  [BUGGY]  return  headerBuf.length  hasHitEOF?  headerBuf  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length  hasHitEOF?  headerBuf  :  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  hasHitEOF?  headerBuf  :  headerBuf.length;	  return    hasHitEOF?    headerBuf    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
46	[BUG]  [BUGGY]  return  headerBuf?  hasHitEOF  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  hasHitEOF  :  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  hasHitEOF  :  headerBuf.length;	  return    hasHitEOF?    headerBuf    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
47	[BUG]  [BUGGY]  return  headerBuf.length?  headerBuf  :  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length?  headerBuf  :  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length?  headerBuf  :  hasHitEOF;	  return    hasHitEOF?    headerBuf    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
48	[BUG]  [BUGGY]  return  headerBuf?  headerSize  :  hasHitEOF  +  1;  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  headerSize  :  hasHitEOF  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  headerSize  :  hasHitEOF  +  1;	  return    headerBuf?    headerSize    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
49	[BUG]  [BUGGY]  return  headerBuf?  headerSize  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  headerSize  :  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  headerSize  :  headerBuf.length;	  return    headerBuf?    headerSize    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
50	[BUG]  [BUGGY]  return  headerBuf.length?  buffer.length  :  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length?  buffer.length  :  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length?  buffer.length  :  hasHitEOF;	  return    buffer.length?    headerBuf.length    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
51	[BUG]  [BUGGY]  return  hasHitEOF?  buffer.length  :  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  buffer.length  :  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  buffer.length  :  hasHitEOF;	  return    buffer.length?    headerBuf.length    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
52	[BUG]  [BUGGY]  return  headerBuf?  null  :  headerBuf,  hasHitEOF  +  1;  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  null  :  headerBuf,  hasHitEOF  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  null  :  headerBuf,  hasHitEOF  +  1;	  return    headerBuf?    null    :    headerBuf    +    1;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
53	[BUG]  [BUGGY]  return  headerBuf?  null  :  headerBuf  +  1,  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  null  :  headerBuf  +  1,  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  null  :  headerBuf  +  1,  hasHitEOF;	  return    headerBuf?    null    :    headerBuf    +    1;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
54	[BUG]  [BUGGY]  return  headerBuf?  null  :  headerBuf  +  2;  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  null  :  headerBuf  +  2;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  null  :  headerBuf  +  2;	  return    headerBuf?    null    :    headerBuf    +    1;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
55	[BUG]  [BUGGY]  return  headerBuf,  null  -  hasHitEOF;  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf,  null  -  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf,  null  -  hasHitEOF;	  return    headerBuf,    null    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
56	[BUG]  [BUGGY]  return  headerBuf,  null  &&  hasHitEOF;  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf,  null  &&  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf,  null  &&  hasHitEOF;	  return    headerBuf,    null    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
57	[BUG]  [BUGGY]  return  headerBuf,  null  /  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf,  null  /  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf,  null  /  hasHitEOF;	  return    headerBuf,    null    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
58	[BUG]  [BUGGY]  return  headerBuf,  null?  hasHitEOF  :  headerBuf;  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf,  null?  hasHitEOF  :  headerBuf;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf,  null?  hasHitEOF  :  headerBuf;	  return    headerBuf,    null    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
59	[BUG]  [BUGGY]  return  headerBuf,  buffer.readRecord()  :  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf,  buffer.readRecord()  :  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf,  buffer.readRecord()  :  hasHitEOF;	  return    headerBuf,    null    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
60	[BUG]  [BUGGY]  return  headerBuf,  null?  hasHitEOF  :  buffer.readRecord();  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf,  null?  hasHitEOF  :  buffer.readRecord();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf,  null?  hasHitEOF  :  buffer.readRecord();	  return    headerBuf,    null    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
61	[BUG]  [BUGGY]  return  headerBuf,  hasHitEOF  :  null;  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf,  hasHitEOF  :  null;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf,  hasHitEOF  :  null;	  return    headerBuf,    null    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
62	[BUG]  [BUGGY]  else  if(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  else  if(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	else  if(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(headerBuf))    {    for(int    i    =    0;    i    <    buffer.length;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
63	[BUG]  [BUGGY]  else  if(buffer.isEOF(headerBuf))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  else  if(buffer.isEOF(headerBuf))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	else  if(buffer.isEOF(headerBuf))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(headerBuf))    {    for(int    i    =    0;    i    <    buffer.length;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
64	[BUG]  [BUGGY]  else  if(buffer.isEOF())  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  else  if(buffer.isEOF())  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	else  if(buffer.isEOF())  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(headerBuf))    {    for(int    i    =    0;    i    <    buffer.length;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
65	[BUG]  [BUGGY]  else  if(buffer.isEOF())  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                          IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  else  if(buffer.isEOF())  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	else  if(buffer.isEOF())  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(headerBuf))    {    for(int    i    =    0;    i    <    buffer.length;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
66	[BUG]  [BUGGY]  else  if(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  else  if(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	else  if(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(headerBuf))    {    for(int    i    =    0;    i    <    buffer.length;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
67	[BUG]  [BUGGY]  else  if(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  else  if(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  false;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	else  if(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  false;  }	  if(buffer.isEOFRecord(headerBuf))    {    for(int    i    =    0;    i    <    buffer.length;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
68	[BUG]  [BUGGY]  else  if(buffer.isEOF(headerBuf))  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  else  if(buffer.isEOF(headerBuf))  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	else  if(buffer.isEOF(headerBuf))  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(headerBuf))    {    for(int    i    =    0;    i    <    buffer.length;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
69	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  headerBuf,  0,  buffer.length);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  System.arraycopy(buffer,  0,  headerBuf,  0,  buffer.length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	System.arraycopy(buffer,  0,  headerBuf,  0,  buffer.length);	  System.arraycopy(buffer,    0,    buf,    headerBuf,    0,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
70	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  headerBuf,  0,  headerBuf.length  -  1);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  System.arraycopy(buffer,  0,  buf,  headerBuf,  0,  headerBuf.length  -  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	System.arraycopy(buffer,  0,  buf,  headerBuf,  0,  headerBuf.length  -  1);	  System.arraycopy(buffer,    0,    buf,    headerBuf,    0,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
71	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  headerBuf,  0,  buffer.length  -  1);  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  System.arraycopy(buffer,  0,  buf,  headerBuf,  0,  buffer.length  -  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	System.arraycopy(buffer,  0,  buf,  headerBuf,  0,  buffer.length  -  1);	  System.arraycopy(buffer,    0,    buf,    headerBuf,    0,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
72	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  headerBuf,  0,  buffer.length  -  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  System.arraycopy(buffer,  0,  buf,  headerBuf,  0,  buffer.length  -  headerBuf.length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	System.arraycopy(buffer,  0,  buf,  headerBuf,  0,  buffer.length  -  headerBuf.length);	  System.arraycopy(buffer,    0,    buf,    headerBuf,    0,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
73	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  headerBuf.length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  headerBuf.length);	  System.arraycopy(buffer,    0,    buf,    headerBuf,    0,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
74	[BUG]  [BUGGY]  hasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  hasHitEOF  =  false;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	hasHitEOF  =  false;	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
75	[BUG]  [BUGGY]  else  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  else  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	else  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  }	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
76	[BUG]  [BUGGY]  else  if(buffer.isEOF(headerBuf))  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  else  if(buffer.isEOF(headerBuf))  {  hasHitEOF  =  false;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	else  if(buffer.isEOF(headerBuf))  {  hasHitEOF  =  false;  }	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
77	[BUG]  [BUGGY]  HeaderBuffer  headerBuf  =  buffer.readRecord();  hasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  HeaderBuffer  headerBuf  =  buffer.readRecord();  hasHitEOF  =  false;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	HeaderBuffer  headerBuf  =  buffer.readRecord();  hasHitEOF  =  false;	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
78	[BUG]  [BUGGY]  else  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  else  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	else  if(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
79	[BUG]  [BUGGY]  HasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  HasHitEOF  =  false;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	HasHitEOF  =  false;	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
80	[BUG]  [BUGGY]  return  headerBuf?  hasHitEOF  :  headerBuf.toString();  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  hasHitEOF  :  headerBuf.toString();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  hasHitEOF  :  headerBuf.toString();	  return    hasHitEOF?    header    :    headerBuf.toString();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
81	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf.length  :  headerBuf.toString();  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf.length  :  headerBuf.toString();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf.length  :  headerBuf.toString();	  return    hasHitEOF?    header    :    headerBuf.toString();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
82	[BUG]  [BUGGY]  return  headerBuf.hasHitEOF?  header  :  headerBuf.toString();  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.hasHitEOF?  header  :  headerBuf.toString();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.hasHitEOF?  header  :  headerBuf.toString();	  return    hasHitEOF?    header    :    headerBuf.toString();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
83	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  headerBuf.toString();  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  headerBuf.toString();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  headerBuf.toString();	  return    hasHitEOF?    header    :    headerBuf.toString();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
84	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.toString();  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.toString();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  buffer.toString();	  return    hasHitEOF?    header    :    headerBuf.toString();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
85	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  header.toString();  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  header.toString();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  header.toString();	  return    hasHitEOF?    header    :    headerBuf.toString();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
86	[BUG]  [BUGGY]  return  headerBuf.length?  headerBuf.length  :  hasHitEOF  +  1;  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length?  headerBuf.length  :  hasHitEOF  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length?  headerBuf.length  :  hasHitEOF  +  1;	  return    hasHitEOF?    headerBuf.length    :    headerBuf    +    1;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
87	[BUG]  [BUGGY]  return  headerBuf.length?  hasHitEOF  :  headerBuf  +  1;  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length?  hasHitEOF  :  headerBuf  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length?  hasHitEOF  :  headerBuf  +  1;	  return    hasHitEOF?    headerBuf.length    :    headerBuf    +    1;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
88	[BUG]  [BUGGY]  return  headerBuf.length  -  hasHitEOF?  headerBuf.length  :  headerBuf  +  1;  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length  -  hasHitEOF?  headerBuf.length  :  headerBuf  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  -  hasHitEOF?  headerBuf.length  :  headerBuf  +  1;	  return    hasHitEOF?    headerBuf.length    :    headerBuf    +    1;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
89	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf.length  :  headerBuf.length  -  1;  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf.length  :  headerBuf.length  -  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf.length  :  headerBuf.length  -  1;	  return    hasHitEOF?    headerBuf.length    :    headerBuf    +    1;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
90	[BUG]  [BUGGY]  return  headerBuf.hasHitEOF?  headerBuf  :  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.hasHitEOF?  headerBuf  :  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.hasHitEOF?  headerBuf  :  hasHitEOF;	  return    hasHitEOF?    headerBuf    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
91	[BUG]  [BUGGY]  return  headerBuf.hasHitEOF?  hasHitEOF  :  headerBuf;  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.hasHitEOF?  hasHitEOF  :  headerBuf;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.hasHitEOF?  hasHitEOF  :  headerBuf;	  return    hasHitEOF?    headerBuf    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
92	[BUG]  [BUGGY]  return  headerBuf.length?  headerBuf.length  :  buffer.length;  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length?  headerBuf.length  :  buffer.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length?  headerBuf.length  :  buffer.length;	  return    headerBuf.length?    hasHitEOF    :    buffer.length;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
93	[BUG]  [BUGGY]  return  buffer.length?  headerBuf.length  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  buffer.length?  headerBuf.length  :  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  buffer.length?  headerBuf.length  :  headerBuf.length;	  return    headerBuf.length?    hasHitEOF    :    buffer.length;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
94	[BUG]  [BUGGY]  return  buffer.length?  hasHitEOF  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  buffer.length?  hasHitEOF  :  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  buffer.length?  hasHitEOF  :  headerBuf.length;	  return    headerBuf.length?    hasHitEOF    :    buffer.length;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
95	[BUG]  [BUGGY]  return  headerBuf.length?  hasHitEOF  :  buffer.length  +  1;  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length?  hasHitEOF  :  buffer.length  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length?  hasHitEOF  :  buffer.length  +  1;	  return    headerBuf.length?    hasHitEOF    :    buffer.length;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
96	[BUG]  [BUGGY]  return  headerBuf?  null  :  buffer.toString();  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  null  :  buffer.toString();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  null  :  buffer.toString();	  return    headerBuf?    null    :    headerBuf.toString();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
97	[BUG]  [BUGGY]  return  headerBuf?  null  :  header.toString();  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  null  :  header.toString();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  null  :  header.toString();	  return    headerBuf?    null    :    headerBuf.toString();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
98	[BUG]  [BUGGY]  return  headerBuf?  null  :  headerBuf.toString()  +  1;  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  null  :  headerBuf.toString()  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  null  :  headerBuf.toString()  +  1;	  return    headerBuf?    null    :    headerBuf.toString();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
99	[BUG]  [BUGGY]  return  headerBuf.hashEOF?  null  :  headerBuf.toByteArray();  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.hashEOF?  null  :  headerBuf.toByteArray();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.hashEOF?  null  :  headerBuf.toByteArray();	  return    headerBuf.hasHitEOF?    null    :    headerBuf.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
100	[BUG]  [BUGGY]  return  headerBuf.hasHitEOF?  null  :  buffer.toByteArray();  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.hasHitEOF?  null  :  buffer.toByteArray();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.hasHitEOF?  null  :  buffer.toByteArray();	  return    headerBuf.hasHitEOF?    null    :    headerBuf.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
101	[BUG]  [BUGGY]  return  headerBuf.length?  null  :  headerBuf.toByteArray();  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length?  null  :  headerBuf.toByteArray();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length?  null  :  headerBuf.toByteArray();	  return    headerBuf.hasHitEOF?    null    :    headerBuf.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
102	[BUG]  [BUGGY]  return  headerBuf.length?  hasHitEOF  :  headerBuf.toByteArray();  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length?  hasHitEOF  :  headerBuf.toByteArray();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length?  hasHitEOF  :  headerBuf.toByteArray();	  return    hasHitEOF?    headerBuf.length    :    headerBuf.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
103	[BUG]  [BUGGY]  return  headerBuf.length?  headerBuf.length  :  hasHitEOF.toByteArray();  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length?  headerBuf.length  :  hasHitEOF.toByteArray();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length?  headerBuf.length  :  hasHitEOF.toByteArray();	  return    hasHitEOF?    headerBuf.length    :    headerBuf.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
104	[BUG]  [BUGGY]  return  headerBuf.length?  headerBuf.length  :  headerBuf.toByteArray();  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length?  headerBuf.length  :  headerBuf.toByteArray();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length?  headerBuf.length  :  headerBuf.toByteArray();	  return    hasHitEOF?    headerBuf.length    :    headerBuf.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
105	[BUG]  [BUGGY]  return  headerBuf.length  :  hasHitEOF?  headerBuf.length  :  headerBuf.toByteArray();  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length  :  hasHitEOF?  headerBuf.length  :  headerBuf.toByteArray();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  :  hasHitEOF?  headerBuf.length  :  headerBuf.toByteArray();	  return    hasHitEOF?    headerBuf.length    :    headerBuf.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
106	[BUG]  [BUGGY]  System.arraycopy(headerBuf,  0,  buf,  buffer,  0,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  System.arraycopy(headerBuf,  0,  buf,  buffer,  0,  headerBuf.length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	System.arraycopy(headerBuf,  0,  buf,  buffer,  0,  headerBuf.length);	  System.arraycopy(buffer,    0,    buf,    headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
107	[BUG]  [BUGGY]  System.arraycopy(headerBuf,  0,  buf,  headerBuf,  0,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  System.arraycopy(headerBuf,  0,  buf,  headerBuf,  0,  headerBuf.length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	System.arraycopy(headerBuf,  0,  buf,  headerBuf,  0,  headerBuf.length);	  System.arraycopy(buffer,    0,    buf,    headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
108	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  headerBuf,  0,  headerBuf.length  -  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  System.arraycopy(buffer,  0,  buf,  headerBuf,  0,  headerBuf.length  -  headerBuf.length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	System.arraycopy(buffer,  0,  buf,  headerBuf,  0,  headerBuf.length  -  headerBuf.length);	  System.arraycopy(buffer,    0,    buf,    headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
109	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  headerBuf,  0,  headerBuf.length  +  1);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  System.arraycopy(buffer,  0,  buf,  headerBuf,  0,  headerBuf.length  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	System.arraycopy(buffer,  0,  buf,  headerBuf,  0,  headerBuf.length  +  1);	  System.arraycopy(buffer,    0,    buf,    headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
110	[BUG]  [BUGGY]  return  headerBuf.length?  headerBuf,  headerBuf.length  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length?  headerBuf,  headerBuf.length  :  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length?  headerBuf,  headerBuf.length  :  headerBuf.length;	  return    hasHitEOF?    headerBuf,    headerBuf.length    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
111	[BUG]  [BUGGY]  return  headerBuf.length?  headerBuf.length  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length?  headerBuf.length  :  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length?  headerBuf.length  :  headerBuf.length;	  return    hasHitEOF?    headerBuf,    headerBuf.length    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
112	[BUG]  [BUGGY]  return  headerBuf.length?  headerBuf,  headerBuf.length  :  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length?  headerBuf,  headerBuf.length  :  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length?  headerBuf,  headerBuf.length  :  hasHitEOF;	  return    hasHitEOF?    headerBuf,    headerBuf.length    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
113	[BUG]  [BUGGY]  return  headerBuf.length  >  headerBuf.length?  headerBuf.length  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length  >  headerBuf.length?  headerBuf.length  :  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  >  headerBuf.length?  headerBuf.length  :  headerBuf.length;	  return    hasHitEOF?    headerBuf,    headerBuf.length    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
114	[BUG]  [BUGGY]  return  headerBuf?  null  :  buffer.toByteArray();  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  null  :  buffer.toByteArray();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  null  :  buffer.toByteArray();	  return    headerBuf?    null    :    headerBuf.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
115	[BUG]  [BUGGY]  return  headerBuf?  null  :  header.toByteArray();  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  null  :  header.toByteArray();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  null  :  header.toByteArray();	  return    headerBuf?    null    :    headerBuf.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
116	[BUG]  [BUGGY]  return  headerBuf?  null  :  headerBuf.toByteArray()  +  1;  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  null  :  headerBuf.toByteArray()  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  null  :  headerBuf.toByteArray()  +  1;	  return    headerBuf?    null    :    headerBuf.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
117	[BUG]  [BUGGY]  return  headerBuf?  EOF  :  headerBuf.toByteArray();  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  EOF  :  headerBuf.toByteArray();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  EOF  :  headerBuf.toByteArray();	  return    headerBuf?    null    :    headerBuf.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
118	[BUG]  [BUGGY]  return  headerBuf.length  >  hasHitEOF?  headerBuf.length  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length  >  hasHitEOF?  headerBuf.length  :  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  >  hasHitEOF?  headerBuf.length  :  headerBuf.length;	  return    headerBuf.length    >    hasHitEOF?    headerBuf.length    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
119	[BUG]  [BUGGY]  return  headerBuf.length  >  0?  headerBuf.length  :  headerBuf;  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length  >  0?  headerBuf.length  :  headerBuf;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  >  0?  headerBuf.length  :  headerBuf;	  return    headerBuf.length    >    hasHitEOF?    headerBuf.length    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
120	[BUG]  [BUGGY]  return  headerBuf.length  >  headerBuf.length?  headerBuf.length  :  headerBuf;  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length  >  headerBuf.length?  headerBuf.length  :  headerBuf;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  >  headerBuf.length?  headerBuf.length  :  headerBuf;	  return    headerBuf.length    >    hasHitEOF?    headerBuf.length    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
121	[BUG]  [BUGGY]  return  headerBuf.length  >  0?  headerBuf.length  :  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length  >  0?  headerBuf.length  :  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  >  0?  headerBuf.length  :  hasHitEOF;	  return    headerBuf.length    hasHitEOF?    headerBuf.length    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
122	[BUG]  [BUGGY]  return  headerBuf.length  >  headerBuf.length?  headerBuf.length  :  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length  >  headerBuf.length?  headerBuf.length  :  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  >  headerBuf.length?  headerBuf.length  :  hasHitEOF;	  return    headerBuf.length    hasHitEOF?    headerBuf.length    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
123	[BUG]  [BUGGY]  return  headerBuf.length!HitEOF?  headerBuf.length  :  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length!HitEOF?  headerBuf.length  :  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length!HitEOF?  headerBuf.length  :  hasHitEOF;	  return    headerBuf.length    hasHitEOF?    headerBuf.length    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
124	[BUG]  [BUGGY]  return  headerBuf.length  >  hasHitEOF?  headerBuf.length  :  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length  >  hasHitEOF?  headerBuf.length  :  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  >  hasHitEOF?  headerBuf.length  :  hasHitEOF;	  return    headerBuf.length    hasHitEOF?    headerBuf.length    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
125	[BUG]  [BUGGY]  return  headerBuf,  null?  null  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf,  null?  null  :  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf,  null?  null  :  headerBuf.length;	  return    headerBuf,    hasHitEOF?    null    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
126	[BUG]  [BUGGY]  return  headerBuf,  headerBuf?  null  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf,  headerBuf?  null  :  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf,  headerBuf?  null  :  headerBuf.length;	  return    headerBuf,    hasHitEOF?    null    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
127	[BUG]  [BUGGY]  return  headerBuf.length,  hasHitEOF?  null  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length,  hasHitEOF?  null  :  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length,  hasHitEOF?  null  :  headerBuf.length;	  return    headerBuf,    hasHitEOF?    null    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
128	[BUG]  [BUGGY]  return  headerBuf,  hasHitEOF?  null  :  headerBuf.length  -  1;  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf,  hasHitEOF?  null  :  headerBuf.length  -  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf,  hasHitEOF?  null  :  headerBuf.length  -  1;	  return    headerBuf,    hasHitEOF?    null    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
129	[BUG]  [BUGGY]  return  headerBuf.toByteArray()?  null  :  buffer.toByteArray();  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.toByteArray()?  null  :  buffer.toByteArray();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.toByteArray()?  null  :  buffer.toByteArray();	  return    headerBuf.toByteArray()?    null    :    headerBuf.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
130	[BUG]  [BUGGY]  return  headerBuf.toByteArray()?  null  :  headerBuf.toByteArray()  +  1;  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.toByteArray()?  null  :  headerBuf.toByteArray()  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.toByteArray()?  null  :  headerBuf.toByteArray()  +  1;	  return    headerBuf.toByteArray()?    null    :    headerBuf.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
131	[BUG]  [BUGGY]  return  headerBuf.toByteArray()?  this  :  headerBuf.toByteArray();  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.toByteArray()?  this  :  headerBuf.toByteArray();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.toByteArray()?  this  :  headerBuf.toByteArray();	  return    headerBuf.toByteArray()?    null    :    headerBuf.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
132	[BUG]  [BUGGY]  return  buffer.toByteArray()?  null  :  buffer.toByteArray();  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  buffer.toByteArray()?  null  :  buffer.toByteArray();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  buffer.toByteArray()?  null  :  buffer.toByteArray();	  return    headerBuf.toByteArray()?    null    :    headerBuf.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
133	[BUG]  [BUGGY]  return  headerBuf?  null  :  headerBuf.length();  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  null  :  headerBuf.length();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  null  :  headerBuf.length();	  return    headerBuf?    null    :    headerBuf.hashCode();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
134	[BUG]  [BUGGY]  return  headerBuf?  null  :  buffer.hashCode();  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  null  :  buffer.hashCode();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  null  :  buffer.hashCode();	  return    headerBuf?    null    :    headerBuf.hashCode();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
135	[BUG]  [BUGGY]  return  headerBuf  ==  null?  null  :  headerBuf.length  +  1;  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf  ==  null?  null  :  headerBuf.length  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf  ==  null?  null  :  headerBuf.length  +  1;	  return    headerBuf!=    null?    null    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
136	[BUG]  [BUGGY]  return  headerBuf!=  null?  null  :  headerBuf.length  +  1;  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf!=  null?  null  :  headerBuf.length  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf!=  null?  null  :  headerBuf.length  +  1;	  return    headerBuf!=    null?    null    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
137	[BUG]  [BUGGY]  return  headerBuf  ==  null?  null  :  headerBuf.length();  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf  ==  null?  null  :  headerBuf.length();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf  ==  null?  null  :  headerBuf.length();	  return    headerBuf!=    null?    null    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
138	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  headerToSkip;  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  headerToSkip;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  headerToSkip;	  return    hasHitEOF?    headerToSkip    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
139	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf.length  :  headerToSkip;  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf.length  :  headerToSkip;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf.length  :  headerToSkip;	  return    hasHitEOF?    headerToSkip    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
140	[BUG]  [BUGGY]  return  headerToSkip?  hasHitEOF  :  headerBuf;  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerToSkip?  hasHitEOF  :  headerBuf;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerToSkip?  hasHitEOF  :  headerBuf;	  return    hasHitEOF?    headerToSkip    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
141	[BUG]  [BUGGY]  return  headerToSkip  >  0?  headerToSkip  :  headerBuf;  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerToSkip  >  0?  headerToSkip  :  headerBuf;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerToSkip  >  0?  headerToSkip  :  headerBuf;	  return    hasHitEOF?    headerToSkip    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
142	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf.toSkip  :  headerToSkip;  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf.toSkip  :  headerToSkip;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf.toSkip  :  headerToSkip;	  return    hasHitEOF?    headerToSkip    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
143	[BUG]  [BUGGY]  return  hasHitEOF?  headerToSkip  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerToSkip  :  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerToSkip  :  headerBuf.length;	  return    hasHitEOF?    headerToSkip    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
144	[BUG]  [BUGGY]  return  headerBuf.length  :  hasHitEOF?  buffer.length  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length  :  hasHitEOF?  buffer.length  :  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  :  hasHitEOF?  buffer.length  :  headerBuf.length;	  return    hasHitEOF?    buffer.length    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
145	[BUG]  [BUGGY]  return  isEOF?  headerBuf.length  :  buffer.length;  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  isEOF?  headerBuf.length  :  buffer.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  isEOF?  headerBuf.length  :  buffer.length;	  return    hasHitEOF?    buffer.length    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
146	[BUG]  [BUGGY]  return  headerBuf.length?  0  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length?  0  :  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length?  0  :  headerBuf.length;	  return    headerBuf.length?    null    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
147	[BUG]  [BUGGY]  return  headerBuf,  buffer.length?  null  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf,  buffer.length?  null  :  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf,  buffer.length?  null  :  headerBuf.length;	  return    headerBuf.length?    null    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
148	[BUG]  [BUGGY]  return  headerBuf.length?  null  :  headerBuf.length();  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length?  null  :  headerBuf.length();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length?  null  :  headerBuf.length();	  return    headerBuf.length?    null    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
149	[BUG]  [BUGGY]  return  headerBuf.hasHitEOF?  header  :  hasHitEOF  +  1;  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.hasHitEOF?  header  :  hasHitEOF  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.hasHitEOF?  header  :  hasHitEOF  +  1;	  return    headerBuf.hasHitEOF?    header    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
150	[BUG]  [BUGGY]  return  headerBuf.hashCode()?  header  :  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.hashCode()?  header  :  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.hashCode()?  header  :  hasHitEOF;	  return    headerBuf.hasHitEOF?    header    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
151	[BUG]  [BUGGY]  return  headerBuf.hasHitEOF?  header  :  null;  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.hasHitEOF?  header  :  null;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.hasHitEOF?  header  :  null;	  return    headerBuf.hasHitEOF?    header    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
152	[BUG]  [BUGGY]  return  headerBuf.hashEOF?  header  :  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.hashEOF?  header  :  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.hashEOF?  header  :  hasHitEOF;	  return    headerBuf.hasHitEOF?    header    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
153	[BUG]  [BUGGY]  HeaderBuffer  headerBuf  =  buffer.readHeaderBuffer(headerBuf);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  HeaderBuffer  headerBuf  =  buffer.readHeaderBuffer(headerBuf);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	HeaderBuffer  headerBuf  =  buffer.readHeaderBuffer(headerBuf);	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    else    {    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
154	[BUG]  [BUGGY]  headerBuf  =  buffer.readRecord();  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  headerBuf  =  buffer.readRecord();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	headerBuf  =  buffer.readRecord();	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    else    {    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
155	[BUG]  [BUGGY]  HeaderBuffer  buffer  =  buffer.readHeaderBuffer(headerBuf);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  HeaderBuffer  buffer  =  buffer.readHeaderBuffer(headerBuf);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	HeaderBuffer  buffer  =  buffer.readHeaderBuffer(headerBuf);	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    else    {    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
156	[BUG]  [BUGGY]  HeaderBuffer  headerBuf  =  buffer.readHeaderBuffer();  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  HeaderBuffer  headerBuf  =  buffer.readHeaderBuffer();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	HeaderBuffer  headerBuf  =  buffer.readHeaderBuffer();	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    else    {    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
157	[BUG]  [BUGGY]  result.add(buffer.readRecord());  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  result.add(buffer.readRecord());  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	result.add(buffer.readRecord());	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    else    {    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
158	[BUG]  [BUGGY]  return  headerBuf,  null  :  headerBuf.toByteArray();  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf,  null  :  headerBuf.toByteArray();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf,  null  :  headerBuf.toByteArray();	  return    headerBuf    buzunar?    null    :    headerBuf.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
159	[BUG]  [BUGGY]  return  headerBuf?  null  :  buf.toByteArray();  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  null  :  buf.toByteArray();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  null  :  buf.toByteArray();	  return    headerBuf    buzunar?    null    :    headerBuf.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
160	[BUG]  [BUGGY]  return  headerBuf?  null  :  headBuf.toByteArray();  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  null  :  headBuf.toByteArray();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  null  :  headBuf.toByteArray();	  return    headerBuf    buzunar?    null    :    headerBuf.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
161	[BUG]  [BUGGY]  return  headerBuf?  hasHitEOF  :  headerSize;  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  hasHitEOF  :  headerSize;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  hasHitEOF  :  headerSize;	  return    hasHitEOF?    headerBuf    :    headerSize;    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
162	[BUG]  [BUGGY]  return  headerBuf.hasHitEOF?  headerBuf  :  headerSize;  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.hasHitEOF?  headerBuf  :  headerSize;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.hasHitEOF?  headerBuf  :  headerSize;	  return    hasHitEOF?    headerBuf    :    headerSize;    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
163	[BUG]  [BUGGY]  return  headerBuf.hasHitEOF?  hasHitEOF  :  headerSize;  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.hasHitEOF?  hasHitEOF  :  headerSize;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.hasHitEOF?  hasHitEOF  :  headerSize;	  return    hasHitEOF?    headerBuf    :    headerSize;    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
164	[BUG]  [BUGGY]  return  headerBuf?  hasHitEOF  :  buffer.readEOFRecord(headerBuf):  null;  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  hasHitEOF  :  buffer.readEOFRecord(headerBuf):  null;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  hasHitEOF  :  buffer.readEOFRecord(headerBuf):  null;	  return    hasHitEOF?    headerBuf    :    buffer.readEOFRecord(headerBuf):    null;    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
165	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf,  false):  null;  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf,  false):  null;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf,  false):  null;	  return    hasHitEOF?    headerBuf    :    buffer.readEOFRecord(headerBuf):    null;    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
166	[BUG]  [BUGGY]  return  headerBuf.hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf):  null;  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf):  null;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf):  null;	  return    hasHitEOF?    headerBuf    :    buffer.readEOFRecord(headerBuf):    null;    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
167	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf,  skipBuf):  null;  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf,  skipBuf):  null;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf,  skipBuf):  null;	  return    hasHitEOF?    headerBuf    :    buffer.readEOFRecord(headerBuf):    null;    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
168	[BUG]  [BUGGY]  return  isEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf):  null;  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  isEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf):  null;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  isEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf):  null;	  return    hasHitEOF?    headerBuf    :    buffer.readEOFRecord(headerBuf):    null;    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
169	[BUG]  [BUGGY]  HeaderBuffer  headerBuf  =  buffer.readRecord();  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  HeaderBuffer  headerBuf  =  buffer.readRecord();  hasHitEOF  =  true;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	HeaderBuffer  headerBuf  =  buffer.readRecord();  hasHitEOF  =  true;	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
170	[BUG]  [BUGGY]  HasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  HasHitEOF  =  true;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	HasHitEOF  =  true;	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
171	[BUG]  [BUGGY]  HeaderBuffer  buffer  =  buffer.readRecord();  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  HeaderBuffer  buffer  =  buffer.readRecord();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	HeaderBuffer  buffer  =  buffer.readRecord();	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
172	[BUG]  [BUGGY]  haveHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  haveHitEOF  =  true;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	haveHitEOF  =  true;	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
173	[BUG]  [BUGGY]  return  headerBuf?  hasHitEOF  :  buffer.readEOFRecord(headerBuf);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  hasHitEOF  :  buffer.readEOFRecord(headerBuf);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  hasHitEOF  :  buffer.readEOFRecord(headerBuf);	  return    hasHitEOF?    headerBuf    :    buffer.readEOFRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
174	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf,  skipBuf);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf,  skipBuf);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf,  skipBuf);	  return    hasHitEOF?    headerBuf    :    buffer.readEOFRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
175	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf,  false);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf,  false);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf,  false);	  return    hasHitEOF?    headerBuf    :    buffer.readEOFRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
176	[BUG]  [BUGGY]  return  headerBuf.hasHitEOF?  hasHitEOF  :  buffer.readEOFRecord(headerBuf);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.hasHitEOF?  hasHitEOF  :  buffer.readEOFRecord(headerBuf);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.hasHitEOF?  hasHitEOF  :  buffer.readEOFRecord(headerBuf);	  return    hasHitEOF?    headerBuf    :    buffer.readEOFRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
177	[BUG]  [BUGGY]  return  headerBuf.hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf);	  return    hasHitEOF?    headerBuf    :    buffer.readEOFRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
178	[BUG]  [BUGGY]  return  headerBuf  ==  null?  null  :  headerBuf  +  1;  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf  ==  null?  null  :  headerBuf  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf  ==  null?  null  :  headerBuf  +  1;	  return    headerBuf    >    null?    null    :    headerBuf    +    1;    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
179	[BUG]  [BUGGY]  return  headerBuf!=  null?  null  :  headerBuf  +  1;  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf!=  null?  null  :  headerBuf  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf!=  null?  null  :  headerBuf  +  1;	  return    headerBuf    >    null?    null    :    headerBuf    +    1;    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
180	[BUG]  [BUGGY]  return  headerBuf  >=  null?  null  :  headerBuf  +  1;  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf  >=  null?  null  :  headerBuf  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf  >=  null?  null  :  headerBuf  +  1;	  return    headerBuf    >    null?    null    :    headerBuf    +    1;    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
181	[BUG]  [BUGGY]  return  headerBuf  <  null?  null  :  headerBuf  +  1;  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf  <  null?  null  :  headerBuf  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf  <  null?  null  :  headerBuf  +  1;	  return    headerBuf    >    null?    null    :    headerBuf    +    1;    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
182	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  header.length;  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  header.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  header.length;	  return    hasHitEOF?    headerBuf    :    header;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
183	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf.length  :  header;  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf.length  :  header;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf.length  :  header;	  return    hasHitEOF?    headerBuf    :    header;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
184	[BUG]  [BUGGY]  return  headerSize?  hasHitEOF  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerSize?  hasHitEOF  :  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerSize?  hasHitEOF  :  headerBuf.length;	  return    headerSize?    hasHitEOF    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
185	[BUG]  [BUGGY]  return  headerBuf.hasHitEOF?  headerSize  :  headerBuf;  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.hasHitEOF?  headerSize  :  headerBuf;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.hasHitEOF?  headerSize  :  headerBuf;	  return    headerSize?    hasHitEOF    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
186	[BUG]  [BUGGY]  return  headerBuf?  hasHitEOF  :  headerBuf.read();  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  hasHitEOF  :  headerBuf.read();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  hasHitEOF  :  headerBuf.read();	  return    headerBuf?    hasHitEOF    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
187	[BUG]  [BUGGY]  return  headerBuf?  hasHitEOF  :  buffer.readRecord(headerBuf);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  hasHitEOF  :  buffer.readRecord(headerBuf);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  hasHitEOF  :  buffer.readRecord(headerBuf);	  return    hasHitEOF?    headerBuf    :    buffer.readRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
188	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readRecord(headerBuf,  skipBuf);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readRecord(headerBuf,  skipBuf);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  buffer.readRecord(headerBuf,  skipBuf);	  return    hasHitEOF?    headerBuf    :    buffer.readRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
189	[BUG]  [BUGGY]  return  headerBuf.hasHitEOF?  hasHitEOF  :  buffer.readRecord(headerBuf);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.hasHitEOF?  hasHitEOF  :  buffer.readRecord(headerBuf);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.hasHitEOF?  hasHitEOF  :  buffer.readRecord(headerBuf);	  return    hasHitEOF?    headerBuf    :    buffer.readRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
190	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readRecord(headerBuf,  false);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readRecord(headerBuf,  false);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  buffer.readRecord(headerBuf,  false);	  return    hasHitEOF?    headerBuf    :    buffer.readRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
191	[BUG]  [BUGGY]  return  headerBuf.hasHitEOF?  headerBuf  :  buffer.readRecord(headerBuf);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.hasHitEOF?  headerBuf  :  buffer.readRecord(headerBuf);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.hasHitEOF?  headerBuf  :  buffer.readRecord(headerBuf);	  return    hasHitEOF?    headerBuf    :    buffer.readRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
192	[BUG]  [BUGGY]  return  headerBuf?  null  :  buffer.read();  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  null  :  buffer.read();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  null  :  buffer.read();	  return    headerBuf?    null    :    headerBuf.read();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
193	[BUG]  [BUGGY]  return  headerBuf?  null  :  headerBuf.read(buffer);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  null  :  headerBuf.read(buffer);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  null  :  headerBuf.read(buffer);	  return    headerBuf?    null    :    headerBuf.read();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
194	[BUG]  [BUGGY]  return  headerBuf?  null  :  headerBuf.readRecord();  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  null  :  headerBuf.readRecord();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  null  :  headerBuf.readRecord();	  return    headerBuf?    null    :    headerBuf.read();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
195	[BUG]  [BUGGY]  return  headerBuf?  null  :  headerBuf.readInt();  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  null  :  headerBuf.readInt();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  null  :  headerBuf.readInt();	  return    headerBuf?    null    :    headerBuf.read();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
196	[BUG]  [BUGGY]  return  headerBuf?  null  :  header.read();  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  null  :  header.read();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  null  :  header.read();	  return    headerBuf?    null    :    headerBuf.read();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
197	[BUG]  [BUGGY]  return  headerBuf.length  -  headerBuf.length  :  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length  -  headerBuf.length  :  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  -  headerBuf.length  :  hasHitEOF;	  return    headerBuf.length?    headerBuf.length    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
198	[BUG]  [BUGGY]  return  headerBuf.length?  headerBuf.length  :  0;  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length?  headerBuf.length  :  0;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length?  headerBuf.length  :  0;	  return    headerBuf.length?    headerBuf.length    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
199	[BUG]  [BUGGY]  return  headerBuf.length?  headerBuf.length  :  isEOF;  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length?  headerBuf.length  :  isEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length?  headerBuf.length  :  isEOF;	  return    headerBuf.length?    headerBuf.length    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
200	[BUG]  [BUGGY]  return  headerBuf?  hasHitEOF  :  header.length;  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  hasHitEOF  :  header.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  hasHitEOF  :  header.length;	  return    headerBuf?    hasHitEOF    :    header;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
201	[BUG]  [BUGGY]  return  headerBuf  &  hasHitEOF  :  null;  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf  &  hasHitEOF  :  null;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf  &  hasHitEOF  :  null;	  return    hasHitEOF    &    headerBuf    :    null;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
202	[BUG]  [BUGGY]  return  hasHitEOF  &  headerBuf.length  :  null;  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF  &  headerBuf.length  :  null;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF  &  headerBuf.length  :  null;	  return    hasHitEOF    &    headerBuf    :    null;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
203	[BUG]  [BUGGY]  return  hasHitEOF  &  headerBuf  :  buffer.readRecord();  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF  &  headerBuf  :  buffer.readRecord();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF  &  headerBuf  :  buffer.readRecord();	  return    hasHitEOF    &    headerBuf    :    null;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
204	[BUG]  [BUGGY]  return  hasHitEOF  &  headerBuf?  headerBuf.length  :  null;  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF  &  headerBuf?  headerBuf.length  :  null;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF  &  headerBuf?  headerBuf.length  :  null;	  return    hasHitEOF    &    headerBuf    :    null;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
205	[BUG]  [BUGGY]  return  hasHitEOF  &/  headerBuf  :  null;  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF  &/  headerBuf  :  null;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF  &/  headerBuf  :  null;	  return    hasHitEOF    &    headerBuf    :    null;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
206	[BUG]  [BUGGY]  return  hasHitEOF  &  headerBuf!=  null  &&  headerBuf.length()  >  0;  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF  &  headerBuf!=  null  &&  headerBuf.length()  >  0;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF  &  headerBuf!=  null  &&  headerBuf.length()  >  0;	  return    hasHitEOF    &    headerBuf    :    null;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
207	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf.length  :  null  +  1;  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf.length  :  null  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf.length  :  null  +  1;	  return    hasHitEOF?    headerBuf    :    null    +    1;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
208	[BUG]  [BUGGY]  return  headerBuf?  hasHitEOF  :  null  +  1;  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  hasHitEOF  :  null  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  hasHitEOF  :  null  +  1;	  return    hasHitEOF?    headerBuf    :    null    +    1;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
209	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readRecord(headerBuf)+  1;  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readRecord(headerBuf)+  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  buffer.readRecord(headerBuf)+  1;	  return    hasHitEOF?    headerBuf    :    null    +    1;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
210	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readRecord()  +  1;  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readRecord()  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  buffer.readRecord()  +  1;	  return    hasHitEOF?    headerBuf    :    null    +    1;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
211	[BUG]  [BUGGY]  return  buffer.length  -  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  buffer.length  -  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  buffer.length  -  hasHitEOF;	  return    buffer.length    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
212	[BUG]  [BUGGY]  return  buffer.length  -  headerBuf.length  :  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  buffer.length  -  headerBuf.length  :  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  buffer.length  -  headerBuf.length  :  hasHitEOF;	  return    buffer.length    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
213	[BUG]  [BUGGY]  return  hasHitEOF  :  buffer.length;  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF  :  buffer.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF  :  buffer.length;	  return    buffer.length    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
214	[BUG]  [BUGGY]  return  buffer.length  :  headerBuf;  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  buffer.length  :  headerBuf;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  buffer.length  :  headerBuf;	  return    buffer.length    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
215	[BUG]  [BUGGY]  return  headerBuf.length  -  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length  -  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  -  hasHitEOF;	  return    headerBuf.length    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
216	[BUG]  [BUGGY]  return  headerBuf.length  /  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length  /  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  /  hasHitEOF;	  return    headerBuf.length    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
217	[BUG]  [BUGGY]  return  headerBuf.length  %  2!=  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length  %  2!=  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  %  2!=  hasHitEOF;	  return    headerBuf.length    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
218	[BUG]  [BUGGY]  return  headerBuf.length  %  2  ==  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length  %  2  ==  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  %  2  ==  hasHitEOF;	  return    headerBuf.length    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
219	[BUG]  [BUGGY]  return  headerBuf.length  -  isHitEOF;  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length  -  isHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  -  isHitEOF;	  return    headerBuf.length    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
220	[BUG]  [BUGGY]  return  buffer.readRecord()?  null  :  headerBuf.readRecord();  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  buffer.readRecord()?  null  :  headerBuf.readRecord();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  buffer.readRecord()?  null  :  headerBuf.readRecord();	  return    headerBuf?    null    :    buffer.readRecord();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
221	[BUG]  [BUGGY]  return  buffer?  null  :  buffer.readRecord();  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  buffer?  null  :  buffer.readRecord();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  buffer?  null  :  buffer.readRecord();	  return    headerBuf?    null    :    buffer.readRecord();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
222	[BUG]  [BUGGY]  return  headerBuf?  null  :  buffer.readRecord(headerBuf);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  null  :  buffer.readRecord(headerBuf);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  null  :  buffer.readRecord(headerBuf);	  return    headerBuf?    null    :    buffer.readRecord();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
223	[BUG]  [BUGGY]  return  headerBuf?  null  :  buffer.getRecord();  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  null  :  buffer.getRecord();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  null  :  buffer.getRecord();	  return    headerBuf?    null    :    buffer.readRecord();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
224	[BUG]  [BUGGY]  return  headerBuf?  null  :  headerBuf.length,  hasHitEOF;  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  null  :  headerBuf.length,  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  null  :  headerBuf.length,  hasHitEOF;	  return    headerBuf?    null    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
225	[BUG]  [BUGGY]  return  headerBuf?  EOF  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  EOF  :  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  EOF  :  headerBuf.length;	  return    headerBuf?    null    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
226	[BUG]  [BUGGY]  return  headerBuf.length  hasHitEOF?  headerBuf.length  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length  hasHitEOF?  headerBuf.length  :  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  hasHitEOF?  headerBuf.length  :  headerBuf.length;	  return    hasHitEOF?    headerBuf.length    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
227	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  headerBuf,  0,  headerBuf.length  -  1);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  System.arraycopy(buffer,  0,  headerBuf,  0,  headerBuf.length  -  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	System.arraycopy(buffer,  0,  headerBuf,  0,  headerBuf.length  -  1);	  System.arraycopy(buffer,    0,    headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
228	[BUG]  [BUGGY]  System.arraycopy(headerBuf,  0,  buf,  0,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  System.arraycopy(headerBuf,  0,  buf,  0,  headerBuf.length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	System.arraycopy(headerBuf,  0,  buf,  0,  headerBuf.length);	  System.arraycopy(buffer,    0,    headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
229	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  headerBuf,  0,  headerBuf.length  +  1);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  System.arraycopy(buffer,  0,  headerBuf,  0,  headerBuf.length  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	System.arraycopy(buffer,  0,  headerBuf,  0,  headerBuf.length  +  1);	  System.arraycopy(buffer,    0,    headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
230	[BUG]  [BUGGY]  System.arraycopy(headerBuf,  0,  buffer,  0,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  System.arraycopy(headerBuf,  0,  buffer,  0,  headerBuf.length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	System.arraycopy(headerBuf,  0,  buffer,  0,  headerBuf.length);	  System.arraycopy(buffer,    0,    headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
231	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  headerBuf,  0,  headerBuf.length  -  2);  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  System.arraycopy(buffer,  0,  headerBuf,  0,  headerBuf.length  -  2);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	System.arraycopy(buffer,  0,  headerBuf,  0,  headerBuf.length  -  2);	  System.arraycopy(buffer,    0,    headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
232	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  headerBuf,  0,  headerBuf.length  -  4);  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  System.arraycopy(buffer,  0,  headerBuf,  0,  headerBuf.length  -  4);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	System.arraycopy(buffer,  0,  headerBuf,  0,  headerBuf.length  -  4);	  System.arraycopy(buffer,    0,    headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
233	[BUG]  [BUGGY]  return  headerBuf?  hasHitEOF  :  buffer.isEOFRecord(headerBuf):  null;  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  hasHitEOF  :  buffer.isEOFRecord(headerBuf):  null;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  hasHitEOF  :  buffer.isEOFRecord(headerBuf):  null;	  return    hasHitEOF?    headerBuf    :    buffer.isEOFRecord(headerBuf):    null;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
234	[BUG]  [BUGGY]  return  headerBuf.hasHitEOF?  headerBuf  :  buffer.isEOFRecord(headerBuf):  null;  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.hasHitEOF?  headerBuf  :  buffer.isEOFRecord(headerBuf):  null;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.hasHitEOF?  headerBuf  :  buffer.isEOFRecord(headerBuf):  null;	  return    hasHitEOF?    headerBuf    :    buffer.isEOFRecord(headerBuf):    null;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
235	[BUG]  [BUGGY]  return  isEOF?  headerBuf  :  buffer.isEOFRecord(headerBuf):  null;  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  isEOF?  headerBuf  :  buffer.isEOFRecord(headerBuf):  null;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  isEOF?  headerBuf  :  buffer.isEOFRecord(headerBuf):  null;	  return    hasHitEOF?    headerBuf    :    buffer.isEOFRecord(headerBuf):    null;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
236	[BUG]  [BUGGY]  return  headerBuf?  headerBuf  :  buffer.isEOFRecord(headerBuf):  null;  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  headerBuf  :  buffer.isEOFRecord(headerBuf):  null;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  headerBuf  :  buffer.isEOFRecord(headerBuf):  null;	  return    hasHitEOF?    headerBuf    :    buffer.isEOFRecord(headerBuf):    null;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
237	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.isEOFRecord(headerBuf):  this;  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.isEOFRecord(headerBuf):  this;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  buffer.isEOFRecord(headerBuf):  this;	  return    hasHitEOF?    headerBuf    :    buffer.isEOFRecord(headerBuf):    null;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
238	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf.length  :  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf.length  :  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf.length  :  hasHitEOF;	  return    headerBuf?    buffer.length    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
239	[BUG]  [BUGGY]  return  headerBuf.length?  hasHitEOF  :  headerSize;  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length?  hasHitEOF  :  headerSize;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length?  hasHitEOF  :  headerSize;	  return    hasHitEOF?    headerBuf.length    :    headerSize;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
240	[BUG]  [BUGGY]  return  headerSize?  headerBuf.length  :  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerSize?  headerBuf.length  :  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerSize?  headerBuf.length  :  hasHitEOF;	  return    hasHitEOF?    headerBuf.length    :    headerSize;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
241	[BUG]  [BUGGY]  return  headerBuf.length  -  hasHitEOF?  buffer.length  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length  -  hasHitEOF?  buffer.length  :  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  -  hasHitEOF?  buffer.length  :  headerBuf.length;	  return    headerBuf.length    -    hasHitEOF?    buffer.length    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
242	[BUG]  [BUGGY]  return  headerBuf.length  -  hasHitEOF?  headerBuf.length  :  headerBuf;  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length  -  hasHitEOF?  headerBuf.length  :  headerBuf;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  -  hasHitEOF?  headerBuf.length  :  headerBuf;	  return    headerBuf.length    -    hasHitEOF?    buffer.length    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
243	[BUG]  [BUGGY]  return  headerBuf.length  -  hasHitEOF?  headerBuf.length  :  buffer.length;  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length  -  hasHitEOF?  headerBuf.length  :  buffer.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  -  hasHitEOF?  headerBuf.length  :  buffer.length;	  return    headerBuf.length    -    hasHitEOF?    buffer.length    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
244	[BUG]  [BUGGY]  return  headerBuf.length  -  hasHitEOF?  buf.length  :  headerBuf;  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length  -  hasHitEOF?  buf.length  :  headerBuf;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  -  hasHitEOF?  buf.length  :  headerBuf;	  return    headerBuf.length    -    hasHitEOF?    buffer.length    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
245	[BUG]  [BUGGY]  return  hasHitEOF?  header.length  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  header.length  :  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  header.length  :  headerBuf.length;	  return    hasHitEOF?    header.length    :    buffer.length;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
246	[BUG]  [BUGGY]  return  headerBuf.length?  header.length  :  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length?  header.length  :  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length?  header.length  :  hasHitEOF;	  return    hasHitEOF?    header.length    :    buffer.length;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
247	[BUG]  [BUGGY]  return  headerBuf.length?  headerSize  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length?  headerSize  :  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length?  headerSize  :  headerBuf.length;	  return    hasHitEOF?    headerSize    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
248	[BUG]  [BUGGY]  else  if(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  else  if(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  false;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	else  if(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  false;  }	  if(buffer.isEOFRecord(headerBuf))    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
249	[BUG]  [BUGGY]  return  headerBuf?  hasHitEOF  :  buffer.isEOFRecord(headerBuf);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  hasHitEOF  :  buffer.isEOFRecord(headerBuf);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  hasHitEOF  :  buffer.isEOFRecord(headerBuf);	  return    hasHitEOF?    headerBuf    :    buffer.isEOFRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
250	[BUG]  [BUGGY]  return  headerBuf.hasHitEOF?  headerBuf  :  buffer.isEOFRecord(headerBuf);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.hasHitEOF?  headerBuf  :  buffer.isEOFRecord(headerBuf);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.hasHitEOF?  headerBuf  :  buffer.isEOFRecord(headerBuf);	  return    hasHitEOF?    headerBuf    :    buffer.isEOFRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
251	[BUG]  [BUGGY]  return  headerBuf  >  EOF?  headerBuf  :  buffer.isEOFRecord(headerBuf);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf  >  EOF?  headerBuf  :  buffer.isEOFRecord(headerBuf);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf  >  EOF?  headerBuf  :  buffer.isEOFRecord(headerBuf);	  return    hasHitEOF?    headerBuf    :    buffer.isEOFRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
252	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.isEOFRecord(headerBuf,  skipBuf);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.isEOFRecord(headerBuf,  skipBuf);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  buffer.isEOFRecord(headerBuf,  skipBuf);	  return    hasHitEOF?    headerBuf    :    buffer.isEOFRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
253	[BUG]  [BUGGY]  return  headerBuf.length?  hasHitEOF  :  buffer.isEOFRecord(headerBuf);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length?  hasHitEOF  :  buffer.isEOFRecord(headerBuf);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length?  hasHitEOF  :  buffer.isEOFRecord(headerBuf);	  return    hasHitEOF?    headerBuf    :    buffer.isEOFRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
254	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf.length  :  header.length;  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf.length  :  header.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf.length  :  header.length;	  return    hasHitEOF?    header.length    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
255	[BUG]  [BUGGY]  return  headerBuf.length?  headerHitEOF  :  headerBuf;  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length?  headerHitEOF  :  headerBuf;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length?  headerHitEOF  :  headerBuf;	  return    hasHitEOF?    header.length    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
256	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf.length  :  headerLength;  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf.length  :  headerLength;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf.length  :  headerLength;	  return    hasHitEOF?    header.length    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
257	[BUG]  [BUGGY]  else  if(buffer.isEOF(headerBuf))  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  else  if(buffer.isEOF(headerBuf))  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  false;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	else  if(buffer.isEOF(headerBuf))  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  false;  }	  if(buffer.isEOFRecord(headerBuf))    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
258	[BUG]  [BUGGY]  else  if(buffer.isEOF(headerBuf))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  else  if(buffer.isEOF(headerBuf))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  false;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	else  if(buffer.isEOF(headerBuf))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  false;  }	  if(buffer.isEOFRecord(headerBuf))    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
259	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  headerBuf,  0,  headerSize);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  System.arraycopy(buffer,  0,  headerBuf,  0,  headerSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	System.arraycopy(buffer,  0,  headerBuf,  0,  headerSize);	  System.arraycopy(buffer,    0,    buf,    headerBuf,    0,    headerSize);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
260	[BUG]  [BUGGY]  System.arraycopy(headerBuf,  0,  buf,  buffer,  0,  headerSize);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  System.arraycopy(headerBuf,  0,  buf,  buffer,  0,  headerSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	System.arraycopy(headerBuf,  0,  buf,  buffer,  0,  headerSize);	  System.arraycopy(buffer,    0,    buf,    headerBuf,    0,    headerSize);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
261	[BUG]  [BUGGY]  System.arraycopy(headerBuf,  0,  buf,  headerBuf,  0,  headerSize);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  System.arraycopy(headerBuf,  0,  buf,  headerBuf,  0,  headerSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	System.arraycopy(headerBuf,  0,  buf,  headerBuf,  0,  headerSize);	  System.arraycopy(buffer,    0,    buf,    headerBuf,    0,    headerSize);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
262	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  headerBuf,  0,  headerSize  -  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  System.arraycopy(buffer,  0,  buf,  headerBuf,  0,  headerSize  -  headerBuf.length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	System.arraycopy(buffer,  0,  buf,  headerBuf,  0,  headerSize  -  headerBuf.length);	  System.arraycopy(buffer,    0,    buf,    headerBuf,    0,    headerSize);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
263	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  headerBuf,  0,  bufferSize);  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  System.arraycopy(buffer,  0,  headerBuf,  0,  bufferSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	System.arraycopy(buffer,  0,  headerBuf,  0,  bufferSize);	  System.arraycopy(buffer,    0,    buf,    headerBuf,    0,    headerSize);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
264	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  headerBuf,  0,  headerSize  +  1);  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  System.arraycopy(buffer,  0,  buf,  headerBuf,  0,  headerSize  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	System.arraycopy(buffer,  0,  buf,  headerBuf,  0,  headerSize  +  1);	  System.arraycopy(buffer,    0,    buf,    headerBuf,    0,    headerSize);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
265	[BUG]  [BUGGY]  return  buffer.readRecord()  &&  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  buffer.readRecord()  &&  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  buffer.readRecord()  &&  hasHitEOF;	  return    buffer.readRecord();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
266	[BUG]  [BUGGY]  return  buffer.readRecord(headerBuf);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  buffer.readRecord(headerBuf);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  buffer.readRecord(headerBuf);	  return    buffer.readRecord();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
267	[BUG]  [BUGGY]  return  buffer.readRecord()  &&  headerBuf.length()  >  0;  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  buffer.readRecord()  &&  headerBuf.length()  >  0;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  buffer.readRecord()  &&  headerBuf.length()  >  0;	  return    buffer.readRecord();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
268	[BUG]  [BUGGY]  return  buffer.readRecord()?  null  :  buffer.readRecord();  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  buffer.readRecord()?  null  :  buffer.readRecord();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  buffer.readRecord()?  null  :  buffer.readRecord();	  return    buffer.readRecord();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
269	[BUG]  [BUGGY]  return  buffer.readRecord(headerBuf,  0,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  buffer.readRecord(headerBuf,  0,  headerBuf.length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  buffer.readRecord(headerBuf,  0,  headerBuf.length);	  return    buffer.readRecord();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
270	[BUG]  [BUGGY]  return  buffer.readRecord()  +  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  buffer.readRecord()  +  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  buffer.readRecord()  +  headerBuf.length;	  return    buffer.readRecord();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
271	[BUG]  [BUGGY]  return  hasHitEOF?  false  :  buffer.toByteArray();  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  false  :  buffer.toByteArray();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  false  :  buffer.toByteArray();	  return    hasHitEOF?    null    :    buffer.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
272	[BUG]  [BUGGY]  return  hasHitEOF?  true  :  buffer.toByteArray();  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  true  :  buffer.toByteArray();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  true  :  buffer.toByteArray();	  return    hasHitEOF?    null    :    buffer.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
273	[BUG]  [BUGGY]  return  hasHitEOF?  null  :  buffer.toByteArray()  +  1;  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  null  :  buffer.toByteArray()  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  null  :  buffer.toByteArray()  +  1;	  return    hasHitEOF?    null    :    buffer.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
274	[BUG]  [BUGGY]  return  headerBuf  null  :  hasHitEOF  +  1;  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf  null  :  hasHitEOF  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf  null  :  hasHitEOF  +  1;	  return    hasHitEOF?    headerBuf    null    :    headerBuf    +    1;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
275	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  null  :  headerBuf.length  +  1;  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  null  :  headerBuf.length  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  null  :  headerBuf.length  +  1;	  return    hasHitEOF?    headerBuf    null    :    headerBuf    +    1;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
276	[BUG]  [BUGGY]  return  headerBuf  null?  headerBuf  null  :  headerBuf  +  1;  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf  null?  headerBuf  null  :  headerBuf  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf  null?  headerBuf  null  :  headerBuf  +  1;	  return    hasHitEOF?    headerBuf    null    :    headerBuf    +    1;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
277	[BUG]  [BUGGY]  return  headerBuf  null?  headerBuf  null  :  hasHitEOF  +  1;  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf  null?  headerBuf  null  :  hasHitEOF  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf  null?  headerBuf  null  :  hasHitEOF  +  1;	  return    hasHitEOF?    headerBuf    null    :    headerBuf    +    1;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
278	[BUG]  [BUGGY]  return  headerBuf,  hasHitEOF?  headerBuf  null  :  headerBuf  +  1;  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf,  hasHitEOF?  headerBuf  null  :  headerBuf  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf,  hasHitEOF?  headerBuf  null  :  headerBuf  +  1;	  return    hasHitEOF?    headerBuf    null    :    headerBuf    +    1;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
279	[BUG]  [BUGGY]  return  headerBuf.length?  headerBuf.length  :  headerBuf.length  +  1;  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length?  headerBuf.length  :  headerBuf.length  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length?  headerBuf.length  :  headerBuf.length  +  1;	  return    hasHitEOF?    headerBuf.length    :    headerBuf.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
280	[BUG]  [BUGGY]  return  headerBuf.length?  hasHitEOF  :  headerBuf.length  +  1;  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length?  hasHitEOF  :  headerBuf.length  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length?  hasHitEOF  :  headerBuf.length  +  1;	  return    hasHitEOF?    headerBuf.length    :    headerBuf.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
281	[BUG]  [BUGGY]  return  headerBuf.length  hasHitEOF?  headerBuf.length  :  headerBuf.length  +  1;  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length  hasHitEOF?  headerBuf.length  :  headerBuf.length  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  hasHitEOF?  headerBuf.length  :  headerBuf.length  +  1;	  return    hasHitEOF?    headerBuf.length    :    headerBuf.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
282	[BUG]  [BUGGY]  return  headerBuf.length  -  hasHitEOF?  headerBuf.length  :  headerBuf.length  +  1;  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length  -  hasHitEOF?  headerBuf.length  :  headerBuf.length  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  -  hasHitEOF?  headerBuf.length  :  headerBuf.length  +  1;	  return    hasHitEOF?    headerBuf.length    :    headerBuf.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
283	[BUG]  [BUGGY]  return  headerBuf.length  :  hasHitEOF?  headerBuf.length  :  headerBuf;  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length  :  hasHitEOF?  headerBuf.length  :  headerBuf;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  :  hasHitEOF?  headerBuf.length  :  headerBuf;	  return    headerBuf.length    :    hasHitEOF?    buffer.length    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
284	[BUG]  [BUGGY]  return  headerBuf.length  :  hasHitEOF  &&  buffer.length  :  headerBuf;  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length  :  hasHitEOF  &&  buffer.length  :  headerBuf;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  :  hasHitEOF  &&  buffer.length  :  headerBuf;	  return    headerBuf.length    :    hasHitEOF?    buffer.length    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
285	[BUG]  [BUGGY]  return  headerBuf.length  :  hasHitEOF?  buf.length  :  headerBuf;  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length  :  hasHitEOF?  buf.length  :  headerBuf;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  :  hasHitEOF?  buf.length  :  headerBuf;	  return    headerBuf.length    :    hasHitEOF?    buffer.length    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
286	[BUG]  [BUGGY]  return  headerBuf.length?  headerBuf.length  :  headerBuf;  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length?  headerBuf.length  :  headerBuf;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length?  headerBuf.length  :  headerBuf;	  return    headerBuf.length?    hasHitEOF    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
287	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf.length  :  null.toByteArray();  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf.length  :  null.toByteArray();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf.length  :  null.toByteArray();	  return    hasHitEOF?    headerBuf    :    null.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
288	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf.toByteArray()  :  null.toByteArray();  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf.toByteArray()  :  null.toByteArray();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf.toByteArray()  :  null.toByteArray();	  return    hasHitEOF?    headerBuf    :    null.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
289	[BUG]  [BUGGY]  return  headerBuf?  hasHitEOF  :  null.toByteArray();  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  hasHitEOF  :  null.toByteArray();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  hasHitEOF  :  null.toByteArray();	  return    hasHitEOF?    headerBuf    :    null.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
290	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf,  0,  headerBuf.length  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf,  0,  headerBuf.length  :  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf,  0,  headerBuf.length  :  headerBuf.length;	  return    hasHitEOF?    headerBuf,    null    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
291	[BUG]  [BUGGY]  return  headerBuf.length?  headerBuf,  null  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length?  headerBuf,  null  :  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length?  headerBuf,  null  :  headerBuf.length;	  return    hasHitEOF?    headerBuf,    null    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
292	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf.length,  null  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf.length,  null  :  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf.length,  null  :  headerBuf.length;	  return    hasHitEOF?    headerBuf,    null    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
293	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf,  headerBuf.length  :  null;  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf,  headerBuf.length  :  null;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf,  headerBuf.length  :  null;	  return    hasHitEOF?    headerBuf,    null    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
294	[BUG]  [BUGGY]  return  headerBuf.length?  header  :  hasHitEOF;  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length?  header  :  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length?  header  :  hasHitEOF;	  return    hasHitEOF?    header    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
295	[BUG]  [BUGGY]  return  headerBuf?  null  :  headerBuf.read(),  hasHitEOF;  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  null  :  headerBuf.read(),  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  null  :  headerBuf.read(),  hasHitEOF;	  return    headerBuf?    null    :    headerBuf,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
296	[BUG]  [BUGGY]  return  headerBuf?  null  :  headerBuf.toString(),  hasHitEOF;  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  null  :  headerBuf.toString(),  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  null  :  headerBuf.toString(),  hasHitEOF;	  return    headerBuf?    null    :    headerBuf,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
297	[BUG]  [BUGGY]  return  headerBuf?  null  :  headerBuf,  hasHitEOF.length;  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  null  :  headerBuf,  hasHitEOF.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  null  :  headerBuf,  hasHitEOF.length;	  return    headerBuf?    null    :    headerBuf,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
298	[BUG]  [BUGGY]  return  headerBuf.length?  header.length  :  buffer.length;  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length?  header.length  :  buffer.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length?  header.length  :  buffer.length;	  return    hasHitEOF?    header.length    :    buffer.length;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
299	[BUG]  [BUGGY]  return  headerBuf?  header.length  :  buffer.length;  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  header.length  :  buffer.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  header.length  :  buffer.length;	  return    hasHitEOF?    header.length    :    buffer.length;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
300	[BUG]  [BUGGY]  return  header.length?  hasHitEOF  :  buffer.length;  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  header.length?  hasHitEOF  :  buffer.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  header.length?  hasHitEOF  :  buffer.length;	  return    hasHitEOF?    header.length    :    buffer.length;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
301	[BUG]  [BUGGY]  return  headerBuf.length?  header.length  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length?  header.length  :  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length?  header.length  :  headerBuf.length;	  return    hasHitEOF?    header.length    :    buffer.length;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
302	[BUG]  [BUGGY]  return  buffer.length?  hasHitEOF  :  headerBuf;  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  buffer.length?  hasHitEOF  :  headerBuf;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  buffer.length?  hasHitEOF  :  headerBuf;	  return    headerBuf.length?    hasHitEOF    :    buffer.length;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
303	[BUG]  [BUGGY]  return  headerBuf  >>  null?  null  :  headerBuf  +  1;  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf  >>  null?  null  :  headerBuf  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf  >>  null?  null  :  headerBuf  +  1;	  return    headerBuf    >    null?    null    :    headerBuf    +    1;    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
304	[BUG]  [BUGGY]  return  hasHitEOF?  headerToSkip  :  skipBuf;  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerToSkip  :  skipBuf;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerToSkip  :  skipBuf;	  return    hasHitEOF?    headerToSkip    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
305	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf,  skipped):  null;  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf,  skipped):  null;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf,  skipped):  null;	  return    hasHitEOF?    headerBuf    :    buffer.readEOFRecord(headerBuf):    null;    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
306	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readUTF(headerBuf):  null;  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readUTF(headerBuf):  null;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  buffer.readUTF(headerBuf):  null;	  return    hasHitEOF?    headerBuf    :    buffer.readEOFRecord(headerBuf):    null;    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
307	[BUG]  [BUGGY]  return  buffer.length  :  hasHitEOF  +  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  buffer.length  :  hasHitEOF  +  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  buffer.length  :  hasHitEOF  +  headerBuf.length;	  return    buffer.length    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
308	[BUG]  [BUGGY]  return  buffer.length  -  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  buffer.length  -  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  buffer.length  -  headerBuf.length;	  return    buffer.length    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
309	[BUG]  [BUGGY]  return  buffer.length  /  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  buffer.length  /  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  buffer.length  /  hasHitEOF;	  return    buffer.length    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
310	[BUG]  [BUGGY]  return  headerBuf.length  <  hasHitEOF?  headerBuf.length  :  headerBuf;  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length  <  hasHitEOF?  headerBuf.length  :  headerBuf;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  <  hasHitEOF?  headerBuf.length  :  headerBuf;	  return    headerBuf.length    >    hasHitEOF?    headerBuf.length    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
311	[BUG]  [BUGGY]  return  headerBuf.length  >=  hasHitEOF?  headerBuf.length  :  headerBuf;  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length  >=  hasHitEOF?  headerBuf.length  :  headerBuf;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  >=  hasHitEOF?  headerBuf.length  :  headerBuf;	  return    headerBuf.length    >    hasHitEOF?    headerBuf.length    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
312	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readRecord(0);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readRecord(0);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  buffer.readRecord(0);	  return    hasHitEOF?    headerBuf    :    buffer.readRecord();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
313	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readREcord();  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readREcord();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  buffer.readREcord();	  return    hasHitEOF?    headerBuf    :    buffer.readRecord();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
314	[BUG]  [BUGGY]  return  headerBuf?  header.length  :  hasHitEOF;  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  header.length  :  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  header.length  :  hasHitEOF;	  return    hasHitEOF?    header.length    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
315	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readRecord(headerBuf,  headerBuf);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readRecord(headerBuf,  headerBuf);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  buffer.readRecord(headerBuf,  headerBuf);	  return    hasHitEOF?    headerBuf    :    buffer.readRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
316	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readRecord(headerBuf,  skipped);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readRecord(headerBuf,  skipped);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  buffer.readRecord(headerBuf,  skipped);	  return    hasHitEOF?    headerBuf    :    buffer.readRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
317	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readRecord(headerBuf,  readBuf);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readRecord(headerBuf,  readBuf);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  buffer.readRecord(headerBuf,  readBuf);	  return    hasHitEOF?    headerBuf    :    buffer.readRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
318	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.read()  +  1;  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.read()  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  buffer.read()  +  1;	  return    hasHitEOF?    headerBuf    :    null    +    1;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
319	[BUG]  [BUGGY]  return  headerBuf?  null  :  headerBuf.length  -  1;  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  null  :  headerBuf.length  -  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  null  :  headerBuf.length  -  1;	  return    headerBuf?    null    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
320	[BUG]  [BUGGY]  return  headerBuf  >  hasHitEOF?  header  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf  >  hasHitEOF?  header  :  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf  >  hasHitEOF?  header  :  headerBuf.length;	  return    hasHitEOF?    header    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
321	[BUG]  [BUGGY]  return  headerBuf.length  :  headerBuf.length  +  1;  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length  :  headerBuf.length  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  :  headerBuf.length  +  1;	  return    hasHitEOF?    headerBuf.length    :    headerBuf.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
322	[BUG]  [BUGGY]  return  headerBuf.length  >  headerBuf.length?  headerBuf.length  :  headerBuf.length  +  1;  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length  >  headerBuf.length?  headerBuf.length  :  headerBuf.length  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  >  headerBuf.length?  headerBuf.length  :  headerBuf.length  +  1;	  return    hasHitEOF?    headerBuf.length    :    headerBuf.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
323	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf.length  :  headerBuf.length  /  1;  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf.length  :  headerBuf.length  /  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf.length  :  headerBuf.length  /  1;	  return    hasHitEOF?    headerBuf.length    :    headerBuf.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
324	[BUG]  [BUGGY]  return  headerBuf?  null  :  headerBuf  +  1L;  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  null  :  headerBuf  +  1L;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  null  :  headerBuf  +  1L;	  return    headerBuf?    null    :    headerBuf    +    1;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
325	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  headerBuf,  0,  headerBuf.length  -  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  System.arraycopy(buffer,  0,  headerBuf,  0,  headerBuf.length  -  headerBuf.length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	System.arraycopy(buffer,  0,  headerBuf,  0,  headerBuf.length  -  headerBuf.length);	  System.arraycopy(buffer,    0,    buf,    headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
326	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.toByteArray(headerBuf);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.toByteArray(headerBuf);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  buffer.toByteArray(headerBuf);	  return    hasHitEOF?    headerBuf    :    buffer.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
327	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.toByteArray()  +  1;  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.toByteArray()  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  buffer.toByteArray()  +  1;	  return    hasHitEOF?    headerBuf    :    buffer.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
328	[BUG]  [BUGGY]  return  headerBuf  >  0?  headerBuf  :  buffer.toByteArray();  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf  >  0?  headerBuf  :  buffer.toByteArray();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf  >  0?  headerBuf  :  buffer.toByteArray();	  return    hasHitEOF?    headerBuf    :    buffer.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
329	[BUG]  [BUGGY]  return  headerBuf?  null  :  headerBuf.read(0);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  null  :  headerBuf.read(0);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  null  :  headerBuf.read(0);	  return    headerBuf?    null    :    headerBuf.read();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
330	[BUG]  [BUGGY]  return  headerBuf.toByteArray()?  null  :  headerBuf.toByteArray(headerBuf);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.toByteArray()?  null  :  headerBuf.toByteArray(headerBuf);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.toByteArray()?  null  :  headerBuf.toByteArray(headerBuf);	  return    headerBuf.toByteArray()?    null    :    headerBuf.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
331	[BUG]  [BUGGY]  return  headerBuf.toByteArray()?  null  :  headBuf.toByteArray();  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.toByteArray()?  null  :  headBuf.toByteArray();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.toByteArray()?  null  :  headBuf.toByteArray();	  return    headerBuf.toByteArray()?    null    :    headerBuf.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
332	[BUG]  [BUGGY]  return  headerBuf.toByteArray()?  NULL  :  headerBuf.toByteArray();  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.toByteArray()?  NULL  :  headerBuf.toByteArray();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.toByteArray()?  NULL  :  headerBuf.toByteArray();	  return    headerBuf.toByteArray()?    null    :    headerBuf.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
333	[BUG]  [BUGGY]  return  headerBuf?  headerSize  :  skipBuf;  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  headerSize  :  skipBuf;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  headerSize  :  skipBuf;	  return    headerBuf?    headerSize    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
334	[BUG]  [BUGGY]  return  headerBuf?  headerSize  :  buffer.length;  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  headerSize  :  buffer.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  headerSize  :  buffer.length;	  return    headerBuf?    headerSize    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
335	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  skipBuf;  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  skipBuf;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  skipBuf;	  return    hasHitEOF?    headerBuf    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
336	[BUG]  [BUGGY]  else  if(buffer.isEOF(headerBuf))  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  else  if(buffer.isEOF(headerBuf))  {  hasHitEOF  =  true;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	else  if(buffer.isEOF(headerBuf))  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
337	[BUG]  [BUGGY]  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	else  if(buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
338	[BUG]  [BUGGY]  else  if(buffer.isEOFRecord(headerBuf)&&  hasHitEOF)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  else  if(buffer.isEOFRecord(headerBuf)&&  hasHitEOF)  {  hasHitEOF  =  true;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	else  if(buffer.isEOFRecord(headerBuf)&&  hasHitEOF)  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
339	[BUG]  [BUGGY]  return  headerBuf  ==  null?  EOF  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf  ==  null?  EOF  :  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf  ==  null?  EOF  :  headerBuf.length;	  return    headerBuf    ==    null?    null    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
340	[BUG]  [BUGGY]  return  headerSize?  hasHitEOF  :  buffer.readEOFRecord(headerBuf);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerSize?  hasHitEOF  :  buffer.readEOFRecord(headerBuf);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerSize?  hasHitEOF  :  buffer.readEOFRecord(headerBuf);	  return    headerSize?    hasHitEOF    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
341	[BUG]  [BUGGY]  return  headerBuf.hasHitEOF?  null  :  headerBuf.toByteArray()  +  1;  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.hasHitEOF?  null  :  headerBuf.toByteArray()  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.hasHitEOF?  null  :  headerBuf.toByteArray()  +  1;	  return    headerBuf.hasHitEOF?    null    :    headerBuf.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
342	[BUG]  [BUGGY]  return  headerBuf.size()  >  headerBuf.length?  null  :  headerBuf.toByteArray();  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.size()  >  headerBuf.length?  null  :  headerBuf.toByteArray();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.size()  >  headerBuf.length?  null  :  headerBuf.toByteArray();	  return    headerBuf.hasHitEOF?    null    :    headerBuf.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
343	[BUG]  [BUGGY]  return  headerBuf.isEOF?  null  :  headerBuf.toByteArray();  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.isEOF?  null  :  headerBuf.toByteArray();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.isEOF?  null  :  headerBuf.toByteArray();	  return    headerBuf.hasHitEOF?    null    :    headerBuf.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
344	[BUG]  [BUGGY]  return  headerBuf  ==  null?  EOF  :  headerBuf.toByteArray();  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf  ==  null?  EOF  :  headerBuf.toByteArray();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf  ==  null?  EOF  :  headerBuf.toByteArray();	  return    headerBuf!=    null?    null    :    headerBuf.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
345	[BUG]  [BUGGY]  return  headerBuf  ==  null?  0  :  headerBuf.toByteArray();  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf  ==  null?  0  :  headerBuf.toByteArray();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf  ==  null?  0  :  headerBuf.toByteArray();	  return    headerBuf!=    null?    null    :    headerBuf.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
346	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.isEOFRecord(headerBuf,  skipped);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.isEOFRecord(headerBuf,  skipped);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  buffer.isEOFRecord(headerBuf,  skipped);	  return    hasHitEOF?    headerBuf    :    buffer.isEOFRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
347	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.isEOFRecord(headerBuf,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.isEOFRecord(headerBuf,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  buffer.isEOFRecord(headerBuf,  hasHitEOF);	  return    hasHitEOF?    headerBuf    :    buffer.isEOFRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
348	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.isEOFRecord(headerBuf,  headerBuf);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.isEOFRecord(headerBuf,  headerBuf);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  buffer.isEOFRecord(headerBuf,  headerBuf);	  return    hasHitEOF?    headerBuf    :    buffer.isEOFRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
349	[BUG]  [BUGGY]  return  headerBuf,  headerBuf?  null  :  headerBuf.length  +  1;  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf,  headerBuf?  null  :  headerBuf.length  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf,  headerBuf?  null  :  headerBuf.length  +  1;	  return    headerBuf,    hasHitEOF?    null    :    headerBuf    +    1;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
350	[BUG]  [BUGGY]  return  buffer?  null  :  buffer.toByteArray();  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  buffer?  null  :  buffer.toByteArray();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  buffer?  null  :  buffer.toByteArray();	  return    hasHitEOF?    null    :    buffer.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
351	[BUG]  [BUGGY]  return  hasHitEOF?  null  :  buffer.toByteArray(headerBuf);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  null  :  buffer.toByteArray(headerBuf);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  null  :  buffer.toByteArray(headerBuf);	  return    hasHitEOF?    null    :    buffer.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
352	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf,  headerBuf,  null  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf,  headerBuf,  null  :  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf,  headerBuf,  null  :  headerBuf.length;	  return    hasHitEOF?    headerBuf,    null    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
353	[BUG]  [BUGGY]  return  headerBuf?  headerBuf,  null  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  headerBuf,  null  :  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  headerBuf,  null  :  headerBuf.length;	  return    hasHitEOF?    headerBuf,    null    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
354	[BUG]  [BUGGY]  return  headerBuf,  null  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf,  null  :  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf,  null  :  headerBuf.length;	  return    hasHitEOF?    headerBuf,    null    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
355	[BUG]  [BUGGY]  return  headerBuf?  headerBuf,  headerBuf.length  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  headerBuf,  headerBuf.length  :  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  headerBuf,  headerBuf.length  :  headerBuf.length;	  return    hasHitEOF?    headerBuf,    headerBuf.length    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
356	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf,  headerBuf.length  :  headerBuf.length  +  1;  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf,  headerBuf.length  :  headerBuf.length  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf,  headerBuf.length  :  headerBuf.length  +  1;	  return    hasHitEOF?    headerBuf,    headerBuf.length    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
357	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  headerBuf,  0,  headerSize);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  headerBuf,  0,  headerSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	System.arraycopy(buffer,  0,  buffer,  headerBuf,  0,  headerSize);	  System.arraycopy(buffer,    0,    buf,    headerBuf,    0,    headerSize);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
358	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  headerBuf,  0,  headerSize  -  1);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  System.arraycopy(buffer,  0,  buf,  headerBuf,  0,  headerSize  -  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	System.arraycopy(buffer,  0,  buf,  headerBuf,  0,  headerSize  -  1);	  System.arraycopy(buffer,    0,    buf,    headerBuf,    0,    headerSize);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
359	[BUG]  [BUGGY]  safely(buffer.readRecord(),  headerBuf))  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  safely(buffer.readRecord(),  headerBuf))  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	safely(buffer.readRecord(),  headerBuf))  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(headerBuf))    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
360	[BUG]  [BUGGY]  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	else  if(buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(headerBuf))    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
361	[BUG]  [BUGGY]  else  if(buffer.isEOF(headerBuf)&&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  else  if(buffer.isEOF(headerBuf)&&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	else  if(buffer.isEOF(headerBuf)&&  headerBuf.length  >  0)  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(headerBuf))    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
362	[BUG]  [BUGGY]  haveHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  haveHitEOF  =  false;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	haveHitEOF  =  false;	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
363	[BUG]  [BUGGY]  HeaderBuffer  buffer  =  buffer.readRecord();  hasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  HeaderBuffer  buffer  =  buffer.readRecord();  hasHitEOF  =  false;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	HeaderBuffer  buffer  =  buffer.readRecord();  hasHitEOF  =  false;	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
364	[BUG]  [BUGGY]  HeaderBuffer  buffer  =  buffer.readHeader(headerBuf);  hasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  HeaderBuffer  buffer  =  buffer.readHeader(headerBuf);  hasHitEOF  =  false;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	HeaderBuffer  buffer  =  buffer.readHeader(headerBuf);  hasHitEOF  =  false;	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
365	[BUG]  [BUGGY]  HeaderBuffer  buffer  =  buffer.readHeader(headerBuf);  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  HeaderBuffer  buffer  =  buffer.readHeader(headerBuf);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	HeaderBuffer  buffer  =  buffer.readHeader(headerBuf);	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
366	[BUG]  [BUGGY]  HeaderBuffer  buffer  =  buffer.readHeaderByteBuffer(headerBuf);  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  HeaderBuffer  buffer  =  buffer.readHeaderByteBuffer(headerBuf);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	HeaderBuffer  buffer  =  buffer.readHeaderByteBuffer(headerBuf);	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
367	[BUG]  [BUGGY]  return  headerBuf.length  >  headBuf.length?  headerBuf.length  :  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length  >  headBuf.length?  headerBuf.length  :  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  >  headBuf.length?  headerBuf.length  :  hasHitEOF;	  return    headerBuf.length    hasHitEOF?    headerBuf.length    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
368	[BUG]  [BUGGY]  return  headerBuf,  headerBuf.length?  null  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf,  headerBuf.length?  null  :  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf,  headerBuf.length?  null  :  headerBuf.length;	  return    headerBuf.length?    null    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
369	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf.length  :  0,  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf.length  :  0,  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf.length  :  0,  headerBuf.length;	  return    hasHitEOF?    headerBuf.length    :    null;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
370	[BUG]  [BUGGY]  return  headerBuf.length?  headerSize  :  skipBuf.length;  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length?  headerSize  :  skipBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length?  headerSize  :  skipBuf.length;	  return    headerBuf.length?    headerSize    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
371	[BUG]  [BUGGY]  return  headerBuf.length?  headerSize  :  recordSize;  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length?  headerSize  :  recordSize;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length?  headerSize  :  recordSize;	  return    headerBuf.length?    headerSize    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
372	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf,  skipped);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf,  skipped);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf,  skipped);	  return    hasHitEOF?    headerBuf    :    buffer.readEOFRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
373	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf,  headerBuf);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf,  headerBuf);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf,  headerBuf);	  return    hasHitEOF?    headerBuf    :    buffer.readEOFRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
374	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf,  readBuf);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf,  readBuf);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf,  readBuf);	  return    hasHitEOF?    headerBuf    :    buffer.readEOFRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
375	[BUG]  [BUGGY]  return  headerSize?  headerBuf  :  hasHitEOF;  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerSize?  headerBuf  :  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerSize?  headerBuf  :  hasHitEOF;	  return    hasHitEOF?    headerBuf    :    headerSize;    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
376	[BUG]  [BUGGY]  return  headerBuf.length  :  hasHitEOF?  headerBuf.toByteArray();  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length  :  hasHitEOF?  headerBuf.toByteArray();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  :  hasHitEOF?  headerBuf.toByteArray();	  return    hasHitEOF?    headerBuf.length    :    headerBuf.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
377	[BUG]  [BUGGY]  return  headerBuf.length  >  0?  headerBuf.length  :  headerBuf.toByteArray();  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length  >  0?  headerBuf.length  :  headerBuf.toByteArray();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  >  0?  headerBuf.length  :  headerBuf.toByteArray();	  return    hasHitEOF?    headerBuf.length    :    headerBuf.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
378	[BUG]  [BUGGY]  else  if(buffer.isEOF())  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  else  if(buffer.isEOF())  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  false;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	else  if(buffer.isEOF())  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  false;  }	  if(buffer.isEOFRecord(headerBuf))    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
379	[BUG]  [BUGGY]  return  headerBuf  >=  null?  null  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf  >=  null?  null  :  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf  >=  null?  null  :  headerBuf.length;	  return    headerBuf!=    null?    null    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
380	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  headerBuf,  0,  headerBuf.length  -  6);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  System.arraycopy(buffer,  0,  headerBuf,  0,  headerBuf.length  -  6);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	System.arraycopy(buffer,  0,  headerBuf,  0,  headerBuf.length  -  6);	  System.arraycopy(buffer,    0,    headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
381	[BUG]  [BUGGY]  return  buffer.length  -  hasHitEOF?  headerBuf.length  :  headerBuf;  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  buffer.length  -  hasHitEOF?  headerBuf.length  :  headerBuf;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  buffer.length  -  hasHitEOF?  headerBuf.length  :  headerBuf;	  return    headerBuf.length    -    hasHitEOF?    buffer.length    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
382	[BUG]  [BUGGY]  return  headerBuf,  null  :  headerBuf;  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf,  null  :  headerBuf;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf,  null  :  headerBuf;	  return    headerBuf,    null    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
383	[BUG]  [BUGGY]  return  headerBuf,  null  &  hasHitEOF;  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf,  null  &  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf,  null  &  hasHitEOF;	  return    headerBuf,    null    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
384	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  buffer,  0,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  System.arraycopy(buffer,  0,  buf,  buffer,  0,  headerBuf.length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	System.arraycopy(buffer,  0,  buf,  buffer,  0,  headerBuf.length);	  System.arraycopy(buffer,    0,    buf,    headerBuf,    0,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
385	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  headerBuf,  0,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  headerBuf,  0,  headerBuf.length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	System.arraycopy(buffer,  0,  buffer,  headerBuf,  0,  headerBuf.length);	  System.arraycopy(buffer,    0,    buf,    headerBuf,    0,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
386	[BUG]  [BUGGY]  return  headerBuf.hasHitEOF?  header  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.hasHitEOF?  header  :  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.hasHitEOF?  header  :  headerBuf.length;	  return    headerBuf.hasHitEOF?    header    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
387	[BUG]  [BUGGY]  return  headerBuf.hasHitEOF?  header  :  buffer.hashCode();  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.hasHitEOF?  header  :  buffer.hashCode();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.hasHitEOF?  header  :  buffer.hashCode();	  return    headerBuf.hasHitEOF?    header    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
388	[BUG]  [BUGGY]  return  headerBuf.length?  headerBuf.length  :  skipBuf.length;  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length?  headerBuf.length  :  skipBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length?  headerBuf.length  :  skipBuf.length;	  return    headerBuf.length?    headerBuf.length    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
389	[BUG]  [BUGGY]  return  headerBuf.length?  headerBuf.length  :  skipped;  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length?  headerBuf.length  :  skipped;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length?  headerBuf.length  :  skipped;	  return    headerBuf.length?    headerBuf.length    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
390	[BUG]  [BUGGY]  return  headerBuf.length?  headerBuf.length  :  headBuf.length;  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length?  headerBuf.length  :  headBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length?  headerBuf.length  :  headBuf.length;	  return    headerBuf.length?    headerBuf.length    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
391	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.isEOFRecord(headerBuf,  skipBuf):  null;  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.isEOFRecord(headerBuf,  skipBuf):  null;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  buffer.isEOFRecord(headerBuf,  skipBuf):  null;	  return    hasHitEOF?    headerBuf    :    buffer.isEOFRecord(headerBuf):    null;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
392	[BUG]  [BUGGY]  return  headerBuf.length  :  hasHitEOF?  buffer.length  -  headerBuf.length  :  headerBuf;  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length  :  hasHitEOF?  buffer.length  -  headerBuf.length  :  headerBuf;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  :  hasHitEOF?  buffer.length  -  headerBuf.length  :  headerBuf;	  return    headerBuf.length    :    hasHitEOF?    buffer.length    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
393	[BUG]  [BUGGY]  return  buffer.length  :  hasHitEOF?  headerBuf.length  :  headerBuf;  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  buffer.length  :  hasHitEOF?  headerBuf.length  :  headerBuf;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  buffer.length  :  hasHitEOF?  headerBuf.length  :  headerBuf;	  return    headerBuf.length    :    hasHitEOF?    buffer.length    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
394	[BUG]  [BUGGY]  return  headerBuf.length  &  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length  &  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  &  hasHitEOF;	  return    headerBuf.length    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
395	[BUG]  [BUGGY]  return  headerBuf.length  %  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length  %  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  %  hasHitEOF;	  return    headerBuf.length    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
396	[BUG]  [BUGGY]  return  headerBuf.length  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length  :  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  :  headerBuf.length;	  return    headerBuf.length    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
397	[BUG]  [BUGGY]  return  headerBuf?  headerBuf  :  hasHitEOF  +  1;  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  headerBuf  :  hasHitEOF  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  headerBuf  :  hasHitEOF  +  1;	  return    hasHitEOF?    headerBuf    :    headerBuf    +    1;    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
398	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readBuf  +  1;  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readBuf  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  buffer.readBuf  +  1;	  return    hasHitEOF?    headerBuf    :    headerBuf    +    1;    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
399	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  headerBuf  +  1L;  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  headerBuf  +  1L;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  headerBuf  +  1L;	  return    hasHitEOF?    headerBuf    :    headerBuf    +    1;    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
400	[BUG]  [BUGGY]  return  buffer.readRecord()  &&  headerBuf.length()!=  0;  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  buffer.readRecord()  &&  headerBuf.length()!=  0;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  buffer.readRecord()  &&  headerBuf.length()!=  0;	  return    buffer.readRecord();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
401	[BUG]  [BUGGY]  return  headerBuf.length?  headerBuf.length  :  headerBuf  +  1;  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length?  headerBuf.length  :  headerBuf  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length?  headerBuf.length  :  headerBuf  +  1;	  return    hasHitEOF?    headerBuf.length    :    headerBuf    +    1;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
402	[BUG]  [BUGGY]  return  headerBuf.length  :  headerBuf  +  1;  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length  :  headerBuf  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  :  headerBuf  +  1;	  return    hasHitEOF?    headerBuf.length    :    headerBuf    +    1;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
403	[BUG]  [BUGGY]  return  headerBuf.length?  hasHitEOF  :  buffer.readRecord;  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length?  hasHitEOF  :  buffer.readRecord;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length?  hasHitEOF  :  buffer.readRecord;	  return    headerBuf.length?    hasHitEOF    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
404	[BUG]  [BUGGY]  return  headerBuf.length  -  hasHitEOF  :  headerBuf;  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length  -  hasHitEOF  :  headerBuf;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  -  hasHitEOF  :  headerBuf;	  return    headerBuf.length?    hasHitEOF    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
405	[BUG]  [BUGGY]  return  buffer.length?  headerBuf.length  :  skipBuf.length;  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  buffer.length?  headerBuf.length  :  skipBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  buffer.length?  headerBuf.length  :  skipBuf.length;	  return    buffer.length?    headerBuf.length    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
406	[BUG]  [BUGGY]  return  buffer.length?  headerBuf.length  :  headerBuf;  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  buffer.length?  headerBuf.length  :  headerBuf;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  buffer.length?  headerBuf.length  :  headerBuf;	  return    buffer.length?    headerBuf.length    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
407	[BUG]  [BUGGY]  return  headerBuf?  buffer.length  :  headerBuf;  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  buffer.length  :  headerBuf;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  buffer.length  :  headerBuf;	  return    headerBuf?    buffer.length    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
408	[BUG]  [BUGGY]  return  buffer.length?  headerBuf  :  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  buffer.length?  headerBuf  :  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  buffer.length?  headerBuf  :  hasHitEOF;	  return    headerBuf?    buffer.length    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
409	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  headerBuf.length  -  1;  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  headerBuf.length  -  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  headerBuf.length  -  1;	  return    hasHitEOF?    headerBuf    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
410	[BUG]  [BUGGY]  return  headerBuf  >  hasHitEOF?  headerBuf  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf  >  hasHitEOF?  headerBuf  :  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf  >  hasHitEOF?  headerBuf  :  headerBuf.length;	  return    hasHitEOF?    headerBuf    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
411	[BUG]  [BUGGY]  array[headerBuf.length  -  1]  =  buffer.readRecord();  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  array[headerBuf.length  -  1]  =  buffer.readRecord();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	array[headerBuf.length  -  1]  =  buffer.readRecord();	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    else    {    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
412	[BUG]  [BUGGY]  HeaderBuffer  buffer  =  buffer.readHeaderBuffer();  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  HeaderBuffer  buffer  =  buffer.readHeaderBuffer();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	HeaderBuffer  buffer  =  buffer.readHeaderBuffer();	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    else    {    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
413	[BUG]  [BUGGY]  array[headerBuf.length]  =  buffer.readRecord();  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  array[headerBuf.length]  =  buffer.readRecord();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	array[headerBuf.length]  =  buffer.readRecord();	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    else    {    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
414	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf.length  :  headerHeaderSize;  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf.length  :  headerHeaderSize;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf.length  :  headerHeaderSize;	  return    hasHitEOF?    headerBuf.length    :    headerSize;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
415	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf.length  :  headerSize  +  1;  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf.length  :  headerSize  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf.length  :  headerSize  +  1;	  return    hasHitEOF?    headerBuf.length    :    headerSize;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
416	[BUG]  [BUGGY]  return  hasHitEOF  &  headerBuf  :  buffer.readEOFRecord(headerBuf);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF  &  headerBuf  :  buffer.readEOFRecord(headerBuf);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF  &  headerBuf  :  buffer.readEOFRecord(headerBuf);	  return    hasHitEOF    &    headerBuf    :    null;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
417	[BUG]  [BUGGY]  return  hasHitEOF  &  headerBuf  :  buffer;  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF  &  headerBuf  :  buffer;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF  &  headerBuf  :  buffer;	  return    hasHitEOF    &    headerBuf    :    null;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
418	[BUG]  [BUGGY]  return  hasHitEOF  &  headerBuf  :  buffer.readEOFRecord();  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF  &  headerBuf  :  buffer.readEOFRecord();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF  &  headerBuf  :  buffer.readEOFRecord();	  return    hasHitEOF    &    headerBuf    :    null;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
419	[BUG]  [BUGGY]  return  hasHitEOF  &  headerBuf  :  headerBuf;  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF  &  headerBuf  :  headerBuf;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF  &  headerBuf  :  headerBuf;	  return    hasHitEOF    &    headerBuf    :    null;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
420	[BUG]  [BUGGY]  while(buffer.isEOF())  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  while(buffer.isEOF())  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	while(buffer.isEOF())  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(headerBuf))    {    for(int    i    =    0;    i    <    buffer.length;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
421	[BUG]  [BUGGY]  else  if(buffer.isEOFRecord(headerBuf)&&  buffer.length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  else  if(buffer.isEOFRecord(headerBuf)&&  buffer.length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	else  if(buffer.isEOFRecord(headerBuf)&&  buffer.length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(headerBuf))    {    for(int    i    =    0;    i    <    buffer.length;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
422	[BUG]  [BUGGY]  return  hasHitEOF?  header  :  buffer.toString();  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  header  :  buffer.toString();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  header  :  buffer.toString();	  return    hasHitEOF?    header    :    headerBuf.toString();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
423	[BUG]  [BUGGY]  return  headerBuf  null  :  headerBuf  +  1;  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf  null  :  headerBuf  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf  null  :  headerBuf  +  1;	  return    hasHitEOF?    headerBuf    null    :    headerBuf    +    1;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
424	[BUG]  [BUGGY]  return  headerBuf?  headerBuf  null  :  headerBuf  +  1;  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  headerBuf  null  :  headerBuf  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  headerBuf  null  :  headerBuf  +  1;	  return    hasHitEOF?    headerBuf    null    :    headerBuf    +    1;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
425	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  null  :  headerBuf,  hasHitEOF  +  1;  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  null  :  headerBuf,  hasHitEOF  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  null  :  headerBuf,  hasHitEOF  +  1;	  return    hasHitEOF?    headerBuf    null    :    headerBuf    +    1;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
426	[BUG]  [BUGGY]  return  hasHitEOF?  headerSize  :  headerBuf.length  -  1;  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerSize  :  headerBuf.length  -  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerSize  :  headerBuf.length  -  1;	  return    hasHitEOF?    headerSize    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
427	[BUG]  [BUGGY]  return  hasHitEOF?  headerSize  :  headerBuf.length  +  1;  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerSize  :  headerBuf.length  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerSize  :  headerBuf.length  +  1;	  return    hasHitEOF?    headerSize    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
428	[BUG]  [BUGGY]  return  headerSize?  headerBuf.length  :  headerSize;  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerSize?  headerBuf.length  :  headerSize;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerSize?  headerBuf.length  :  headerSize;	  return    hasHitEOF?    headerSize    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
429	[BUG]  [BUGGY]  return  headerBuf,  0?  null  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf,  0?  null  :  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf,  0?  null  :  headerBuf.length;	  return    headerBuf,    hasHitEOF?    null    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
430	[BUG]  [BUGGY]  while(buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0)  {  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  while(buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0)  {  hasHitEOF  =  true;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	while(buffer.isEOFRecord(headerBuf)&&  headerBuf.length  >  0)  {  hasHitEOF  =  true;	  while(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
431	[BUG]  [BUGGY]  while(buffer.isEOFRecord(headerBuf)&&  hasHitEOF  ==  false)  {  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  while(buffer.isEOFRecord(headerBuf)&&  hasHitEOF  ==  false)  {  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	while(buffer.isEOFRecord(headerBuf)&&  hasHitEOF  ==  false)  {	  while(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
432	[BUG]  [BUGGY]  while(buffer.shouldEOFRecord(headerBuf))  {  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  while(buffer.shouldEOFRecord(headerBuf))  {  hasHitEOF  =  true;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	while(buffer.shouldEOFRecord(headerBuf))  {  hasHitEOF  =  true;	  while(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
433	[BUG]  [BUGGY]  while(buffer.hasEOF(headerBuf))  {  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  while(buffer.hasEOF(headerBuf))  {  hasHitEOF  =  true;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	while(buffer.hasEOF(headerBuf))  {  hasHitEOF  =  true;	  while(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
434	[BUG]  [BUGGY]  return  headerBuf?  null  :  headerBuf,  skipBuf;  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  null  :  headerBuf,  skipBuf;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  null  :  headerBuf,  skipBuf;	  return    headerBuf?    null    :    headerBuf,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
435	[BUG]  [BUGGY]  return  headerBuf?  null  :  headerBuf,  skipped;  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  null  :  headerBuf,  skipped;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  null  :  headerBuf,  skipped;	  return    headerBuf?    null    :    headerBuf,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
436	[BUG]  [BUGGY]  return  headerBuf?  null  :  headerBuf,  readBuf,  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  null  :  headerBuf,  readBuf,  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  null  :  headerBuf,  readBuf,  hasHitEOF;	  return    headerBuf?    null    :    headerBuf,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
437	[BUG]  [BUGGY]  return  headerBuf?  null  :  headerBuf,  buffer.length;  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  null  :  headerBuf,  buffer.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  null  :  headerBuf,  buffer.length;	  return    headerBuf?    null    :    headerBuf,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
438	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf)+  1;  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf)+  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf)+  1;	  return    hasHitEOF?    headerBuf    :    null    +    1;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
439	[BUG]  [BUGGY]  return  headerBuf.length?  headerSize  :  headerBuf;  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length?  headerSize  :  headerBuf;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length?  headerSize  :  headerBuf;	  return    headerBuf.length?    headerSize    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
440	[BUG]  [BUGGY]  return  headerBuf.length?  headerLength  :  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length?  headerLength  :  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length?  headerLength  :  hasHitEOF;	  return    headerBuf.length?    headerSize    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
441	[BUG]  [BUGGY]  return  headerBuf.length?  headerEnd  :  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length?  headerEnd  :  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length?  headerEnd  :  hasHitEOF;	  return    headerBuf.length?    headerSize    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
442	[BUG]  [BUGGY]  return  headerHitEOF?  hasHitEOF  :  headerBuf.toString();  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerHitEOF?  hasHitEOF  :  headerBuf.toString();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerHitEOF?  hasHitEOF  :  headerBuf.toString();	  return    hasHitEOF?    header    :    headerBuf.toString();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
443	[BUG]  [BUGGY]  return  headerBuf?  null  :  buffer.readEOFRecord(headerBuf);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  null  :  buffer.readEOFRecord(headerBuf);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  null  :  buffer.readEOFRecord(headerBuf);	  return    headerBuf?    null    :    buffer.readRecord();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
444	[BUG]  [BUGGY]  return  headerBuf?  null  :  buffer.readEOFRecord();  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  null  :  buffer.readEOFRecord();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  null  :  buffer.readEOFRecord();	  return    headerBuf?    null    :    buffer.readRecord();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
445	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readEOFRecord();  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readEOFRecord();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  buffer.readEOFRecord();	  return    hasHitEOF?    headerBuf    :    buffer.readRecord();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
446	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readHeader(headerBuf);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readHeader(headerBuf);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  buffer.readHeader(headerBuf);	  return    hasHitEOF?    headerBuf    :    buffer.readRecord();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
447	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf.length  :  headerBuff.length;  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf.length  :  headerBuff.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf.length  :  headerBuff.length;	  return    hasHitEOF?    headerBuf.length    :    headerSize;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
448	[BUG]  [BUGGY]  return  headerBuf.length  <  0?  headerBuf.length  :  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length  <  0?  headerBuf.length  :  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  <  0?  headerBuf.length  :  hasHitEOF;	  return    headerBuf.length    hasHitEOF?    headerBuf.length    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
449	[BUG]  [BUGGY]  return  headerBuf.length  }?  headerBuf.length  :  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length  }?  headerBuf.length  :  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  }?  headerBuf.length  :  hasHitEOF;	  return    headerBuf.length    hasHitEOF?    headerBuf.length    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
450	[BUG]  [BUGGY]  return  headerBuf,  0,  headerBuf.length?  null  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf,  0,  headerBuf.length?  null  :  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf,  0,  headerBuf.length?  null  :  headerBuf.length;	  return    headerBuf.length?    null    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
451	[BUG]  [BUGGY]  return  headerBuf?  headerBuf.length  :  headerBuf;  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  headerBuf.length  :  headerBuf;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  headerBuf.length  :  headerBuf;	  return    headerBuf?    hasHitEOF    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
452	[BUG]  [BUGGY]  return  headerBuf  >>  null?  null  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf  >>  null?  null  :  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf  >>  null?  null  :  headerBuf.length;	  return    headerBuf!=    null?    null    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
453	[BUG]  [BUGGY]  return  headerBuf  [Delete]  null?  null  :  headerBuf  +  1;  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf  [Delete]  null?  null  :  headerBuf  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf  [Delete]  null?  null  :  headerBuf  +  1;	  return    headerBuf    >    null?    null    :    headerBuf    +    1;    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
454	[BUG]  [BUGGY]  return  headerBuf.length  :  hasHitEOF?  headerBuf.length  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length  :  hasHitEOF?  headerBuf.length  :  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  :  hasHitEOF?  headerBuf.length  :  headerBuf.length;	  return    headerBuf.length    :    hasHitEOF?    buffer.length    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
455	[BUG]  [BUGGY]  return  headerBuf.length  :  hasHitEOF?  headerBuf.length  :  buffer.length;  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length  :  hasHitEOF?  headerBuf.length  :  buffer.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  :  hasHitEOF?  headerBuf.length  :  buffer.length;	  return    headerBuf.length    :    hasHitEOF?    buffer.length    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
456	[BUG]  [BUGGY]  return  headerSize  >  headerBuf.length?  headerSize  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerSize  >  headerBuf.length?  headerSize  :  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerSize  >  headerBuf.length?  headerSize  :  headerBuf.length;	  return    hasHitEOF?    headerSize    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
457	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf.toString()  :  null.toByteArray();  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf.toString()  :  null.toByteArray();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf.toString()  :  null.toByteArray();	  return    hasHitEOF?    headerBuf    :    null.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
458	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf.toByteArray()  :  null;  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf.toByteArray()  :  null;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf.toByteArray()  :  null;	  return    hasHitEOF?    headerBuf    :    null.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
459	[BUG]  [BUGGY]  return  hasHitEOF?  buffer.length  :  header.length;  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  buffer.length  :  header.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  buffer.length  :  header.length;	  return    hasHitEOF?    header.length    :    buffer.length;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
460	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf,  null  :  headerBuf.length  +  1;  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf,  null  :  headerBuf.length  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf,  null  :  headerBuf.length  +  1;	  return    hasHitEOF?    headerBuf,    null    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
461	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf,  headerSize  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf,  headerSize  :  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf,  headerSize  :  headerBuf.length;	  return    hasHitEOF?    headerBuf,    null    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
462	[BUG]  [BUGGY]  return  headerBuf,  null?  null  :  headerBuf.toByteArray();  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf,  null?  null  :  headerBuf.toByteArray();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf,  null?  null  :  headerBuf.toByteArray();	  return    headerBuf    buzunar?    null    :    headerBuf.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
463	[BUG]  [BUGGY]  System.arraycopy(bodyBuf,  0,  buf,  headerBuf,  0,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  System.arraycopy(bodyBuf,  0,  buf,  headerBuf,  0,  headerBuf.length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	System.arraycopy(bodyBuf,  0,  buf,  headerBuf,  0,  headerBuf.length);	  System.arraycopy(buffer,    0,    buf,    headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
464	[BUG]  [BUGGY]  return  buffer.length?  headerBuf.length  :  hashitEOF;  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  buffer.length?  headerBuf.length  :  hashitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  buffer.length?  headerBuf.length  :  hashitEOF;	  return    buffer.length?    headerBuf.length    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
465	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf.length  +  1  :  buffer.length;  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf.length  +  1  :  buffer.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf.length  +  1  :  buffer.length;	  return    hasHitEOF?    headerBuf.length    :    buffer.length;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
466	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	}  else  if(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(headerBuf))    {    for(int    i    =    0;    i    <    buffer.length;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
467	[BUG]  [BUGGY]  while(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  while(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	while(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(headerBuf))    {    for(int    i    =    0;    i    <    buffer.length;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
468	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf,  null  :  headerBuf  +  1;  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf,  null  :  headerBuf  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf,  null  :  headerBuf  +  1;	  return    hasHitEOF?    headerBuf    null    :    headerBuf    +    1;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
469	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buf,  headerBuf,  0,  headerSize  -  headerSize);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  System.arraycopy(buffer,  0,  buf,  headerBuf,  0,  headerSize  -  headerSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	System.arraycopy(buffer,  0,  buf,  headerBuf,  0,  headerSize  -  headerSize);	  System.arraycopy(buffer,    0,    buf,    headerBuf,    0,    headerSize);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
470	[BUG]  [BUGGY]  System.arraycopy(bodyBuf,  0,  buf,  headerBuf,  0,  headerSize);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  System.arraycopy(bodyBuf,  0,  buf,  headerBuf,  0,  headerSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	System.arraycopy(bodyBuf,  0,  buf,  headerBuf,  0,  headerSize);	  System.arraycopy(buffer,    0,    buf,    headerBuf,    0,    headerSize);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
471	[BUG]  [BUGGY]  return  headerBuf?  headerSize  :  headerBuf;  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  headerSize  :  headerBuf;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  headerSize  :  headerBuf;	  return    headerBuf?    headerSize    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
472	[BUG]  [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  }  else  if(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	}  else  if(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(headerBuf))    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
473	[BUG]  [BUGGY]  while(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  while(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	while(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(headerBuf))    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
474	[BUG]  [BUGGY]  while(buffer.isEOF())  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  while(buffer.isEOF())  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	while(buffer.isEOF())  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  true;  }	  if(buffer.isEOFRecord(headerBuf))    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
475	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf.toString()  :  headerSize;  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf.toString()  :  headerSize;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf.toString()  :  headerSize;	  return    hasHitEOF?    headerBuf    :    headerSize;    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
476	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  +  1  :  headerSize;  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  +  1  :  headerSize;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  +  1  :  headerSize;	  return    hasHitEOF?    headerBuf    :    headerSize;    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
477	[BUG]  [BUGGY]  return  headerBuf?  headerBuf.length  :  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  headerBuf.length  :  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  headerBuf.length  :  hasHitEOF;	  return    headerBuf?    buffer.length    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
478	[BUG]  [BUGGY]  return  headerBuf?  buffer.length  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  buffer.length  :  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  buffer.length  :  headerBuf.length;	  return    headerBuf?    buffer.length    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
479	[BUG]  [BUGGY]  HashITEOF  =  false;  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  HashITEOF  =  false;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	HashITEOF  =  false;	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
480	[BUG]  [BUGGY]  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  hasHitEOF  =  false;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	hasHitEOF  =  false;  }	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
481	[BUG]  [BUGGY]  return  headerBuf.length  :  hasHitEOF  +  headerBuf.length  +  1;  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length  :  hasHitEOF  +  headerBuf.length  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  :  hasHitEOF  +  headerBuf.length  +  1;	  return    hasHitEOF?    headerBuf.length    :    headerBuf.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
482	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf,  headerBuf):  null;  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf,  headerBuf):  null;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf,  headerBuf):  null;	  return    hasHitEOF?    headerBuf    :    buffer.readEOFRecord(headerBuf):    null;    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
483	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf),  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf),  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf),  hasHitEOF;	  return    hasHitEOF?    headerBuf    :    buffer.readEOFRecord(headerBuf):    null;    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
484	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf):  this;  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf):  this;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf):  this;	  return    hasHitEOF?    headerBuf    :    buffer.readEOFRecord(headerBuf):    null;    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
485	[BUG]  [BUGGY]  return  hasHitEOF  &  headerBuf  :  buffer.isEOFRecord(headerBuf);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF  &  headerBuf  :  buffer.isEOFRecord(headerBuf);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF  &  headerBuf  :  buffer.isEOFRecord(headerBuf);	  return    hasHitEOF    &    headerBuf    :    null;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
486	[BUG]  [BUGGY]  return  hasHitEOF  &  headerBuf  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF  &  headerBuf  :  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF  &  headerBuf  :  headerBuf.length;	  return    hasHitEOF    &    headerBuf    :    null;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
487	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  headerBuf,  skipBuf  +  1;  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  headerBuf,  skipBuf  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  headerBuf,  skipBuf  +  1;	  return    hasHitEOF?    headerBuf    :    headerBuf    +    1;    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
488	[BUG]  [BUGGY]  HashCodeTraversal.traverse(buffer,  headerBuf,  new  Reporter());  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  HashCodeTraversal.traverse(buffer,  headerBuf,  new  Reporter());  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	HashCodeTraversal.traverse(buffer,  headerBuf,  new  Reporter());	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
489	[BUG]  [BUGGY]  HashCodeTraversal.traverse(buffer,  headerBuf,  this);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  HashCodeTraversal.traverse(buffer,  headerBuf,  this);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	HashCodeTraversal.traverse(buffer,  headerBuf,  this);	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
490	[BUG]  [BUGGY]  HashCodeTraversal.traverse(compiler,  headerBuf,  buffer);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  HashCodeTraversal.traverse(compiler,  headerBuf,  buffer);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	HashCodeTraversal.traverse(compiler,  headerBuf,  buffer);	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
491	[BUG]  [BUGGY]  HashCodeTraversal.traverse(buffer,  headerBuf,  buffer);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  HashCodeTraversal.traverse(buffer,  headerBuf,  buffer);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	HashCodeTraversal.traverse(buffer,  headerBuf,  buffer);	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
492	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf.toString()  :  headerBuf;  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf.toString()  :  headerBuf;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf.toString()  :  headerBuf;	  return    hasHitEOF?    headerToSkip    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
493	[BUG]  [BUGGY]  return  headerBuf!=  null?  null  :  headerBuf.toByteArray()  +  1;  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf!=  null?  null  :  headerBuf.toByteArray()  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf!=  null?  null  :  headerBuf.toByteArray()  +  1;	  return    headerBuf!=    null?    null    :    headerBuf.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
494	[BUG]  [BUGGY]  return  headerBuf!=  null?  null  :  headerBuf.toString();  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf!=  null?  null  :  headerBuf.toString();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf!=  null?  null  :  headerBuf.toString();	  return    headerBuf!=    null?    null    :    headerBuf.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
495	[BUG]  [BUGGY]  return  headerBuf.length  -  hasHitEOF?  headerBuf.length  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length  -  hasHitEOF?  headerBuf.length  :  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length  -  hasHitEOF?  headerBuf.length  :  headerBuf.length;	  return    headerBuf.length    -    hasHitEOF?    buffer.length    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
496	[BUG]  [BUGGY]  while(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  while(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	while(buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  false;	  while(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
497	[BUG]  [BUGGY]  while(buffer.isEOFRecord(headerBuf)&&  hasHitEOF)  {  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  while(buffer.isEOFRecord(headerBuf)&&  hasHitEOF)  {  hasHitEOF  =  true;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	while(buffer.isEOFRecord(headerBuf)&&  hasHitEOF)  {  hasHitEOF  =  true;	  while(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
498	[BUG]  [BUGGY]  while(buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  while(buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	while(buffer.isEOFRecord(headerBuf)||  buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }	  while(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
499	[BUG]  [BUGGY]  return  headerBuf?  null  :  headerBuf,  buffer.isEOFRecord(headerBuf);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  null  :  headerBuf,  buffer.isEOFRecord(headerBuf);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  null  :  headerBuf,  buffer.isEOFRecord(headerBuf);	  return    headerBuf?    null    :    headerBuf,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
500	[BUG]  [BUGGY]  return  headerBuf?  null  :  headerBuf,  headerBuf,  hasHitEOF;  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  null  :  headerBuf,  headerBuf,  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  null  :  headerBuf,  headerBuf,  hasHitEOF;	  return    headerBuf?    null    :    headerBuf,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
501	[BUG]  [BUGGY]  return  headerBuf?  null  :  headerBuf,  buffer.isEOFRecord(headerBuf));  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  null  :  headerBuf,  buffer.isEOFRecord(headerBuf));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  null  :  headerBuf,  buffer.isEOFRecord(headerBuf));	  return    headerBuf?    null    :    headerBuf,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
502	[BUG]  [BUGGY]  return  headerBuf?  null  :  headerBuf,  skipBuf,  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf?  null  :  headerBuf,  skipBuf,  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf?  null  :  headerBuf,  skipBuf,  hasHitEOF;	  return    headerBuf?    null    :    headerBuf,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
503	[BUG]  [BUGGY]  return  headerBuf,  hasHitEOF?  buffer.length  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf,  hasHitEOF?  buffer.length  :  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf,  hasHitEOF?  buffer.length  :  headerBuf.length;	  return    headerBuf,    hasHitEOF?    null    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
504	[BUG]  [BUGGY]  HashTraversal.traverse(buffer,  headerBuf,  buffer.readRecord());  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  HashTraversal.traverse(buffer,  headerBuf,  buffer.readRecord());  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	HashTraversal.traverse(buffer,  headerBuf,  buffer.readRecord());	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    else    {    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
505	[BUG]  [BUGGY]  HashTraversal.traverse(compiler,  headerBuf,  buffer);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  HashTraversal.traverse(compiler,  headerBuf,  buffer);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	HashTraversal.traverse(compiler,  headerBuf,  buffer);	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    else    {    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
506	[BUG]  [BUGGY]  HashTraversal.traverse(buffer,  headerBuf,  buffer.readRecord(),  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  HashTraversal.traverse(buffer,  headerBuf,  buffer.readRecord(),  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	HashTraversal.traverse(buffer,  headerBuf,  buffer.readRecord(),  hasHitEOF);	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    else    {    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
507	[BUG]  [BUGGY]  HashTraversal.traverse(BufferUtil.readBuffer(buffer),  headerBuf,  buffer.readRecord());  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  HashTraversal.traverse(BufferUtil.readBuffer(buffer),  headerBuf,  buffer.readRecord());  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	HashTraversal.traverse(BufferUtil.readBuffer(buffer),  headerBuf,  buffer.readRecord());	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    else    {    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
508	[BUG]  [BUGGY]  HashTraversal.traverse(buffer,  headerBuf,  new  Reporter());  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  HashTraversal.traverse(buffer,  headerBuf,  new  Reporter());  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	HashTraversal.traverse(buffer,  headerBuf,  new  Reporter());	  if(buffer.isEOFRecord(headerBuf))    {    hasHitEOF    =    true;    }    else    {    buffer.readRecord();    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
509	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf.length  :  headerBuf[0];  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf.length  :  headerBuf[0];  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf.length  :  headerBuf[0];	  return    hasHitEOF?    headerBuf.length    :    null;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
510	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf.length  :  new  byte[0];  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf.length  :  new  byte[0];  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf.length  :  new  byte[0];	  return    hasHitEOF?    headerBuf.length    :    null;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
511	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf,  headerSize);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf,  headerSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf,  headerSize);	  return    hasHitEOF?    headerBuf    :    buffer.readEOFRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
512	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf,  headerEnd);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf,  headerEnd);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  buffer.readEOFRecord(headerBuf,  headerEnd);	  return    hasHitEOF?    headerBuf    :    buffer.readEOFRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
513	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  headerBuf.toByteArray();  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  headerBuf.toByteArray();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  headerBuf.toByteArray();	  return    hasHitEOF?    headerBuf    :    headerBuf;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
514	[BUG]  [BUGGY]  System.arraycopy(bodyBuf,  0,  buf,  0,  headerBuf.length);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  System.arraycopy(bodyBuf,  0,  buf,  0,  headerBuf.length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	System.arraycopy(bodyBuf,  0,  buf,  0,  headerBuf.length);	  System.arraycopy(buffer,    0,    headerBuf,    0,    headerBuf.length);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
515	[BUG]  [BUGGY]  return  headerBuf  ==  null  ||  headerBuf.length  ==  0?  null  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf  ==  null  ||  headerBuf.length  ==  0?  null  :  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf  ==  null  ||  headerBuf.length  ==  0?  null  :  headerBuf.length;	  return    headerBuf    ==    null?    null    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
516	[BUG]  [BUGGY]  return  headerBuf.toByteArray()?  buffer.toByteArray()  :  headerBuf.toByteArray();  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.toByteArray()?  buffer.toByteArray()  :  headerBuf.toByteArray();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.toByteArray()?  buffer.toByteArray()  :  headerBuf.toByteArray();	  return    headerBuf.toByteArray()?    null    :    headerBuf.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
517	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf.length,  headerBuf.length  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf.length,  headerBuf.length  :  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf.length,  headerBuf.length  :  headerBuf.length;	  return    hasHitEOF?    headerBuf,    headerBuf.length    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
518	[BUG]  [BUGGY]  return  headerBuf.hasHitEOF?  headerBuf  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.hasHitEOF?  headerBuf  :  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.hasHitEOF?  headerBuf  :  headerBuf.length;	  return    hasHitEOF?    headerBuf    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
519	[BUG]  [BUGGY]  return  headerBuf.length?  headerBuf.length  :  headerBuf.length  -  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.length?  headerBuf.length  :  headerBuf.length  -  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.length?  headerBuf.length  :  headerBuf.length  -  hasHitEOF;	  return    headerBuf.length?    headerBuf.length    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
520	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.isEOFRecord(headerBuf,  headerSize);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.isEOFRecord(headerBuf,  headerSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  buffer.isEOFRecord(headerBuf,  headerSize);	  return    hasHitEOF?    headerBuf    :    buffer.isEOFRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
521	[BUG]  [BUGGY]  return  headerBuf.hasHitEOF?  header  :  headerBuf;  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.hasHitEOF?  header  :  headerBuf;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.hasHitEOF?  header  :  headerBuf;	  return    headerBuf.hasHitEOF?    header    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
522	[BUG]  [BUGGY]  return  headerBuf.hasHitEOF?  header  :  headerBuf.hashCode();  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.hasHitEOF?  header  :  headerBuf.hashCode();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.hasHitEOF?  header  :  headerBuf.hashCode();	  return    headerBuf.hasHitEOF?    header    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
523	[BUG]  [BUGGY]  return  headerBuf.hasHitEOF?  this  :  headerBuf.toByteArray();  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.hasHitEOF?  this  :  headerBuf.toByteArray();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.hasHitEOF?  this  :  headerBuf.toByteArray();	  return    headerBuf.hasHitEOF?    null    :    headerBuf.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
524	[BUG]  [BUGGY]  return  headerBuf.hasHitEOF?  1  :  headerBuf.toByteArray();  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf.hasHitEOF?  1  :  headerBuf.toByteArray();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf.hasHitEOF?  1  :  headerBuf.toByteArray();	  return    headerBuf.hasHitEOF?    null    :    headerBuf.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
525	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.isEOFRecord(headerBuf),  hasHitEOF;  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.isEOFRecord(headerBuf),  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  buffer.isEOFRecord(headerBuf),  hasHitEOF;	  return    hasHitEOF?    headerBuf    :    buffer.isEOFRecord(headerBuf):    null;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
526	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.isEOFRecord(headerBuf,  headerBuf):  null;  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.isEOFRecord(headerBuf,  headerBuf):  null;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  buffer.isEOFRecord(headerBuf,  headerBuf):  null;	  return    hasHitEOF?    headerBuf    :    buffer.isEOFRecord(headerBuf):    null;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
527	[BUG]  [BUGGY]  return  buffer.readRecord()?  null  :  buffer.readEOFRecord(headerBuf);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  buffer.readRecord()?  null  :  buffer.readEOFRecord(headerBuf);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  buffer.readRecord()?  null  :  buffer.readEOFRecord(headerBuf);	  return    buffer.readRecord();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
528	[BUG]  [BUGGY]  return  headerBuf,  null  &&  headerBuf.length()  >  0;  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf,  null  &&  headerBuf.length()  >  0;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf,  null  &&  headerBuf.length()  >  0;	  return    headerBuf,    null    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
529	[BUG]  [BUGGY]  return  headerBuf,  null?  hasHitEOF  :  headerBuf.length;  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  headerBuf,  null?  hasHitEOF  :  headerBuf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  headerBuf,  null?  hasHitEOF  :  headerBuf.length;	  return    headerBuf,    null    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
530	[BUG]  [BUGGY]  return  hasHitEOF?  header  :  headerBuf.length  -  1;  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  header  :  headerBuf.length  -  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  header  :  headerBuf.length  -  1;	  return    hasHitEOF?    header    :    headerBuf.length;    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
531	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf.length  :  headerBuf.toByteArray()  +  1;  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf.length  :  headerBuf.toByteArray()  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf.length  :  headerBuf.toByteArray()  +  1;	  return    hasHitEOF?    headerBuf.length    :    headerBuf.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
532	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readRecord(headerBuf,  headerSize);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readRecord(headerBuf,  headerSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  buffer.readRecord(headerBuf,  headerSize);	  return    hasHitEOF?    headerBuf    :    buffer.readRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
533	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readRecord(headerBuf,  headerEnd);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readRecord(headerBuf,  headerEnd);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  buffer.readRecord(headerBuf,  headerEnd);	  return    hasHitEOF?    headerBuf    :    buffer.readRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
534	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readRecord(headerBuf,  headerLength);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.readRecord(headerBuf,  headerLength);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  buffer.readRecord(headerBuf,  headerLength);	  return    hasHitEOF?    headerBuf    :    buffer.readRecord(headerBuf);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
535	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf.length  :  headerBuf.length  /  2  +  1;  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf.length  :  headerBuf.length  /  2  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf.length  :  headerBuf.length  /  2  +  1;	  return    hasHitEOF?    headerBuf.length    :    headerBuf    +    1;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
536	[BUG]  [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.toByteArray()  &&  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  headerBuf  :  buffer.toByteArray()  &&  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  headerBuf  :  buffer.toByteArray()  &&  hasHitEOF;	  return    hasHitEOF?    headerBuf    :    buffer.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
537	[BUG]  [BUGGY]  return  hasHitEOF?  buffer.toByteArray()  :  headerBuf;  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  return  hasHitEOF?  buffer.toByteArray()  :  headerBuf;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	return  hasHitEOF?  buffer.toByteArray()  :  headerBuf;	  return    hasHitEOF?    headerBuf    :    buffer.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
538	[BUG]  [BUGGY]  while(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  while(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  false;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	while(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  false;  }	  if(buffer.isEOFRecord(headerBuf))    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
539	[BUG]  [BUGGY]  else  if(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  1;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  else  if(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  1;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  false;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	else  if(buffer.isEOFRecord(headerBuf))  {  for(int  i  =  1;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  false;  }	  if(buffer.isEOFRecord(headerBuf))    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
540	[BUG]  [BUGGY]  else  if(buffer.isEOFRecord(headerBuf))  {  int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      }  byte[]  headerBuf  =  buffer.readRecord();  if  (headerBuf  ==  null)  {  hasHitEOF  =  true;  }  else  if  (buffer.isEOFRecord(headerBuf))  {  hasHitEOF  =  true;  }      [BUGGY]  else  if(buffer.isEOFRecord(headerBuf))  {  int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  false;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  1  [METHOD]  getRecord  [RETURN_TYPE]  byte[]  [VARIABLES]  byte[]  buf  headerBuf  readBuf  skipBuf  boolean  hasHitEOF  TarBuffer  buffer  int  BUFFER_SIZE  SMALL_BUFFER_SIZE  blockSize  length  numRead  realSkip  recordSize  long  entryOffset  entrySize  numToSkip  skip  skipped  TarArchiveEntry  currEntry  	projects/Compress12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	265	265	1	replace	else  if(buffer.isEOFRecord(headerBuf))  {  int  i  =  0;  i  <  headerBuf.length;  ++i)  {  hasHitEOF  =  false;  }	  if(buffer.isEOFRecord(headerBuf))    {    for(int    i    =    0;    i    <    headerBuf.length;    ++i)    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
