bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  standardDeviation;  [CE]  <identifier>  expected  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  standardDeviation;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  standardDeviation;	  solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY?    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    :    standardDeviation;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
2	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  mean;  [CE]  <identifier>  expected  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  mean;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  mean;	  solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY?    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    :    standardDeviation;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
3	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  DEFAULT_INVERSION_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  DEFAULT_INVERSION_ABSOLUTE_ACCURACY;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  DEFAULT_INVERSION_ABSOLUTE_ACCURACY;	  solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY?    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    :    standardDeviation;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
4	[BUG]  [BUGGY]  Double  solverAbsoluteAccuracy  =  inverseCumAccuracy.doubleValue();  [CE]  <identifier>  expected  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  Double  solverAbsoluteAccuracy  =  inverseCumAccuracy.doubleValue();  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	Double  solverAbsoluteAccuracy  =  inverseCumAccuracy.doubleValue();	  double    solverAbsoluteAccuracy    =    inverseCumAccuracy.doubleValue()    +    2;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
5	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy.doubleValue();  [CE]  <identifier>  expected  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy.doubleValue();  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  inverseCumAccuracy.doubleValue();	  double    solverAbsoluteAccuracy    =    inverseCumAccuracy.doubleValue()    +    2;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
6	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  inverseCumAccuracy;  [CE]  <identifier>  expected  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  double  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  inverseCumAccuracy;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	double  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  inverseCumAccuracy;	  double    solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
7	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [CE]  <identifier>  expected  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  double  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	double  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;	  double    solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
8	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY?    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    :    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
9	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY?    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    :    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
10	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY?    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    :    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
11	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  this.standardDeviation.doubleValue();  [CE]  <identifier>  expected  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  double  solverAbsoluteAccuracy  =  this.standardDeviation.doubleValue();  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	double  solverAbsoluteAccuracy  =  this.standardDeviation.doubleValue();	  double    solverAbsoluteAccuracy    =    standardDeviation.doubleValue();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
12	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  inverseCumAccuracy;  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  inverseCumAccuracy;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  inverseCumAccuracy;	  this.standardDeviation    =    inverseCumAccuracy    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
13	[BUG]  [BUGGY]  this.standardDeviation  =  inverseCumAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  this.standardDeviation  =  inverseCumAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	this.standardDeviation  =  inverseCumAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    inverseCumAccuracy    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
14	[BUG]  [BUGGY]  this.standardDeviation  =  sd  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  this.standardDeviation  =  sd  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	this.standardDeviation  =  sd  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    inverseCumAccuracy    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
15	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSION_ABSOLUTE_ACCURACY  |  Double.POSITIVE_INVERSION_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSION_ABSOLUTE_ACCURACY  |  Double.POSITIVE_INVERSION_ABSOLUTE_ACCURACY;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSION_ABSOLUTE_ACCURACY  |  Double.POSITIVE_INVERSION_ABSOLUTE_ACCURACY;	  solverAbsoluteAccuracy    =    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY    |    Double.POSITIVE_INVERSION_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
16	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSION_ABSOLUTE_ACCURACY  &  Double.POSITIVE_INVERSION_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSION_ABSOLUTE_ACCURACY  &  Double.POSITIVE_INVERSION_ABSOLUTE_ACCURACY;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSION_ABSOLUTE_ACCURACY  &  Double.POSITIVE_INVERSION_ABSOLUTE_ACCURACY;	  solverAbsoluteAccuracy    =    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY    |    Double.POSITIVE_INVERSION_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
17	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSION_ABSOLUTE_ACCURACY  /  Double.POSITIVE_INVERSION_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSION_ABSOLUTE_ACCURACY  /  Double.POSITIVE_INVERSION_ABSOLUTE_ACCURACY;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSION_ABSOLUTE_ACCURACY  /  Double.POSITIVE_INVERSION_ABSOLUTE_ACCURACY;	  solverAbsoluteAccuracy    =    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY    |    Double.POSITIVE_INVERSION_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
18	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSION_ABSOLUTE_ACCURACY  -  Double.POSITIVE_INVERSION_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSION_ABSOLUTE_ACCURACY  -  Double.POSITIVE_INVERSION_ABSOLUTE_ACCURACY;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSION_ABSOLUTE_ACCURACY  -  Double.POSITIVE_INVERSION_ABSOLUTE_ACCURACY;	  solverAbsoluteAccuracy    =    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY    |    Double.POSITIVE_INVERSION_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
19	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  standardDeviation  =  solverAbsoluteAccuracy;  [CE]  <identifier>  expected  [FE]                          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  double  solverAbsoluteAccuracy  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  standardDeviation  =  solverAbsoluteAccuracy;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	double  solverAbsoluteAccuracy  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  standardDeviation  =  solverAbsoluteAccuracy;	  if(inverseCumAccuracy    >    SQRT2PI)    {    double    solverAbsoluteAccuracy    =    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    standardDeviation    =    solverAbsoluteAccuracy;    System.arraycopy(sd,    0,    standardDevi    	non-compiled	[CE]  <identifier>  expected	42	None	replace
20	[BUG]  [BUGGY]  Double  solverAbsoluteAccuracy  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  standardDeviation  =  solverAbsoluteAccuracy;  [CE]  <identifier>  expected  [FE]                            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  Double  solverAbsoluteAccuracy  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  standardDeviation  =  solverAbsoluteAccuracy;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	Double  solverAbsoluteAccuracy  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  standardDeviation  =  solverAbsoluteAccuracy;	  if(inverseCumAccuracy    >    SQRT2PI)    {    double    solverAbsoluteAccuracy    =    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    standardDeviation    =    solverAbsoluteAccuracy;    System.arraycopy(sd,    0,    standardDevi    	non-compiled	[CE]  <identifier>  expected	42	None	replace
21	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]                              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  double  solverAbsoluteAccuracy  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	double  solverAbsoluteAccuracy  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  if(inverseCumAccuracy    >    SQRT2PI)    {    double    solverAbsoluteAccuracy    =    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    standardDeviation    =    solverAbsoluteAccuracy;    System.arraycopy(sd,    0,    standardDevi    	non-compiled	[CE]  <identifier>  expected	42	None	replace
22	[BUG]  [BUGGY]  this.standardDeviation  =  sd  +  1;  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  this.standardDeviation  =  sd  +  1;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	this.standardDeviation  =  sd  +  1;	  this.standardDeviation    =    sd;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
23	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
24	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;	  this.standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
25	[BUG]  [BUGGY]  this.solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  +  sd;  [CE]  illegal  start  of  type  [FE]                        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  this.solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  +  sd;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	this.solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  +  sd;	  this.solverAbsoluteAccuracy    =    solverAbsoluteAccuracy    +    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
26	[BUG]  [BUGGY]  this.solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  this.solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	this.solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.solverAbsoluteAccuracy    =    solverAbsoluteAccuracy    +    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
27	[BUG]  [BUGGY]  this.solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  *  inverseCumAccuracy;  [CE]  illegal  start  of  type  [FE]                            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  this.solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  *  inverseCumAccuracy;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	this.solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  *  inverseCumAccuracy;	  this.solverAbsoluteAccuracy    =    solverAbsoluteAccuracy    +    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
28	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  &  inverseCumAccuracy;  [CE]  <identifier>  expected  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  &  inverseCumAccuracy;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  &  inverseCumAccuracy;	  solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    |    inverseCumAccuracy;    	non-compiled	[CE]  <identifier>  expected	22	None	replace
29	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  sd;  [CE]  <identifier>  expected  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  sd;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  sd;	  solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    |    inverseCumAccuracy;    	non-compiled	[CE]  <identifier>  expected	22	None	replace
30	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  inverseCumAccuracy;  [CE]  <identifier>  expected  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  inverseCumAccuracy;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  inverseCumAccuracy;	  solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    |    inverseCumAccuracy;    	non-compiled	[CE]  <identifier>  expected	22	None	replace
31	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  MAXIMUM_INVERSE_ABSOLUTE_ACCURACY  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  MAXIMUM_INVERSE_ABSOLUTE_ACCURACY  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  MAXIMUM_INVERSE_ABSOLUTE_ACCURACY  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  solverAbsoluteAccuracy    =    MAXIMUM_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
32	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  MAXIMUM_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  MAXIMUM_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  MAXIMUM_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  solverAbsoluteAccuracy    =    MAXIMUM_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
33	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    mean;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
34	[BUG]  [BUGGY]  double  inverseCumAccuracy  =  sd;  [CE]  <identifier>  expected  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  double  inverseCumAccuracy  =  sd;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	double  inverseCumAccuracy  =  sd;	  inverseCumAccuracy    =    sd;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
35	[BUG]  [BUGGY]  this.solverAbsoluteAccuracy  =  sd;  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  this.solverAbsoluteAccuracy  =  sd;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	this.solverAbsoluteAccuracy  =  sd;	  this.solverAbsoluteAccuracy    =    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
36	[BUG]  [BUGGY]  this.solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  this.solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	this.solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.solverAbsoluteAccuracy    =    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
37	[BUG]  [BUGGY]  inverseCumAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  [CE]  <identifier>  expected  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  inverseCumAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	inverseCumAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;	  inverseCumAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
38	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  standardDeviation;  [CE]  <identifier>  expected  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  double  solverAbsoluteAccuracy  =  standardDeviation;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	double  solverAbsoluteAccuracy  =  standardDeviation;	  double    solverAbsoluteAccuracy    =    sd;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
39	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
40	[BUG]  [BUGGY]  inverseCumAccuracy  =  inverseCumAccuracy  +  2;  [CE]  <identifier>  expected  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  inverseCumAccuracy  =  inverseCumAccuracy  +  2;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	inverseCumAccuracy  =  inverseCumAccuracy  +  2;	  inverseCumAccuracy    =    inverseCumAccuracy    +    1;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
41	[BUG]  [BUGGY]  inverseCumAccuracy  =  inverseCumAccuracy  +  3;  [CE]  <identifier>  expected  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  inverseCumAccuracy  =  inverseCumAccuracy  +  3;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	inverseCumAccuracy  =  inverseCumAccuracy  +  3;	  inverseCumAccuracy    =    inverseCumAccuracy    +    1;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
42	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  sd.doubleValue()  +  1;  [CE]  <identifier>  expected  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  double  solverAbsoluteAccuracy  =  sd.doubleValue()  +  1;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	double  solverAbsoluteAccuracy  =  sd.doubleValue()  +  1;	  double    solverAbsoluteAccuracy    =    sd.doubleValue();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
43	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  sd  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  sd  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  sd  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    sd;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
44	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  this.standardDeviation;  [CE]  <identifier>  expected  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  this.standardDeviation;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  this.standardDeviation;	  solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    standardDeviation;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
45	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  inverseCumAccuracy;  [CE]  <identifier>  expected  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  inverseCumAccuracy;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  inverseCumAccuracy;	  solverAbsoluteAccuracy    =    inverseCumAccuracy    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    mean;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
46	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  standardDeviation;  [CE]  <identifier>  expected  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  standardDeviation;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  standardDeviation;	  solverAbsoluteAccuracy    =    inverseCumAccuracy    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    mean;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
47	[BUG]  [BUGGY]  this.standardDeviation  =  new  StandardDistributionImpl(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  this.standardDeviation  =  new  StandardDistributionImpl(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy);  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	this.standardDeviation  =  new  StandardDistributionImpl(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy);	  this.standardDeviation    =    new    StandardDistributionImpl(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
48	[BUG]  [BUGGY]  this.standardDeviation  =  new  StandardDistributionImpl(sd,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  this.standardDeviation  =  new  StandardDistributionImpl(sd,  solverAbsoluteAccuracy);  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	this.standardDeviation  =  new  StandardDistributionImpl(sd,  solverAbsoluteAccuracy);	  this.standardDeviation    =    new    StandardDistributionImpl(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
49	[BUG]  [BUGGY]  this.standardDeviation  =  new  StandardDistributionImpl(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  this.standardDeviation  =  new  StandardDistributionImpl(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	this.standardDeviation  =  new  StandardDistributionImpl(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  this.standardDeviation    =    new    StandardDistributionImpl(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
50	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  standardDeviation.doubleValue();  [CE]  <identifier>  expected  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  standardDeviation.doubleValue();  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  standardDeviation.doubleValue();	  solverAbsoluteAccuracy    =    sd.doubleValue();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
51	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  sd.doubleValue()  +  1;  [CE]  <identifier>  expected  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  sd.doubleValue()  +  1;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  sd.doubleValue()  +  1;	  solverAbsoluteAccuracy    =    sd.doubleValue();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
52	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy  +  2;  [CE]  <identifier>  expected  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy  +  2;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  inverseCumAccuracy  +  2;	  solverAbsoluteAccuracy    =    inverseCumAccuracy    +    1;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
53	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  sd  +  1;  [CE]  <identifier>  expected  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  sd  +  1;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  sd  +  1;	  solverAbsoluteAccuracy    =    inverseCumAccuracy    +    1;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
54	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy  +  3;  [CE]  <identifier>  expected  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy  +  3;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  inverseCumAccuracy  +  3;	  solverAbsoluteAccuracy    =    inverseCumAccuracy    +    1;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
55	[BUG]  [BUGGY]  inverseCumAccuracy  >  SQRT2PI)  {  double  solverAbsoluteAccuracy  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  standardDeviation  =  solverAbsoluteAccuracy;  [CE]  <identifier>  expected  [FE]                        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  inverseCumAccuracy  >  SQRT2PI)  {  double  solverAbsoluteAccuracy  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  standardDeviation  =  solverAbsoluteAccuracy;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	inverseCumAccuracy  >  SQRT2PI)  {  double  solverAbsoluteAccuracy  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  standardDeviation  =  solverAbsoluteAccuracy;	  if(inverseCumAccuracy    >    SQRT2PI)    {    double    solverAbsoluteAccuracy    =    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    standardDeviation    =    solverAbsoluteAccuracy;    System.arraycopy(sd,    0,    standardDeviation,    	non-compiled	[CE]  <identifier>  expected	41	None	replace
56	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  standardDeviation  =  solverAbsoluteAccuracy;  System.arraycopy(sd,  0,  standardDeviation,  [CE]  <identifier>  expected  [FE]                          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  double  solverAbsoluteAccuracy  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  standardDeviation  =  solverAbsoluteAccuracy;  System.arraycopy(sd,  0,  standardDeviation,  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	double  solverAbsoluteAccuracy  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  standardDeviation  =  solverAbsoluteAccuracy;  System.arraycopy(sd,  0,  standardDeviation,	  if(inverseCumAccuracy    >    SQRT2PI)    {    double    solverAbsoluteAccuracy    =    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    standardDeviation    =    solverAbsoluteAccuracy;    System.arraycopy(sd,    0,    standardDeviation,    	non-compiled	[CE]  <identifier>  expected	41	None	replace
57	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  &  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURITY;  [CE]  <identifier>  expected  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  &  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURITY;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  &  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURITY;	  solverAbsoluteAccuracy    =    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY    |    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURITY;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
58	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  /  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURITY;  [CE]  <identifier>  expected  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  /  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURITY;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  /  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURITY;	  solverAbsoluteAccuracy    =    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY    |    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURITY;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
59	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  -  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURITY;  [CE]  <identifier>  expected  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  -  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURITY;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  -  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURITY;	  solverAbsoluteAccuracy    =    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY    |    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURITY;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
60	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    DEFAULT_INVERSION_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
61	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  +  1;  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  +  1;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  +  1;	  this.standardDeviation    =    DEFAULT_INVERSION_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
62	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  *  inverseCumAccuracy;  [CE]  <identifier>  expected  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  *  inverseCumAccuracy;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  *  inverseCumAccuracy;	  solverAbsoluteAccuracy    =    inverseCumAccuracy    *    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
63	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  [CE]  <identifier>  expected  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  inverseCumAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;	  solverAbsoluteAccuracy    =    inverseCumAccuracy    *    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
64	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  solverAbsoluteAccuracy    =    inverseCumAccuracy    *    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
65	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  standardDeviation  =  solverAbsoluteAccuracy;  [CE]  <identifier>  expected  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  standardDeviation  =  solverAbsoluteAccuracy;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  standardDeviation  =  solverAbsoluteAccuracy;	  if(inverseCumAccuracy    >    SQRT2PI)    {    double    solverAbsoluteAccuracy    =    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    standardDeviation    =    solverAbsoluteAccuracy;    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
66	[BUG]  [BUGGY]  inverseCumAccuracy  =  inverseCumAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  inverseCumAccuracy  =  inverseCumAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	inverseCumAccuracy  =  inverseCumAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  inverseCumAccuracy    =    inverseCumAccuracy    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
67	[BUG]  [BUGGY]  inverseCumAccuracy  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  [CE]  <identifier>  expected  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  inverseCumAccuracy  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	inverseCumAccuracy  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;	  inverseCumAccuracy    =    inverseCumAccuracy    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
68	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  solverAbsoluteAccuracy    =    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
69	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [CE]  <identifier>  expected  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;	  solverAbsoluteAccuracy    =    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
70	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  solverAbsoluteAccuracy    =    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
71	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  inverseCumAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  double  solverAbsoluteAccuracy  =  inverseCumAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	double  solverAbsoluteAccuracy  =  inverseCumAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  double    solverAbsoluteAccuracy    =    inverseCumAccuracy    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
72	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  sd  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  double  solverAbsoluteAccuracy  =  sd  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	double  solverAbsoluteAccuracy  =  sd  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  double    solverAbsoluteAccuracy    =    inverseCumAccuracy    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
73	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  &  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  &  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  &  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY;	  solverAbsoluteAccuracy    =    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY    |    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	16	None	replace
74	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  /  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  /  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  /  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY;	  solverAbsoluteAccuracy    =    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY    |    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	16	None	replace
75	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  -  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  -  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  -  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY;	  solverAbsoluteAccuracy    =    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY    |    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	16	None	replace
76	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  &  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY);  [CE]  <identifier>  expected  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  &  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  &  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY);	  solverAbsoluteAccuracy    =    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY    |    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
77	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  /  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY);  [CE]  <identifier>  expected  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  /  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  /  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY);	  solverAbsoluteAccuracy    =    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY    |    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
78	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  -  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY);  [CE]  <identifier>  expected  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  -  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  -  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY);	  solverAbsoluteAccuracy    =    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY    |    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
79	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  new  Double(sd);  [CE]  <identifier>  expected  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  new  Double(sd);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  new  Double(sd);	  solverAbsoluteAccuracy    =    new    Double(inverseCumAccuracy);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
80	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  new  Double(sd,  inverseCumAccuracy);  [CE]  <identifier>  expected  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  new  Double(sd,  inverseCumAccuracy);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  new  Double(sd,  inverseCumAccuracy);	  solverAbsoluteAccuracy    =    new    Double(inverseCumAccuracy);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
81	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  new  Double(mean);  [CE]  <identifier>  expected  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  new  Double(mean);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  new  Double(mean);	  solverAbsoluteAccuracy    =    new    Double(inverseCumAccuracy);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
82	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  new  Double(message);  [CE]  <identifier>  expected  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  new  Double(message);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  new  Double(message);	  solverAbsoluteAccuracy    =    new    Double(inverseCumAccuracy);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
83	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  inverseCumAccuracy  +  2;  [CE]  <identifier>  expected  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  double  solverAbsoluteAccuracy  =  inverseCumAccuracy  +  2;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	double  solverAbsoluteAccuracy  =  inverseCumAccuracy  +  2;	  double    solverAbsoluteAccuracy    =    inverseCumAccuracy    +    1;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
84	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  sd  +  1;  [CE]  <identifier>  expected  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  double  solverAbsoluteAccuracy  =  sd  +  1;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	double  solverAbsoluteAccuracy  =  sd  +  1;	  double    solverAbsoluteAccuracy    =    inverseCumAccuracy    +    1;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
85	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  inverseCumAccuracy  +  3;  [CE]  <identifier>  expected  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  double  solverAbsoluteAccuracy  =  inverseCumAccuracy  +  3;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	double  solverAbsoluteAccuracy  =  inverseCumAccuracy  +  3;	  double    solverAbsoluteAccuracy    =    inverseCumAccuracy    +    1;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
86	[BUG]  [BUGGY]  if(inverseCumAccuracy  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  double  solverAbsoluteAccuracy  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  standardDeviation  =  solverAb  [CE]  illegal  start  of  type  [FE]                          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  if(inverseCumAccuracy  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  double  solverAbsoluteAccuracy  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  standardDeviation  =  solverAb  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	if(inverseCumAccuracy  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  double  solverAbsoluteAccuracy  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  standardDeviation  =  solverAb	  if(inverseCumAccuracy    >    SQRT2PI)    {    double    solverAbsoluteAccuracy    =    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    standardDeviation    =    solverAbsoluteAccuracy;    System.arraycopy(sd,    0,    standardDevi    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
87	[BUG]  [BUGGY]  if(inverseCumAccuracy  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  double  solverAbsoluteAccuracy  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  standardDeviation  =  solve  [CE]  illegal  start  of  type  [FE]                            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  if(inverseCumAccuracy  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  double  solverAbsoluteAccuracy  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  standardDeviation  =  solve  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	if(inverseCumAccuracy  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  double  solverAbsoluteAccuracy  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  standardDeviation  =  solve	  if(inverseCumAccuracy    >    SQRT2PI)    {    double    solverAbsoluteAccuracy    =    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    standardDeviation    =    solverAbsoluteAccuracy;    System.arraycopy(sd,    0,    standardDevi    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
88	[BUG]  [BUGGY]  double  solvingrAbsoluteAccuracy  =  inverseCumAccuracy.doubleValue();  [CE]  <identifier>  expected  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  double  solvingrAbsoluteAccuracy  =  inverseCumAccuracy.doubleValue();  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	double  solvingrAbsoluteAccuracy  =  inverseCumAccuracy.doubleValue();	  double    solverAbsoluteAccuracy    =    inverseCumAccuracy.doubleValue()    +    2;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
89	[BUG]  [BUGGY]  inverseCumAccuracy  =  inverseCumAccuracy  *  1;  [CE]  <identifier>  expected  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  inverseCumAccuracy  =  inverseCumAccuracy  *  1;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	inverseCumAccuracy  =  inverseCumAccuracy  *  1;	  inverseCumAccuracy    =    inverseCumAccuracy    +    1;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
90	[BUG]  [BUGGY]  this.solverAbsoluteAccuracy  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  this.solverAbsoluteAccuracy  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	this.solverAbsoluteAccuracy  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.solverAbsoluteAccuracy    =    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
91	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy  +  sd;  [CE]  <identifier>  expected  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy  +  sd;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  inverseCumAccuracy  +  sd;	  solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    sd;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
92	[BUG]  [BUGGY]  inverseCumAccuracy  =  solverAbsoluteAccuracy;  [CE]  <identifier>  expected  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  inverseCumAccuracy  =  solverAbsoluteAccuracy;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	inverseCumAccuracy  =  solverAbsoluteAccuracy;	  inverseCumAccuracy    =    sd;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
93	[BUG]  [BUGGY]  this.solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  +  standardDeviation;  [CE]  illegal  start  of  type  [FE]                        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  this.solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  +  standardDeviation;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	this.solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  +  standardDeviation;	  this.solverAbsoluteAccuracy    =    solverAbsoluteAccuracy    +    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
94	[BUG]  [BUGGY]  this.solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  /  inverseCumAccuracy;  [CE]  illegal  start  of  type  [FE]                          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  this.solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  /  inverseCumAccuracy;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	this.solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  /  inverseCumAccuracy;	  this.solverAbsoluteAccuracy    =    solverAbsoluteAccuracy    +    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
95	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  DEFAULT_INVERSE_ABSOLUTE_ACCURAY  :  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  DEFAULT_INVERSE_ABSOLUTE_ACCURAY  :  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  DEFAULT_INVERSE_ABSOLUTE_ACCURAY  :  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY?    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    :    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
96	[BUG]  [BUGGY]  inverseCumAccuracy  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY.doubleValue();  [CE]  <identifier>  expected  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  inverseCumAccuracy  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY.doubleValue();  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	inverseCumAccuracy  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY.doubleValue();	  inverseCumAccuracy    =    inverseCumAccuracy    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
97	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [CE]  <identifier>  expected  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  inverseCumAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;	  solverAbsoluteAccuracy    =    inverseCumAccuracy    *    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
98	[BUG]  [BUGGY]  this.solverAbsoluteAccuracy  =  inverseCumAccuracy  +  solverAbsoluteAccuracy;  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  this.solverAbsoluteAccuracy  =  inverseCumAccuracy  +  solverAbsoluteAccuracy;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	this.solverAbsoluteAccuracy  =  inverseCumAccuracy  +  solverAbsoluteAccuracy;	  this.solverAbsoluteAccuracy    =    solverAbsoluteAccuracy;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
99	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy  +  1L;  [CE]  <identifier>  expected  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy  +  1L;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  inverseCumAccuracy  +  1L;	  solverAbsoluteAccuracy    =    inverseCumAccuracy    +    1;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
100	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  |  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  +  1;  [CE]  <identifier>  expected  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  |  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  |  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  +  1;	  solverAbsoluteAccuracy    =    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY    |    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	16	None	replace
101	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy  +  standardDeviation;  [CE]  <identifier>  expected  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy  +  standardDeviation;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  inverseCumAccuracy  +  standardDeviation;	  solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    standardDeviation;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
102	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  standardDeviation  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  standardDeviation  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  standardDeviation  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    standardDeviation;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
103	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  this.inverseCumAccuracy;  [CE]  <identifier>  expected  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  this.inverseCumAccuracy;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  this.inverseCumAccuracy;	  solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    standardDeviation;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
104	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  new  Double(standardDeviation);  [CE]  <identifier>  expected  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  new  Double(standardDeviation);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  new  Double(standardDeviation);	  solverAbsoluteAccuracy    =    new    Double(inverseCumAccuracy);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
105	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  new  Double(regexp);  [CE]  <identifier>  expected  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  new  Double(regexp);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  new  Double(regexp);	  solverAbsoluteAccuracy    =    new    Double(inverseCumAccuracy);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
106	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  new  Double(requireCumAccuracy);  [CE]  <identifier>  expected  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  new  Double(requireCumAccuracy);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  new  Double(requireCumAccuracy);	  solverAbsoluteAccuracy    =    new    Double(inverseCumAccuracy);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
107	[BUG]  [BUGGY]  if(inverseCumAccuracy  >  SQRT2PI)  {  double  solverAbsoluteAccuracy  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  standardDeviation  =  solverAbsoluteAccuracy;  System.arra  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  if(inverseCumAccuracy  >  SQRT2PI)  {  double  solverAbsoluteAccuracy  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  standardDeviation  =  solverAbsoluteAccuracy;  System.arra  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	if(inverseCumAccuracy  >  SQRT2PI)  {  double  solverAbsoluteAccuracy  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  standardDeviation  =  solverAbsoluteAccuracy;  System.arra	  if(inverseCumAccuracy    >    SQRT2PI)    {    double    solverAbsoluteAccuracy    =    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    standardDeviation    =    solverAbsoluteAccuracy;    System.arraycopy(sd,    0,    standardDeviation    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
108	[BUG]  [BUGGY]  this.standardDeviation  =  inverseCumAccuracy  +  1;  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  this.standardDeviation  =  inverseCumAccuracy  +  1;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	this.standardDeviation  =  inverseCumAccuracy  +  1;	  this.standardDeviation    =    inverseCumAccuracy    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
109	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy  +  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy  +  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  inverseCumAccuracy  +  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  solverAbsoluteAccuracy    =    inverseCumAccuracy    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    mean;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
110	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  [CE]  <identifier>  expected  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  double  solverAbsoluteAccuracy  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	double  solverAbsoluteAccuracy  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;	  double    solverAbsoluteAccuracy    =    inverseCumAccuracy    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
111	[BUG]  [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	this.standardDeviation  =  NormalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
112	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;	  this.standardDeviation    =    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
113	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  normalDeviation.doubleValue();  [CE]  <identifier>  expected  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  normalDeviation.doubleValue();  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  normalDeviation.doubleValue();	  solverAbsoluteAccuracy    =    sd.doubleValue();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
114	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  inverseCumAccuracy  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    |    inverseCumAccuracy;    	non-compiled	[CE]  <identifier>  expected	22	None	replace
115	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  -  inverseCumAccuracy;  [CE]  <identifier>  expected  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  -  inverseCumAccuracy;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  -  inverseCumAccuracy;	  solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    |    inverseCumAccuracy;    	non-compiled	[CE]  <identifier>  expected	22	None	replace
116	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  &  Double.POSITIVE_INVERSION_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  &  Double.POSITIVE_INVERSION_ABSOLUTE_ACCURACY;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  &  Double.POSITIVE_INVERSION_ABSOLUTE_ACCURACY;	  solverAbsoluteAccuracy    =    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY    |    Double.POSITIVE_INVERSION_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
117	[BUG]  [BUGGY]  System.arraycopy(sd,  0,  standardDeviation,  [CE]  <identifier>  expected  [FE]                        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  System.arraycopy(sd,  0,  standardDeviation,  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	System.arraycopy(sd,  0,  standardDeviation,	  if(inverseCumAccuracy    >    SQRT2PI)    {    double    solverAbsoluteAccuracy    =    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    standardDeviation    =    solverAbsoluteAccuracy;    System.arraycopy(sd,    0,    standardDeviation,    	non-compiled	[CE]  <identifier>  expected	41	None	replace
118	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  inverseCumAccuracy  *  1;  [CE]  <identifier>  expected  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  double  solverAbsoluteAccuracy  =  inverseCumAccuracy  *  1;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	double  solverAbsoluteAccuracy  =  inverseCumAccuracy  *  1;	  double    solverAbsoluteAccuracy    =    inverseCumAccuracy    +    1;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
119	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY.doubleValue();  [CE]  <identifier>  expected  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  double  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY.doubleValue();  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	double  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY.doubleValue();	  double    solverAbsoluteAccuracy    =    standardDeviation.doubleValue();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
120	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  standardDeviation  =  solverAbsoluteAccuracy;  }  [CE]  <identifier>  expected  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  double  solverAbsoluteAccuracy  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  standardDeviation  =  solverAbsoluteAccuracy;  }  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	double  solverAbsoluteAccuracy  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  standardDeviation  =  solverAbsoluteAccuracy;  }	  if(inverseCumAccuracy    >    SQRT2PI)    {    double    solverAbsoluteAccuracy    =    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    standardDeviation    =    solverAbsoluteAccuracy;    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
121	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  DEFAULT_NON_INVERSE_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  DEFAULT_NON_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  DEFAULT_NON_INVERSE_ABSOLUTE_ACCURACY;	  solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY?    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    :    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
122	[BUG]  [BUGGY]  solverAbsoluteAccuracy  :  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  :  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  :  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY?    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    :    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
123	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
124	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  new  Double(NormalizedFormat.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  <identifier>  expected  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  new  Double(NormalizedFormat.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  new  Double(NormalizedFormat.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  solverAbsoluteAccuracy    =    new    Double(inverseCumAccuracy);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
125	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  new  Double(NormalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  <identifier>  expected  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  new  Double(NormalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  new  Double(NormalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  solverAbsoluteAccuracy    =    new    Double(inverseCumAccuracy);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
126	[BUG]  [BUGGY]  double  inverseCumAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  double  inverseCumAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	double  inverseCumAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  inverseCumAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
127	[BUG]  [BUGGY]  this.standardDeviation  =  new  StandardDistributionImpl(sd,  inverseCumAccuracy,  standardDeviation);  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  this.standardDeviation  =  new  StandardDistributionImpl(sd,  inverseCumAccuracy,  standardDeviation);  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	this.standardDeviation  =  new  StandardDistributionImpl(sd,  inverseCumAccuracy,  standardDeviation);	  this.standardDeviation    =    new    StandardDistributionImpl(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
128	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy  *  1;  [CE]  <identifier>  expected  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy  *  1;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  inverseCumAccuracy  *  1;	  solverAbsoluteAccuracy    =    inverseCumAccuracy    +    1;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
129	[BUG]  [BUGGY]  this.standardDeviation  =  standardDeviation  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  this.standardDeviation  =  standardDeviation  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	this.standardDeviation  =  standardDeviation  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    inverseCumAccuracy    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
130	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  inverseCumAccuracy;  [CE]  <identifier>  expected  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  inverseCumAccuracy;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  inverseCumAccuracy;	  solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY?    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    :    standardDeviation;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
131	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy  +  mean;  [CE]  <identifier>  expected  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;      [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy  +  mean;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  inverseCumAccuracy  +  mean;	  solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    mean;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
