bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  this.standardDeviation  =  sd;  [CE]  illegal  start  of  type  [FE]        ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;    [BUGGY]  this.standardDeviation  =  sd;  [BUGGY]    solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	this.standardDeviation  =  sd;	      this.standardDeviation    =    standardDeviation;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
2	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;    [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	      this.standardDeviation    =    standardDeviation;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
3	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  sd.doubleValue();  [CE]  <identifier>  expected  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;    [BUGGY]  solverAbsoluteAccuracy  =  sd.doubleValue();  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  sd.doubleValue();	  solverAbsoluteAccuracy    =    sd;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
4	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  [CE]  <identifier>  expected  [FE]              ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;    [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;	  solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    inverseCumAccuracy;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
5	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  sd;  [CE]  <identifier>  expected  [FE]                ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;    [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  sd;  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  sd;	  solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    inverseCumAccuracy;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
6	[BUG]  [BUGGY]  this.standardDeviation  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;    [BUGGY]  this.standardDeviation  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	this.standardDeviation  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	      this.standardDeviation    =    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
7	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  MAXIMUM_INVERSE_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;    [BUGGY]  solverAbsoluteAccuracy  =  MAXIMUM_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  MAXIMUM_INVERSE_ABSOLUTE_ACCURACY;	      solverAbsoluteAccuracy    =    standardDeviation;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
8	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  sd;  [CE]  <identifier>  expected  [FE]        ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;    [BUGGY]  double  solverAbsoluteAccuracy  =  sd;  [BUGGY]    solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	double  solverAbsoluteAccuracy  =  sd;	      double    solverAbsoluteAccuracy    =    inverseCumAccuracy;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
9	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;    [BUGGY]  double  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	double  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	      double    solverAbsoluteAccuracy    =    inverseCumAccuracy;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
10	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;    [BUGGY]  double  solverAbsoluteAccuracy  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	double  solverAbsoluteAccuracy  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	      double    solverAbsoluteAccuracy    =    inverseCumAccuracy;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
11	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]              ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;    [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	      this.standardDeviation    =    normalDeviation;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
12	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  sd.doubleValue();  [CE]  <identifier>  expected  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;    [BUGGY]  double  solverAbsoluteAccuracy  =  sd.doubleValue();  [BUGGY]    solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	double  solverAbsoluteAccuracy  =  sd.doubleValue();	      double    solverAbsoluteAccuracy    =    inverseCumAccuracy.doubleValue();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
13	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  inverseCumAccuracy.doubleValue()  +  1;  [CE]  <identifier>  expected  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;    [BUGGY]  double  solverAbsoluteAccuracy  =  inverseCumAccuracy.doubleValue()  +  1;  [BUGGY]    solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	double  solverAbsoluteAccuracy  =  inverseCumAccuracy.doubleValue()  +  1;	      double    solverAbsoluteAccuracy    =    inverseCumAccuracy.doubleValue();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
14	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;    [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  inverseCumAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  solverAbsoluteAccuracy    =    inverseCumAccuracy    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
15	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  [CE]  <identifier>  expected  [FE]              ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;    [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;	  solverAbsoluteAccuracy    =    inverseCumAccuracy    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
16	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  |  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]        ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;    [BUGGY]  solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  |  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  |  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY;	  solverAbsoluteAccuracy    =    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
17	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  |  Double.POSITIVE_INVERSION_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;    [BUGGY]  solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  |  Double.POSITIVE_INVERSION_ABSOLUTE_ACCURACY;  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  |  Double.POSITIVE_INVERSION_ABSOLUTE_ACCURACY;	  solverAbsoluteAccuracy    =    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
18	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;    [BUGGY]  solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  solverAbsoluteAccuracy    =    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
19	[BUG]  [BUGGY]  inverseCumAccuracy  =  sd;  [CE]  <identifier>  expected  [FE]        ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;    [BUGGY]  inverseCumAccuracy  =  sd;  [BUGGY]    solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	inverseCumAccuracy  =  sd;	      inverseCumAccuracy    =    inverseCumAccuracy;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
20	[BUG]  [BUGGY]  inverseCumAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;    [BUGGY]  inverseCumAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	inverseCumAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	      inverseCumAccuracy    =    inverseCumAccuracy;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
21	[BUG]  [BUGGY]  inverseCumAccuracy  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;    [BUGGY]  inverseCumAccuracy  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	inverseCumAccuracy  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	      inverseCumAccuracy    =    inverseCumAccuracy;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
22	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  inverseCumAccuracy;  [CE]  <identifier>  expected  [FE]        ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;    [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  inverseCumAccuracy;  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  inverseCumAccuracy;	  solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
23	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]        ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;    [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY;  [BUGGY]    solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY;	      this.standardDeviation    =    standardDeviation;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
24	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;    [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  solverAbsoluteAccuracy    =    sd;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
25	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  sd;  [CE]  <identifier>  expected  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;    [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  sd;  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  sd;	  solverAbsoluteAccuracy    =    sd;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
26	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy  +  1;  [CE]  <identifier>  expected  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;    [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy  +  1;  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  inverseCumAccuracy  +  1;	  solverAbsoluteAccuracy    =    inverseCumAccuracy    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
27	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  |  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY);  [CE]  <identifier>  expected  [FE]        ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;    [BUGGY]  solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  |  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  |  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY);	  solverAbsoluteAccuracy    =    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
28	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  |  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURITY;  [CE]  <identifier>  expected  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;    [BUGGY]  solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  |  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURITY;  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY  |  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURITY;	  solverAbsoluteAccuracy    =    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
29	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  standardDeviation;  [CE]  <identifier>  expected  [FE]              ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;    [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  standardDeviation;  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  standardDeviation;	  solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    inverseCumAccuracy;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
30	[BUG]  [BUGGY]  this.solverAbsoluteAccuracy  =  solverAbsoluteAccuracy;  [CE]  illegal  start  of  type  [FE]                ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;    [BUGGY]  this.solverAbsoluteAccuracy  =  solverAbsoluteAccuracy;  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	this.solverAbsoluteAccuracy  =  solverAbsoluteAccuracy;	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
31	[BUG]  [BUGGY]  this.solverAbsoluteAccuracy  =  inverseCumAccuracy;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;    [BUGGY]  this.solverAbsoluteAccuracy  =  inverseCumAccuracy;  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	this.solverAbsoluteAccuracy  =  inverseCumAccuracy;	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
32	[BUG]  [BUGGY]  this.solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  +  inverseCumAccuracy;  [CE]  illegal  start  of  type  [FE]                    ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;    [BUGGY]  this.solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  +  inverseCumAccuracy;  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	this.solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  +  inverseCumAccuracy;	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
33	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  standardDeviation;  [CE]  <identifier>  expected  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;    [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  standardDeviation;  [BUGGY]    solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  standardDeviation;	      solverAbsoluteAccuracy    =    standardDeviation;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
34	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  inverseCumAccuracy  +  1;  [CE]  <identifier>  expected  [FE]        ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;    [BUGGY]  double  solverAbsoluteAccuracy  =  inverseCumAccuracy  +  1;  [BUGGY]    solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	double  solverAbsoluteAccuracy  =  inverseCumAccuracy  +  1;	      double    solverAbsoluteAccuracy    =    inverseCumAccuracy;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
35	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  inverseCumAccuracy.doubleValue()  +  2;  [CE]  <identifier>  expected  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;    [BUGGY]  double  solverAbsoluteAccuracy  =  inverseCumAccuracy.doubleValue()  +  2;  [BUGGY]    solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	double  solverAbsoluteAccuracy  =  inverseCumAccuracy.doubleValue()  +  2;	      double    solverAbsoluteAccuracy    =    inverseCumAccuracy.doubleValue();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
36	[BUG]  [BUGGY]  this.standardDeviation  =  new  StandardDistributionImpl(sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]        ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;    [BUGGY]  this.standardDeviation  =  new  StandardDistributionImpl(sd,  inverseCumAccuracy);  [BUGGY]    solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	this.standardDeviation  =  new  StandardDistributionImpl(sd,  inverseCumAccuracy);	      this.standardDeviation    =    standardDeviation;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
37	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  standardDeviation.doubleValue();  [CE]  <identifier>  expected  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;    [BUGGY]  double  solverAbsoluteAccuracy  =  standardDeviation.doubleValue();  [BUGGY]    solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	double  solverAbsoluteAccuracy  =  standardDeviation.doubleValue();	      double    solverAbsoluteAccuracy    =    inverseCumAccuracy.doubleValue();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
38	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  new  Double(inverseCumAccuracy);  [CE]  <identifier>  expected  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;    [BUGGY]  solverAbsoluteAccuracy  =  new  Double(inverseCumAccuracy);  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	solverAbsoluteAccuracy  =  new  Double(inverseCumAccuracy);	  solverAbsoluteAccuracy    =    sd;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
39	[BUG]  [BUGGY]  if(inverseCumAccuracy  >  SQRT2PI)  {  double  solverAbsoluteAccuracy  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  standardDeviation  =  solverAbsoluteAccuracy;  }  [CE]  illegal  start  of  type  [FE]                ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;    [BUGGY]  if(inverseCumAccuracy  >  SQRT2PI)  {  double  solverAbsoluteAccuracy  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  standardDeviation  =  solverAbsoluteAccuracy;  }  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	if(inverseCumAccuracy  >  SQRT2PI)  {  double  solverAbsoluteAccuracy  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  standardDeviation  =  solverAbsoluteAccuracy;  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
40	[BUG]  [BUGGY]  if(inverseCumAccuracy  >  SQRT2PI)  {  double  solverAbsoluteAccuracy  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  standardDeviation  =  solverAbsoluteAccuracy;  System.arraycopy(sd,  0,  standardDeviation  [CE]  illegal  start  of  type  [FE]                  ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;    [BUGGY]  if(inverseCumAccuracy  >  SQRT2PI)  {  double  solverAbsoluteAccuracy  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  standardDeviation  =  solverAbsoluteAccuracy;  System.arraycopy(sd,  0,  standardDeviation  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	if(inverseCumAccuracy  >  SQRT2PI)  {  double  solverAbsoluteAccuracy  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  standardDeviation  =  solverAbsoluteAccuracy;  System.arraycopy(sd,  0,  standardDeviation	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
41	[BUG]  [BUGGY]  if(inverseCumAccuracy  >  SQRT2PI)  {  double  solverAbsoluteAccuracy  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  standardDeviation  =  solverAbsoluteAccuracy;  System.arraycopy(sd,  0,  standardDeviation,  [CE]  illegal  start  of  type  [FE]                    ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;    [BUGGY]  if(inverseCumAccuracy  >  SQRT2PI)  {  double  solverAbsoluteAccuracy  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  standardDeviation  =  solverAbsoluteAccuracy;  System.arraycopy(sd,  0,  standardDeviation,  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	if(inverseCumAccuracy  >  SQRT2PI)  {  double  solverAbsoluteAccuracy  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  standardDeviation  =  solverAbsoluteAccuracy;  System.arraycopy(sd,  0,  standardDeviation,	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
42	[BUG]  [BUGGY]  if(inverseCumAccuracy  >  SQRT2PI)  {  double  solverAbsoluteAccuracy  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  standardDeviation  =  solverAbsoluteAccuracy;  System.arraycopy(sd,  0,  standardDevi  [CE]  illegal  start  of  type  [FE]                      ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;    [BUGGY]  if(inverseCumAccuracy  >  SQRT2PI)  {  double  solverAbsoluteAccuracy  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  standardDeviation  =  solverAbsoluteAccuracy;  System.arraycopy(sd,  0,  standardDevi  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	if(inverseCumAccuracy  >  SQRT2PI)  {  double  solverAbsoluteAccuracy  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  standardDeviation  =  solverAbsoluteAccuracy;  System.arraycopy(sd,  0,  standardDevi	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
43	[BUG]  [BUGGY]  inverseCumAccuracy  =  inverseCumAccuracy  +  1;  [CE]  <identifier>  expected  [FE]        ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;    [BUGGY]  inverseCumAccuracy  =  inverseCumAccuracy  +  1;  [BUGGY]    solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	80	80	1	replace	inverseCumAccuracy  =  inverseCumAccuracy  +  1;	      inverseCumAccuracy    =    inverseCumAccuracy;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
