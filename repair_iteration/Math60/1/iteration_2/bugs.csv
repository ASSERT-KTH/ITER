bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  mean  =  Math.abs(x  -  1);  [CE]  cannot  find  symbol  dev  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  double  mean  =  Math.abs(x  -  1);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.abs(x  -  1);	      double    mean    =    Math.abs(x);    	non-compiled	[CE]  cannot  find  symbol  dev	6	None	replace
2	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(x)/  2.0;  [CE]  cannot  find  symbol  dev  [FE]      AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  double  mean  =  Math.sqrt(x)/  2.0;  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(x)/  2.0;	      double    mean    =    Math.abs(x);    	non-compiled	[CE]  cannot  find  symbol  dev	6	None	replace
3	[BUG]  [BUGGY]  double  mean  =  Math.abs(mean  -  standardDeviation);  [CE]  cannot  find  symbol  dev  [FE]        ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  double  mean  =  Math.abs(mean  -  standardDeviation);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.abs(mean  -  standardDeviation);	      double    mean    =    Math.abs(x    -    standardDeviation);    timeout    	non-compiled	[CE]  cannot  find  symbol  dev	18	None	replace
4	[BUG]  [BUGGY]  double  mean  =  Math.abs(x  /  standardDeviation);  [CE]  cannot  find  symbol  dev  [FE]          ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  double  mean  =  Math.abs(x  /  standardDeviation);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.abs(x  /  standardDeviation);	      double    mean    =    Math.abs(x    -    standardDeviation);    timeout    	non-compiled	[CE]  cannot  find  symbol  dev	18	None	replace
5	[BUG]  [BUGGY]  double  mean  =  Math.abs(x  *  standardDeviation);  [CE]  cannot  find  symbol  dev  [FE]            ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  double  mean  =  Math.abs(x  *  standardDeviation);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.abs(x  *  standardDeviation);	      double    mean    =    Math.abs(x    -    standardDeviation);    timeout    	non-compiled	[CE]  cannot  find  symbol  dev	18	None	replace
6	[BUG]  [BUGGY]  double  mean  =  Math.abs(x  -  20);  [CE]  cannot  find  symbol  dev  [FE]              ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  double  mean  =  Math.abs(x  -  20);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.abs(x  -  20);	      double    mean    =    Math.abs(x    -    standardDeviation);    timeout    	non-compiled	[CE]  cannot  find  symbol  dev	18	None	replace
7	[BUG]  [BUGGY]      double  mean  =  Math.abs(x  -  standardDeviation);  double  mean  =  Math.abs(x  -  standardDeviation);  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]        ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      double  mean  =  Math.abs(x  -  standardDeviation);  double  mean  =  Math.abs(x  -  standardDeviation);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	        double    mean    =    Math.abs(x    -    standardDeviation);    double  mean  =  Math.abs(x  -  standardDeviation);	  timeout    	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	17	None	add
8	[BUG]  [BUGGY]      double  mean  =  Math.abs(x  -  standardDeviation);  Double  mean  =  Math.abs(x  -  standardDeviation);  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]          ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      double  mean  =  Math.abs(x  -  standardDeviation);  Double  mean  =  Math.abs(x  -  standardDeviation);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	        double    mean    =    Math.abs(x    -    standardDeviation);    Double  mean  =  Math.abs(x  -  standardDeviation);	  timeout    	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	17	None	add
9	[BUG]  [BUGGY]      double  mean  =  Math.abs(x  -  standardDeviation);  double  mean  =  Math.abs(x  -  StandardDeviation);  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]            ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      double  mean  =  Math.abs(x  -  standardDeviation);  double  mean  =  Math.abs(x  -  StandardDeviation);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	        double    mean    =    Math.abs(x    -    standardDeviation);    double  mean  =  Math.abs(x  -  StandardDeviation);	  timeout    	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	17	None	add
10	[BUG]  [BUGGY]      double  mean  =  Math.abs(x  -  standardDeviation);  double  mean  =  Math.abs(x  -  standardsDeviation);  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]              ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      double  mean  =  Math.abs(x  -  standardDeviation);  double  mean  =  Math.abs(x  -  standardsDeviation);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	        double    mean    =    Math.abs(x    -    standardDeviation);    double  mean  =  Math.abs(x  -  standardsDeviation);	  timeout    	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	17	None	add
11	[BUG]  [BUGGY]      double  mean  =  Math.abs(x  -  standardDeviation);  double  mean  =  Math.abs(x  *  standardDeviation);  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]                ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      double  mean  =  Math.abs(x  -  standardDeviation);  double  mean  =  Math.abs(x  *  standardDeviation);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	        double    mean    =    Math.abs(x    -    standardDeviation);    double  mean  =  Math.abs(x  *  standardDeviation);	  timeout    	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	17	None	add
12	[BUG]  [BUGGY]  final  double  dev  =  x  /  mean;  final  double  dev  =  x  /  mean;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  /  mean;  final  double  dev  =  x  /  mean;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    /    mean;    final  double  dev  =  x  /  mean;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	11	None	add
13	[BUG]  [BUGGY]  final  double  dev  =  x  /  mean;  Final  double  dev  =  x  /  mean;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  /  mean;  Final  double  dev  =  x  /  mean;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    /    mean;    Final  double  dev  =  x  /  mean;	  	non-compiled	[CE]  not  a  statement	11	None	add
14	[BUG]  [BUGGY]  final  double  dev  =  x  /  mean;  static  final  double  dev  =  x  /  mean;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  /  mean;  static  final  double  dev  =  x  /  mean;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    /    mean;    static  final  double  dev  =  x  /  mean;	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
15	[BUG]  [BUGGY]  final  double  dev  =  x  /  mean;  final  double  dev  =  x  /  means;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]          AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  /  mean;  final  double  dev  =  x  /  means;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    /    mean;    final  double  dev  =  x  /  means;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	11	None	add
16	[BUG]  [BUGGY]  final  double  dev  =  x  -  standardDeviation;  final  double  dev  =  x  -  standardDeviation;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  -  standardDeviation;  final  double  dev  =  x  -  standardDeviation;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    standardDeviation;    final  double  dev  =  x  -  standardDeviation;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	9	None	add
17	[BUG]  [BUGGY]  final  double  dev  =  x  -  standardDeviation;  Final  double  dev  =  x  -  standardDeviation;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  -  standardDeviation;  Final  double  dev  =  x  -  standardDeviation;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    standardDeviation;    Final  double  dev  =  x  -  standardDeviation;	  	non-compiled	[CE]  not  a  statement	9	None	add
18	[BUG]  [BUGGY]  final  double  dev  =  x  -  standardDeviation;  final  double  dev  =  x  -  StandardDeviation;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]        AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  -  standardDeviation;  final  double  dev  =  x  -  StandardDeviation;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    standardDeviation;    final  double  dev  =  x  -  StandardDeviation;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	9	None	add
19	[BUG]  [BUGGY]  final  double  dev  =  x  -  standardDeviation;  final  double  dev  =  x  -  standardsDeviation;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]          AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  -  standardDeviation;  final  double  dev  =  x  -  standardsDeviation;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    standardDeviation;    final  double  dev  =  x  -  standardsDeviation;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	9	None	add
20	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  -  standardDeviation  +  1;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  -  standardDeviation  +  1;	  final    double    dev    =    x    -    mean    +    1;    	compilable	  [FE]  ConvergenceException  	16	5	replace
21	[BUG]  [BUGGY]  final  double  dev  =  x  -  standardDeviation  +  1;  [FE]  ConvergenceException  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  -  standardDeviation  +  1;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  standardDeviation  +  1;	  final    double    dev    =    x    -    mean    +    1;    	compilable	  [FE]  ConvergenceException  	16	5	replace
22	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  -  mean  *  1  +  1;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  -  mean  *  1  +  1;	  final    double    dev    =    x    -    mean    +    1;    	compilable	  [FE]  AssertionFailedError  	16	6	replace
23	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  1  +  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  -  mean  *  1  +  1;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  mean  *  1  +  1;	  final    double    dev    =    x    -    mean    +    1;    	compilable	  [FE]  AssertionFailedError  	16	6	replace
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  -  mean  +  2;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  -  mean  +  2;	  final    double    dev    =    x    -    mean    +    1;    	compilable	  [FE]  AssertionFailedError  	16	6	replace
25	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  +  2;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  -  mean  +  2;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  mean  +  2;	  final    double    dev    =    x    -    mean    +    1;    	compilable	  [FE]  AssertionFailedError  	16	6	replace
26	[BUG]  [BUGGY]  double  mean  =  Math.log(x)/  standardDeviation;  [CE]  cannot  find  symbol  dev  [FE]                ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  double  mean  =  Math.log(x)/  standardDeviation;  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.log(x)/  standardDeviation;	      double    mean    =    Math.log(x)/    cumulativeProbability;    	non-compiled	[CE]  cannot  find  symbol  dev	8	None	replace
27	[BUG]  [BUGGY]  double  mean  =  Math.log(x)/  inverseCumAccuracy;  [CE]  cannot  find  symbol  inverseCumAccuracy  [FE]                  ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  double  mean  =  Math.log(x)/  inverseCumAccuracy;  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.log(x)/  inverseCumAccuracy;	      double    mean    =    Math.log(x)/    cumulativeProbability;    	non-compiled	[CE]  cannot  find  symbol  inverseCumAccuracy	8	None	replace
28	[BUG]  [BUGGY]  double  mean  =  Math.log(x)/  2.0;  [CE]  cannot  find  symbol  dev  [FE]                    ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  double  mean  =  Math.log(x)/  2.0;  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.log(x)/  2.0;	      double    mean    =    Math.log(x)/    cumulativeProbability;    	non-compiled	[CE]  cannot  find  symbol  dev	8	None	replace
29	[BUG]  [BUGGY]  Math.rint(Math.log(x)/  2.0);  [CE]  cannot  find  symbol  dev  [FE]    ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  Math.rint(Math.log(x)/  2.0);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.rint(Math.log(x)/  2.0);	      Math.sqrt(Math.log(x)/    2.0);    	non-compiled	[CE]  cannot  find  symbol  dev	22	None	replace
30	[BUG]  [BUGGY]  Math.sqrt(Math.pow(10,  x)/  2.0);  [CE]  cannot  find  symbol  dev  [FE]      ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  Math.sqrt(Math.pow(10,  x)/  2.0);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.sqrt(Math.pow(10,  x)/  2.0);	      Math.sqrt(Math.log(x)/    2.0);    	non-compiled	[CE]  cannot  find  symbol  dev	22	None	replace
31	[BUG]  [BUGGY]  Math.sqrt(Math.exp(x)/  2.0);  [CE]  cannot  find  symbol  dev  [FE]        ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  Math.sqrt(Math.exp(x)/  2.0);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.sqrt(Math.exp(x)/  2.0);	      Math.sqrt(Math.log(x)/    2.0);    	non-compiled	[CE]  cannot  find  symbol  dev	22	None	replace
32	[BUG]  [BUGGY]  final  double  dev  =  mean  -  x;  final  double  dev  =  mean  -  x;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]            ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  mean  -  x;  final  double  dev  =  mean  -  x;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    mean    -    x;    final  double  dev  =  mean  -  x;	  timeout    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	13	None	add
33	[BUG]  [BUGGY]  final  double  dev  =  mean  -  x;  Final  double  dev  =  mean  -  x;  [CE]  not  a  statement  [FE]              ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  mean  -  x;  Final  double  dev  =  mean  -  x;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    mean    -    x;    Final  double  dev  =  mean  -  x;	  timeout    	non-compiled	[CE]  not  a  statement	13	None	add
34	[BUG]  [BUGGY]  final  double  dev  =  mean  -  x;  static  final  double  dev  =  mean  -  x;  [CE]  illegal  start  of  expression  [FE]                ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  mean  -  x;  static  final  double  dev  =  mean  -  x;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    mean    -    x;    static  final  double  dev  =  mean  -  x;	  timeout    	non-compiled	[CE]  illegal  start  of  expression	13	None	add
35	[BUG]  [BUGGY]  final  double  dev  =  mean  -  x;  final  double  dev  =  mean  -  x);  [CE]  ';'  expected  [FE]                  ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  mean  -  x;  final  double  dev  =  mean  -  x);  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    mean    -    x;    final  double  dev  =  mean  -  x);	  timeout    	non-compiled	[CE]  ';'  expected	13	None	add
36	[BUG]  [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(x);  [CE]  cannot  find  symbol  dev  [FE]              ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(x);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.log(x)/  cumulativeProbability(x);	      double    mean    =    Math.log(x)/    cumulativeProbability();    	non-compiled	[CE]  cannot  find  symbol  dev	7	None	replace
37	[BUG]  [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(sd);  [CE]  cannot  find  symbol  sd  [FE]                ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(sd);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.log(x)/  cumulativeProbability(sd);	      double    mean    =    Math.log(x)/    cumulativeProbability();    	non-compiled	[CE]  cannot  find  symbol  sd	7	None	replace
38	[BUG]  [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(sqrt2);  [CE]  cannot  find  symbol  sqrt2  [FE]                  ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(sqrt2);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.log(x)/  cumulativeProbability(sqrt2);	      double    mean    =    Math.log(x)/    cumulativeProbability();    	non-compiled	[CE]  cannot  find  symbol  sqrt2	7	None	replace
39	[BUG]  [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(x,  inverseCumAccuracy);  [CE]  cannot  find  symbol  inverseCumAccuracy  [FE]                    ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(x,  inverseCumAccuracy);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.log(x)/  cumulativeProbability(x,  inverseCumAccuracy);	      double    mean    =    Math.log(x)/    cumulativeProbability();    	non-compiled	[CE]  cannot  find  symbol  inverseCumAccuracy	7	None	replace
40	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  -  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  -  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  final    double    dev    =    x    -    mean    *    SQRT2PI;    timeout    	compilable	  [FE]  ConvergenceException  	26	5	replace
41	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [FE]  ConvergenceException  [FE]        ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  -  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  final    double    dev    =    x    -    mean    *    SQRT2PI;    timeout    	compilable	  [FE]  ConvergenceException  	26	5	replace
42	[BUG]  [BUGGY]  timeout  [FE]          ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  SQRT2PI;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  -  standardDeviation  *  SQRT2PI;	  final    double    dev    =    x    -    mean    *    SQRT2PI;    timeout    	compilable	timeout	26	1	replace
43	[BUG]  [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  SQRT2PI;  timeout  [FE]          ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  SQRT2PI;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  standardDeviation  *  SQRT2PI;	  final    double    dev    =    x    -    mean    *    SQRT2PI;    timeout    	compilable	timeout	26	1	replace
44	[BUG]  [BUGGY]  timeout  [FE]            ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  -  mean  *  2;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  -  mean  *  2;	  final    double    dev    =    x    -    mean    *    SQRT2PI;    timeout    	compilable	timeout	26	1	replace
45	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  2;  timeout  [FE]            ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  -  mean  *  2;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  mean  *  2;	  final    double    dev    =    x    -    mean    *    SQRT2PI;    timeout    	compilable	timeout	26	1	replace
46	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  /  mean  *  SQRT2PI;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  /  mean  *  SQRT2PI;	  final    double    dev    =    x    -    mean    *    SQRT2PI;    timeout    	compilable	  [FE]  AssertionFailedError  	26	6	replace
47	[BUG]  [BUGGY]  final  double  dev  =  x  /  mean  *  SQRT2PI;  [FE]  AssertionFailedError  [FE]              ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  /  mean  *  SQRT2PI;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  /  mean  *  SQRT2PI;	  final    double    dev    =    x    -    mean    *    SQRT2PI;    timeout    	compilable	  [FE]  AssertionFailedError  	26	6	replace
48	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.rint(x));  [CE]  cannot  find  symbol  dev  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  double  mean  =  Math.sqrt(Math.rint(x));  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.rint(x));	      double    mean    =    Math.sqrt(Math.log(x));    	non-compiled	[CE]  cannot  find  symbol  dev	24	None	replace
49	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.pow(10,  x));  [CE]  cannot  find  symbol  dev  [FE]      AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  double  mean  =  Math.sqrt(Math.pow(10,  x));  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.pow(10,  x));	      double    mean    =    Math.sqrt(Math.log(x));    	non-compiled	[CE]  cannot  find  symbol  dev	24	None	replace
50	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.exp(x));  [CE]  cannot  find  symbol  dev  [FE]        AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  double  mean  =  Math.sqrt(Math.exp(x));  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.exp(x));	      double    mean    =    Math.sqrt(Math.log(x));    	non-compiled	[CE]  cannot  find  symbol  dev	24	None	replace
51	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.random()  *  Math.random());  [CE]  cannot  find  symbol  dev  [FE]          AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  double  mean  =  Math.sqrt(Math.random()  *  Math.random());  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.random()  *  Math.random());	      double    mean    =    Math.sqrt(Math.log(x));    	non-compiled	[CE]  cannot  find  symbol  dev	24	None	replace
52	[BUG]  [BUGGY]      double  mean  =  Math.sqrt(x);  double  mean  =  Math.sqrt(x);  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      double  mean  =  Math.sqrt(x);  double  mean  =  Math.sqrt(x);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	        double    mean    =    Math.sqrt(x);    double  mean  =  Math.sqrt(x);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	3	None	add
53	[BUG]  [BUGGY]      double  mean  =  Math.sqrt(x);  Double  mean  =  Math.sqrt(x);  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]      AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      double  mean  =  Math.sqrt(x);  Double  mean  =  Math.sqrt(x);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	        double    mean    =    Math.sqrt(x);    Double  mean  =  Math.sqrt(x);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	3	None	add
54	[BUG]  [BUGGY]      double  mean  =  Math.sqrt(x);  long  standardDeviation  =  FastMath.sqrt(x);  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      double  mean  =  Math.sqrt(x);  long  standardDeviation  =  FastMath.sqrt(x);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	        double    mean    =    Math.sqrt(x);    long  standardDeviation  =  FastMath.sqrt(x);	  	non-compiled	[CE]  possible  loss  of  precision	3	None	add
55	[BUG]  [BUGGY]      double  mean  =  Math.sqrt(x);  final  double  mean  =  Math.sqrt(x);  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]          AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      double  mean  =  Math.sqrt(x);  final  double  mean  =  Math.sqrt(x);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	        double    mean    =    Math.sqrt(x);    final  double  mean  =  Math.sqrt(x);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	3	None	add
56	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      double  mean  =  Math.sqrt(x);  double  means  =  Math.sqrt(x);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	        double    mean    =    Math.sqrt(x);    double  means  =  Math.sqrt(x);	  	compilable	  [FE]  AssertionFailedError  	3	7	add
57	[BUG]  [BUGGY]      double  mean  =  Math.sqrt(x);  double  means  =  Math.sqrt(x);  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      double  mean  =  Math.sqrt(x);  double  means  =  Math.sqrt(x);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	        double    mean    =    Math.sqrt(x);    double  means  =  Math.sqrt(x);	  	compilable	  [FE]  AssertionFailedError  	3	7	add
58	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean;  timeout  =  System.currentTimeMillis();  [CE]  cannot  find  symbol  timeout  [FE]            ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  -  mean;  timeout  =  System.currentTimeMillis();  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  mean;  timeout  =  System.currentTimeMillis();	  final    double    dev    =    mean    -    x;    timeout    	non-compiled	[CE]  cannot  find  symbol  timeout	14	None	replace
59	[BUG]  [BUGGY]  final  double  dev  =  Math.max(dev.doubleValue(),  x);  [CE]  double  cannot  be  dereferenced  [FE]              ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  Math.max(dev.doubleValue(),  x);  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  Math.max(dev.doubleValue(),  x);	  final    double    dev    =    mean    -    x;    timeout    	non-compiled	[CE]  double  cannot  be  dereferenced	14	None	replace
60	[BUG]  [BUGGY]  timeout  [FE]                ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  this.mean  -  x;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  this.mean  -  x;	  final    double    dev    =    mean    -    x;    timeout    	compilable	timeout	14	1	replace
61	[BUG]  [BUGGY]  final  double  dev  =  this.mean  -  x;  timeout  [FE]                ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  this.mean  -  x;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  this.mean  -  x;	  final    double    dev    =    mean    -    x;    timeout    	compilable	timeout	14	1	replace
62	[BUG]  [BUGGY]      double  mean  =  Math.sqrt(Math.abs(x));  double  mean  =  Math.sqrt(Math.abs(x));  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      double  mean  =  Math.sqrt(Math.abs(x));  double  mean  =  Math.sqrt(Math.abs(x));  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	        double    mean    =    Math.sqrt(Math.abs(x));    double  mean  =  Math.sqrt(Math.abs(x));	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	19	None	add
63	[BUG]  [BUGGY]      double  mean  =  Math.sqrt(Math.abs(x));  Double  mean  =  Math.sqrt(Math.abs(x));  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]      AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      double  mean  =  Math.sqrt(Math.abs(x));  Double  mean  =  Math.sqrt(Math.abs(x));  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	        double    mean    =    Math.sqrt(Math.abs(x));    Double  mean  =  Math.sqrt(Math.abs(x));	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	19	None	add
64	[BUG]  [BUGGY]      double  mean  =  Math.sqrt(Math.abs(x));  double  mean  =  Math.abs(Math.abs(x));  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]        AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      double  mean  =  Math.sqrt(Math.abs(x));  double  mean  =  Math.abs(Math.abs(x));  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	        double    mean    =    Math.sqrt(Math.abs(x));    double  mean  =  Math.abs(Math.abs(x));	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	19	None	add
65	[BUG]  [BUGGY]      double  mean  =  Math.sqrt(Math.abs(x));  long  standardDeviation  =  Math.sqrt(Math.abs(x));  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      double  mean  =  Math.sqrt(Math.abs(x));  long  standardDeviation  =  Math.sqrt(Math.abs(x));  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	        double    mean    =    Math.sqrt(Math.abs(x));    long  standardDeviation  =  Math.sqrt(Math.abs(x));	  	non-compiled	[CE]  possible  loss  of  precision	19	None	add
66	[BUG]  [BUGGY]      double  mean  =  Math.sqrt(Math.abs(x));  double  mean  =  Math.sqrt(Math.abs(y));  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]            AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      double  mean  =  Math.sqrt(Math.abs(x));  double  mean  =  Math.sqrt(Math.abs(y));  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	        double    mean    =    Math.sqrt(Math.abs(x));    double  mean  =  Math.sqrt(Math.abs(y));	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	19	None	add
67	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  SQRT2PI;  final  double  dev  =  x  -  mean  *  SQRT2PI;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]        ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  -  mean  *  SQRT2PI;  final  double  dev  =  x  -  mean  *  SQRT2PI;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    mean    *    SQRT2PI;    final  double  dev  =  x  -  mean  *  SQRT2PI;	  timeout    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	25	None	add
68	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  SQRT2PI;  final  double  dev  =  x  -  mean  *  SqRT2PI;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]          ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  -  mean  *  SQRT2PI;  final  double  dev  =  x  -  mean  *  SqRT2PI;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    mean    *    SQRT2PI;    final  double  dev  =  x  -  mean  *  SqRT2PI;	  timeout    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	25	None	add
69	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  SQRT2PI;  Final  double  dev  =  x  -  mean  *  SQRT2PI;  [CE]  not  a  statement  [FE]            ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  -  mean  *  SQRT2PI;  Final  double  dev  =  x  -  mean  *  SQRT2PI;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    mean    *    SQRT2PI;    Final  double  dev  =  x  -  mean  *  SQRT2PI;	  timeout    	non-compiled	[CE]  not  a  statement	25	None	add
70	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  SQRT2PI;  final  double  dev  =  x  -  mean  *  SQRT2PI);  [CE]  ';'  expected  [FE]              ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  -  mean  *  SQRT2PI;  final  double  dev  =  x  -  mean  *  SQRT2PI);  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    mean    *    SQRT2PI;    final  double  dev  =  x  -  mean  *  SQRT2PI);	  timeout    	non-compiled	[CE]  ';'  expected	25	None	add
71	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x)/  2.0);  [CE]  cannot  find  symbol  dev  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x)/  2.0);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.abs(x)/  2.0);	      double    mean    =    Math.sqrt(Math.abs(x));    	non-compiled	[CE]  cannot  find  symbol  dev	20	None	replace
72	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x)-  1);  [CE]  cannot  find  symbol  dev  [FE]      AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x)-  1);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.abs(x)-  1);	      double    mean    =    Math.sqrt(Math.abs(x));    	non-compiled	[CE]  cannot  find  symbol  dev	20	None	replace
73	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x)/  2);  [CE]  cannot  find  symbol  dev  [FE]        AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x)/  2);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.abs(x)/  2);	      double    mean    =    Math.sqrt(Math.abs(x));    	non-compiled	[CE]  cannot  find  symbol  dev	20	None	replace
74	[BUG]  [BUGGY]      double  mean  =  Math.abs(x);  double  mean  =  Math.abs(x);  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      double  mean  =  Math.abs(x);  double  mean  =  Math.abs(x);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	        double    mean    =    Math.abs(x);    double  mean  =  Math.abs(x);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	5	None	add
75	[BUG]  [BUGGY]      double  mean  =  Math.abs(x);  Double  mean  =  Math.abs(x);  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]      AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      double  mean  =  Math.abs(x);  Double  mean  =  Math.abs(x);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	        double    mean    =    Math.abs(x);    Double  mean  =  Math.abs(x);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	5	None	add
76	[BUG]  [BUGGY]      double  mean  =  Math.abs(x);  long  standardDeviation  =  Math.abs(x);  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      double  mean  =  Math.abs(x);  long  standardDeviation  =  Math.abs(x);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	        double    mean    =    Math.abs(x);    long  standardDeviation  =  Math.abs(x);	  	non-compiled	[CE]  possible  loss  of  precision	5	None	add
77	[BUG]  [BUGGY]      double  mean  =  Math.abs(x);  final  double  mean  =  Math.abs(x);  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]          AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      double  mean  =  Math.abs(x);  final  double  mean  =  Math.abs(x);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	        double    mean    =    Math.abs(x);    final  double  mean  =  Math.abs(x);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	5	None	add
78	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      double  mean  =  Math.abs(x);  x  =  Math.abs(x);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	        double    mean    =    Math.abs(x);    x  =  Math.abs(x);	  	compilable	  [FE]  AssertionFailedError  	5	6	add
79	[BUG]  [BUGGY]      double  mean  =  Math.abs(x);  x  =  Math.abs(x);  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      double  mean  =  Math.abs(x);  x  =  Math.abs(x);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	        double    mean    =    Math.abs(x);    x  =  Math.abs(x);	  	compilable	  [FE]  AssertionFailedError  	5	6	add
80	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(standardDeviation);  [CE]  cannot  find  symbol  dev  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  double  mean  =  Math.sqrt(standardDeviation);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(standardDeviation);	      double    mean    =    Math.sqrt(x);    	non-compiled	[CE]  cannot  find  symbol  dev	4	None	replace
81	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(x  +  1);  [CE]  cannot  find  symbol  dev  [FE]      AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  double  mean  =  Math.sqrt(x  +  1);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(x  +  1);	      double    mean    =    Math.sqrt(x);    	non-compiled	[CE]  cannot  find  symbol  dev	4	None	replace
82	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(x  -  1);  [CE]  cannot  find  symbol  dev  [FE]        AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  double  mean  =  Math.sqrt(x  -  1);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(x  -  1);	      double    mean    =    Math.sqrt(x);    	non-compiled	[CE]  cannot  find  symbol  dev	4	None	replace
83	[BUG]  [BUGGY]      double  mean  =  Math.sqrt(Math.log(x));  double  mean  =  Math.sqrt(Math.log(x));  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      double  mean  =  Math.sqrt(Math.log(x));  double  mean  =  Math.sqrt(Math.log(x));  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	        double    mean    =    Math.sqrt(Math.log(x));    double  mean  =  Math.sqrt(Math.log(x));	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	23	None	add
84	[BUG]  [BUGGY]      double  mean  =  Math.sqrt(Math.log(x));  Double  mean  =  Math.sqrt(Math.log(x));  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]      AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      double  mean  =  Math.sqrt(Math.log(x));  Double  mean  =  Math.sqrt(Math.log(x));  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	        double    mean    =    Math.sqrt(Math.log(x));    Double  mean  =  Math.sqrt(Math.log(x));	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	23	None	add
85	[BUG]  [BUGGY]      double  mean  =  Math.sqrt(Math.log(x));  long  standardDeviation  =  Math.sqrt(Math.log(x));  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      double  mean  =  Math.sqrt(Math.log(x));  long  standardDeviation  =  Math.sqrt(Math.log(x));  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	        double    mean    =    Math.sqrt(Math.log(x));    long  standardDeviation  =  Math.sqrt(Math.log(x));	  	non-compiled	[CE]  possible  loss  of  precision	23	None	add
86	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      double  mean  =  Math.sqrt(Math.log(x));  x  =  Math.sqrt(Math.log(x));  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	        double    mean    =    Math.sqrt(Math.log(x));    x  =  Math.sqrt(Math.log(x));	  	compilable	  [FE]  AssertionFailedError  	23	7	add
87	[BUG]  [BUGGY]      double  mean  =  Math.sqrt(Math.log(x));  x  =  Math.sqrt(Math.log(x));  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      double  mean  =  Math.sqrt(Math.log(x));  x  =  Math.sqrt(Math.log(x));  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	        double    mean    =    Math.sqrt(Math.log(x));    x  =  Math.sqrt(Math.log(x));	  	compilable	  [FE]  AssertionFailedError  	23	7	add
88	[BUG]  [BUGGY]      double  mean  =  Math.sqrt(Math.log(x));  double  mean  =  Math.sqrt(Math.log(y));  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]            AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      double  mean  =  Math.sqrt(Math.log(x));  double  mean  =  Math.sqrt(Math.log(y));  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	        double    mean    =    Math.sqrt(Math.log(x));    double  mean  =  Math.sqrt(Math.log(y));	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	23	None	add
89	[BUG]  [BUGGY]  double  mean  =  Math.max(0,  Math.abs(x)-  1);  [CE]  cannot  find  symbol  dev  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  double  mean  =  Math.max(0,  Math.abs(x)-  1);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.max(0,  Math.abs(x)-  1);	      double    mean    =    Math.max(0,    Math.abs(x));    	non-compiled	[CE]  cannot  find  symbol  dev	2	None	replace
90	[BUG]  [BUGGY]  double  mean  =  Math.min(0,  Math.abs(x));  [CE]  cannot  find  symbol  dev  [FE]      AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  double  mean  =  Math.min(0,  Math.abs(x));  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.min(0,  Math.abs(x));	      double    mean    =    Math.max(0,    Math.abs(x));    	non-compiled	[CE]  cannot  find  symbol  dev	2	None	replace
91	[BUG]  [BUGGY]  double  mean  =  Math.max(0,  Math.abs(x  +  1));  [CE]  cannot  find  symbol  dev  [FE]        AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  double  mean  =  Math.max(0,  Math.abs(x  +  1));  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.max(0,  Math.abs(x  +  1));	      double    mean    =    Math.max(0,    Math.abs(x));    	non-compiled	[CE]  cannot  find  symbol  dev	2	None	replace
92	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  /  SQRT2PI;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  /  SQRT2PI;	  final    double    dev    =    x    /    mean;    	compilable	  [FE]  AssertionFailedError  	12	6	replace
93	[BUG]  [BUGGY]  final  double  dev  =  x  /  SQRT2PI;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  /  SQRT2PI;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  /  SQRT2PI;	  final    double    dev    =    x    /    mean;    	compilable	  [FE]  AssertionFailedError  	12	6	replace
94	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  /  standardDeviation;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  /  standardDeviation;	  final    double    dev    =    x    /    mean;    	compilable	  [FE]  ConvergenceException  	12	5	replace
95	[BUG]  [BUGGY]  final  double  dev  =  x  /  standardDeviation;  [FE]  ConvergenceException  [FE]      AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  /  standardDeviation;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  /  standardDeviation;	  final    double    dev    =    x    /    mean;    	compilable	  [FE]  ConvergenceException  	12	5	replace
96	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  final    double    dev    =    x    /    mean;    	compilable	  [FE]  AssertionFailedError  	12	6	replace
97	[BUG]  [BUGGY]  final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  final    double    dev    =    x    /    mean;    	compilable	  [FE]  AssertionFailedError  	12	6	replace
98	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  mean  /  x;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  mean  /  x;	  final    double    dev    =    x    /    mean;    	compilable	  [FE]  AssertionFailedError  	12	6	replace
99	[BUG]  [BUGGY]  final  double  dev  =  mean  /  x;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  mean  /  x;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  mean  /  x;	  final    double    dev    =    x    /    mean;    	compilable	  [FE]  AssertionFailedError  	12	6	replace
100	[BUG]  [BUGGY]      double  mean  =  Math.max(0,  Math.abs(x));  double  mean  =  Math.max(0,  Math.abs(x));  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      double  mean  =  Math.max(0,  Math.abs(x));  double  mean  =  Math.max(0,  Math.abs(x));  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	        double    mean    =    Math.max(0,    Math.abs(x));    double  mean  =  Math.max(0,  Math.abs(x));	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	1	None	add
101	[BUG]  [BUGGY]      double  mean  =  Math.max(0,  Math.abs(x));  Double  mean  =  Math.max(0,  Math.abs(x));  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]      AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      double  mean  =  Math.max(0,  Math.abs(x));  Double  mean  =  Math.max(0,  Math.abs(x));  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	        double    mean    =    Math.max(0,    Math.abs(x));    Double  mean  =  Math.max(0,  Math.abs(x));	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	1	None	add
102	[BUG]  [BUGGY]      double  mean  =  Math.max(0,  Math.abs(x));  double  mean  =  Math.max(0,  Math.abs(y));  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]        AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      double  mean  =  Math.max(0,  Math.abs(x));  double  mean  =  Math.max(0,  Math.abs(y));  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	        double    mean    =    Math.max(0,    Math.abs(x));    double  mean  =  Math.max(0,  Math.abs(y));	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	1	None	add
103	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      double  mean  =  Math.max(0,  Math.abs(x));  double  means  =  Math.max(0,  Math.abs(x));  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	        double    mean    =    Math.max(0,    Math.abs(x));    double  means  =  Math.max(0,  Math.abs(x));	  	compilable	  [FE]  AssertionFailedError  	1	6	add
104	[BUG]  [BUGGY]      double  mean  =  Math.max(0,  Math.abs(x));  double  means  =  Math.max(0,  Math.abs(x));  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      double  mean  =  Math.max(0,  Math.abs(x));  double  means  =  Math.max(0,  Math.abs(x));  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	        double    mean    =    Math.max(0,    Math.abs(x));    double  means  =  Math.max(0,  Math.abs(x));	  	compilable	  [FE]  AssertionFailedError  	1	6	add
105	[BUG]  [BUGGY]      double  mean  =  Math.max(0,  Math.abs(x));  double  mean  =  Math.max(1,  Math.abs(x));  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]            AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      double  mean  =  Math.max(0,  Math.abs(x));  double  mean  =  Math.max(1,  Math.abs(x));  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	        double    mean    =    Math.max(0,    Math.abs(x));    double  mean  =  Math.max(1,  Math.abs(x));	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	1	None	add
106	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  +  1;  final  double  dev  =  x  -  mean  +  1;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  -  mean  +  1;  final  double  dev  =  x  -  mean  +  1;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    mean    +    1;    final  double  dev  =  x  -  mean  +  1;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	15	None	add
107	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  +  1;  Final  double  dev  =  x  -  mean  +  1;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  -  mean  +  1;  Final  double  dev  =  x  -  mean  +  1;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    mean    +    1;    Final  double  dev  =  x  -  mean  +  1;	  	non-compiled	[CE]  not  a  statement	15	None	add
108	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  +  1;  final  double  dev  =  x  -  mean  +  2;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]        AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  -  mean  +  1;  final  double  dev  =  x  -  mean  +  2;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    mean    +    1;    final  double  dev  =  x  -  mean  +  2;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	15	None	add
109	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  +  1;  final  double  dev  =  x  +  mean  +  1;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]          AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  -  mean  +  1;  final  double  dev  =  x  +  mean  +  1;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    mean    +    1;    final  double  dev  =  x  +  mean  +  1;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	15	None	add
110	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  2.0);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	        Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  2.0);	  	compilable	  [FE]  ConvergenceException  	21	1	add
111	[BUG]  [BUGGY]      Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  2.0);  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  2.0);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	        Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  2.0);	  	compilable	  [FE]  ConvergenceException  	21	1	add
112	[BUG]  [BUGGY]      Math.sqrt(Math.log(x)/  2.0);  Mat.sqrt(Math.log(x)/  2.0);  [CE]  cannot  find  symbol  Mat  [FE]      ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      Math.sqrt(Math.log(x)/  2.0);  Mat.sqrt(Math.log(x)/  2.0);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	        Math.sqrt(Math.log(x)/    2.0);    Mat.sqrt(Math.log(x)/  2.0);	  	non-compiled	[CE]  cannot  find  symbol  Mat	21	None	add
113	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  1.0);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	        Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  1.0);	  	compilable	  [FE]  ConvergenceException  	21	1	add
114	[BUG]  [BUGGY]      Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  1.0);  [FE]  ConvergenceException  [FE]        ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  1.0);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	        Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  1.0);	  	compilable	  [FE]  ConvergenceException  	21	1	add
115	[BUG]  [BUGGY]      Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(y)/  2.0);  [CE]  cannot  find  symbol  y  [FE]          ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(y)/  2.0);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	        Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(y)/  2.0);	  	non-compiled	[CE]  cannot  find  symbol  y	21	None	add
116	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]            ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  3.0);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	        Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  3.0);	  	compilable	  [FE]  ConvergenceException  	21	1	add
117	[BUG]  [BUGGY]      Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  3.0);  [FE]  ConvergenceException  [FE]            ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  3.0);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	        Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  3.0);	  	compilable	  [FE]  ConvergenceException  	21	1	add
118	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  *  standardDeviation;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  *  standardDeviation;	  final    double    dev    =    x    -    standardDeviation;    	compilable	  [FE]  ConvergenceException  	10	5	replace
119	[BUG]  [BUGGY]  final  double  dev  =  x  *  standardDeviation;  [FE]  ConvergenceException  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  *  standardDeviation;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  *  standardDeviation;	  final    double    dev    =    x    -    standardDeviation;    	compilable	  [FE]  ConvergenceException  	10	5	replace
120	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  2;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  -  standardDeviation  *  2;	  final    double    dev    =    x    -    standardDeviation;    	compilable	  [FE]  AssertionFailedError  	10	6	replace
121	[BUG]  [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  2;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  2;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  standardDeviation  *  2;	  final    double    dev    =    x    -    standardDeviation;    	compilable	  [FE]  AssertionFailedError  	10	6	replace
122	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x)+  1);  [CE]  cannot  find  symbol  dev  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x)+  1);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.abs(x)+  1);	      double    mean    =    Math.sqrt(Math.abs(x));    	non-compiled	[CE]  cannot  find  symbol  dev	20	None	replace
123	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.random());  [CE]  cannot  find  symbol  dev  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  double  mean  =  Math.sqrt(Math.random());  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.random());	      double    mean    =    Math.sqrt(Math.log(x));    	non-compiled	[CE]  cannot  find  symbol  dev	24	None	replace
124	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.log(x)/  2.0);  [CE]  cannot  find  symbol  dev  [FE]      AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  double  mean  =  Math.sqrt(Math.log(x)/  2.0);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.log(x)/  2.0);	      double    mean    =    Math.sqrt(Math.log(x));    	non-compiled	[CE]  cannot  find  symbol  dev	24	None	replace
125	[BUG]  [BUGGY]      double  mean  =  Math.max(0,  Math.abs(x));  long  mean  =  Math.max(0,  Math.abs(x));  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      double  mean  =  Math.max(0,  Math.abs(x));  long  mean  =  Math.max(0,  Math.abs(x));  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	        double    mean    =    Math.max(0,    Math.abs(x));    long  mean  =  Math.max(0,  Math.abs(x));	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	1	None	add
126	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  SQRT2PI;  static  final  double  dev  =  x  -  mean  *  SQRT2PI;  [CE]  illegal  start  of  expression  [FE]        ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  -  mean  *  SQRT2PI;  static  final  double  dev  =  x  -  mean  *  SQRT2PI;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    mean    *    SQRT2PI;    static  final  double  dev  =  x  -  mean  *  SQRT2PI;	  timeout    	non-compiled	[CE]  illegal  start  of  expression	25	None	add
127	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      double  mean  =  Math.sqrt(x);  x  =  Math.sqrt(x);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	        double    mean    =    Math.sqrt(x);    x  =  Math.sqrt(x);	  	compilable	  [FE]  AssertionFailedError  	3	7	add
128	[BUG]  [BUGGY]      double  mean  =  Math.sqrt(x);  x  =  Math.sqrt(x);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      double  mean  =  Math.sqrt(x);  x  =  Math.sqrt(x);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	        double    mean    =    Math.sqrt(x);    x  =  Math.sqrt(x);	  	compilable	  [FE]  AssertionFailedError  	3	7	add
129	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(x  /  2.0);  [CE]  cannot  find  symbol  dev  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  double  mean  =  Math.sqrt(x  /  2.0);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(x  /  2.0);	      double    mean    =    Math.sqrt(x);    	non-compiled	[CE]  cannot  find  symbol  dev	4	None	replace
130	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  *  mean;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  *  mean;	  final    double    dev    =    x    /    mean;    	compilable	  [FE]  AssertionFailedError  	12	6	replace
131	[BUG]  [BUGGY]  final  double  dev  =  x  *  mean;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  *  mean;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  *  mean;	  final    double    dev    =    x    /    mean;    	compilable	  [FE]  AssertionFailedError  	12	6	replace
132	[BUG]  [BUGGY]      Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)1/  2.0);  [CE]  ')'  expected  [FE]    ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)1/  2.0);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	        Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)1/  2.0);	  	non-compiled	[CE]  ')'  expected	21	None	add
133	[BUG]  [BUGGY]  final  double  dev  =  x  -  standardDeviation;  static  final  double  dev  =  x  -  standardDeviation;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  -  standardDeviation;  static  final  double  dev  =  x  -  standardDeviation;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    standardDeviation;    static  final  double  dev  =  x  -  standardDeviation;	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
134	[BUG]  [BUGGY]  final  double  dev  =  x  -  standardDeviation;  final  double  x  =  x  -  standardDeviation;  [CE]  variable  x  is  already  defined  in  method  cumulativeProbability(double)  [FE]      AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  -  standardDeviation;  final  double  x  =  x  -  standardDeviation;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    standardDeviation;    final  double  x  =  x  -  standardDeviation;	  	non-compiled	[CE]  variable  x  is  already  defined  in  method  cumulativeProbability(double)	9	None	add
135	[BUG]  [BUGGY]  timeout  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  standardDeviation  -  x;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  standardDeviation  -  x;	  final    double    dev    =    x    -    standardDeviation;    	compilable	timeout	10	1	replace
136	[BUG]  [BUGGY]  final  double  dev  =  standardDeviation  -  x;  timeout  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  standardDeviation  -  x;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  standardDeviation  -  x;	  final    double    dev    =    x    -    standardDeviation;    	compilable	timeout	10	1	replace
137	[BUG]  [BUGGY]  final  double  dev  =  mean  -  x;  final  double  dev  =  mean  *  x;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]            ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  mean  -  x;  final  double  dev  =  mean  *  x;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    mean    -    x;    final  double  dev  =  mean  *  x;	  timeout    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	13	None	add
138	[BUG]  [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(true);  [CE]  no  suitable  method  found  for  cumulativeProbability(boolean)  [FE]              ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(true);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.log(x)/  cumulativeProbability(true);	      double    mean    =    Math.log(x)/    cumulativeProbability();    	non-compiled	[CE]  no  suitable  method  found  for  cumulativeProbability(boolean)	7	None	replace
139	[BUG]  [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(null);  [CE]  no  suitable  method  found  for  cumulativeProbability(<null>)  [FE]                ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(null);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.log(x)/  cumulativeProbability(null);	      double    mean    =    Math.log(x)/    cumulativeProbability();    	non-compiled	[CE]  no  suitable  method  found  for  cumulativeProbability(<null>)	7	None	replace
140	[BUG]  [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(false);  [CE]  no  suitable  method  found  for  cumulativeProbability(boolean)  [FE]                  ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(false);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.log(x)/  cumulativeProbability(false);	      double    mean    =    Math.log(x)/    cumulativeProbability();    	non-compiled	[CE]  no  suitable  method  found  for  cumulativeProbability(boolean)	7	None	replace
141	[BUG]  [BUGGY]  double  mean  =  Math.max(0,  Math.abs(x)+  1);  [CE]  cannot  find  symbol  dev  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  double  mean  =  Math.max(0,  Math.abs(x)+  1);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.max(0,  Math.abs(x)+  1);	      double    mean    =    Math.max(0,    Math.abs(x));    	non-compiled	[CE]  cannot  find  symbol  dev	2	None	replace
142	[BUG]  [BUGGY]      double  mean  =  Math.abs(x);  long  standardDeviation  =  FastMath.sqrt(2.0);  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      double  mean  =  Math.abs(x);  long  standardDeviation  =  FastMath.sqrt(2.0);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	        double    mean    =    Math.abs(x);    long  standardDeviation  =  FastMath.sqrt(2.0);	  	non-compiled	[CE]  possible  loss  of  precision	5	None	add
143	[BUG]  [BUGGY]      double  mean  =  Math.abs(x);  long  standardDeviation  =  FastMath.sqrt(1.0);  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      double  mean  =  Math.abs(x);  long  standardDeviation  =  FastMath.sqrt(1.0);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	        double    mean    =    Math.abs(x);    long  standardDeviation  =  FastMath.sqrt(1.0);	  	non-compiled	[CE]  possible  loss  of  precision	5	None	add
144	[BUG]  [BUGGY]      double  mean  =  Math.abs(x);  long  standardDeviation  =  FastMath.sqrt(0.0);  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      double  mean  =  Math.abs(x);  long  standardDeviation  =  FastMath.sqrt(0.0);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	        double    mean    =    Math.abs(x);    long  standardDeviation  =  FastMath.sqrt(0.0);	  	non-compiled	[CE]  possible  loss  of  precision	5	None	add
145	[BUG]  [BUGGY]  final  double  dev  =  x  /  mean;  final  double  x  =  x  /  mean;  [CE]  variable  x  is  already  defined  in  method  cumulativeProbability(double)  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  /  mean;  final  double  x  =  x  /  mean;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    /    mean;    final  double  x  =  x  /  mean;	  	non-compiled	[CE]  variable  x  is  already  defined  in  method  cumulativeProbability(double)	11	None	add
146	[BUG]  [BUGGY]      double  mean  =  Math.sqrt(Math.log(x));  int  standardDeviation  =  FastMath.sqrt(Math.log(x));  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      double  mean  =  Math.sqrt(Math.log(x));  int  standardDeviation  =  FastMath.sqrt(Math.log(x));  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	        double    mean    =    Math.sqrt(Math.log(x));    int  standardDeviation  =  FastMath.sqrt(Math.log(x));	  	non-compiled	[CE]  possible  loss  of  precision	23	None	add
147	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      double  mean  =  Math.sqrt(Math.log(x));  Math.sqrt(Math.log(x));  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	        double    mean    =    Math.sqrt(Math.log(x));    Math.sqrt(Math.log(x));	  	compilable	  [FE]  AssertionFailedError  	23	7	add
148	[BUG]  [BUGGY]      double  mean  =  Math.sqrt(Math.log(x));  Math.sqrt(Math.log(x));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      double  mean  =  Math.sqrt(Math.log(x));  Math.sqrt(Math.log(x));  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	        double    mean    =    Math.sqrt(Math.log(x));    Math.sqrt(Math.log(x));	  	compilable	  [FE]  AssertionFailedError  	23	7	add
149	[BUG]  [BUGGY]  double  mean  =  Math.log(x)/  SQRT2PI;  [CE]  cannot  find  symbol  dev  [FE]                ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  double  mean  =  Math.log(x)/  SQRT2PI;  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.log(x)/  SQRT2PI;	      double    mean    =    Math.log(x)/    cumulativeProbability;    	non-compiled	[CE]  cannot  find  symbol  dev	8	None	replace
150	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  -  mean  *  1;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  -  mean  *  1;	  final    double    dev    =    x    -    mean    +    1;    	compilable	  [FE]  ConvergenceException  	16	1	replace
151	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  1;  [FE]  ConvergenceException  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  -  mean  *  1;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  mean  *  1;	  final    double    dev    =    x    -    mean    +    1;    	compilable	  [FE]  ConvergenceException  	16	1	replace
152	[BUG]  [BUGGY]  timeout  [FE]        ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  -  mean  *  4;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  -  mean  *  4;	  final    double    dev    =    x    -    mean    *    SQRT2PI;    timeout    	compilable	timeout	26	1	replace
153	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  4;  timeout  [FE]        ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  -  mean  *  4;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  mean  *  4;	  final    double    dev    =    x    -    mean    *    SQRT2PI;    timeout    	compilable	timeout	26	1	replace
154	[BUG]  [BUGGY]  timeout  [FE]          ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  -  mean  *  SQRT2PI  +  1;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  -  mean  *  SQRT2PI  +  1;	  final    double    dev    =    x    -    mean    *    SQRT2PI;    timeout    	compilable	timeout	26	1	replace
155	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  SQRT2PI  +  1;  timeout  [FE]          ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  -  mean  *  SQRT2PI  +  1;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  mean  *  SQRT2PI  +  1;	  final    double    dev    =    x    -    mean    *    SQRT2PI;    timeout    	compilable	timeout	26	1	replace
156	[BUG]  [BUGGY]  double  mean  =  Math.abs(x  +  1);  [CE]  cannot  find  symbol  dev  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  double  mean  =  Math.abs(x  +  1);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.abs(x  +  1);	      double    mean    =    Math.abs(x);    	non-compiled	[CE]  cannot  find  symbol  dev	6	None	replace
157	[BUG]  [BUGGY]  double  mean  =  Math.abs(x  -  2);  [CE]  cannot  find  symbol  dev  [FE]      AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  double  mean  =  Math.abs(x  -  2);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.abs(x  -  2);	      double    mean    =    Math.abs(x);    	non-compiled	[CE]  cannot  find  symbol  dev	6	None	replace
158	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  +  1;  static  final  double  dev  =  x  -  mean  +  1;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  -  mean  +  1;  static  final  double  dev  =  x  -  mean  +  1;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    mean    +    1;    static  final  double  dev  =  x  -  mean  +  1;	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
159	[BUG]  [BUGGY]      double  mean  =  Math.abs(x  -  standardDeviation);  double  standardDeviation  =  Math.abs(x  -  standardDeviation);  [CE]  variable  standardDeviation  might  not  have  been  initialized  [FE]        ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      double  mean  =  Math.abs(x  -  standardDeviation);  double  standardDeviation  =  Math.abs(x  -  standardDeviation);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	        double    mean    =    Math.abs(x    -    standardDeviation);    double  standardDeviation  =  Math.abs(x  -  standardDeviation);	  timeout    	non-compiled	[CE]  variable  standardDeviation  might  not  have  been  initialized	17	None	add
160	[BUG]  [BUGGY]      double  mean  =  Math.abs(x  -  standardDeviation);  Double  standardDeviation  =  Math.abs(x  -  standardDeviation);  [CE]  variable  standardDeviation  might  not  have  been  initialized  [FE]          ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      double  mean  =  Math.abs(x  -  standardDeviation);  Double  standardDeviation  =  Math.abs(x  -  standardDeviation);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	        double    mean    =    Math.abs(x    -    standardDeviation);    Double  standardDeviation  =  Math.abs(x  -  standardDeviation);	  timeout    	non-compiled	[CE]  variable  standardDeviation  might  not  have  been  initialized	17	None	add
161	[BUG]  [BUGGY]      double  mean  =  Math.abs(x  -  standardDeviation);  long  standardDeviation  =  Math.abs(x  -  standardDeviation);  [CE]  possible  loss  of  precision  [FE]            ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      double  mean  =  Math.abs(x  -  standardDeviation);  long  standardDeviation  =  Math.abs(x  -  standardDeviation);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	        double    mean    =    Math.abs(x    -    standardDeviation);    long  standardDeviation  =  Math.abs(x  -  standardDeviation);	  timeout    	non-compiled	[CE]  possible  loss  of  precision	17	None	add
162	[BUG]  [BUGGY]  final  double  dev  =  value  -  x;  [CE]  cannot  find  symbol  value  [FE]            ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  value  -  x;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  value  -  x;	  final    double    dev    =    mean    -    x;    timeout    	non-compiled	[CE]  cannot  find  symbol  value	14	None	replace
163	[BUG]  [BUGGY]  final  double  dev  =  mean  -  x;  final  double  dev  =  means  -  x;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]            ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  mean  -  x;  final  double  dev  =  means  -  x;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    mean    -    x;    final  double  dev  =  means  -  x;	  timeout    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	13	None	add
164	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.random()  *  Math.log(x));  [CE]  cannot  find  symbol  dev  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  double  mean  =  Math.sqrt(Math.random()  *  Math.log(x));  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.random()  *  Math.log(x));	      double    mean    =    Math.sqrt(Math.log(x));    	non-compiled	[CE]  cannot  find  symbol  dev	24	None	replace
165	[BUG]  [BUGGY]  timeout  [FE]            ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  Math.abs(x  -  mean);  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  Math.abs(x  -  mean);	  final    double    dev    =    mean    -    x;    timeout    	compilable	timeout	14	1	replace
166	[BUG]  [BUGGY]  final  double  dev  =  Math.abs(x  -  mean);  timeout  [FE]            ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  Math.abs(x  -  mean);  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  Math.abs(x  -  mean);	  final    double    dev    =    mean    -    x;    timeout    	compilable	timeout	14	1	replace
167	[BUG]  [BUGGY]  static  final  double  dev  =  x  -  mean;  [CE]  illegal  start  of  expression  [FE]              ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  static  final  double  dev  =  x  -  mean;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	static  final  double  dev  =  x  -  mean;	  final    double    dev    =    mean    -    x;    timeout    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
168	[BUG]  [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(standardDeviation);  [CE]  cannot  find  symbol  dev  [FE]              ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(standardDeviation);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.log(x)/  cumulativeProbability(standardDeviation);	      double    mean    =    Math.log(x)/    cumulativeProbability();    	non-compiled	[CE]  cannot  find  symbol  dev	7	None	replace
169	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  -  standardDeviation  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  final    double    dev    =    x    -    standardDeviation;    	compilable	  [FE]  ConvergenceException  	10	6	replace
170	[BUG]  [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [FE]  ConvergenceException  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  standardDeviation  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  final    double    dev    =    x    -    standardDeviation;    	compilable	  [FE]  ConvergenceException  	10	6	replace
171	[BUG]  [BUGGY]  Math.sqrt(Math.abs(x)/  2.0);  [CE]  cannot  find  symbol  dev  [FE]    ConvergenceException    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  Math.sqrt(Math.abs(x)/  2.0);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.sqrt(Math.abs(x)/  2.0);	      Math.sqrt(Math.log(x)/    2.0);    	non-compiled	[CE]  cannot  find  symbol  dev	22	None	replace
172	[BUG]  [BUGGY]  double  mean  =  Math.abs(standardDeviation);  [CE]  cannot  find  symbol  dev  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  double  mean  =  Math.abs(standardDeviation);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.abs(standardDeviation);	      double    mean    =    Math.abs(x);    	non-compiled	[CE]  cannot  find  symbol  dev	6	None	replace
173	[BUG]  [BUGGY]      double  mean  =  Math.sqrt(Math.log(x));  int  standardDeviation  =  Math.sqrt(Math.log(x));  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      double  mean  =  Math.sqrt(Math.log(x));  int  standardDeviation  =  Math.sqrt(Math.log(x));  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	        double    mean    =    Math.sqrt(Math.log(x));    int  standardDeviation  =  Math.sqrt(Math.log(x));	  	non-compiled	[CE]  possible  loss  of  precision	23	None	add
174	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  /  mean  +  1;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  /  mean  +  1;	  final    double    dev    =    x    -    mean    +    1;    	compilable	  [FE]  AssertionFailedError  	16	6	replace
175	[BUG]  [BUGGY]  final  double  dev  =  x  /  mean  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  /  mean  +  1;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  /  mean  +  1;	  final    double    dev    =    x    -    mean    +    1;    	compilable	  [FE]  AssertionFailedError  	16	6	replace
176	[BUG]  [BUGGY]  timeout  [FE]      AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  *  mean  +  1;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  *  mean  +  1;	  final    double    dev    =    x    -    mean    +    1;    	compilable	timeout	16	1	replace
177	[BUG]  [BUGGY]  final  double  dev  =  x  *  mean  +  1;  timeout  [FE]      AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  final  double  dev  =  x  *  mean  +  1;  [BUGGY]    try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  *  mean  +  1;	  final    double    dev    =    x    -    mean    +    1;    	compilable	timeout	16	1	replace
178	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      double  mean  =  Math.sqrt(Math.abs(x));  x  =  Math.sqrt(Math.abs(x));  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	        double    mean    =    Math.sqrt(Math.abs(x));    x  =  Math.sqrt(Math.abs(x));	  	compilable	  [FE]  AssertionFailedError  	19	6	add
179	[BUG]  [BUGGY]      double  mean  =  Math.sqrt(Math.abs(x));  x  =  Math.sqrt(Math.abs(x));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      double  mean  =  Math.sqrt(Math.abs(x));  x  =  Math.sqrt(Math.abs(x));  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	        double    mean    =    Math.sqrt(Math.abs(x));    x  =  Math.sqrt(Math.abs(x));	  	compilable	  [FE]  AssertionFailedError  	19	6	add
180	[BUG]  [BUGGY]  double  mean  =  Math.max(0,  Math.abs(x  -  1));  [CE]  cannot  find  symbol  dev  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  double  mean  =  Math.max(0,  Math.abs(x  -  1));  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.max(0,  Math.abs(x  -  1));	      double    mean    =    Math.max(0,    Math.abs(x));    	non-compiled	[CE]  cannot  find  symbol  dev	2	None	replace
181	[BUG]  [BUGGY]  double  mean  =  Math.max(1,  Math.abs(x));  [CE]  cannot  find  symbol  dev  [FE]      AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  double  mean  =  Math.max(1,  Math.abs(x));  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.max(1,  Math.abs(x));	      double    mean    =    Math.max(0,    Math.abs(x));    	non-compiled	[CE]  cannot  find  symbol  dev	2	None	replace
182	[BUG]  [BUGGY]      double  mean  =  Math.sqrt(x);  long  mean  =  Math.sqrt(x);  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]      double  mean  =  Math.sqrt(x);  long  mean  =  Math.sqrt(x);  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	        double    mean    =    Math.sqrt(x);    long  mean  =  Math.sqrt(x);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	3	None	add
183	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x  -  standardDeviation));  [CE]  cannot  find  symbol  dev  [FE]    AssertionFailedError    [CONTEXT]    public  double  cumulativeProbability(double  x)  throws  MathException  {    [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x  -  standardDeviation));  [BUGGY]    final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.abs(x  -  standardDeviation));	      double    mean    =    Math.sqrt(Math.abs(x));    	non-compiled	[CE]  cannot  find  symbol  dev	20	None	replace
