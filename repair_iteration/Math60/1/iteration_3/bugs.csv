bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Final  double  dev  =  x  -  mean;  [CE]  not  a  statement  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Final  double  dev  =  x  -  mean;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Final  double  dev  =  x  -  mean;	  final    double    dev    =    mean    -    x;    Final    double    dev    =    mean    -    x;    	non-compiled	[CE]  not  a  statement	33	None	replace
2	[BUG]  [BUGGY]  double  mean  =  Math.abs(x  /  1);  [CE]  cannot  find  symbol  dev  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(x  /  1);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.abs(x  /  1);	  double    mean    =    Math.abs(x    -    1);    	non-compiled	[CE]  cannot  find  symbol  dev	1	None	replace
3	[BUG]  [BUGGY]  double  mean  =  Math.abs(x  *  1);  [CE]  cannot  find  symbol  dev  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(x  *  1);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.abs(x  *  1);	  double    mean    =    Math.abs(x    -    1);    	non-compiled	[CE]  cannot  find  symbol  dev	1	None	replace
4	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  (x  -  standardDeviation);  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  (x  -  standardDeviation);	  final    double    dev    =    standardDeviation    -    x;    timeout    	compilable	  [FE]  AssertionFailedError  	136	6	replace
5	[BUG]  [BUGGY]  final  double  dev  =  (x  -  standardDeviation);  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  (x  -  standardDeviation);  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  (x  -  standardDeviation);	  final    double    dev    =    standardDeviation    -    x;    timeout    	compilable	  [FE]  AssertionFailedError  	136	6	replace
6	[BUG]  [BUGGY]  double  mean  =  Math.abs(Math.abs(x)/  2.0);  [CE]  cannot  find  symbol  dev  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(Math.abs(x)/  2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.abs(Math.abs(x)/  2.0);	  double    mean    =    Math.sqrt(Math.abs(x)/    2.0);    	non-compiled	[CE]  cannot  find  symbol  dev	71	None	replace
7	[BUG]  [BUGGY]  Double  mean  =  Math.sqrt(Math.abs(x)/  2.0);  [CE]  cannot  find  symbol  dev  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Double  mean  =  Math.sqrt(Math.abs(x)/  2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Double  mean  =  Math.sqrt(Math.abs(x)/  2.0);	  double    mean    =    Math.sqrt(Math.abs(x)/    2.0);    	non-compiled	[CE]  cannot  find  symbol  dev	71	None	replace
8	[BUG]  [BUGGY]  double  mean  =  Math.cos(Math.abs(x)/  2.0);  [CE]  cannot  find  symbol  dev  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.cos(Math.abs(x)/  2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.cos(Math.abs(x)/  2.0);	  double    mean    =    Math.sqrt(Math.abs(x)/    2.0);    	non-compiled	[CE]  cannot  find  symbol  dev	71	None	replace
9	[BUG]  [BUGGY]  double  mean  =  Math.log(x)/  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  dev  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.log(x)/  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.log(x)/  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  double    mean    =    Math.log(x)/    standardDeviation;    	non-compiled	[CE]  cannot  find  symbol  dev	26	None	replace
10	[BUG]  [BUGGY]  double  mean  =  Math.log(mean)/  standardDeviation;  [CE]  cannot  find  symbol  dev  [FE]                      ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.log(mean)/  standardDeviation;  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.log(mean)/  standardDeviation;	  double    mean    =    Math.log(x)/    standardDeviation;    	non-compiled	[CE]  cannot  find  symbol  dev	26	None	replace
11	[BUG]  [BUGGY]  double  mean  =  Math.log(x)/  dev;  [CE]  cannot  find  symbol  dev  [FE]                        ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.log(x)/  dev;  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.log(x)/  dev;	  double    mean    =    Math.log(x)/    standardDeviation;    	non-compiled	[CE]  cannot  find  symbol  dev	26	None	replace
12	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x)/  1);  [CE]  cannot  find  symbol  dev  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x)/  1);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.abs(x)/  1);	  double    mean    =    Math.sqrt(Math.abs(x)+    1);    	non-compiled	[CE]  cannot  find  symbol  dev	122	None	replace
13	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x)+  2);  [CE]  cannot  find  symbol  dev  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x)+  2);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.abs(x)+  2);	  double    mean    =    Math.sqrt(Math.abs(x)+    1);    	non-compiled	[CE]  cannot  find  symbol  dev	122	None	replace
14	[BUG]  [BUGGY]  final  double  mean  =  Math.abs(x);  [CE]  cannot  find  symbol  dev  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  mean  =  Math.abs(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  mean  =  Math.abs(x);	          double    mean    =    Math.abs(x);    final    double    mean    =    Math.abs(x);    	non-compiled	[CE]  cannot  find  symbol  dev	77	None	replace
15	[BUG]  [BUGGY]  null  mean  =  Math.abs(x);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  null  mean  =  Math.abs(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	null  mean  =  Math.abs(x);	          double    mean    =    Math.abs(x);    final    double    mean    =    Math.abs(x);    	non-compiled	[CE]  not  a  statement	77	None	replace
16	[BUG]  [BUGGY]  final  double  dev  =  x0  -  mean  +  1;  [CE]  cannot  find  symbol  x0  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x0  -  mean  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x0  -  mean  +  1;	  final    double    dev    =    x    -    mean    +    1;    final    double    dev    =    x    -    mean    +    1;    	non-compiled	[CE]  cannot  find  symbol  x0	106	None	replace
17	[BUG]  [BUGGY]          double    mean    =    Math.sqrt(Math.log(x));    Math.sqrt(Math.log(x));  double  mean  =  Math.sqrt(Math.log(x));  Math.sqrt(Math.log(x));  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          double    mean    =    Math.sqrt(Math.log(x));    Math.sqrt(Math.log(x));  double  mean  =  Math.sqrt(Math.log(x));  Math.sqrt(Math.log(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                double        mean        =        Math.sqrt(Math.log(x));        Math.sqrt(Math.log(x));    double  mean  =  Math.sqrt(Math.log(x));  Math.sqrt(Math.log(x));	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	147	None	add
18	[BUG]  [BUGGY]          double    mean    =    Math.sqrt(Math.log(x));    Math.sqrt(Math.log(x));  Double  mean  =  Math.sqrt(Math.log(x));  Math.sqrt(Math.log(x));  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          double    mean    =    Math.sqrt(Math.log(x));    Math.sqrt(Math.log(x));  Double  mean  =  Math.sqrt(Math.log(x));  Math.sqrt(Math.log(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                double        mean        =        Math.sqrt(Math.log(x));        Math.sqrt(Math.log(x));    Double  mean  =  Math.sqrt(Math.log(x));  Math.sqrt(Math.log(x));	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	147	None	add
19	[BUG]  [BUGGY]          double    mean    =    Math.sqrt(Math.log(x));    Math.sqrt(Math.log(x));  double  mean  =  Math.sqrt(Math.log(y));  Math.sqrt(Math.log(x));  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]        AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          double    mean    =    Math.sqrt(Math.log(x));    Math.sqrt(Math.log(x));  double  mean  =  Math.sqrt(Math.log(y));  Math.sqrt(Math.log(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                double        mean        =        Math.sqrt(Math.log(x));        Math.sqrt(Math.log(x));    double  mean  =  Math.sqrt(Math.log(y));  Math.sqrt(Math.log(x));	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	147	None	add
20	[BUG]  [BUGGY]          double    mean    =    Math.sqrt(Math.log(x));    Math.sqrt(Math.log(x));  double  mean  =  Math.log(Math.log(x));  Math.sqrt(Math.log(x));  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]          AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          double    mean    =    Math.sqrt(Math.log(x));    Math.sqrt(Math.log(x));  double  mean  =  Math.log(Math.log(x));  Math.sqrt(Math.log(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                double        mean        =        Math.sqrt(Math.log(x));        Math.sqrt(Math.log(x));    double  mean  =  Math.log(Math.log(x));  Math.sqrt(Math.log(x));	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	147	None	add
21	[BUG]  [BUGGY]          double    mean    =    Math.sqrt(Math.log(x));    Math.sqrt(Math.log(x));  double  mean  =  Math.sqrt(Math.log(x));  Math.sqrt(Math.log(y));  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]            AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          double    mean    =    Math.sqrt(Math.log(x));    Math.sqrt(Math.log(x));  double  mean  =  Math.sqrt(Math.log(x));  Math.sqrt(Math.log(y));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                double        mean        =        Math.sqrt(Math.log(x));        Math.sqrt(Math.log(x));    double  mean  =  Math.sqrt(Math.log(x));  Math.sqrt(Math.log(y));	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	147	None	add
22	[BUG]  [BUGGY]  Math.sqrt(Math.pow(10,  y)/  2.0);  [CE]  cannot  find  symbol  y  [FE]          ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Math.sqrt(Math.pow(10,  y)/  2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.sqrt(Math.pow(10,  y)/  2.0);	  Math.sqrt(Math.pow(10,    x)/    2.0);    	non-compiled	[CE]  cannot  find  symbol  y	30	None	replace
23	[BUG]  [BUGGY]  Math.sqrt(Math.pow(10,  x  +  1)/  2.0);  [CE]  cannot  find  symbol  dev  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Math.sqrt(Math.pow(10,  x  +  1)/  2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.sqrt(Math.pow(10,  x  +  1)/  2.0);	  Math.sqrt(Math.pow(10,    x)/    2.0);    	non-compiled	[CE]  cannot  find  symbol  dev	30	None	replace
24	[BUG]  [BUGGY]  Math.sqrt(Math.pow(10,  X)/  2.0);  [CE]  cannot  find  symbol  X  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Math.sqrt(Math.pow(10,  X)/  2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.sqrt(Math.pow(10,  X)/  2.0);	  Math.sqrt(Math.pow(10,    x)/    2.0);    	non-compiled	[CE]  cannot  find  symbol  X	30	None	replace
25	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  mean  *  x;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  mean  *  x;	  final    double    dev    =    mean    -    x;    final    double    dev    =    mean    *    x;    	compilable	  [FE]  AssertionFailedError  	137	6	replace
26	[BUG]  [BUGGY]  final  double  dev  =  mean  *  x;  [FE]  AssertionFailedError  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  mean  *  x;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  mean  *  x;	  final    double    dev    =    mean    -    x;    final    double    dev    =    mean    *    x;    	compilable	  [FE]  AssertionFailedError  	137	6	replace
27	[BUG]  [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(x,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  cannot  find  symbol  dev  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(x,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.log(x)/  cumulativeProbability(x,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  double    mean    =    Math.log(x)/    cumulativeProbability(x);    	non-compiled	[CE]  cannot  find  symbol  dev	36	None	replace
28	[BUG]  [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(x  +  1);  [CE]  cannot  find  symbol  dev  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(x  +  1);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.log(x)/  cumulativeProbability(x  +  1);	  double    mean    =    Math.log(x)/    cumulativeProbability(x);    	non-compiled	[CE]  cannot  find  symbol  dev	36	None	replace
29	[BUG]  [BUGGY]  double  mean  =  Math.abs(mean  *  standardDeviation);  [CE]  cannot  find  symbol  dev  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(mean  *  standardDeviation);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.abs(mean  *  standardDeviation);	          double    mean    =    Math.abs(x    -    standardDeviation);    double    mean    =    Math.abs(x    *    standardDeviation);    	non-compiled	[CE]  cannot  find  symbol  dev	11	None	replace
30	[BUG]  [BUGGY]  double  mean  =  Math.abs(mean  /  standardDeviation);  [CE]  cannot  find  symbol  dev  [FE]                      ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(mean  /  standardDeviation);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.abs(mean  /  standardDeviation);	          double    mean    =    Math.abs(x    -    standardDeviation);    double    mean    =    Math.abs(x    *    standardDeviation);    	non-compiled	[CE]  cannot  find  symbol  dev	11	None	replace
31	[BUG]  [BUGGY]  double  mean  =  Math.max(0,  Math.abs(x)/  1);  [CE]  cannot  find  symbol  dev  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.max(0,  Math.abs(x)/  1);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.max(0,  Math.abs(x)/  1);	  double    mean    =    Math.max(0,    Math.abs(x)+    1);    	non-compiled	[CE]  cannot  find  symbol  dev	141	None	replace
32	[BUG]  [BUGGY]  double  mean  =  Math.max(0,  Math.abs(x)+  2);  [CE]  cannot  find  symbol  dev  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.max(0,  Math.abs(x)+  2);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.max(0,  Math.abs(x)+  2);	  double    mean    =    Math.max(0,    Math.abs(x)+    1);    	non-compiled	[CE]  cannot  find  symbol  dev	141	None	replace
33	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  -  standardDeviation  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;	  final    double    dev    =    x    -    standardDeviation    *    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  AssertionFailedError  	170	6	replace
34	[BUG]  [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [FE]  AssertionFailedError  [FE]    ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  standardDeviation  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;	  final    double    dev    =    x    -    standardDeviation    *    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  AssertionFailedError  	170	6	replace
35	[BUG]  [BUGGY]  timeout  [FE]      ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  standardDeviation  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  /  standardDeviation  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  final    double    dev    =    x    -    standardDeviation    *    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	timeout	170	1	replace
36	[BUG]  [BUGGY]  final  double  dev  =  x  /  standardDeviation  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  timeout  [FE]      ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  standardDeviation  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  /  standardDeviation  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  final    double    dev    =    x    -    standardDeviation    *    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	timeout	170	1	replace
37	[BUG]  [BUGGY]  timeout  [FE]        ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  *  standardDeviation  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  *  standardDeviation  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  final    double    dev    =    x    -    standardDeviation    *    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	timeout	170	1	replace
38	[BUG]  [BUGGY]  final  double  dev  =  x  *  standardDeviation  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  timeout  [FE]        ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  *  standardDeviation  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  *  standardDeviation  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  final    double    dev    =    x    -    standardDeviation    *    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	timeout	170	1	replace
39	[BUG]  [BUGGY]  double  mean  =  Math.max(2,  Math.abs(x));  [CE]  cannot  find  symbol  dev  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.max(2,  Math.abs(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.max(2,  Math.abs(x));	  double    mean    =    Math.max(1,    Math.abs(x));    	non-compiled	[CE]  cannot  find  symbol  dev	181	None	replace
40	[BUG]  [BUGGY]  double  mean  =  Math.max(5,  Math.abs(x));  [CE]  cannot  find  symbol  dev  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.max(5,  Math.abs(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.max(5,  Math.abs(x));	  double    mean    =    Math.max(1,    Math.abs(x));    	non-compiled	[CE]  cannot  find  symbol  dev	181	None	replace
41	[BUG]  [BUGGY]  final  double  dev  =  x  /  standardDeviation;  final  double  dev  =  x  /  standardDeviation;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]    ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  standardDeviation;  final  double  dev  =  x  /  standardDeviation;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    /    standardDeviation;    final  double  dev  =  x  /  standardDeviation;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	94	None	add
42	[BUG]  [BUGGY]  final  double  dev  =  x  /  standardDeviation;  final  double  dev  =  x  /  standardsDeviation;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]      ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  standardDeviation;  final  double  dev  =  x  /  standardsDeviation;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    /    standardDeviation;    final  double  dev  =  x  /  standardsDeviation;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	94	None	add
43	[BUG]  [BUGGY]  final  double  dev  =  x  /  standardDeviation;  final  double  dev  =  x  /  StandardDeviation;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]        ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  standardDeviation;  final  double  dev  =  x  /  StandardDeviation;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    /    standardDeviation;    final  double  dev  =  x  /  StandardDeviation;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	94	None	add
44	[BUG]  [BUGGY]  final  double  dev  =  x  /  standardDeviation;  Final  double  dev  =  x  /  standardDeviation;  [CE]  not  a  statement  [FE]          ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  standardDeviation;  Final  double  dev  =  x  /  standardDeviation;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    /    standardDeviation;    Final  double  dev  =  x  /  standardDeviation;	  	non-compiled	[CE]  not  a  statement	94	None	add
45	[BUG]  [BUGGY]  final  double  dev  =  x  /  mean  *  SQRT2PI;  final  double  dev  =  x  /  mean  *  SQRT2PI;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  mean  *  SQRT2PI;  final  double  dev  =  x  /  mean  *  SQRT2PI;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    /    mean    *    SQRT2PI;    final  double  dev  =  x  /  mean  *  SQRT2PI;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	46	None	add
46	[BUG]  [BUGGY]  final  double  dev  =  x  /  mean  *  SQRT2PI;  Final  double  dev  =  x  /  mean  *  SQRT2PI;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  mean  *  SQRT2PI;  Final  double  dev  =  x  /  mean  *  SQRT2PI;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    /    mean    *    SQRT2PI;    Final  double  dev  =  x  /  mean  *  SQRT2PI;	  	non-compiled	[CE]  not  a  statement	46	None	add
47	[BUG]  [BUGGY]  final  double  dev  =  x  /  mean  *  SQRT2PI;  final  double  dev  =  x  /  mean  *  SqRT2PI;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]        AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  mean  *  SQRT2PI;  final  double  dev  =  x  /  mean  *  SqRT2PI;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    /    mean    *    SQRT2PI;    final  double  dev  =  x  /  mean  *  SqRT2PI;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	46	None	add
48	[BUG]  [BUGGY]  final  double  dev  =  x  /  mean  *  SQRT2PI;  final  double  dev  =  x  -  mean  *  SQRT2PI;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]          AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  mean  *  SQRT2PI;  final  double  dev  =  x  -  mean  *  SQRT2PI;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    /    mean    *    SQRT2PI;    final  double  dev  =  x  -  mean  *  SQRT2PI;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	46	None	add
49	[BUG]  [BUGGY]          double    mean    =    Math.sqrt(Math.log(x));    x  =  Math.sqrt(Math.log(x));  double  mean  =  Math.sqrt(Math.log(x));  x  =  Math.sqrt(Math.log(x));  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          double    mean    =    Math.sqrt(Math.log(x));    x  =  Math.sqrt(Math.log(x));  double  mean  =  Math.sqrt(Math.log(x));  x  =  Math.sqrt(Math.log(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                double        mean        =        Math.sqrt(Math.log(x));        x    =    Math.sqrt(Math.log(x));    double  mean  =  Math.sqrt(Math.log(x));  x  =  Math.sqrt(Math.log(x));	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	86	None	add
50	[BUG]  [BUGGY]          double    mean    =    Math.sqrt(Math.log(x));    x  =  Math.sqrt(Math.log(x));  Double  mean  =  Math.sqrt(Math.log(x));  x  =  Math.sqrt(Math.log(x));  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          double    mean    =    Math.sqrt(Math.log(x));    x  =  Math.sqrt(Math.log(x));  Double  mean  =  Math.sqrt(Math.log(x));  x  =  Math.sqrt(Math.log(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                double        mean        =        Math.sqrt(Math.log(x));        x    =    Math.sqrt(Math.log(x));    Double  mean  =  Math.sqrt(Math.log(x));  x  =  Math.sqrt(Math.log(x));	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	86	None	add
51	[BUG]  [BUGGY]          double    mean    =    Math.sqrt(Math.log(x));    x  =  Math.sqrt(Math.log(x));  double  mean  =  Math.sqrt(Math.log(y));  x  =  Math.sqrt(Math.log(x));  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]        AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          double    mean    =    Math.sqrt(Math.log(x));    x  =  Math.sqrt(Math.log(x));  double  mean  =  Math.sqrt(Math.log(y));  x  =  Math.sqrt(Math.log(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                double        mean        =        Math.sqrt(Math.log(x));        x    =    Math.sqrt(Math.log(x));    double  mean  =  Math.sqrt(Math.log(y));  x  =  Math.sqrt(Math.log(x));	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	86	None	add
52	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          double    mean    =    Math.sqrt(Math.log(x));    x  =  Math.sqrt(Math.log(x));  x  =  Math.sqrt(Math.log(x));  x  =  Math.sqrt(Math.log(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	                double        mean        =        Math.sqrt(Math.log(x));        x    =    Math.sqrt(Math.log(x));    x  =  Math.sqrt(Math.log(x));  x  =  Math.sqrt(Math.log(x));	  	compilable	  [FE]  AssertionFailedError  	86	7	add
53	[BUG]  [BUGGY]          double    mean    =    Math.sqrt(Math.log(x));    x  =  Math.sqrt(Math.log(x));  x  =  Math.sqrt(Math.log(x));  x  =  Math.sqrt(Math.log(x));  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          double    mean    =    Math.sqrt(Math.log(x));    x  =  Math.sqrt(Math.log(x));  x  =  Math.sqrt(Math.log(x));  x  =  Math.sqrt(Math.log(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                double        mean        =        Math.sqrt(Math.log(x));        x    =    Math.sqrt(Math.log(x));    x  =  Math.sqrt(Math.log(x));  x  =  Math.sqrt(Math.log(x));	  	compilable	  [FE]  AssertionFailedError  	86	7	add
54	[BUG]  [BUGGY]          double    mean    =    Math.sqrt(Math.log(x));    x  =  Math.sqrt(Math.log(x));  double  mean  =  Math.log(Math.log(x));  x  =  Math.sqrt(Math.log(x));  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]            AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          double    mean    =    Math.sqrt(Math.log(x));    x  =  Math.sqrt(Math.log(x));  double  mean  =  Math.log(Math.log(x));  x  =  Math.sqrt(Math.log(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                double        mean        =        Math.sqrt(Math.log(x));        x    =    Math.sqrt(Math.log(x));    double  mean  =  Math.log(Math.log(x));  x  =  Math.sqrt(Math.log(x));	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	86	None	add
55	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(x  /  1);  [CE]  cannot  find  symbol  dev  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(x  /  1);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(x  /  1);	  double    mean    =    Math.sqrt(x    -    1);    	non-compiled	[CE]  cannot  find  symbol  dev	82	None	replace
56	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(x  -  2);  [CE]  cannot  find  symbol  dev  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(x  -  2);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(x  -  2);	  double    mean    =    Math.sqrt(x    -    1);    	non-compiled	[CE]  cannot  find  symbol  dev	82	None	replace
57	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(x  *  1);  [CE]  cannot  find  symbol  dev  [FE]                AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(x  *  1);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(x  *  1);	  double    mean    =    Math.sqrt(x    -    1);    	non-compiled	[CE]  cannot  find  symbol  dev	82	None	replace
58	[BUG]  [BUGGY]  timeout  [FE]    ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  final    double    dev    =    x    *    standardDeviation;    	compilable	timeout	119	1	replace
59	[BUG]  [BUGGY]  final  double  dev  =  x  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  timeout  [FE]    ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  final    double    dev    =    x    *    standardDeviation;    	compilable	timeout	119	1	replace
60	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  *  SQRT2PI;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  *  SQRT2PI;	  final    double    dev    =    x    *    standardDeviation;    	compilable	  [FE]  AssertionFailedError  	119	6	replace
61	[BUG]  [BUGGY]  final  double  dev  =  x  *  SQRT2PI;  [FE]  AssertionFailedError  [FE]      ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  *  SQRT2PI;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  *  SQRT2PI;	  final    double    dev    =    x    *    standardDeviation;    	compilable	  [FE]  AssertionFailedError  	119	6	replace
62	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  *  100;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  *  100;	  final    double    dev    =    x    *    standardDeviation;    	compilable	  [FE]  AssertionFailedError  	119	6	replace
63	[BUG]  [BUGGY]  final  double  dev  =  x  *  100;  [FE]  AssertionFailedError  [FE]        ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  *  100;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  *  100;	  final    double    dev    =    x    *    standardDeviation;    	compilable	  [FE]  AssertionFailedError  	119	6	replace
64	[BUG]  [BUGGY]  double  mean  =  Math.abs(Math.abs(x));  [CE]  cannot  find  symbol  dev  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(Math.abs(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.abs(Math.abs(x));	          double    mean    =    Math.sqrt(Math.abs(x));    double    mean    =    Math.abs(Math.abs(x));    	non-compiled	[CE]  cannot  find  symbol  dev	64	None	replace
65	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.log(x)+  1);  [CE]  cannot  find  symbol  dev  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.log(x)+  1);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.log(x)+  1);	          double    mean    =    Math.sqrt(Math.log(x));    double    mean    =    Math.sqrt(Math.log(x));    	non-compiled	[CE]  cannot  find  symbol  dev	83	None	replace
66	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.floor(x));  [CE]  cannot  find  symbol  dev  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.floor(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.floor(x));	          double    mean    =    Math.sqrt(Math.log(x));    double    mean    =    Math.sqrt(Math.log(x));    	non-compiled	[CE]  cannot  find  symbol  dev	83	None	replace
67	[BUG]  [BUGGY]  Double  mean  =  Math.sqrt(Math.log(x));  [CE]  cannot  find  symbol  dev  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Double  mean  =  Math.sqrt(Math.log(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Double  mean  =  Math.sqrt(Math.log(x));	          double    mean    =    Math.sqrt(Math.log(x));    double    mean    =    Math.sqrt(Math.log(x));    	non-compiled	[CE]  cannot  find  symbol  dev	83	None	replace
68	[BUG]  [BUGGY]  Math.rint(Math.log(x)/  2.0);  Math.rint(Math.log(x)/  2.0);  [CE]  cannot  find  symbol  dev  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Math.rint(Math.log(x)/  2.0);  Math.rint(Math.log(x)/  2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.rint(Math.log(x)/  2.0);  Math.rint(Math.log(x)/  2.0);	          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(y)/    2.0);    	non-compiled	[CE]  cannot  find  symbol  dev	115	None	replace
69	[BUG]  [BUGGY]  Math.log(x)/  2.0;  Math.sqrt(Math.log(x)/  2.0);  [CE]  not  a  statement  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Math.log(x)/  2.0;  Math.sqrt(Math.log(x)/  2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.log(x)/  2.0;  Math.sqrt(Math.log(x)/  2.0);	          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(y)/    2.0);    	non-compiled	[CE]  not  a  statement	115	None	replace
70	[BUG]  [BUGGY]  Math.exp(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  2.0);  [CE]  cannot  find  symbol  dev  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Math.exp(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.exp(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  2.0);	          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(y)/    2.0);    	non-compiled	[CE]  cannot  find  symbol  dev	115	None	replace
71	[BUG]  [BUGGY]  double  mean  =  Math.abs(mean  -  standardsDeviation);  [CE]  cannot  find  symbol  standardsDeviation  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(mean  -  standardsDeviation);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.abs(mean  -  standardsDeviation);	          double    mean    =    Math.abs(x    -    standardDeviation);    double    mean    =    Math.abs(x    -    standardsDeviation);    	non-compiled	[CE]  cannot  find  symbol  standardsDeviation	10	None	replace
72	[BUG]  [BUGGY]  double  mean  =  Math.abs(standardDeviation  -  x);  [CE]  cannot  find  symbol  dev  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(standardDeviation  -  x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.abs(standardDeviation  -  x);	          double    mean    =    Math.abs(x    -    standardDeviation);    double    mean    =    Math.abs(x    -    standardsDeviation);    	non-compiled	[CE]  cannot  find  symbol  dev	10	None	replace
73	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  final  double  dev  =  x  -  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]    ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  final  double  dev  =  x  -  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    mean    *    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    final  double  dev  =  x  -  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	40	None	add
74	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  Final  double  dev  =  x  -  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  not  a  statement  [FE]      ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  Final  double  dev  =  x  -  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    mean    *    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    Final  double  dev  =  x  -  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  	non-compiled	[CE]  not  a  statement	40	None	add
75	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  static  final  double  dev  =  x  -  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  expression  [FE]        ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  static  final  double  dev  =  x  -  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    mean    *    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    static  final  double  dev  =  x  -  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
76	[BUG]  [BUGGY]  Math.rint(Math.log(x)/  2.0);  Math.rint(Math.log(x)/  3.0);  [CE]  cannot  find  symbol  dev  [FE]    ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Math.rint(Math.log(x)/  2.0);  Math.rint(Math.log(x)/  3.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.rint(Math.log(x)/  2.0);  Math.rint(Math.log(x)/  3.0);	          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/    3.0);    	non-compiled	[CE]  cannot  find  symbol  dev	117	None	replace
77	[BUG]  [BUGGY]  Math.pow(10,  Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  3.0);  [CE]  cannot  find  symbol  dev  [FE]      ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Math.pow(10,  Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  3.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.pow(10,  Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  3.0);	          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/    3.0);    	non-compiled	[CE]  cannot  find  symbol  dev	117	None	replace
78	[BUG]  [BUGGY]  Math.rint(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  3.0);  [CE]  cannot  find  symbol  dev  [FE]        ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Math.rint(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  3.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.rint(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  3.0);	          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/    3.0);    	non-compiled	[CE]  cannot  find  symbol  dev	117	None	replace
79	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  this.mean  /  x;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  this.mean  /  x;	  final    double    dev    =    this.mean    -    x;    timeout    	compilable	  [FE]  AssertionFailedError  	61	6	replace
80	[BUG]  [BUGGY]  final  double  dev  =  this.mean  /  x;  [FE]  AssertionFailedError  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  this.mean  /  x;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  this.mean  /  x;	  final    double    dev    =    this.mean    -    x;    timeout    	compilable	  [FE]  AssertionFailedError  	61	6	replace
81	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]                      ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  this.mean;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  -  this.mean;	  final    double    dev    =    this.mean    -    x;    timeout    	compilable	  [FE]  ConvergenceException  	61	1	replace
82	[BUG]  [BUGGY]  final  double  dev  =  x  -  this.mean;  [FE]  ConvergenceException  [FE]                      ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  this.mean;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  this.mean;	  final    double    dev    =    this.mean    -    x;    timeout    	compilable	  [FE]  ConvergenceException  	61	1	replace
83	[BUG]  [BUGGY]  final  double  dev  =  this.mean  -  x0;  [CE]  cannot  find  symbol  x0  [FE]                        ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  this.mean  -  x0;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  this.mean  -  x0;	  final    double    dev    =    this.mean    -    x;    timeout    	non-compiled	[CE]  cannot  find  symbol  x0	61	None	replace
84	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  SqRT2PI;  [CE]  cannot  find  symbol  SqRT2PI  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  *  SqRT2PI;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  mean  *  SqRT2PI;	  final    double    dev    =    x    -    mean    *    SQRT2PI;    final    double    dev    =    x    -    mean    *    SqRT2PI;    	non-compiled	[CE]  cannot  find  symbol  SqRT2PI	68	None	replace
85	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  *  SQRT2PI  -  mean  *  SQRT2PI;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  *  SQRT2PI  -  mean  *  SQRT2PI;	  final    double    dev    =    x    -    mean    *    SQRT2PI;    final    double    dev    =    x    -    mean    *    SqRT2PI;    	compilable	  [FE]  AssertionFailedError  	68	6	replace
86	[BUG]  [BUGGY]  final  double  dev  =  x  *  SQRT2PI  -  mean  *  SQRT2PI;  [FE]  AssertionFailedError  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  *  SQRT2PI  -  mean  *  SQRT2PI;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  *  SQRT2PI  -  mean  *  SQRT2PI;	  final    double    dev    =    x    -    mean    *    SQRT2PI;    final    double    dev    =    x    -    mean    *    SqRT2PI;    	compilable	  [FE]  AssertionFailedError  	68	6	replace
87	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  x;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  -  x;	  final    double    dev    =    value    -    x;    	compilable	  [FE]  AssertionFailedError  	162	6	replace
88	[BUG]  [BUGGY]  final  double  dev  =  x  -  x;  [FE]  AssertionFailedError  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  x;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  x;	  final    double    dev    =    value    -    x;    	compilable	  [FE]  AssertionFailedError  	162	6	replace
89	[BUG]  [BUGGY]  final  double  dev  =  value  -  x0;  [CE]  cannot  find  symbol  value  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  value  -  x0;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  value  -  x0;	  final    double    dev    =    value    -    x;    	non-compiled	[CE]  cannot  find  symbol  value	162	None	replace
90	[BUG]  [BUGGY]  final  double  dev  =  x  -  value;  [CE]  cannot  find  symbol  value  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  value;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  value;	  final    double    dev    =    value    -    x;    	non-compiled	[CE]  cannot  find  symbol  value	162	None	replace
91	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.log(x));  double  standardDeviation  =  FastMath.sqrt(Math.log(x));  [CE]  cannot  find  symbol  dev  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.log(x));  double  standardDeviation  =  FastMath.sqrt(Math.log(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.log(x));  double  standardDeviation  =  FastMath.sqrt(Math.log(x));	          double    mean    =    Math.sqrt(Math.log(x));    int    standardDeviation    =    FastMath.sqrt(Math.log(x));    	non-compiled	[CE]  cannot  find  symbol  dev	146	None	replace
92	[BUG]  [BUGGY]  double  standardDeviation  =  FastMath.sqrt(Math.log(x));  [CE]  cannot  find  symbol  dev  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  standardDeviation  =  FastMath.sqrt(Math.log(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  standardDeviation  =  FastMath.sqrt(Math.log(x));	          double    mean    =    Math.sqrt(Math.log(x));    int    standardDeviation    =    FastMath.sqrt(Math.log(x));    	non-compiled	[CE]  cannot  find  symbol  dev	146	None	replace
93	[BUG]  [BUGGY]  null  mean  =  Math.sqrt(x);  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  null  mean  =  Math.sqrt(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	null  mean  =  Math.sqrt(x);	          double    mean    =    Math.sqrt(x);    long    mean    =    Math.sqrt(x);    	non-compiled	[CE]  not  a  statement	182	None	replace
94	[BUG]  [BUGGY]  long  mean  =  Math.sqrt(x);  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  long  mean  =  Math.sqrt(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	long  mean  =  Math.sqrt(x);	          double    mean    =    Math.sqrt(x);    long    mean    =    Math.sqrt(x);    	non-compiled	[CE]  possible  loss  of  precision	182	None	replace
95	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(x,  standardDeviation);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(x,  standardDeviation);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(x,  standardDeviation);	          double    mean    =    Math.sqrt(x);    long    mean    =    Math.sqrt(x);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	182	None	replace
96	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.exp(x)/  2.0);  [CE]  cannot  find  symbol  dev  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.exp(x)/  2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.exp(x)/  2.0);	  double    mean    =    Math.sqrt(Math.log(x)/    2.0);    	non-compiled	[CE]  cannot  find  symbol  dev	124	None	replace
97	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.random()  /  2.0);  [CE]  cannot  find  symbol  dev  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.random()  /  2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.random()  /  2.0);	  double    mean    =    Math.sqrt(Math.log(x)/    2.0);    	non-compiled	[CE]  cannot  find  symbol  dev	124	None	replace
98	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean;  cumulativeProbability  =  System.currentTimeMillis();  [CE]  cannot  find  symbol  cumulativeProbability  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean;  cumulativeProbability  =  System.currentTimeMillis();  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  mean;  cumulativeProbability  =  System.currentTimeMillis();	  final    double    dev    =    x    -    mean;    timeout    =    System.currentTimeMillis();    	non-compiled	[CE]  cannot  find  symbol  cumulativeProbability	58	None	replace
99	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean.doubleValue();  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  mean.doubleValue();	  final    double    dev    =    x    -    mean;    timeout    =    System.currentTimeMillis();    	non-compiled	[CE]  double  cannot  be  dereferenced	58	None	replace
100	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean.doubleValue();  timeout  =  System.currentTimeMillis();  [CE]  double  cannot  be  dereferenced  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean.doubleValue();  timeout  =  System.currentTimeMillis();  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  mean.doubleValue();  timeout  =  System.currentTimeMillis();	  final    double    dev    =    x    -    mean;    timeout    =    System.currentTimeMillis();    	non-compiled	[CE]  double  cannot  be  dereferenced	58	None	replace
101	[BUG]  [BUGGY]  timeout  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  *  2  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  -  mean  *  2  +  1;	  final    double    dev    =    x    -    mean    *    1    +    1;    	compilable	timeout	23	1	replace
102	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  2  +  1;  timeout  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  *  2  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  mean  *  2  +  1;	  final    double    dev    =    x    -    mean    *    1    +    1;    	compilable	timeout	23	1	replace
103	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  1  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  -  standardDeviation  *  1  +  1;	  final    double    dev    =    x    -    mean    *    1    +    1;    	compilable	  [FE]  ConvergenceException  	23	5	replace
104	[BUG]  [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  1  +  1;  [FE]  ConvergenceException  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  1  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  standardDeviation  *  1  +  1;	  final    double    dev    =    x    -    mean    *    1    +    1;    	compilable	  [FE]  ConvergenceException  	23	5	replace
105	[BUG]  [BUGGY]  timeout  [FE]        AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  *  4  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  -  mean  *  4  +  1;	  final    double    dev    =    x    -    mean    *    1    +    1;    	compilable	timeout	23	1	replace
106	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  4  +  1;  timeout  [FE]        AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  *  4  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  mean  *  4  +  1;	  final    double    dev    =    x    -    mean    *    1    +    1;    	compilable	timeout	23	1	replace
107	[BUG]  [BUGGY]  double  standardDeviation  =  Math.sqrt(Math.abs(x));  [CE]  cannot  find  symbol  dev  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  standardDeviation  =  Math.sqrt(Math.abs(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  standardDeviation  =  Math.sqrt(Math.abs(x));	          double    mean    =    Math.sqrt(Math.abs(x));    long    standardDeviation    =    Math.sqrt(Math.abs(x));    	non-compiled	[CE]  cannot  find  symbol  dev	65	None	replace
108	[BUG]  [BUGGY]  int  standardDeviation  =  Math.sqrt(Math.abs(x));  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  int  standardDeviation  =  Math.sqrt(Math.abs(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	int  standardDeviation  =  Math.sqrt(Math.abs(x));	          double    mean    =    Math.sqrt(Math.abs(x));    long    standardDeviation    =    Math.sqrt(Math.abs(x));    	non-compiled	[CE]  possible  loss  of  precision	65	None	replace
109	[BUG]  [BUGGY]  long  standardDeviation  =  Math.sqrt(Math.abs(x));  [CE]  possible  loss  of  precision  [FE]                  AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  long  standardDeviation  =  Math.sqrt(Math.abs(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	long  standardDeviation  =  Math.sqrt(Math.abs(x));	          double    mean    =    Math.sqrt(Math.abs(x));    long    standardDeviation    =    Math.sqrt(Math.abs(x));    	non-compiled	[CE]  possible  loss  of  precision	65	None	replace
110	[BUG]  [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  2;  final  double  dev  =  x  -  standardDeviation  *  2;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  2;  final  double  dev  =  x  -  standardDeviation  *  2;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    standardDeviation    *    2;    final  double  dev  =  x  -  standardDeviation  *  2;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	120	None	add
111	[BUG]  [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  2;  Final  double  dev  =  x  -  standardDeviation  *  2;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  2;  Final  double  dev  =  x  -  standardDeviation  *  2;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    standardDeviation    *    2;    Final  double  dev  =  x  -  standardDeviation  *  2;	  	non-compiled	[CE]  not  a  statement	120	None	add
112	[BUG]  [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  2;  final  double  dev  =  x  -  StandardDeviation  *  2;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]        AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  2;  final  double  dev  =  x  -  StandardDeviation  *  2;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    standardDeviation    *    2;    final  double  dev  =  x  -  StandardDeviation  *  2;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	120	None	add
113	[BUG]  [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  2;  final  double  dev  =  x  -  standardsDeviation  *  2;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]          AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  2;  final  double  dev  =  x  -  standardsDeviation  *  2;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    standardDeviation    *    2;    final  double  dev  =  x  -  standardsDeviation  *  2;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	120	None	add
114	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  2.0;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  /  2.0;	  final    double    dev    =    x    /    standardDeviation;    	compilable	  [FE]  ConvergenceException  	95	6	replace
115	[BUG]  [BUGGY]  final  double  dev  =  x  /  2.0;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  2.0;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  /  2.0;	  final    double    dev    =    x    /    standardDeviation;    	compilable	  [FE]  ConvergenceException  	95	6	replace
116	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  100;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  /  100;	  final    double    dev    =    x    /    standardDeviation;    	compilable	  [FE]  AssertionFailedError  	95	6	replace
117	[BUG]  [BUGGY]  final  double  dev  =  x  /  100;  [FE]  AssertionFailedError  [FE]      ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  100;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  /  100;	  final    double    dev    =    x    /    standardDeviation;    	compilable	  [FE]  AssertionFailedError  	95	6	replace
118	[BUG]  [BUGGY]  double  mean  =  Math.abs(mean);  [CE]  cannot  find  symbol  dev  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(mean);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.abs(mean);	  double    mean    =    Math.abs(standardDeviation);    	non-compiled	[CE]  cannot  find  symbol  dev	172	None	replace
119	[BUG]  [BUGGY]  double  mean  =  Math.abs(dev);  [CE]  cannot  find  symbol  dev  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(dev);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.abs(dev);	  double    mean    =    Math.abs(standardDeviation);    	non-compiled	[CE]  cannot  find  symbol  dev	172	None	replace
120	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.random()  +  x);  [CE]  cannot  find  symbol  dev  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.random()  +  x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.random()  +  x);	  double    mean    =    Math.sqrt(Math.random());    	non-compiled	[CE]  cannot  find  symbol  dev	123	None	replace
121	[BUG]  [BUGGY]  timeout  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  standardDeviation  /  x;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  standardDeviation  /  x;	  final    double    dev    =    mean    /    x;    	compilable	timeout	99	1	replace
122	[BUG]  [BUGGY]  final  double  dev  =  standardDeviation  /  x;  timeout  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  standardDeviation  /  x;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  standardDeviation  /  x;	  final    double    dev    =    mean    /    x;    	compilable	timeout	99	1	replace
123	[BUG]  [BUGGY]  final  double  dev  =  baseDeviation  /  x;  [CE]  cannot  find  symbol  baseDeviation  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  baseDeviation  /  x;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  baseDeviation  /  x;	  final    double    dev    =    mean    /    x;    	non-compiled	[CE]  cannot  find  symbol  baseDeviation	99	None	replace
124	[BUG]  [BUGGY]          double    mean    =    Math.sqrt(x);    double  means  =  Math.sqrt(x);  double  mean  =  Math.sqrt(x);  double  means  =  Math.sqrt(x);  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          double    mean    =    Math.sqrt(x);    double  means  =  Math.sqrt(x);  double  mean  =  Math.sqrt(x);  double  means  =  Math.sqrt(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                double        mean        =        Math.sqrt(x);        double    means    =    Math.sqrt(x);    double  mean  =  Math.sqrt(x);  double  means  =  Math.sqrt(x);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	56	None	add
125	[BUG]  [BUGGY]          double    mean    =    Math.sqrt(x);    double  means  =  Math.sqrt(x);  Double  mean  =  Math.sqrt(x);  double  means  =  Math.sqrt(x);  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          double    mean    =    Math.sqrt(x);    double  means  =  Math.sqrt(x);  Double  mean  =  Math.sqrt(x);  double  means  =  Math.sqrt(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                double        mean        =        Math.sqrt(x);        double    means    =    Math.sqrt(x);    Double  mean  =  Math.sqrt(x);  double  means  =  Math.sqrt(x);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	56	None	add
126	[BUG]  [BUGGY]          double    mean    =    Math.sqrt(x);    double  means  =  Math.sqrt(x);  double  mean  =  Math.cos(x);  double  means  =  Math.sqrt(x);  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]        AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          double    mean    =    Math.sqrt(x);    double  means  =  Math.sqrt(x);  double  mean  =  Math.cos(x);  double  means  =  Math.sqrt(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                double        mean        =        Math.sqrt(x);        double    means    =    Math.sqrt(x);    double  mean  =  Math.cos(x);  double  means  =  Math.sqrt(x);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	56	None	add
127	[BUG]  [BUGGY]          double    mean    =    Math.sqrt(x);    double  means  =  Math.sqrt(x);  double  mean  =  Math.min(x);  double  means  =  Math.sqrt(x);  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]          AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          double    mean    =    Math.sqrt(x);    double  means  =  Math.sqrt(x);  double  mean  =  Math.min(x);  double  means  =  Math.sqrt(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                double        mean        =        Math.sqrt(x);        double    means    =    Math.sqrt(x);    double  mean  =  Math.min(x);  double  means  =  Math.sqrt(x);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	56	None	add
128	[BUG]  [BUGGY]          double    mean    =    Math.sqrt(x);    double  means  =  Math.sqrt(x);  double  mean  =  Math.log(x);  double  means  =  Math.log(x);  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]            AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          double    mean    =    Math.sqrt(x);    double  means  =  Math.sqrt(x);  double  mean  =  Math.log(x);  double  means  =  Math.log(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                double        mean        =        Math.sqrt(x);        double    means    =    Math.sqrt(x);    double  mean  =  Math.log(x);  double  means  =  Math.log(x);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	56	None	add
129	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  -  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;	  final    double    dev    =    x    -    mean    *    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  AssertionFailedError  	41	6	replace
130	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [FE]  AssertionFailedError  [FE]    ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;	  final    double    dev    =    x    -    mean    *    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  AssertionFailedError  	41	6	replace
131	[BUG]  [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  final  double  dev  =  x  -  standardDeviation  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]    ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  final  double  dev  =  x  -  standardDeviation  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    standardDeviation    *    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    final  double  dev  =  x  -  standardDeviation  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	169	None	add
132	[BUG]  [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  Final  double  dev  =  x  -  standardDeviation  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  not  a  statement  [FE]      ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  Final  double  dev  =  x  -  standardDeviation  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    standardDeviation    *    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    Final  double  dev  =  x  -  standardDeviation  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  	non-compiled	[CE]  not  a  statement	169	None	add
133	[BUG]  [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  final  double  dev  =  x  -  StandardDeviation  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]        ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  final  double  dev  =  x  -  StandardDeviation  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    standardDeviation    *    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    final  double  dev  =  x  -  StandardDeviation  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	169	None	add
134	[BUG]  [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  final  double  dev  =  x  -  standardsDeviation  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]          ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  final  double  dev  =  x  -  standardsDeviation  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    standardDeviation    *    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    final  double  dev  =  x  -  standardsDeviation  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	169	None	add
135	[BUG]  [BUGGY]  timeout  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  Math.abs(x  -  standardDeviation);  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  Math.abs(x  -  standardDeviation);	  final    double    dev    =    Math.abs(x    -    mean);    timeout    	compilable	timeout	166	1	replace
136	[BUG]  [BUGGY]  final  double  dev  =  Math.abs(x  -  standardDeviation);  timeout  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  Math.abs(x  -  standardDeviation);  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  Math.abs(x  -  standardDeviation);	  final    double    dev    =    Math.abs(x    -    mean);    timeout    	compilable	timeout	166	1	replace
137	[BUG]  [BUGGY]  final  double  dev  =  Math.abs(mean  -  x0);  [CE]  cannot  find  symbol  x0  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  Math.abs(mean  -  x0);  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  Math.abs(mean  -  x0);	  final    double    dev    =    Math.abs(x    -    mean);    timeout    	non-compiled	[CE]  cannot  find  symbol  x0	166	None	replace
138	[BUG]  [BUGGY]  timeout  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  Math.abs(mean  -  x);  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  Math.abs(mean  -  x);	  final    double    dev    =    Math.abs(x    -    mean);    timeout    	compilable	timeout	166	1	replace
139	[BUG]  [BUGGY]  final  double  dev  =  Math.abs(mean  -  x);  timeout  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  Math.abs(mean  -  x);  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  Math.abs(mean  -  x);	  final    double    dev    =    Math.abs(x    -    mean);    timeout    	compilable	timeout	166	1	replace
140	[BUG]  [BUGGY]  timeout  [FE]                      ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  Math.abs(x  /  mean);  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  Math.abs(x  /  mean);	  final    double    dev    =    Math.abs(x    -    mean);    timeout    	compilable	timeout	166	1	replace
141	[BUG]  [BUGGY]  final  double  dev  =  Math.abs(x  /  mean);  timeout  [FE]                      ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  Math.abs(x  /  mean);  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  Math.abs(x  /  mean);	  final    double    dev    =    Math.abs(x    -    mean);    timeout    	compilable	timeout	166	1	replace
142	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  1  +  1;  final  double  dev  =  x  -  mean  *  1  +  1;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  *  1  +  1;  final  double  dev  =  x  -  mean  *  1  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    mean    *    1    +    1;    final  double  dev  =  x  -  mean  *  1  +  1;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	22	None	add
143	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  1  +  1;  Final  double  dev  =  x  -  mean  *  1  +  1;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  *  1  +  1;  Final  double  dev  =  x  -  mean  *  1  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    mean    *    1    +    1;    Final  double  dev  =  x  -  mean  *  1  +  1;	  	non-compiled	[CE]  not  a  statement	22	None	add
144	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  1  +  1;  final  double  dev  =  x  -  mean  *  2  +  1;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]        AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  *  1  +  1;  final  double  dev  =  x  -  mean  *  2  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    mean    *    1    +    1;    final  double  dev  =  x  -  mean  *  2  +  1;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	22	None	add
145	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  1  +  1;  final  double  dev  =  x  -  meant  *  1  +  1;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]          AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  *  1  +  1;  final  double  dev  =  x  -  meant  *  1  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    mean    *    1    +    1;    final  double  dev  =  x  -  meant  *  1  +  1;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	22	None	add
146	[BUG]  [BUGGY]  double  standardDeviation  =  Math.abs(x  -  standardDeviation);  [CE]  cannot  find  symbol  dev  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  standardDeviation  =  Math.abs(x  -  standardDeviation);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  standardDeviation  =  Math.abs(x  -  standardDeviation);	          double    mean    =    Math.abs(x    -    standardDeviation);    long    standardDeviation    =    Math.abs(x    -    standardDeviation);    	non-compiled	[CE]  cannot  find  symbol  dev	161	None	replace
147	[BUG]  [BUGGY]  long  standardDeviation  =  Math.abs(x  -  standardDeviation);  [CE]  possible  loss  of  precision  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  long  standardDeviation  =  Math.abs(x  -  standardDeviation);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	long  standardDeviation  =  Math.abs(x  -  standardDeviation);	          double    mean    =    Math.abs(x    -    standardDeviation);    long    standardDeviation    =    Math.abs(x    -    standardDeviation);    	non-compiled	[CE]  possible  loss  of  precision	161	None	replace
148	[BUG]  [BUGGY]  int  standardDeviation  =  Math.abs(x  -  standardDeviation);  [CE]  possible  loss  of  precision  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  int  standardDeviation  =  Math.abs(x  -  standardDeviation);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	int  standardDeviation  =  Math.abs(x  -  standardDeviation);	          double    mean    =    Math.abs(x    -    standardDeviation);    long    standardDeviation    =    Math.abs(x    -    standardDeviation);    	non-compiled	[CE]  possible  loss  of  precision	161	None	replace
149	[BUG]  [BUGGY]  double  mean  =  Math.log(x)/  SQRT2PI  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  dev  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.log(x)/  SQRT2PI  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.log(x)/  SQRT2PI  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  double    mean    =    Math.log(x)/    SQRT2PI;    	non-compiled	[CE]  cannot  find  symbol  dev	149	None	replace
150	[BUG]  [BUGGY]  double  mean  =  Math.log(x)/  SQRT2PI  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  dev  [FE]                      ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.log(x)/  SQRT2PI  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.log(x)/  SQRT2PI  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  double    mean    =    Math.log(x)/    SQRT2PI;    	non-compiled	[CE]  cannot  find  symbol  dev	149	None	replace
151	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(x)/  SQRT2PI;  [CE]  cannot  find  symbol  dev  [FE]                        ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(x)/  SQRT2PI;  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(x)/  SQRT2PI;	  double    mean    =    Math.log(x)/    SQRT2PI;    	non-compiled	[CE]  cannot  find  symbol  dev	149	None	replace
152	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  standardDeviation  *  SQRT2PI;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  /  standardDeviation  *  SQRT2PI;	  final    double    dev    =    x    -    standardDeviation    *    SQRT2PI;    timeout    	compilable	  [FE]  AssertionFailedError  	43	6	replace
153	[BUG]  [BUGGY]  final  double  dev  =  x  /  standardDeviation  *  SQRT2PI;  [FE]  AssertionFailedError  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  standardDeviation  *  SQRT2PI;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  /  standardDeviation  *  SQRT2PI;	  final    double    dev    =    x    -    standardDeviation    *    SQRT2PI;    timeout    	compilable	  [FE]  AssertionFailedError  	43	6	replace
154	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  *  standardDeviation  *  SQRT2PI;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  *  standardDeviation  *  SQRT2PI;	  final    double    dev    =    x    -    standardDeviation    *    SQRT2PI;    timeout    	compilable	  [FE]  AssertionFailedError  	43	6	replace
155	[BUG]  [BUGGY]  final  double  dev  =  x  *  standardDeviation  *  SQRT2PI;  [FE]  AssertionFailedError  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  *  standardDeviation  *  SQRT2PI;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  *  standardDeviation  *  SQRT2PI;	  final    double    dev    =    x    -    standardDeviation    *    SQRT2PI;    timeout    	compilable	  [FE]  AssertionFailedError  	43	6	replace
156	[BUG]  [BUGGY]  timeout  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  SQRT2PI  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  -  standardDeviation  *  SQRT2PI  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  final    double    dev    =    x    -    standardDeviation    *    SQRT2PI;    timeout    	compilable	timeout	43	1	replace
157	[BUG]  [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  SQRT2PI  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  timeout  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  SQRT2PI  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  standardDeviation  *  SQRT2PI  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  final    double    dev    =    x    -    standardDeviation    *    SQRT2PI;    timeout    	compilable	timeout	43	1	replace
158	[BUG]  [BUGGY]  double  mean  =  Math.max(0,  Math.abs(x),  Math.abs(x));  [CE]  no  suitable  method  found  for  max(int,double,double)  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.max(0,  Math.abs(x),  Math.abs(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.max(0,  Math.abs(x),  Math.abs(x));	          double    mean    =    Math.max(0,    Math.abs(x));    double    mean    =    Math.max(0,    Math.abs(x));    	non-compiled	[CE]  no  suitable  method  found  for  max(int,double,double)	100	None	replace
159	[BUG]  [BUGGY]  Double  mean  =  Math.max(0,  Math.abs(x));  [CE]  cannot  find  symbol  dev  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Double  mean  =  Math.max(0,  Math.abs(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Double  mean  =  Math.max(0,  Math.abs(x));	          double    mean    =    Math.max(0,    Math.abs(x));    double    mean    =    Math.max(0,    Math.abs(x));    	non-compiled	[CE]  cannot  find  symbol  dev	100	None	replace
160	[BUG]  [BUGGY]  timeout  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  SQRT2PI  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  /  SQRT2PI  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  final    double    dev    =    x    /    SQRT2PI;    	compilable	timeout	93	1	replace
161	[BUG]  [BUGGY]  final  double  dev  =  x  /  SQRT2PI  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  timeout  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  SQRT2PI  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  /  SQRT2PI  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  final    double    dev    =    x    /    SQRT2PI;    	compilable	timeout	93	1	replace
162	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  SQRT2PI  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  /  SQRT2PI  +  1;	  final    double    dev    =    x    /    SQRT2PI;    	compilable	  [FE]  AssertionFailedError  	93	6	replace
163	[BUG]  [BUGGY]  final  double  dev  =  x  /  SQRT2PI  +  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  SQRT2PI  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  /  SQRT2PI  +  1;	  final    double    dev    =    x    /    SQRT2PI;    	compilable	  [FE]  AssertionFailedError  	93	6	replace
164	[BUG]  [BUGGY]  double  mean  =  Math.max(0,  Math.abs(x  *  1));  [CE]  cannot  find  symbol  dev  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.max(0,  Math.abs(x  *  1));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.max(0,  Math.abs(x  *  1));	  double    mean    =    Math.max(0,    Math.abs(x    -    1));    	non-compiled	[CE]  cannot  find  symbol  dev	180	None	replace
165	[BUG]  [BUGGY]  Double  mean  =  Math.sqrt(x);  [CE]  cannot  find  symbol  dev  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Double  mean  =  Math.sqrt(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Double  mean  =  Math.sqrt(x);	          double    mean    =    Math.sqrt(x);    Double    mean    =    Math.sqrt(x);    	non-compiled	[CE]  cannot  find  symbol  dev	53	None	replace
166	[BUG]  [BUGGY]  Double  mean  =  Math.sqrt(x,  standardDeviation);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Double  mean  =  Math.sqrt(x,  standardDeviation);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Double  mean  =  Math.sqrt(x,  standardDeviation);	          double    mean    =    Math.sqrt(x);    Double    mean    =    Math.sqrt(x);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	53	None	replace
167	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.pow(10,  x  +  1));  [CE]  cannot  find  symbol  dev  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.pow(10,  x  +  1));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.pow(10,  x  +  1));	  double    mean    =    Math.sqrt(Math.pow(10,    x));    	non-compiled	[CE]  cannot  find  symbol  dev	49	None	replace
168	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.pow(10,  x)+  1);  [CE]  cannot  find  symbol  dev  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.pow(10,  x)+  1);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.pow(10,  x)+  1);	  double    mean    =    Math.sqrt(Math.pow(10,    x));    	non-compiled	[CE]  cannot  find  symbol  dev	49	None	replace
169	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.pow(10,  x)-  1);  [CE]  cannot  find  symbol  dev  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.pow(10,  x)-  1);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.pow(10,  x)-  1);	  double    mean    =    Math.sqrt(Math.pow(10,    x));    	non-compiled	[CE]  cannot  find  symbol  dev	49	None	replace
170	[BUG]  [BUGGY]  double  mean  =  Math.abs(x)/  2.0;  [CE]  cannot  find  symbol  dev  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(x)/  2.0;  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.abs(x)/  2.0;	          double    mean    =    Math.abs(x);    double    mean    =    Math.abs(x);    	non-compiled	[CE]  cannot  find  symbol  dev	74	None	replace
171	[BUG]  [BUGGY]  static  final  double  dev  =  x  -  standardDeviation;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  static  final  double  dev  =  x  -  standardDeviation;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	static  final  double  dev  =  x  -  standardDeviation;	  final    double    dev    =    x    -    standardDeviation;    final    double    dev    =    x    -    standardDeviation;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
172	[BUG]  [BUGGY]  final  double  dev  =  x  *  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  StandardDistributionImpl  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  *  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  *  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  final    double    dev    =    x    *    mean;    	non-compiled	[CE]  cannot  find  symbol  StandardDistributionImpl	131	None	replace
173	[BUG]  [BUGGY]  final  double  dev  =  x  *  normalDeviation;  [CE]  cannot  find  symbol  normalDeviation  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  *  normalDeviation;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  *  normalDeviation;	  final    double    dev    =    x    *    mean;    	non-compiled	[CE]  cannot  find  symbol  normalDeviation	131	None	replace
174	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x)-  2);  [CE]  cannot  find  symbol  dev  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x)-  2);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.abs(x)-  2);	  double    mean    =    Math.sqrt(Math.abs(x)-    1);    	non-compiled	[CE]  cannot  find  symbol  dev	72	None	replace
175	[BUG]  [BUGGY]  double  mean  =  Math.abs(Math.abs(x)-  1);  [CE]  cannot  find  symbol  dev  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(Math.abs(x)-  1);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.abs(Math.abs(x)-  1);	  double    mean    =    Math.sqrt(Math.abs(x)-    1);    	non-compiled	[CE]  cannot  find  symbol  dev	72	None	replace
176	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  SQRT1PI;  [CE]  cannot  find  symbol  SQRT1PI  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  *  SQRT1PI;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  mean  *  SQRT1PI;	  final    double    dev    =    x    -    mean    *    SQRT2PI;    final    double    dev    =    x    -    mean    *    SQRT2PI);    	non-compiled	[CE]  cannot  find  symbol  SQRT1PI	70	None	replace
177	[BUG]  [BUGGY]  null  mean  =  Math.sqrt(Math.log(x));  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  null  mean  =  Math.sqrt(Math.log(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	null  mean  =  Math.sqrt(Math.log(x));	          double    mean    =    Math.sqrt(Math.log(x));    Double    mean    =    Math.sqrt(Math.log(x));    	non-compiled	[CE]  not  a  statement	84	None	replace
178	[BUG]  [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(mean);  [CE]  cannot  find  symbol  dev  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(mean);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.log(x)/  cumulativeProbability(mean);	  double    mean    =    Math.log(x)/    cumulativeProbability(standardDeviation);    	non-compiled	[CE]  cannot  find  symbol  dev	168	None	replace
179	[BUG]  [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(dev);  [CE]  cannot  find  symbol  dev  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(dev);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.log(x)/  cumulativeProbability(dev);	  double    mean    =    Math.log(x)/    cumulativeProbability(standardDeviation);    	non-compiled	[CE]  cannot  find  symbol  dev	168	None	replace
180	[BUG]  [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(ex);  [CE]  cannot  find  symbol  ex  [FE]                      ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(ex);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.log(x)/  cumulativeProbability(ex);	  double    mean    =    Math.log(x)/    cumulativeProbability(standardDeviation);    	non-compiled	[CE]  cannot  find  symbol  ex	168	None	replace
181	[BUG]  [BUGGY]  timeout  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  4;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  -  standardDeviation  *  4;	  final    double    dev    =    x    -    standardDeviation    *    2;    	compilable	timeout	121	1	replace
182	[BUG]  [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  4;  timeout  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  4;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  standardDeviation  *  4;	  final    double    dev    =    x    -    standardDeviation    *    2;    	compilable	timeout	121	1	replace
183	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  2  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  -  standardDeviation  *  2  +  1;	  final    double    dev    =    x    -    standardDeviation    *    2;    	compilable	  [FE]  AssertionFailedError  	121	6	replace
184	[BUG]  [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  2  +  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  2  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  standardDeviation  *  2  +  1;	  final    double    dev    =    x    -    standardDeviation    *    2;    	compilable	  [FE]  AssertionFailedError  	121	6	replace
185	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  standardDeviation  *  2;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  /  standardDeviation  *  2;	  final    double    dev    =    x    -    standardDeviation    *    2;    	compilable	  [FE]  AssertionFailedError  	121	6	replace
186	[BUG]  [BUGGY]  final  double  dev  =  x  /  standardDeviation  *  2;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  standardDeviation  *  2;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  /  standardDeviation  *  2;	  final    double    dev    =    x    -    standardDeviation    *    2;    	compilable	  [FE]  AssertionFailedError  	121	6	replace
187	[BUG]  [BUGGY]  timeout  [FE]          AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  3;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  -  standardDeviation  *  3;	  final    double    dev    =    x    -    standardDeviation    *    2;    	compilable	timeout	121	1	replace
188	[BUG]  [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  3;  timeout  [FE]          AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  3;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  standardDeviation  *  3;	  final    double    dev    =    x    -    standardDeviation    *    2;    	compilable	timeout	121	1	replace
189	[BUG]  [BUGGY]  Math.rint(Math.log(x)/  2.0,  mean);  [CE]  method  rint  in  class  Math  cannot  be  applied  to  given  types;  [FE]        ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Math.rint(Math.log(x)/  2.0,  mean);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.rint(Math.log(x)/  2.0,  mean);	  Math.rint(Math.log(x)/    2.0);    	non-compiled	[CE]  method  rint  in  class  Math  cannot  be  applied  to  given  types;	29	None	replace
190	[BUG]  [BUGGY]  Math.rint(Math.floor(x)/  2.0);  [CE]  cannot  find  symbol  dev  [FE]          ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Math.rint(Math.floor(x)/  2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.rint(Math.floor(x)/  2.0);	  Math.rint(Math.log(x)/    2.0);    	non-compiled	[CE]  cannot  find  symbol  dev	29	None	replace
191	[BUG]  [BUGGY]  Math.rint(Math.log(x)/  2.0,  MAX_PROBABILITY);  [CE]  cannot  find  symbol  MAX_PROBABILITY  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Math.rint(Math.log(x)/  2.0,  MAX_PROBABILITY);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.rint(Math.log(x)/  2.0,  MAX_PROBABILITY);	  Math.rint(Math.log(x)/    2.0);    	non-compiled	[CE]  cannot  find  symbol  MAX_PROBABILITY	29	None	replace
192	[BUG]  [BUGGY]          double    mean    =    Math.sqrt(Math.abs(x));    x  =  Math.sqrt(Math.abs(x));  double  mean  =  Math.sqrt(Math.abs(x));  x  =  Math.sqrt(Math.abs(x));  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          double    mean    =    Math.sqrt(Math.abs(x));    x  =  Math.sqrt(Math.abs(x));  double  mean  =  Math.sqrt(Math.abs(x));  x  =  Math.sqrt(Math.abs(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                double        mean        =        Math.sqrt(Math.abs(x));        x    =    Math.sqrt(Math.abs(x));    double  mean  =  Math.sqrt(Math.abs(x));  x  =  Math.sqrt(Math.abs(x));	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	178	None	add
193	[BUG]  [BUGGY]          double    mean    =    Math.sqrt(Math.abs(x));    x  =  Math.sqrt(Math.abs(x));  double  mean  =  Math.abs(Math.abs(x));  x  =  Math.sqrt(Math.abs(x));  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          double    mean    =    Math.sqrt(Math.abs(x));    x  =  Math.sqrt(Math.abs(x));  double  mean  =  Math.abs(Math.abs(x));  x  =  Math.sqrt(Math.abs(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                double        mean        =        Math.sqrt(Math.abs(x));        x    =    Math.sqrt(Math.abs(x));    double  mean  =  Math.abs(Math.abs(x));  x  =  Math.sqrt(Math.abs(x));	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	178	None	add
194	[BUG]  [BUGGY]          double    mean    =    Math.sqrt(Math.abs(x));    x  =  Math.sqrt(Math.abs(x));  Double  mean  =  Math.sqrt(Math.abs(x));  x  =  Math.sqrt(Math.abs(x));  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]        AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          double    mean    =    Math.sqrt(Math.abs(x));    x  =  Math.sqrt(Math.abs(x));  Double  mean  =  Math.sqrt(Math.abs(x));  x  =  Math.sqrt(Math.abs(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                double        mean        =        Math.sqrt(Math.abs(x));        x    =    Math.sqrt(Math.abs(x));    Double  mean  =  Math.sqrt(Math.abs(x));  x  =  Math.sqrt(Math.abs(x));	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	178	None	add
195	[BUG]  [BUGGY]          double    mean    =    Math.sqrt(Math.abs(x));    x  =  Math.sqrt(Math.abs(x));  Double  mean  =  Math.abs(Math.abs(x));  x  =  Math.sqrt(Math.abs(x));  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]          AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          double    mean    =    Math.sqrt(Math.abs(x));    x  =  Math.sqrt(Math.abs(x));  Double  mean  =  Math.abs(Math.abs(x));  x  =  Math.sqrt(Math.abs(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                double        mean        =        Math.sqrt(Math.abs(x));        x    =    Math.sqrt(Math.abs(x));    Double  mean  =  Math.abs(Math.abs(x));  x  =  Math.sqrt(Math.abs(x));	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	178	None	add
196	[BUG]  [BUGGY]          double    mean    =    Math.sqrt(Math.abs(x));    x  =  Math.sqrt(Math.abs(x));  double  mean  =  Math.cos(Math.abs(x));  x  =  Math.sqrt(Math.abs(x));  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]            AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          double    mean    =    Math.sqrt(Math.abs(x));    x  =  Math.sqrt(Math.abs(x));  double  mean  =  Math.cos(Math.abs(x));  x  =  Math.sqrt(Math.abs(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                double        mean        =        Math.sqrt(Math.abs(x));        x    =    Math.sqrt(Math.abs(x));    double  mean  =  Math.cos(Math.abs(x));  x  =  Math.sqrt(Math.abs(x));	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	178	None	add
197	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.rint(x)+  1);  [CE]  cannot  find  symbol  dev  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.rint(x)+  1);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.rint(x)+  1);	  double    mean    =    Math.sqrt(Math.rint(x));    	non-compiled	[CE]  cannot  find  symbol  dev	48	None	replace
198	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.rint(x)+  2);  [CE]  cannot  find  symbol  dev  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.rint(x)+  2);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.rint(x)+  2);	  double    mean    =    Math.sqrt(Math.rint(x));    	non-compiled	[CE]  cannot  find  symbol  dev	48	None	replace
199	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.rint(x)-  1);  [CE]  cannot  find  symbol  dev  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.rint(x)-  1);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.rint(x)-  1);	  double    mean    =    Math.sqrt(Math.rint(x));    	non-compiled	[CE]  cannot  find  symbol  dev	48	None	replace
200	[BUG]  [BUGGY]  Math.pow(10,  Math.log(x)/  2.0);  [CE]  cannot  find  symbol  dev  [FE]    ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Math.pow(10,  Math.log(x)/  2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.pow(10,  Math.log(x)/  2.0);	          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/    2.0);    	non-compiled	[CE]  cannot  find  symbol  dev	111	None	replace
201	[BUG]  [BUGGY]  Math.log(x)/  2.0;  [CE]  not  a  statement  [FE]      ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Math.log(x)/  2.0;  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.log(x)/  2.0;	          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/    2.0);    	non-compiled	[CE]  not  a  statement	111	None	replace
202	[BUG]  [BUGGY]  final  double  dev  =  x  -  standardsDeviation;  [CE]  cannot  find  symbol  standardsDeviation  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  standardsDeviation;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  standardsDeviation;	  final    double    dev    =    x    -    standardDeviation;    final    double    dev    =    x    -    standardsDeviation;    	non-compiled	[CE]  cannot  find  symbol  standardsDeviation	19	None	replace
203	[BUG]  [BUGGY]  Math.abs(Math.abs(x)/  2.0);  [CE]  cannot  find  symbol  dev  [FE]        ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Math.abs(Math.abs(x)/  2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.abs(Math.abs(x)/  2.0);	  Math.sqrt(Math.abs(x)/    2.0);    	non-compiled	[CE]  cannot  find  symbol  dev	171	None	replace
204	[BUG]  [BUGGY]  Math.sqrt(Math.abs(x)/  2.0,  mean);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]          ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Math.sqrt(Math.abs(x)/  2.0,  mean);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.sqrt(Math.abs(x)/  2.0,  mean);	  Math.sqrt(Math.abs(x)/    2.0);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	171	None	replace
205	[BUG]  [BUGGY]  Math.rint(Math.abs(x)/  2.0);  [CE]  cannot  find  symbol  dev  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Math.rint(Math.abs(x)/  2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.rint(Math.abs(x)/  2.0);	  Math.sqrt(Math.abs(x)/    2.0);    	non-compiled	[CE]  cannot  find  symbol  dev	171	None	replace
206	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  2;  final  double  dev  =  x  -  mean  *  2;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  *  2;  final  double  dev  =  x  -  mean  *  2;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    mean    *    2;    final  double  dev  =  x  -  mean  *  2;	  timeout    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	44	None	add
207	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  2;  Final  double  dev  =  x  -  mean  *  2;  [CE]  not  a  statement  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  *  2;  Final  double  dev  =  x  -  mean  *  2;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    mean    *    2;    Final  double  dev  =  x  -  mean  *  2;	  timeout    	non-compiled	[CE]  not  a  statement	44	None	add
208	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  2;  final  double  dev  =  x  -  mean  *  2);  [CE]  ';'  expected  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  *  2;  final  double  dev  =  x  -  mean  *  2);  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    mean    *    2;    final  double  dev  =  x  -  mean  *  2);	  timeout    	non-compiled	[CE]  ';'  expected	44	None	add
209	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  2;  final  double  dev  =  x  -  mean  *  3;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]                      ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  *  2;  final  double  dev  =  x  -  mean  *  3;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    mean    *    2;    final  double  dev  =  x  -  mean  *  3;	  timeout    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	44	None	add
210	[BUG]  [BUGGY]  double  mean  =  Math.abs(x  /  2);  [CE]  cannot  find  symbol  dev  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(x  /  2);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.abs(x  /  2);	  double    mean    =    Math.abs(x    -    2);    	non-compiled	[CE]  cannot  find  symbol  dev	157	None	replace
211	[BUG]  [BUGGY]  double  mean  =  Math.abs(x  *  2);  [CE]  cannot  find  symbol  dev  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(x  *  2);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.abs(x  *  2);	  double    mean    =    Math.abs(x    -    2);    	non-compiled	[CE]  cannot  find  symbol  dev	157	None	replace
212	[BUG]  [BUGGY]  double  mean  =  Math.abs(x  -  2  +  1);  [CE]  cannot  find  symbol  dev  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(x  -  2  +  1);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.abs(x  -  2  +  1);	  double    mean    =    Math.abs(x    -    2);    	non-compiled	[CE]  cannot  find  symbol  dev	157	None	replace
213	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  *  standardDeviation  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  *  standardDeviation  +  1;	  final    double    dev    =    x    *    mean    +    1;    timeout    	compilable	  [FE]  AssertionFailedError  	177	6	replace
214	[BUG]  [BUGGY]  final  double  dev  =  x  *  standardDeviation  +  1;  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  *  standardDeviation  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  *  standardDeviation  +  1;	  final    double    dev    =    x    *    mean    +    1;    timeout    	compilable	  [FE]  AssertionFailedError  	177	6	replace
215	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;	  final    double    dev    =    x    *    mean    +    1;    timeout    	compilable	timeout	177	1	replace
216	[BUG]  [BUGGY]  final  double  dev  =  x  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  timeout  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;	  final    double    dev    =    x    *    mean    +    1;    timeout    	compilable	timeout	177	1	replace
217	[BUG]  [BUGGY]  final  double  dev  =  x  *  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [CE]  cannot  find  symbol  StandardDistributionImpl  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  *  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  *  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;	  final    double    dev    =    x    *    mean    +    1;    timeout    	non-compiled	[CE]  cannot  find  symbol  StandardDistributionImpl	177	None	replace
218	[BUG]  [BUGGY]  final  double  dev  =  x0  -  x;  [CE]  cannot  find  symbol  x0  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x0  -  x;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x0  -  x;	  final    double    dev    =    mean    -    x;    final    double    dev    =    mean    -    x;    	non-compiled	[CE]  cannot  find  symbol  x0	32	None	replace
219	[BUG]  [BUGGY]  final  double  dev  =  mean  -  x0;  [CE]  cannot  find  symbol  x0  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  mean  -  x0;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  mean  -  x0;	  final    double    dev    =    mean    -    x;    final    double    dev    =    mean    -    x;    	non-compiled	[CE]  cannot  find  symbol  x0	32	None	replace
220	[BUG]  [BUGGY]  final  double  dev  =  Math.max(dev.doubleValue(),  x,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  double  cannot  be  dereferenced  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  Math.max(dev.doubleValue(),  x,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  Math.max(dev.doubleValue(),  x,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  final    double    dev    =    Math.max(dev.doubleValue(),    x);    	non-compiled	[CE]  double  cannot  be  dereferenced	59	None	replace
221	[BUG]  [BUGGY]  final  double  dev  =  Math.max(dev.doubleValue(),  x,  MAX_INVERSE_ABSOLUTE_ACCURACY);  [CE]  double  cannot  be  dereferenced  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  Math.max(dev.doubleValue(),  x,  MAX_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  Math.max(dev.doubleValue(),  x,  MAX_INVERSE_ABSOLUTE_ACCURACY);	  final    double    dev    =    Math.max(dev.doubleValue(),    x);    	non-compiled	[CE]  double  cannot  be  dereferenced	59	None	replace
222	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  +  mean  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  +  mean  +  1;	  final    double    dev    =    x    -    mean    +    1;    final    double    dev    =    x    +    mean    +    1;    	compilable	  [FE]  AssertionFailedError  	109	6	replace
223	[BUG]  [BUGGY]  final  double  dev  =  x  +  mean  +  1;  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  +  mean  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  +  mean  +  1;	  final    double    dev    =    x    -    mean    +    1;    final    double    dev    =    x    +    mean    +    1;    	compilable	  [FE]  AssertionFailedError  	109	6	replace
224	[BUG]  [BUGGY]  static  final  double  dev  =  x  -  mean  +  1;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  static  final  double  dev  =  x  -  mean  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	static  final  double  dev  =  x  -  mean  +  1;	  final    double    dev    =    x    -    mean    +    1;    static    final    double    dev    =    x    -    mean    +    1;    	non-compiled	[CE]  illegal  start  of  expression	158	None	replace
225	[BUG]  [BUGGY]  static  final  double  dev  =  x  *  mean  +  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  static  final  double  dev  =  x  *  mean  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	static  final  double  dev  =  x  *  mean  +  1;	  final    double    dev    =    x    -    mean    +    1;    static    final    double    dev    =    x    -    mean    +    1;    	non-compiled	[CE]  illegal  start  of  expression	158	None	replace
226	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  dev  =  x  -  mean  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	double  dev  =  x  -  mean  +  1;	  final    double    dev    =    x    -    mean    +    1;    static    final    double    dev    =    x    -    mean    +    1;    	compilable	  [FE]  AssertionFailedError  	158	6	replace
227	[BUG]  [BUGGY]  double  dev  =  x  -  mean  +  1;  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  dev  =  x  -  mean  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  dev  =  x  -  mean  +  1;	  final    double    dev    =    x    -    mean    +    1;    static    final    double    dev    =    x    -    mean    +    1;    	compilable	  [FE]  AssertionFailedError  	158	6	replace
228	[BUG]  [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(sqrt);  [CE]  cannot  find  symbol  sqrt  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(sqrt);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.log(x)/  cumulativeProbability(sqrt);	  double    mean    =    Math.log(x)/    cumulativeProbability(sd);    	non-compiled	[CE]  cannot  find  symbol  sqrt	37	None	replace
229	[BUG]  [BUGGY]  Math.sqrt(Math.exp(x)/  2.0,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Math.sqrt(Math.exp(x)/  2.0,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.sqrt(Math.exp(x)/  2.0,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  Math.sqrt(Math.exp(x)/    2.0);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	31	None	replace
230	[BUG]  [BUGGY]  Math.sqrt(Math.exp(x)/  2.0,  MAX_INVERSE_ABSOLUTE_ACCURACY);  [CE]  cannot  find  symbol  MAX_INVERSE_ABSOLUTE_ACCURACY  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Math.sqrt(Math.exp(x)/  2.0,  MAX_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.sqrt(Math.exp(x)/  2.0,  MAX_INVERSE_ABSOLUTE_ACCURACY);	  Math.sqrt(Math.exp(x)/    2.0);    	non-compiled	[CE]  cannot  find  symbol  MAX_INVERSE_ABSOLUTE_ACCURACY	31	None	replace
231	[BUG]  [BUGGY]  Math.sqrt(Math.exp(x)/  2.0,  mean);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Math.sqrt(Math.exp(x)/  2.0,  mean);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.sqrt(Math.exp(x)/  2.0,  mean);	  Math.sqrt(Math.exp(x)/    2.0);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	31	None	replace
232	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  SQRT2PI  +  1;  final  double  dev  =  x  -  mean  *  SQRT2PI  +  1;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  *  SQRT2PI  +  1;  final  double  dev  =  x  -  mean  *  SQRT2PI  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    mean    *    SQRT2PI    +    1;    final  double  dev  =  x  -  mean  *  SQRT2PI  +  1;	  timeout    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	154	None	add
233	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  SQRT2PI  +  1;  final  double  dev  =  x  -  mean  *  SqRT2PI  +  1;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  *  SQRT2PI  +  1;  final  double  dev  =  x  -  mean  *  SqRT2PI  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    mean    *    SQRT2PI    +    1;    final  double  dev  =  x  -  mean  *  SqRT2PI  +  1;	  timeout    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	154	None	add
234	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  SQRT2PI  +  1;  Final  double  dev  =  x  -  mean  *  SQRT2PI  +  1;  [CE]  not  a  statement  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  *  SQRT2PI  +  1;  Final  double  dev  =  x  -  mean  *  SQRT2PI  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    mean    *    SQRT2PI    +    1;    Final  double  dev  =  x  -  mean  *  SQRT2PI  +  1;	  timeout    	non-compiled	[CE]  not  a  statement	154	None	add
235	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  SQRT2PI  +  1;  final  double  dev  =  x  -  mean  *  SQRT2PI  +  2;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  *  SQRT2PI  +  1;  final  double  dev  =  x  -  mean  *  SQRT2PI  +  2;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    mean    *    SQRT2PI    +    1;    final  double  dev  =  x  -  mean  *  SQRT2PI  +  2;	  timeout    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	154	None	add
236	[BUG]  [BUGGY]  x  =  Math.sqrt(Math.abs(x));  [CE]  cannot  find  symbol  dev  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  x  =  Math.sqrt(Math.abs(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	x  =  Math.sqrt(Math.abs(x));	          double    mean    =    Math.sqrt(Math.abs(x));    x    =    Math.sqrt(Math.abs(x));    	non-compiled	[CE]  cannot  find  symbol  dev	179	None	replace
237	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x)+  1);  x  =  Math.sqrt(Math.abs(x));  [CE]  cannot  find  symbol  dev  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x)+  1);  x  =  Math.sqrt(Math.abs(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.abs(x)+  1);  x  =  Math.sqrt(Math.abs(x));	          double    mean    =    Math.sqrt(Math.abs(x));    x    =    Math.sqrt(Math.abs(x));    	non-compiled	[CE]  cannot  find  symbol  dev	179	None	replace
238	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x)-  1);  x  =  Math.sqrt(Math.abs(x));  [CE]  cannot  find  symbol  dev  [FE]        AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x)-  1);  x  =  Math.sqrt(Math.abs(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.abs(x)-  1);  x  =  Math.sqrt(Math.abs(x));	          double    mean    =    Math.sqrt(Math.abs(x));    x    =    Math.sqrt(Math.abs(x));    	non-compiled	[CE]  cannot  find  symbol  dev	179	None	replace
239	[BUG]  [BUGGY]  double  mean  =  Math.abs(x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  cannot  find  symbol  dev  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.abs(x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  double    mean    =    Math.abs(x    /    standardDeviation);    	non-compiled	[CE]  cannot  find  symbol  dev	4	None	replace
240	[BUG]  [BUGGY]  double  mean  =  Math.abs(x  /  standardDeviation  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  cannot  find  symbol  dev  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(x  /  standardDeviation  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.abs(x  /  standardDeviation  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  double    mean    =    Math.abs(x    /    standardDeviation);    	non-compiled	[CE]  cannot  find  symbol  dev	4	None	replace
241	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.abs(mean  -  standardDeviation));  [CE]  cannot  find  symbol  dev  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.abs(mean  -  standardDeviation));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.abs(mean  -  standardDeviation));	  double    mean    =    Math.sqrt(Math.abs(x    -    standardDeviation));    	non-compiled	[CE]  cannot  find  symbol  dev	183	None	replace
242	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x  /  standardDeviation));  [CE]  cannot  find  symbol  dev  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x  /  standardDeviation));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.abs(x  /  standardDeviation));	  double    mean    =    Math.sqrt(Math.abs(x    -    standardDeviation));    	non-compiled	[CE]  cannot  find  symbol  dev	183	None	replace
243	[BUG]  [BUGGY]  double  mean  =  Math.abs(Math.abs(x  -  standardDeviation));  [CE]  cannot  find  symbol  dev  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(Math.abs(x  -  standardDeviation));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.abs(Math.abs(x  -  standardDeviation));	  double    mean    =    Math.sqrt(Math.abs(x    -    standardDeviation));    	non-compiled	[CE]  cannot  find  symbol  dev	183	None	replace
244	[BUG]  [BUGGY]  Math.rint(Math.log(x)/  2.0);  Math.rint(Math.log(x)*  2.0);  [CE]  cannot  find  symbol  dev  [FE]        ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Math.rint(Math.log(x)/  2.0);  Math.rint(Math.log(x)*  2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.rint(Math.log(x)/  2.0);  Math.rint(Math.log(x)*  2.0);	          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)1/    2.0);    	non-compiled	[CE]  cannot  find  symbol  dev	132	None	replace
245	[BUG]  [BUGGY]  double  standardDeviation  =  Math.sqrt(Math.log(x));  [CE]  cannot  find  symbol  dev  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  standardDeviation  =  Math.sqrt(Math.log(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  standardDeviation  =  Math.sqrt(Math.log(x));	          double    mean    =    Math.sqrt(Math.log(x));    int    standardDeviation    =    Math.sqrt(Math.log(x));    	non-compiled	[CE]  cannot  find  symbol  dev	173	None	replace
246	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.log(x));  double  standardDeviation  =  Math.sqrt(Math.log(x));  [CE]  cannot  find  symbol  dev  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.log(x));  double  standardDeviation  =  Math.sqrt(Math.log(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.log(x));  double  standardDeviation  =  Math.sqrt(Math.log(x));	          double    mean    =    Math.sqrt(Math.log(x));    int    standardDeviation    =    Math.sqrt(Math.log(x));    	non-compiled	[CE]  cannot  find  symbol  dev	173	None	replace
247	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  standardDeviation  +  2;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  -  standardDeviation  +  2;	  final    double    dev    =    x    -    mean    +    2;    	compilable	  [FE]  AssertionFailedError  	25	6	replace
248	[BUG]  [BUGGY]  final  double  dev  =  x  -  standardDeviation  +  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  standardDeviation  +  2;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  standardDeviation  +  2;	  final    double    dev    =    x    -    mean    +    2;    	compilable	  [FE]  AssertionFailedError  	25	6	replace
249	[BUG]  [BUGGY]  static  final  double  dev  =  x  -  mean  *  SQRT2PI;  [CE]  illegal  start  of  expression  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  static  final  double  dev  =  x  -  mean  *  SQRT2PI;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	static  final  double  dev  =  x  -  mean  *  SQRT2PI;	  final    double    dev    =    x    -    mean    *    SQRT2PI;    static    final    double    dev    =    x    -    mean    *    SQRT2PI;    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
250	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  static  final  double  dev  =  x  -  mean  *  SQRT2PI;  [CE]  illegal  start  of  expression  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  static  final  double  dev  =  x  -  mean  *  SQRT2PI;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  static  final  double  dev  =  x  -  mean  *  SQRT2PI;	  final    double    dev    =    x    -    mean    *    SQRT2PI;    static    final    double    dev    =    x    -    mean    *    SQRT2PI;    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
251	[BUG]  [BUGGY]  static  final  double  dev  =  x  /  mean;  [CE]  illegal  start  of  expression  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  static  final  double  dev  =  x  /  mean;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	static  final  double  dev  =  x  /  mean;	  static    final    double    dev    =    x    -    mean;    	non-compiled	[CE]  illegal  start  of  expression	167	None	replace
252	[BUG]  [BUGGY]  static  final  double  dev  =  mean  -  x;  [CE]  illegal  start  of  expression  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  static  final  double  dev  =  mean  -  x;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	static  final  double  dev  =  mean  -  x;	  static    final    double    dev    =    x    -    mean;    	non-compiled	[CE]  illegal  start  of  expression	167	None	replace
253	[BUG]  [BUGGY]  final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	96	None	add
254	[BUG]  [BUGGY]  final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  Final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  Final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    Final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  	non-compiled	[CE]  not  a  statement	96	None	add
255	[BUG]  [BUGGY]  final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  static  final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  static  final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    static  final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  	non-compiled	[CE]  illegal  start  of  expression	96	None	add
256	[BUG]  [BUGGY]  final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  final  double  DEv  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]          AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  final  double  DEv  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    final  double  DEv  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	96	None	add
257	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  3.0);  Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  3.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	                Math.sqrt(Math.log(x)/        2.0);        Math.sqrt(Math.log(x)/    3.0);    Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  3.0);	  	compilable	  [FE]  ConvergenceException  	116	1	add
258	[BUG]  [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  3.0);  Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  3.0);  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  3.0);  Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  3.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                Math.sqrt(Math.log(x)/        2.0);        Math.sqrt(Math.log(x)/    3.0);    Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  3.0);	  	compilable	  [FE]  ConvergenceException  	116	1	add
259	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  3.0);  Math.sqrt(Math.log(x)/  3.0);  Math.sqrt(Math.log(x)/  3.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	                Math.sqrt(Math.log(x)/        2.0);        Math.sqrt(Math.log(x)/    3.0);    Math.sqrt(Math.log(x)/  3.0);  Math.sqrt(Math.log(x)/  3.0);	  	compilable	  [FE]  ConvergenceException  	116	1	add
260	[BUG]  [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  3.0);  Math.sqrt(Math.log(x)/  3.0);  Math.sqrt(Math.log(x)/  3.0);  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  3.0);  Math.sqrt(Math.log(x)/  3.0);  Math.sqrt(Math.log(x)/  3.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                Math.sqrt(Math.log(x)/        2.0);        Math.sqrt(Math.log(x)/    3.0);    Math.sqrt(Math.log(x)/  3.0);  Math.sqrt(Math.log(x)/  3.0);	  	compilable	  [FE]  ConvergenceException  	116	1	add
261	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  3.0);  Math.sqrt(Math.log(x)/  1.0);  Math.sqrt(Math.log(x)/  3.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	                Math.sqrt(Math.log(x)/        2.0);        Math.sqrt(Math.log(x)/    3.0);    Math.sqrt(Math.log(x)/  1.0);  Math.sqrt(Math.log(x)/  3.0);	  	compilable	  [FE]  ConvergenceException  	116	1	add
262	[BUG]  [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  3.0);  Math.sqrt(Math.log(x)/  1.0);  Math.sqrt(Math.log(x)/  3.0);  [FE]  ConvergenceException  [FE]        ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  3.0);  Math.sqrt(Math.log(x)/  1.0);  Math.sqrt(Math.log(x)/  3.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                Math.sqrt(Math.log(x)/        2.0);        Math.sqrt(Math.log(x)/    3.0);    Math.sqrt(Math.log(x)/  1.0);  Math.sqrt(Math.log(x)/  3.0);	  	compilable	  [FE]  ConvergenceException  	116	1	add
263	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]          ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  3.0);  Math.sqrt(Math.log(x)/  4.0);  Math.sqrt(Math.log(x)/  3.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	                Math.sqrt(Math.log(x)/        2.0);        Math.sqrt(Math.log(x)/    3.0);    Math.sqrt(Math.log(x)/  4.0);  Math.sqrt(Math.log(x)/  3.0);	  	compilable	  [FE]  ConvergenceException  	116	1	add
264	[BUG]  [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  3.0);  Math.sqrt(Math.log(x)/  4.0);  Math.sqrt(Math.log(x)/  3.0);  [FE]  ConvergenceException  [FE]          ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  3.0);  Math.sqrt(Math.log(x)/  4.0);  Math.sqrt(Math.log(x)/  3.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                Math.sqrt(Math.log(x)/        2.0);        Math.sqrt(Math.log(x)/    3.0);    Math.sqrt(Math.log(x)/  4.0);  Math.sqrt(Math.log(x)/  3.0);	  	compilable	  [FE]  ConvergenceException  	116	1	add
265	[BUG]  [BUGGY]  static  final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  static  final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	static  final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  final    double    dev    =    x    /    mean;    static    final    double    dev    =    x    /    mean;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
266	[BUG]  [BUGGY]  static  final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  static  final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	static  final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE;	  final    double    dev    =    x    /    mean;    static    final    double    dev    =    x    /    mean;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
267	[BUG]  [BUGGY]  static  final  double  dev  =  x  /  DEFAULT_INVERSION_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  static  final  double  dev  =  x  /  DEFAULT_INVERSION_ABSOLUTE_ACCURACY;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	static  final  double  dev  =  x  /  DEFAULT_INVERSION_ABSOLUTE_ACCURACY;	  final    double    dev    =    x    /    mean;    static    final    double    dev    =    x    /    mean;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
268	[BUG]  [BUGGY]  null  mean  =  Math.sqrt(x);  double  means  =  Math.sqrt(message);  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  null  mean  =  Math.sqrt(x);  double  means  =  Math.sqrt(message);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	null  mean  =  Math.sqrt(x);  double  means  =  Math.sqrt(message);	          double    mean    =    Math.sqrt(x);    double    means    =    Math.sqrt(x);    	non-compiled	[CE]  not  a  statement	57	None	replace
269	[BUG]  [BUGGY]  null  mean  =  Math.sqrt(x);  double  means  =  Math.sqrt(y);  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  null  mean  =  Math.sqrt(x);  double  means  =  Math.sqrt(y);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	null  mean  =  Math.sqrt(x);  double  means  =  Math.sqrt(y);	          double    mean    =    Math.sqrt(x);    double    means    =    Math.sqrt(x);    	non-compiled	[CE]  not  a  statement	57	None	replace
270	[BUG]  [BUGGY]  final  double  dev  =  x  *  mean;  final  double  dev  =  x  *  mean;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  *  mean;  final  double  dev  =  x  *  mean;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    *    mean;    final  double  dev  =  x  *  mean;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	130	None	add
271	[BUG]  [BUGGY]  final  double  dev  =  x  *  mean;  Final  double  dev  =  x  *  mean;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  *  mean;  Final  double  dev  =  x  *  mean;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    *    mean;    Final  double  dev  =  x  *  mean;	  	non-compiled	[CE]  not  a  statement	130	None	add
272	[BUG]  [BUGGY]  final  double  dev  =  x  *  mean;  static  final  double  dev  =  x  *  mean;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  *  mean;  static  final  double  dev  =  x  *  mean;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    *    mean;    static  final  double  dev  =  x  *  mean;	  	non-compiled	[CE]  illegal  start  of  expression	130	None	add
273	[BUG]  [BUGGY]  final  double  dev  =  x  *  mean;  final  double  DEv  =  x  *  mean;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]          AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  *  mean;  final  double  DEv  =  x  *  mean;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    *    mean;    final  double  DEv  =  x  *  mean;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	130	None	add
274	[BUG]  [BUGGY]  Final  double  dev  =  x  -  mean  +  1;  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Final  double  dev  =  x  -  mean  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Final  double  dev  =  x  -  mean  +  1;	  final    double    dev    =    x    -    mean    +    1;    Final    double    dev    =    x    -    mean    +    1;    	non-compiled	[CE]  not  a  statement	107	None	replace
275	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x)/  2  -  1);  [CE]  cannot  find  symbol  dev  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x)/  2  -  1);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.abs(x)/  2  -  1);	  double    mean    =    Math.sqrt(Math.abs(x)/    2);    	non-compiled	[CE]  cannot  find  symbol  dev	73	None	replace
276	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x)/  2  +  1);  [CE]  cannot  find  symbol  dev  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x)/  2  +  1);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.abs(x)/  2  +  1);	  double    mean    =    Math.sqrt(Math.abs(x)/    2);    	non-compiled	[CE]  cannot  find  symbol  dev	73	None	replace
277	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;	  final    double    dev    =    x    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  AssertionFailedError  	97	6	replace
278	[BUG]  [BUGGY]  final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;	  final    double    dev    =    x    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  AssertionFailedError  	97	6	replace
279	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  final    double    dev    =    x    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  ConvergenceException  	97	5	replace
280	[BUG]  [BUGGY]  final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [FE]  ConvergenceException  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  final    double    dev    =    x    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  ConvergenceException  	97	5	replace
281	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  +  2;  final  double  dev  =  x  -  mean  +  2;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  +  2;  final  double  dev  =  x  -  mean  +  2;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    mean    +    2;    final  double  dev  =  x  -  mean  +  2;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	24	None	add
282	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  +  2;  Final  double  dev  =  x  -  mean  +  2;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  +  2;  Final  double  dev  =  x  -  mean  +  2;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    mean    +    2;    Final  double  dev  =  x  -  mean  +  2;	  	non-compiled	[CE]  not  a  statement	24	None	add
283	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  +  2;  static  final  double  dev  =  x  -  mean  +  2;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  +  2;  static  final  double  dev  =  x  -  mean  +  2;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    mean    +    2;    static  final  double  dev  =  x  -  mean  +  2;	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
284	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  +  2;  final  double  dev  =  x  +  mean  +  2;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]          AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  +  2;  final  double  dev  =  x  +  mean  +  2;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    mean    +    2;    final  double  dev  =  x  +  mean  +  2;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	24	None	add
285	[BUG]  [BUGGY]  null  mean  =  Math.max(0,  Math.abs(x));  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  null  mean  =  Math.max(0,  Math.abs(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	null  mean  =  Math.max(0,  Math.abs(x));	          double    mean    =    Math.max(0,    Math.abs(x));    Double    mean    =    Math.max(0,    Math.abs(x));    	non-compiled	[CE]  not  a  statement	101	None	replace
286	[BUG]  [BUGGY]  final  double  dev  =  x  -  StandardDeviation;  [CE]  cannot  find  symbol  StandardDeviation  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  StandardDeviation;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  StandardDeviation;	  final    double    dev    =    x    -    standardDeviation;    final    double    dev    =    x    -    StandardDeviation;    	non-compiled	[CE]  cannot  find  symbol  StandardDeviation	18	None	replace
287	[BUG]  [BUGGY]  final  double  dev  =  x  *  StandardDeviation;  [CE]  cannot  find  symbol  StandardDeviation  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  *  StandardDeviation;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  *  StandardDeviation;	  final    double    dev    =    x    -    standardDeviation;    final    double    dev    =    x    -    StandardDeviation;    	non-compiled	[CE]  cannot  find  symbol  StandardDeviation	18	None	replace
288	[BUG]  [BUGGY]  final  double  dev  =  x  /  StandardDeviation;  [CE]  cannot  find  symbol  StandardDeviation  [FE]                AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  StandardDeviation;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  /  StandardDeviation;	  final    double    dev    =    x    -    standardDeviation;    final    double    dev    =    x    -    StandardDeviation;    	non-compiled	[CE]  cannot  find  symbol  StandardDeviation	18	None	replace
289	[BUG]  [BUGGY]  Final  double  dev  =  x  -  standardDeviation;  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Final  double  dev  =  x  -  standardDeviation;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Final  double  dev  =  x  -  standardDeviation;	  final    double    dev    =    x    -    standardDeviation;    Final    double    dev    =    x    -    standardDeviation;    	non-compiled	[CE]  not  a  statement	17	None	replace
290	[BUG]  [BUGGY]  double  mean  =  Math.min(0,  Math.abs(x));  double  means  =  Math.max(0,  Math.abs(x));  [CE]  cannot  find  symbol  dev  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.min(0,  Math.abs(x));  double  means  =  Math.max(0,  Math.abs(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.min(0,  Math.abs(x));  double  means  =  Math.max(0,  Math.abs(x));	          double    mean    =    Math.max(0,    Math.abs(x));    double    means    =    Math.max(0,    Math.abs(x));    	non-compiled	[CE]  cannot  find  symbol  dev	104	None	replace
291	[BUG]  [BUGGY]  double  mean  =  Math.min(0.0,  Math.abs(x));  [CE]  cannot  find  symbol  dev  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.min(0.0,  Math.abs(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.min(0.0,  Math.abs(x));	          double    mean    =    Math.max(0,    Math.abs(x));    double    means    =    Math.max(0,    Math.abs(x));    	non-compiled	[CE]  cannot  find  symbol  dev	104	None	replace
292	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  -  standardDeviation  *  1;	  final    double    dev    =    x    -    mean    *    1;    	compilable	  [FE]  AssertionFailedError  	151	6	replace
293	[BUG]  [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  1;  [FE]  AssertionFailedError  [FE]    ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  standardDeviation  *  1;	  final    double    dev    =    x    -    mean    *    1;    	compilable	  [FE]  AssertionFailedError  	151	6	replace
294	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  mean  *  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  /  mean  *  1;	  final    double    dev    =    x    -    mean    *    1;    	compilable	  [FE]  AssertionFailedError  	151	6	replace
295	[BUG]  [BUGGY]  final  double  dev  =  x  /  mean  *  1;  [FE]  AssertionFailedError  [FE]      ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  mean  *  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  /  mean  *  1;	  final    double    dev    =    x    -    mean    *    1;    	compilable	  [FE]  AssertionFailedError  	151	6	replace
296	[BUG]  [BUGGY]  Double  mean  =  Math.abs(x);  [CE]  cannot  find  symbol  dev  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Double  mean  =  Math.abs(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Double  mean  =  Math.abs(x);	          double    mean    =    Math.abs(x);    Double    mean    =    Math.abs(x);    	non-compiled	[CE]  cannot  find  symbol  dev	75	None	replace
297	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(x  +  2);  [CE]  cannot  find  symbol  dev  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(x  +  2);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(x  +  2);	  double    mean    =    Math.sqrt(x    +    1);    	non-compiled	[CE]  cannot  find  symbol  dev	81	None	replace
298	[BUG]  [BUGGY]  final  double  dev  =  standardDeviation  -  x;  final  double  dev  =  standardDeviation  -  x;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  standardDeviation  -  x;  final  double  dev  =  standardDeviation  -  x;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    standardDeviation    -    x;    final  double  dev  =  standardDeviation  -  x;	  timeout    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	135	None	add
299	[BUG]  [BUGGY]  final  double  dev  =  standardDeviation  -  x;  Final  double  dev  =  standardDeviation  -  x;  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  standardDeviation  -  x;  Final  double  dev  =  standardDeviation  -  x;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    standardDeviation    -    x;    Final  double  dev  =  standardDeviation  -  x;	  timeout    	non-compiled	[CE]  not  a  statement	135	None	add
300	[BUG]  [BUGGY]  final  double  dev  =  standardDeviation  -  x;  final  double  devi  =  standardDeviation  -  x;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  standardDeviation  -  x;  final  double  devi  =  standardDeviation  -  x;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    standardDeviation    -    x;    final  double  devi  =  standardDeviation  -  x;	  timeout    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	135	None	add
301	[BUG]  [BUGGY]  final  double  dev  =  standardDeviation  -  x;  final  double  dev  =  standardDeviation  -  x);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  standardDeviation  -  x;  final  double  dev  =  standardDeviation  -  x);  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    standardDeviation    -    x;    final  double  dev  =  standardDeviation  -  x);	  timeout    	non-compiled	[CE]  ';'  expected	135	None	add
302	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(dev);  [CE]  cannot  find  symbol  dev  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(dev);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(dev);	  double    mean    =    Math.sqrt(standardDeviation);    	non-compiled	[CE]  cannot  find  symbol  dev	80	None	replace
303	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(deviation);  [CE]  cannot  find  symbol  deviation  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(deviation);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(deviation);	  double    mean    =    Math.sqrt(standardDeviation);    	non-compiled	[CE]  cannot  find  symbol  deviation	80	None	replace
304	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(mean);  [CE]  cannot  find  symbol  dev  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(mean);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(mean);	  double    mean    =    Math.sqrt(standardDeviation);    	non-compiled	[CE]  cannot  find  symbol  dev	80	None	replace
305	[BUG]  [BUGGY]  timeout  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  /  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  final    double    dev    =    x    /    mean    *    SQRT2PI;    	compilable	timeout	47	1	replace
306	[BUG]  [BUGGY]  final  double  dev  =  x  /  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  timeout  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  /  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  final    double    dev    =    x    /    mean    *    SQRT2PI;    	compilable	timeout	47	1	replace
307	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  *  SQRT2PI;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  *  SQRT2PI;	  final    double    dev    =    x    /    mean    *    SQRT2PI;    	compilable	  [FE]  AssertionFailedError  	47	6	replace
308	[BUG]  [BUGGY]  final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  *  SQRT2PI;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  *  SQRT2PI;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  *  SQRT2PI;	  final    double    dev    =    x    /    mean    *    SQRT2PI;    	compilable	  [FE]  AssertionFailedError  	47	6	replace
309	[BUG]  [BUGGY]  final  double  mean  =  Math.sqrt(x);  [CE]  cannot  find  symbol  dev  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  mean  =  Math.sqrt(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  mean  =  Math.sqrt(x);	          double    mean    =    Math.sqrt(x);    final    double    mean    =    Math.sqrt(x);    	non-compiled	[CE]  cannot  find  symbol  dev	55	None	replace
310	[BUG]  [BUGGY]  null  mean  =  Math.sqrt(x);  final  double  mean  =  Math.sqrt(mean);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  null  mean  =  Math.sqrt(x);  final  double  mean  =  Math.sqrt(mean);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	null  mean  =  Math.sqrt(x);  final  double  mean  =  Math.sqrt(mean);	          double    mean    =    Math.sqrt(x);    final    double    mean    =    Math.sqrt(x);    	non-compiled	[CE]  not  a  statement	55	None	replace
311	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  mean  -  x  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  mean  -  x  +  1;	  final    double    dev    =    x    -    mean    +    1;    final    double    dev    =    x    -    mean    +    2;    	compilable	timeout	108	1	replace
312	[BUG]  [BUGGY]  final  double  dev  =  mean  -  x  +  1;  timeout  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  mean  -  x  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  mean  -  x  +  1;	  final    double    dev    =    x    -    mean    +    1;    final    double    dev    =    x    -    mean    +    2;    	compilable	timeout	108	1	replace
313	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  4;  final  double  dev  =  x  -  mean  *  4;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  *  4;  final  double  dev  =  x  -  mean  *  4;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    mean    *    4;    final  double  dev  =  x  -  mean  *  4;	  timeout    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	152	None	add
314	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  4;  Final  double  dev  =  x  -  mean  *  4;  [CE]  not  a  statement  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  *  4;  Final  double  dev  =  x  -  mean  *  4;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    mean    *    4;    Final  double  dev  =  x  -  mean  *  4;	  timeout    	non-compiled	[CE]  not  a  statement	152	None	add
315	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  4;  final  double  dev  =  x  -  mean  *  3;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  *  4;  final  double  dev  =  x  -  mean  *  3;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    mean    *    4;    final  double  dev  =  x  -  mean  *  3;	  timeout    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	152	None	add
316	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  4;  final  double  dev  =  x  -  mean  *  2;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  *  4;  final  double  dev  =  x  -  mean  *  2;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    mean    *    4;    final  double  dev  =  x  -  mean  *  2;	  timeout    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	152	None	add
317	[BUG]  [BUGGY]  final  double  dev  =  x  *  standardDeviation;  final  double  dev  =  x  *  standardDeviation;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]    ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  *  standardDeviation;  final  double  dev  =  x  *  standardDeviation;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    *    standardDeviation;    final  double  dev  =  x  *  standardDeviation;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	118	None	add
318	[BUG]  [BUGGY]  final  double  dev  =  x  *  standardDeviation;  Final  double  dev  =  x  *  standardDeviation;  [CE]  not  a  statement  [FE]      ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  *  standardDeviation;  Final  double  dev  =  x  *  standardDeviation;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    *    standardDeviation;    Final  double  dev  =  x  *  standardDeviation;	  	non-compiled	[CE]  not  a  statement	118	None	add
319	[BUG]  [BUGGY]  final  double  dev  =  x  *  standardDeviation;  final  double  dev  =  x  *  StandardDeviation;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]        ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  *  standardDeviation;  final  double  dev  =  x  *  StandardDeviation;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    *    standardDeviation;    final  double  dev  =  x  *  StandardDeviation;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	118	None	add
320	[BUG]  [BUGGY]  final  double  dev  =  x  *  standardDeviation;  final  double  dev  =  x  *  normalDeviation;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]          ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  *  standardDeviation;  final  double  dev  =  x  *  normalDeviation;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    *    standardDeviation;    final  double  dev  =  x  *  normalDeviation;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	118	None	add
321	[BUG]  [BUGGY]  double  mean  =  Math.max(0,  Math.abs(x),  Math.abs(y));  [CE]  cannot  find  symbol  y  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.max(0,  Math.abs(x),  Math.abs(y));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.max(0,  Math.abs(x),  Math.abs(y));	          double    mean    =    Math.max(0,    Math.abs(x));    double    mean    =    Math.max(0,    Math.abs(y));    	non-compiled	[CE]  cannot  find  symbol  y	102	None	replace
322	[BUG]  [BUGGY]  n  =  Math.max(0,  Math.abs(x));  [CE]  cannot  find  symbol  n  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  n  =  Math.max(0,  Math.abs(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	n  =  Math.max(0,  Math.abs(x));	          double    mean    =    Math.max(0,    Math.abs(x));    double    mean    =    Math.max(0,    Math.abs(y));    	non-compiled	[CE]  cannot  find  symbol  n	102	None	replace
323	[BUG]  [BUGGY]  double  standardDeviation  =  FastMath.sqrt(2.0);  [CE]  cannot  find  symbol  dev  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  standardDeviation  =  FastMath.sqrt(2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  standardDeviation  =  FastMath.sqrt(2.0);	          double    mean    =    Math.abs(x);    long    standardDeviation    =    FastMath.sqrt(2.0);    	non-compiled	[CE]  cannot  find  symbol  dev	142	None	replace
324	[BUG]  [BUGGY]  int  standardDeviation  =  FastMath.sqrt(2.0);  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  int  standardDeviation  =  FastMath.sqrt(2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	int  standardDeviation  =  FastMath.sqrt(2.0);	          double    mean    =    Math.abs(x);    long    standardDeviation    =    FastMath.sqrt(2.0);    	non-compiled	[CE]  possible  loss  of  precision	142	None	replace
325	[BUG]  [BUGGY]  long  standardDeviation  =  FastMath.sqrt(2.0);  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  long  standardDeviation  =  FastMath.sqrt(2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	long  standardDeviation  =  FastMath.sqrt(2.0);	          double    mean    =    Math.abs(x);    long    standardDeviation    =    FastMath.sqrt(2.0);    	non-compiled	[CE]  possible  loss  of  precision	142	None	replace
326	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  standardDeviation  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  /  standardDeviation  +  1;	  final    double    dev    =    x    -    standardDeviation    +    1;    	compilable	  [FE]  AssertionFailedError  	21	6	replace
327	[BUG]  [BUGGY]  final  double  dev  =  x  /  standardDeviation  +  1;  [FE]  AssertionFailedError  [FE]    ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  standardDeviation  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  /  standardDeviation  +  1;	  final    double    dev    =    x    -    standardDeviation    +    1;    	compilable	  [FE]  AssertionFailedError  	21	6	replace
328	[BUG]  [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(false,  x);  [CE]  no  suitable  method  found  for  cumulativeProbability(boolean,double)  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(false,  x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.log(x)/  cumulativeProbability(false,  x);	  double    mean    =    Math.log(x)/    cumulativeProbability(true);    	non-compiled	[CE]  no  suitable  method  found  for  cumulativeProbability(boolean,double)	138	None	replace
329	[BUG]  [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(true,  x);  [CE]  no  suitable  method  found  for  cumulativeProbability(boolean,double)  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(true,  x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.log(x)/  cumulativeProbability(true,  x);	  double    mean    =    Math.log(x)/    cumulativeProbability(true);    	non-compiled	[CE]  no  suitable  method  found  for  cumulativeProbability(boolean,double)	138	None	replace
330	[BUG]  [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(true,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  no  suitable  method  found  for  cumulativeProbability(boolean,double)  [FE]                      ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(true,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.log(x)/  cumulativeProbability(true,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  double    mean    =    Math.log(x)/    cumulativeProbability(true);    	non-compiled	[CE]  no  suitable  method  found  for  cumulativeProbability(boolean,double)	138	None	replace
331	[BUG]  [BUGGY]  final  double  dev  =  this.mean  -  x;  final  double  dev  =  this.mean  -  x;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  this.mean  -  x;  final  double  dev  =  this.mean  -  x;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    this.mean    -    x;    final  double  dev  =  this.mean  -  x;	  timeout    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	60	None	add
332	[BUG]  [BUGGY]  final  double  dev  =  this.mean  -  x;  Final  double  dev  =  this.mean  -  x;  [CE]  not  a  statement  [FE]                      ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  this.mean  -  x;  Final  double  dev  =  this.mean  -  x;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    this.mean    -    x;    Final  double  dev  =  this.mean  -  x;	  timeout    	non-compiled	[CE]  not  a  statement	60	None	add
333	[BUG]  [BUGGY]  final  double  dev  =  this.mean  -  x;  static  final  double  dev  =  this.mean  -  x;  [CE]  illegal  start  of  expression  [FE]                        ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  this.mean  -  x;  static  final  double  dev  =  this.mean  -  x;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    this.mean    -    x;    static  final  double  dev  =  this.mean  -  x;	  timeout    	non-compiled	[CE]  illegal  start  of  expression	60	None	add
334	[BUG]  [BUGGY]  final  double  dev  =  this.mean  -  x;  final  double  DEv  =  this.mean  -  x;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]                          ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  this.mean  -  x;  final  double  DEv  =  this.mean  -  x;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    this.mean    -    x;    final  double  DEv  =  this.mean  -  x;	  timeout    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	60	None	add
335	[BUG]  [BUGGY]          double    mean    =    Math.max(0,    Math.abs(x));    double  means  =  Math.max(0,  Math.abs(x));  double  mean  =  Math.max(0,  Math.abs(x));  double  means  =  Math.max(0,  Math.abs(x));  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          double    mean    =    Math.max(0,    Math.abs(x));    double  means  =  Math.max(0,  Math.abs(x));  double  mean  =  Math.max(0,  Math.abs(x));  double  means  =  Math.max(0,  Math.abs(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                double        mean        =        Math.max(0,        Math.abs(x));        double    means    =    Math.max(0,    Math.abs(x));    double  mean  =  Math.max(0,  Math.abs(x));  double  means  =  Math.max(0,  Math.abs(x));	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	103	None	add
336	[BUG]  [BUGGY]          double    mean    =    Math.max(0,    Math.abs(x));    double  means  =  Math.max(0,  Math.abs(x));  Double  mean  =  Math.max(0,  Math.abs(x));  double  means  =  Math.max(0,  Math.abs(x));  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          double    mean    =    Math.max(0,    Math.abs(x));    double  means  =  Math.max(0,  Math.abs(x));  Double  mean  =  Math.max(0,  Math.abs(x));  double  means  =  Math.max(0,  Math.abs(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                double        mean        =        Math.max(0,        Math.abs(x));        double    means    =    Math.max(0,    Math.abs(x));    Double  mean  =  Math.max(0,  Math.abs(x));  double  means  =  Math.max(0,  Math.abs(x));	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	103	None	add
337	[BUG]  [BUGGY]          double    mean    =    Math.max(0,    Math.abs(x));    double  means  =  Math.max(0,  Math.abs(x));  double  mean  =  Math.min(0,  Math.abs(x));  double  means  =  Math.max(0,  Math.abs(x));  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]        AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          double    mean    =    Math.max(0,    Math.abs(x));    double  means  =  Math.max(0,  Math.abs(x));  double  mean  =  Math.min(0,  Math.abs(x));  double  means  =  Math.max(0,  Math.abs(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                double        mean        =        Math.max(0,        Math.abs(x));        double    means    =    Math.max(0,    Math.abs(x));    double  mean  =  Math.min(0,  Math.abs(x));  double  means  =  Math.max(0,  Math.abs(x));	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	103	None	add
338	[BUG]  [BUGGY]          double    mean    =    Math.max(0,    Math.abs(x));    double  means  =  Math.max(0,  Math.abs(x));  double  mean  =  Math.max(1,  Math.abs(x));  double  means  =  Math.max(0,  Math.abs(x));  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]          AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          double    mean    =    Math.max(0,    Math.abs(x));    double  means  =  Math.max(0,  Math.abs(x));  double  mean  =  Math.max(1,  Math.abs(x));  double  means  =  Math.max(0,  Math.abs(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                double        mean        =        Math.max(0,        Math.abs(x));        double    means    =    Math.max(0,    Math.abs(x));    double  mean  =  Math.max(1,  Math.abs(x));  double  means  =  Math.max(0,  Math.abs(x));	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	103	None	add
339	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.exp(x)+  1);  [CE]  cannot  find  symbol  dev  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.exp(x)+  1);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.exp(x)+  1);	  double    mean    =    Math.sqrt(Math.exp(x));    	non-compiled	[CE]  cannot  find  symbol  dev	50	None	replace
340	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.ceil(x));  [CE]  cannot  find  symbol  dev  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.ceil(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.ceil(x));	  double    mean    =    Math.sqrt(Math.exp(x));    	non-compiled	[CE]  cannot  find  symbol  dev	50	None	replace
341	[BUG]  [BUGGY]  final  double  dev  =  x  /  SQRT2PI;  final  double  dev  =  x  /  SQRT2PI;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  SQRT2PI;  final  double  dev  =  x  /  SQRT2PI;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    /    SQRT2PI;    final  double  dev  =  x  /  SQRT2PI;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	92	None	add
342	[BUG]  [BUGGY]  final  double  dev  =  x  /  SQRT2PI;  Final  double  dev  =  x  /  SQRT2PI;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  SQRT2PI;  Final  double  dev  =  x  /  SQRT2PI;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    /    SQRT2PI;    Final  double  dev  =  x  /  SQRT2PI;	  	non-compiled	[CE]  not  a  statement	92	None	add
343	[BUG]  [BUGGY]  final  double  dev  =  x  /  SQRT2PI;  final  double  dev  =  x  /  SqRT2PI;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]        AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  SQRT2PI;  final  double  dev  =  x  /  SqRT2PI;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    /    SQRT2PI;    final  double  dev  =  x  /  SqRT2PI;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	92	None	add
344	[BUG]  [BUGGY]  final  double  dev  =  x  /  SQRT2PI;  final  double  DEv  =  x  /  SQRT2PI;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]          AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  SQRT2PI;  final  double  DEv  =  x  /  SQRT2PI;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    /    SQRT2PI;    final  double  DEv  =  x  /  SQRT2PI;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	92	None	add
345	[BUG]  [BUGGY]  Double  mean  =  Math.sqrt(Math.abs(x));  [CE]  cannot  find  symbol  dev  [FE]                AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Double  mean  =  Math.sqrt(Math.abs(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Double  mean  =  Math.sqrt(Math.abs(x));	          double    mean    =    Math.sqrt(Math.abs(x));    double    mean    =    Math.sqrt(Math.abs(y));    	non-compiled	[CE]  cannot  find  symbol  dev	66	None	replace
346	[BUG]  [BUGGY]  long  standardDeviation  =  Math.sqrt(Math.log(x));  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  long  standardDeviation  =  Math.sqrt(Math.log(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	long  standardDeviation  =  Math.sqrt(Math.log(x));	          double    mean    =    Math.sqrt(Math.log(x));    long    standardDeviation    =    Math.sqrt(Math.log(x));    	non-compiled	[CE]  possible  loss  of  precision	85	None	replace
347	[BUG]  [BUGGY]  int  standardDeviation  =  Math.sqrt(Math.log(x));  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  int  standardDeviation  =  Math.sqrt(Math.log(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	int  standardDeviation  =  Math.sqrt(Math.log(x));	          double    mean    =    Math.sqrt(Math.log(x));    long    standardDeviation    =    Math.sqrt(Math.log(x));    	non-compiled	[CE]  possible  loss  of  precision	85	None	replace
348	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.random()  /  Math.random());  [CE]  cannot  find  symbol  dev  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.random()  /  Math.random());  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.random()  /  Math.random());	  double    mean    =    Math.sqrt(Math.random()    *    Math.random());    	non-compiled	[CE]  cannot  find  symbol  dev	51	None	replace
349	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.random()  *  FastMath.random());  [CE]  cannot  find  symbol  dev  [FE]                AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.random()  *  FastMath.random());  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.random()  *  FastMath.random());	  double    mean    =    Math.sqrt(Math.random()    *    Math.random());    	non-compiled	[CE]  cannot  find  symbol  dev	51	None	replace
350	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.random()  *  Math.random()  /  2.0);  [CE]  cannot  find  symbol  dev  [FE]                  AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.random()  *  Math.random()  /  2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.random()  *  Math.random()  /  2.0);	  double    mean    =    Math.sqrt(Math.random()    *    Math.random());    	non-compiled	[CE]  cannot  find  symbol  dev	51	None	replace
351	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.random()  *  Math.random()  -  1);  [CE]  cannot  find  symbol  dev  [FE]                    AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.random()  *  Math.random()  -  1);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.random()  *  Math.random()  -  1);	  double    mean    =    Math.sqrt(Math.random()    *    Math.random());    	non-compiled	[CE]  cannot  find  symbol  dev	51	None	replace
352	[BUG]  [BUGGY]  double  mean  =  Math.max(1.0,  x);  x  =  Math.abs(x);  [CE]  cannot  find  symbol  dev  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.max(1.0,  x);  x  =  Math.abs(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.max(1.0,  x);  x  =  Math.abs(x);	          double    mean    =    Math.abs(x);    x    =    Math.abs(x);    	non-compiled	[CE]  cannot  find  symbol  dev	79	None	replace
353	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(x);  x  =  Math.abs(x);  [CE]  cannot  find  symbol  dev  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(x);  x  =  Math.abs(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(x);  x  =  Math.abs(x);	          double    mean    =    Math.abs(x);    x    =    Math.abs(x);    	non-compiled	[CE]  cannot  find  symbol  dev	79	None	replace
354	[BUG]  [BUGGY]  double  mean  =  Math.max(0,  x);  x  =  Math.abs(x);  [CE]  cannot  find  symbol  dev  [FE]        AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.max(0,  x);  x  =  Math.abs(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.max(0,  x);  x  =  Math.abs(x);	          double    mean    =    Math.abs(x);    x    =    Math.abs(x);    	non-compiled	[CE]  cannot  find  symbol  dev	79	None	replace
355	[BUG]  [BUGGY]  final  double  dev  =  mean  /  x;  final  double  dev  =  mean  /  x;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  mean  /  x;  final  double  dev  =  mean  /  x;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    mean    /    x;    final  double  dev  =  mean  /  x;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	98	None	add
356	[BUG]  [BUGGY]  final  double  dev  =  mean  /  x;  Final  double  dev  =  mean  /  x;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  mean  /  x;  Final  double  dev  =  mean  /  x;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    mean    /    x;    Final  double  dev  =  mean  /  x;	  	non-compiled	[CE]  not  a  statement	98	None	add
357	[BUG]  [BUGGY]  final  double  dev  =  mean  /  x;  static  final  double  dev  =  mean  /  x;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  mean  /  x;  static  final  double  dev  =  mean  /  x;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    mean    /    x;    static  final  double  dev  =  mean  /  x;	  	non-compiled	[CE]  illegal  start  of  expression	98	None	add
358	[BUG]  [BUGGY]  final  double  dev  =  mean  /  x;  final  double  dev  =  mean  *  x;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]          AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  mean  /  x;  final  double  dev  =  mean  *  x;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    mean    /    x;    final  double  dev  =  mean  *  x;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	98	None	add
359	[BUG]  [BUGGY]  double  standardDeviation  =  FastMath.sqrt(1.0);  [CE]  cannot  find  symbol  dev  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  standardDeviation  =  FastMath.sqrt(1.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  standardDeviation  =  FastMath.sqrt(1.0);	          double    mean    =    Math.abs(x);    long    standardDeviation    =    FastMath.sqrt(1.0);    	non-compiled	[CE]  cannot  find  symbol  dev	143	None	replace
360	[BUG]  [BUGGY]  int  standardDeviation  =  FastMath.sqrt(1.0);  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  int  standardDeviation  =  FastMath.sqrt(1.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	int  standardDeviation  =  FastMath.sqrt(1.0);	          double    mean    =    Math.abs(x);    long    standardDeviation    =    FastMath.sqrt(1.0);    	non-compiled	[CE]  possible  loss  of  precision	143	None	replace
361	[BUG]  [BUGGY]  long  standardDeviation  =  FastMath.sqrt(1.0);  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  long  standardDeviation  =  FastMath.sqrt(1.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	long  standardDeviation  =  FastMath.sqrt(1.0);	          double    mean    =    Math.abs(x);    long    standardDeviation    =    FastMath.sqrt(1.0);    	non-compiled	[CE]  possible  loss  of  precision	143	None	replace
362	[BUG]  [BUGGY]  Math.rint(Math.log(x)/  2.0);  Mat.rint(Math.log(x)/  2.0);  [CE]  cannot  find  symbol  Mat  [FE]          ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Math.rint(Math.log(x)/  2.0);  Mat.rint(Math.log(x)/  2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.rint(Math.log(x)/  2.0);  Mat.rint(Math.log(x)/  2.0);	          Math.sqrt(Math.log(x)/    2.0);    Mat.sqrt(Math.log(x)/    2.0);    	non-compiled	[CE]  cannot  find  symbol  Mat	112	None	replace
363	[BUG]  [BUGGY]  Math.pow(10,  Math.log(x)/  2.0);  Mat.sqrt(Math.log(x)/  2.0);  [CE]  cannot  find  symbol  Mat  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Math.pow(10,  Math.log(x)/  2.0);  Mat.sqrt(Math.log(x)/  2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.pow(10,  Math.log(x)/  2.0);  Mat.sqrt(Math.log(x)/  2.0);	          Math.sqrt(Math.log(x)/    2.0);    Mat.sqrt(Math.log(x)/    2.0);    	non-compiled	[CE]  cannot  find  symbol  Mat	112	None	replace
364	[BUG]  [BUGGY]  timeout  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  *  SQRT2PI  /  1  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  -  mean  *  SQRT2PI  /  1  +  1;	  final    double    dev    =    x    -    mean    *    SQRT2PI    +    1;    timeout    	compilable	timeout	155	1	replace
365	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  SQRT2PI  /  1  +  1;  timeout  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  *  SQRT2PI  /  1  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  mean  *  SQRT2PI  /  1  +  1;	  final    double    dev    =    x    -    mean    *    SQRT2PI    +    1;    timeout    	compilable	timeout	155	1	replace
366	[BUG]  [BUGGY]  timeout  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  *  SQRT2PI  /  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  -  mean  *  SQRT2PI  /  1;	  final    double    dev    =    x    -    mean    *    SQRT2PI    +    1;    timeout    	compilable	timeout	155	1	replace
367	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  SQRT2PI  /  1;  timeout  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  *  SQRT2PI  /  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  mean  *  SQRT2PI  /  1;	  final    double    dev    =    x    -    mean    *    SQRT2PI    +    1;    timeout    	compilable	timeout	155	1	replace
368	[BUG]  [BUGGY]  double  mean  =  Math.max(0,  Math.abs(x  -  1)-  1);  [CE]  cannot  find  symbol  dev  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.max(0,  Math.abs(x  -  1)-  1);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.max(0,  Math.abs(x  -  1)-  1);	  double    mean    =    Math.max(0,    Math.abs(x)-    1);    	non-compiled	[CE]  cannot  find  symbol  dev	89	None	replace
369	[BUG]  [BUGGY]  double  mean  =  Math.max(0,  Math.abs(x)-  2);  [CE]  cannot  find  symbol  dev  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.max(0,  Math.abs(x)-  2);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.max(0,  Math.abs(x)-  2);	  double    mean    =    Math.max(0,    Math.abs(x)-    1);    	non-compiled	[CE]  cannot  find  symbol  dev	89	None	replace
370	[BUG]  [BUGGY]  double  mean  =  Math.abs(x  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  cannot  find  symbol  dev  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(x  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.abs(x  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  double    mean    =    Math.abs(x    *    standardDeviation);    	non-compiled	[CE]  cannot  find  symbol  dev	5	None	replace
371	[BUG]  [BUGGY]  double  mean  =  Math.abs(mean  *  x);  [CE]  cannot  find  symbol  dev  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(mean  *  x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.abs(mean  *  x);	  double    mean    =    Math.abs(x    *    standardDeviation);    	non-compiled	[CE]  cannot  find  symbol  dev	5	None	replace
372	[BUG]  [BUGGY]  double  mean  =  Math.abs(x  /  20);  [CE]  cannot  find  symbol  dev  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(x  /  20);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.abs(x  /  20);	  double    mean    =    Math.abs(x    -    20);    	non-compiled	[CE]  cannot  find  symbol  dev	6	None	replace
373	[BUG]  [BUGGY]  Double  standardDeviation  =  Math.abs(x  -  dev);  [CE]  cannot  find  symbol  dev  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Double  standardDeviation  =  Math.abs(x  -  dev);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Double  standardDeviation  =  Math.abs(x  -  dev);	          double    mean    =    Math.abs(x    -    standardDeviation);    Double    standardDeviation    =    Math.abs(x    -    standardDeviation);    	non-compiled	[CE]  cannot  find  symbol  dev	160	None	replace
374	[BUG]  [BUGGY]  double  standardDeviation  =  Math.abs(x  -  dev);  [CE]  cannot  find  symbol  dev  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  standardDeviation  =  Math.abs(x  -  dev);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  standardDeviation  =  Math.abs(x  -  dev);	          double    mean    =    Math.abs(x    -    standardDeviation);    Double    standardDeviation    =    Math.abs(x    -    standardDeviation);    	non-compiled	[CE]  cannot  find  symbol  dev	160	None	replace
375	[BUG]  [BUGGY]  Double  standardDeviation  =  Math.abs(x  -  standardDeviation);  [CE]  cannot  find  symbol  dev  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Double  standardDeviation  =  Math.abs(x  -  standardDeviation);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Double  standardDeviation  =  Math.abs(x  -  standardDeviation);	          double    mean    =    Math.abs(x    -    standardDeviation);    Double    standardDeviation    =    Math.abs(x    -    standardDeviation);    	non-compiled	[CE]  cannot  find  symbol  dev	160	None	replace
376	[BUG]  [BUGGY]  Double  standardDeviation  =  Math.abs(x  -  baseDuration);  [CE]  cannot  find  symbol  baseDuration  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Double  standardDeviation  =  Math.abs(x  -  baseDuration);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Double  standardDeviation  =  Math.abs(x  -  baseDuration);	          double    mean    =    Math.abs(x    -    standardDeviation);    Double    standardDeviation    =    Math.abs(x    -    standardDeviation);    	non-compiled	[CE]  cannot  find  symbol  baseDuration	160	None	replace
377	[BUG]  [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  SQRT2PI;  final  double  dev  =  x  -  standardDeviation  *  SQRT2PI;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  SQRT2PI;  final  double  dev  =  x  -  standardDeviation  *  SQRT2PI;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    standardDeviation    *    SQRT2PI;    final  double  dev  =  x  -  standardDeviation  *  SQRT2PI;	  timeout    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	42	None	add
378	[BUG]  [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  SQRT2PI;  final  double  dev  =  x  -  standardDeviation  *  SqRT2PI;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  SQRT2PI;  final  double  dev  =  x  -  standardDeviation  *  SqRT2PI;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    standardDeviation    *    SQRT2PI;    final  double  dev  =  x  -  standardDeviation  *  SqRT2PI;	  timeout    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	42	None	add
379	[BUG]  [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  SQRT2PI;  Final  double  dev  =  x  -  standardDeviation  *  SQRT2PI;  [CE]  not  a  statement  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  SQRT2PI;  Final  double  dev  =  x  -  standardDeviation  *  SQRT2PI;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    standardDeviation    *    SQRT2PI;    Final  double  dev  =  x  -  standardDeviation  *  SQRT2PI;	  timeout    	non-compiled	[CE]  not  a  statement	42	None	add
380	[BUG]  [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  SQRT2PI;  final  double  dev  =  x  -  StandardDeviation  *  SQRT2PI;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  SQRT2PI;  final  double  dev  =  x  -  StandardDeviation  *  SQRT2PI;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    standardDeviation    *    SQRT2PI;    final  double  dev  =  x  -  StandardDeviation  *  SQRT2PI;	  timeout    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	42	None	add
381	[BUG]  [BUGGY]  double  standardDeviation  =  FastMath.sqrt(0.0);  [CE]  cannot  find  symbol  dev  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  standardDeviation  =  FastMath.sqrt(0.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  standardDeviation  =  FastMath.sqrt(0.0);	          double    mean    =    Math.abs(x);    long    standardDeviation    =    FastMath.sqrt(0.0);    	non-compiled	[CE]  cannot  find  symbol  dev	144	None	replace
382	[BUG]  [BUGGY]  int  standardDeviation  =  FastMath.sqrt(0.0);  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  int  standardDeviation  =  FastMath.sqrt(0.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	int  standardDeviation  =  FastMath.sqrt(0.0);	          double    mean    =    Math.abs(x);    long    standardDeviation    =    FastMath.sqrt(0.0);    	non-compiled	[CE]  possible  loss  of  precision	144	None	replace
383	[BUG]  [BUGGY]  long  standardDeviation  =  FastMath.sqrt(0.0);  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  long  standardDeviation  =  FastMath.sqrt(0.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	long  standardDeviation  =  FastMath.sqrt(0.0);	          double    mean    =    Math.abs(x);    long    standardDeviation    =    FastMath.sqrt(0.0);    	non-compiled	[CE]  possible  loss  of  precision	144	None	replace
384	[BUG]  [BUGGY]  Math.sqrt(Math.log(x));  [CE]  cannot  find  symbol  dev  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Math.sqrt(Math.log(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.sqrt(Math.log(x));	          double    mean    =    Math.sqrt(Math.log(x));    Math.sqrt(Math.log(x));    	non-compiled	[CE]  cannot  find  symbol  dev	148	None	replace
385	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x));  [CE]  cannot  find  symbol  dev  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x));	          double    mean    =    Math.sqrt(Math.log(x));    Math.sqrt(Math.log(x));    	non-compiled	[CE]  cannot  find  symbol  dev	148	None	replace
386	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.log(x)-  1);  Math.sqrt(Math.log(x));  [CE]  cannot  find  symbol  dev  [FE]        AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.log(x)-  1);  Math.sqrt(Math.log(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.log(x)-  1);  Math.sqrt(Math.log(x));	          double    mean    =    Math.sqrt(Math.log(x));    Math.sqrt(Math.log(x));    	non-compiled	[CE]  cannot  find  symbol  dev	148	None	replace
387	[BUG]  [BUGGY]  final  double  dev  =  x  *  mean  +  1;  final  double  dev  =  x  *  mean  +  1;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  *  mean  +  1;  final  double  dev  =  x  *  mean  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    *    mean    +    1;    final  double  dev  =  x  *  mean  +  1;	  timeout    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	176	None	add
388	[BUG]  [BUGGY]  final  double  dev  =  x  *  mean  +  1;  Final  double  dev  =  x  *  mean  +  1;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  *  mean  +  1;  Final  double  dev  =  x  *  mean  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    *    mean    +    1;    Final  double  dev  =  x  *  mean  +  1;	  timeout    	non-compiled	[CE]  not  a  statement	176	None	add
389	[BUG]  [BUGGY]  final  double  dev  =  x  *  mean  +  1;  final  double  dev  =  x  *  mean  +  2;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  *  mean  +  1;  final  double  dev  =  x  *  mean  +  2;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    *    mean    +    1;    final  double  dev  =  x  *  mean  +  2;	  timeout    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	176	None	add
390	[BUG]  [BUGGY]  final  double  dev  =  x  *  mean  +  1;  static  final  double  dev  =  x  *  mean  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  *  mean  +  1;  static  final  double  dev  =  x  *  mean  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    *    mean    +    1;    static  final  double  dev  =  x  *  mean  +  1;	  timeout    	non-compiled	[CE]  illegal  start  of  expression	176	None	add
391	[BUG]  [BUGGY]  Double  mean  =  Math.sqrt(Math.abs(x)+  1);  [CE]  cannot  find  symbol  dev  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Double  mean  =  Math.sqrt(Math.abs(x)+  1);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Double  mean  =  Math.sqrt(Math.abs(x)+  1);	          double    mean    =    Math.sqrt(Math.abs(x));    Double    mean    =    Math.sqrt(Math.abs(x));    	non-compiled	[CE]  cannot  find  symbol  dev	63	None	replace
392	[BUG]  [BUGGY]  double  mean  =  Math.min(0,  Math.abs(x)-  1);  [CE]  cannot  find  symbol  dev  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.min(0,  Math.abs(x)-  1);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.min(0,  Math.abs(x)-  1);	  double    mean    =    Math.min(0,    Math.abs(x));    	non-compiled	[CE]  cannot  find  symbol  dev	90	None	replace
393	[BUG]  [BUGGY]  double  mean  =  Math.min(0,  Math.abs(x)+  1);  [CE]  cannot  find  symbol  dev  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.min(0,  Math.abs(x)+  1);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.min(0,  Math.abs(x)+  1);	  double    mean    =    Math.min(0,    Math.abs(x));    	non-compiled	[CE]  cannot  find  symbol  dev	90	None	replace
394	[BUG]  [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(true,  false);  [CE]  no  suitable  method  found  for  cumulativeProbability(boolean,boolean)  [FE]                      ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(true,  false);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.log(x)/  cumulativeProbability(true,  false);	  double    mean    =    Math.log(x)/    cumulativeProbability(false);    	non-compiled	[CE]  no  suitable  method  found  for  cumulativeProbability(boolean,boolean)	140	None	replace
395	[BUG]  [BUGGY]  static  final  double  dev  =  x  *  mean;  [CE]  illegal  start  of  expression  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  static  final  double  dev  =  x  *  mean;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	static  final  double  dev  =  x  *  mean;	  final    double    dev    =    mean    -    x;    static    final    double    dev    =    mean    -    x;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
396	[BUG]  [BUGGY]  static  final  double  dev  =  x0  -  x;  [CE]  illegal  start  of  expression  [FE]                      ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  static  final  double  dev  =  x0  -  x;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	static  final  double  dev  =  x0  -  x;	  final    double    dev    =    mean    -    x;    static    final    double    dev    =    mean    -    x;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
397	[BUG]  [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(sqrt1);  [CE]  cannot  find  symbol  sqrt1  [FE]                      ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(sqrt1);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.log(x)/  cumulativeProbability(sqrt1);	  double    mean    =    Math.log(x)/    cumulativeProbability(sqrt2);    	non-compiled	[CE]  cannot  find  symbol  sqrt1	38	None	replace
398	[BUG]  [BUGGY]  static  final  double  dev  =  x  /  standardDeviation;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  static  final  double  dev  =  x  /  standardDeviation;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	static  final  double  dev  =  x  /  standardDeviation;	  final    double    dev    =    x    -    standardDeviation;    static    final    double    dev    =    x    -    standardDeviation;    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
399	[BUG]  [BUGGY]  static  final  double  dev  =  x  -  StandardDeviation;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  static  final  double  dev  =  x  -  StandardDeviation;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	static  final  double  dev  =  x  -  StandardDeviation;	  final    double    dev    =    x    -    standardDeviation;    static    final    double    dev    =    x    -    standardDeviation;    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
400	[BUG]  [BUGGY]  final  double  dev  =  x  /  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [CE]  cannot  find  symbol  StandardDistributionImpl  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  /  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;	  final    double    dev    =    x    /    mean    +    1;    	non-compiled	[CE]  cannot  find  symbol  StandardDistributionImpl	175	None	replace
401	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(x  *  2.0);  [CE]  cannot  find  symbol  dev  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(x  *  2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(x  *  2.0);	  double    mean    =    Math.sqrt(x    /    2.0);    	non-compiled	[CE]  cannot  find  symbol  dev	129	None	replace
402	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(standardDeviation  /  2.0);  [CE]  cannot  find  symbol  dev  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(standardDeviation  /  2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(standardDeviation  /  2.0);	  double    mean    =    Math.sqrt(x    /    2.0);    	non-compiled	[CE]  cannot  find  symbol  dev	129	None	replace
403	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(x  +  2.0);  [CE]  cannot  find  symbol  dev  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(x  +  2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(x  +  2.0);	  double    mean    =    Math.sqrt(x    /    2.0);    	non-compiled	[CE]  cannot  find  symbol  dev	129	None	replace
404	[BUG]  [BUGGY]  Double  mean  =  Math.abs(mean  -  standardDeviation);  [CE]  cannot  find  symbol  dev  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Double  mean  =  Math.abs(mean  -  standardDeviation);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Double  mean  =  Math.abs(mean  -  standardDeviation);	          double    mean    =    Math.abs(x    -    standardDeviation);    Double    mean    =    Math.abs(x    -    standardDeviation);    	non-compiled	[CE]  cannot  find  symbol  dev	8	None	replace
405	[BUG]  [BUGGY]  Double  mean  =  Math.abs(x  -  standardDeviation);  [CE]  cannot  find  symbol  dev  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Double  mean  =  Math.abs(x  -  standardDeviation);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Double  mean  =  Math.abs(x  -  standardDeviation);	          double    mean    =    Math.abs(x    -    standardDeviation);    Double    mean    =    Math.abs(x    -    standardDeviation);    	non-compiled	[CE]  cannot  find  symbol  dev	8	None	replace
406	[BUG]  [BUGGY]  double  mean  =  Math.log(x)/  solverAbsoluteAccuracy;  [CE]  cannot  find  symbol  dev  [FE]                      ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.log(x)/  solverAbsoluteAccuracy;  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.log(x)/  solverAbsoluteAccuracy;	  double    mean    =    Math.log(x)/    inverseCumAccuracy;    	non-compiled	[CE]  cannot  find  symbol  dev	27	None	replace
407	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	                Math.sqrt(Math.log(x)/        2.0);        Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  2.0);	  	compilable	  [FE]  ConvergenceException  	110	1	add
408	[BUG]  [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  2.0);  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                Math.sqrt(Math.log(x)/        2.0);        Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  2.0);	  	compilable	  [FE]  ConvergenceException  	110	1	add
409	[BUG]  [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(y)/  2.0);  Math.sqrt(Math.log(x)/  2.0);  [CE]  cannot  find  symbol  y  [FE]      ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(y)/  2.0);  Math.sqrt(Math.log(x)/  2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                Math.sqrt(Math.log(x)/        2.0);        Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(y)/  2.0);  Math.sqrt(Math.log(x)/  2.0);	  	non-compiled	[CE]  cannot  find  symbol  y	110	None	add
410	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  1.0);  Math.sqrt(Math.log(x)/  1.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	                Math.sqrt(Math.log(x)/        2.0);        Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  1.0);  Math.sqrt(Math.log(x)/  1.0);	  	compilable	  [FE]  ConvergenceException  	110	1	add
411	[BUG]  [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  1.0);  Math.sqrt(Math.log(x)/  1.0);  [FE]  ConvergenceException  [FE]        ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  1.0);  Math.sqrt(Math.log(x)/  1.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                Math.sqrt(Math.log(x)/        2.0);        Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  1.0);  Math.sqrt(Math.log(x)/  1.0);	  	compilable	  [FE]  ConvergenceException  	110	1	add
412	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]          ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x));  Math.sqrt(Math.log(x)/  2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	                Math.sqrt(Math.log(x)/        2.0);        Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x));  Math.sqrt(Math.log(x)/  2.0);	  	compilable	  [FE]  ConvergenceException  	110	1	add
413	[BUG]  [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x));  Math.sqrt(Math.log(x)/  2.0);  [FE]  ConvergenceException  [FE]          ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x));  Math.sqrt(Math.log(x)/  2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                Math.sqrt(Math.log(x)/        2.0);        Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x));  Math.sqrt(Math.log(x)/  2.0);	  	compilable	  [FE]  ConvergenceException  	110	1	add
414	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  1.0);  Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  1.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	                Math.sqrt(Math.log(x)/        2.0);        Math.sqrt(Math.log(x)/    1.0);    Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  1.0);	  	compilable	  [FE]  ConvergenceException  	113	1	add
415	[BUG]  [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  1.0);  Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  1.0);  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  1.0);  Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  1.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                Math.sqrt(Math.log(x)/        2.0);        Math.sqrt(Math.log(x)/    1.0);    Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  1.0);	  	compilable	  [FE]  ConvergenceException  	113	1	add
416	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  1.0);  Math.sqrt(Math.log(x)/  1.0);  Math.sqrt(Math.log(x)/  1.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	                Math.sqrt(Math.log(x)/        2.0);        Math.sqrt(Math.log(x)/    1.0);    Math.sqrt(Math.log(x)/  1.0);  Math.sqrt(Math.log(x)/  1.0);	  	compilable	  [FE]  ConvergenceException  	113	1	add
417	[BUG]  [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  1.0);  Math.sqrt(Math.log(x)/  1.0);  Math.sqrt(Math.log(x)/  1.0);  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  1.0);  Math.sqrt(Math.log(x)/  1.0);  Math.sqrt(Math.log(x)/  1.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                Math.sqrt(Math.log(x)/        2.0);        Math.sqrt(Math.log(x)/    1.0);    Math.sqrt(Math.log(x)/  1.0);  Math.sqrt(Math.log(x)/  1.0);	  	compilable	  [FE]  ConvergenceException  	113	1	add
418	[BUG]  [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  1.0);  Math.sqrt(Math.log(y)/  2.0);  Math.sqrt(Math.log(x)/  1.0);  [CE]  cannot  find  symbol  y  [FE]        ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  1.0);  Math.sqrt(Math.log(y)/  2.0);  Math.sqrt(Math.log(x)/  1.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                Math.sqrt(Math.log(x)/        2.0);        Math.sqrt(Math.log(x)/    1.0);    Math.sqrt(Math.log(y)/  2.0);  Math.sqrt(Math.log(x)/  1.0);	  	non-compiled	[CE]  cannot  find  symbol  y	113	None	add
419	[BUG]  [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  1.0);  Math.qrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  1.0);  [CE]  cannot  find  symbol  [FE]          ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  1.0);  Math.qrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  1.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                Math.sqrt(Math.log(x)/        2.0);        Math.sqrt(Math.log(x)/    1.0);    Math.qrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  1.0);	  	non-compiled	[CE]  cannot  find  symbol	113	None	add
420	[BUG]  [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(sd,  null);  [CE]  cannot  find  symbol  sd  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(sd,  null);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.log(x)/  cumulativeProbability(sd,  null);	  double    mean    =    Math.log(x)/    cumulativeProbability(null);    	non-compiled	[CE]  cannot  find  symbol  sd	139	None	replace
421	[BUG]  [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(x,  null);  [CE]  no  suitable  method  found  for  cumulativeProbability(double,<null>)  [FE]                      ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(x,  null);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.log(x)/  cumulativeProbability(x,  null);	  double    mean    =    Math.log(x)/    cumulativeProbability(null);    	non-compiled	[CE]  no  suitable  method  found  for  cumulativeProbability(double,<null>)	139	None	replace
422	[BUG]  [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(null,  inverseCumAccuracy);  [CE]  cannot  find  symbol  inverseCumAccuracy  [FE]                        ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(null,  inverseCumAccuracy);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.log(x)/  cumulativeProbability(null,  inverseCumAccuracy);	  double    mean    =    Math.log(x)/    cumulativeProbability(null);    	non-compiled	[CE]  cannot  find  symbol  inverseCumAccuracy	139	None	replace
423	[BUG]  [BUGGY]  final  double  dev  =  x  /  mean  +  1;  final  double  dev  =  x  /  mean  +  1;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  mean  +  1;  final  double  dev  =  x  /  mean  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    /    mean    +    1;    final  double  dev  =  x  /  mean  +  1;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	174	None	add
424	[BUG]  [BUGGY]  final  double  dev  =  x  /  mean  +  1;  Final  double  dev  =  x  /  mean  +  1;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  mean  +  1;  Final  double  dev  =  x  /  mean  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    /    mean    +    1;    Final  double  dev  =  x  /  mean  +  1;	  	non-compiled	[CE]  not  a  statement	174	None	add
425	[BUG]  [BUGGY]  final  double  dev  =  x  /  mean  +  1;  final  double  dev  =  x  /  mean  +  2;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]        AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  mean  +  1;  final  double  dev  =  x  /  mean  +  2;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    /    mean    +    1;    final  double  dev  =  x  /  mean  +  2;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	174	None	add
426	[BUG]  [BUGGY]  final  double  dev  =  x  /  mean  +  1;  static  final  double  dev  =  x  /  mean  +  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  mean  +  1;  static  final  double  dev  =  x  /  mean  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    /    mean    +    1;    static  final  double  dev  =  x  /  mean  +  1;	  	non-compiled	[CE]  illegal  start  of  expression	174	None	add
427	[BUG]  [BUGGY]  double  standardDeviation  =  Math.abs(x);  [CE]  cannot  find  symbol  dev  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  standardDeviation  =  Math.abs(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  standardDeviation  =  Math.abs(x);	          double    mean    =    Math.abs(x);    long    standardDeviation    =    Math.abs(x);    	non-compiled	[CE]  cannot  find  symbol  dev	76	None	replace
428	[BUG]  [BUGGY]  int  standardDeviation  =  Math.abs(x);  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  int  standardDeviation  =  Math.abs(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	int  standardDeviation  =  Math.abs(x);	          double    mean    =    Math.abs(x);    long    standardDeviation    =    Math.abs(x);    	non-compiled	[CE]  possible  loss  of  precision	76	None	replace
429	[BUG]  [BUGGY]  long  standardDeviation  =  Math.abs(x);  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  long  standardDeviation  =  Math.abs(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	long  standardDeviation  =  Math.abs(x);	          double    mean    =    Math.abs(x);    long    standardDeviation    =    Math.abs(x);    	non-compiled	[CE]  possible  loss  of  precision	76	None	replace
430	[BUG]  [BUGGY]  final  double  x  =  x  /  mean;  [CE]  variable  x  is  already  defined  in  method  cumulativeProbability(double)  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  x  =  x  /  mean;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  x  =  x  /  mean;	  final    double    dev    =    x    /    mean;    final    double    x    =    x    /    mean;    	non-compiled	[CE]  variable  x  is  already  defined  in  method  cumulativeProbability(double)	145	None	replace
431	[BUG]  [BUGGY]  final  double  x  =  x  *  mean;  [CE]  variable  x  is  already  defined  in  method  cumulativeProbability(double)  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  x  =  x  *  mean;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  x  =  x  *  mean;	  final    double    dev    =    x    /    mean;    final    double    x    =    x    /    mean;    	non-compiled	[CE]  variable  x  is  already  defined  in  method  cumulativeProbability(double)	145	None	replace
432	[BUG]  [BUGGY]  final  double  x  =  mean  /  x;  [CE]  variable  x  is  already  defined  in  method  cumulativeProbability(double)  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  x  =  mean  /  x;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  x  =  mean  /  x;	  final    double    dev    =    x    /    mean;    final    double    x    =    x    /    mean;    	non-compiled	[CE]  variable  x  is  already  defined  in  method  cumulativeProbability(double)	145	None	replace
433	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(standardDeviation)/  2.0;  [CE]  cannot  find  symbol  dev  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(standardDeviation)/  2.0;  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(standardDeviation)/  2.0;	  double    mean    =    Math.sqrt(x)/    2.0;    	non-compiled	[CE]  cannot  find  symbol  dev	2	None	replace
434	[BUG]  [BUGGY]  double  mean  =  Math.cos(x)/  2.0;  [CE]  cannot  find  symbol  dev  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.cos(x)/  2.0;  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.cos(x)/  2.0;	  double    mean    =    Math.sqrt(x)/    2.0;    	non-compiled	[CE]  cannot  find  symbol  dev	2	None	replace
435	[BUG]  [BUGGY]  double  standardDeviation  =  Math.abs(x  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  cannot  find  symbol  dev  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  standardDeviation  =  Math.abs(x  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  standardDeviation  =  Math.abs(x  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	          double    mean    =    Math.abs(x    -    standardDeviation);    double    standardDeviation    =    Math.abs(x    -    standardDeviation);    	non-compiled	[CE]  cannot  find  symbol  dev	159	None	replace
436	[BUG]  [BUGGY]  double  standardDeviation  =  Math.abs(x  -  MAX_INVERSE_ABSOLUTE_ACCURACY);  [CE]  cannot  find  symbol  MAX_INVERSE_ABSOLUTE_ACCURACY  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  standardDeviation  =  Math.abs(x  -  MAX_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  standardDeviation  =  Math.abs(x  -  MAX_INVERSE_ABSOLUTE_ACCURACY);	          double    mean    =    Math.abs(x    -    standardDeviation);    double    standardDeviation    =    Math.abs(x    -    standardDeviation);    	non-compiled	[CE]  cannot  find  symbol  MAX_INVERSE_ABSOLUTE_ACCURACY	159	None	replace
437	[BUG]  [BUGGY]  double  standardDeviation  =  Math.abs(x  -  MAXIMUM_PROBABILITY);  [CE]  cannot  find  symbol  MAXIMUM_PROBABILITY  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  standardDeviation  =  Math.abs(x  -  MAXIMUM_PROBABILITY);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  standardDeviation  =  Math.abs(x  -  MAXIMUM_PROBABILITY);	          double    mean    =    Math.abs(x    -    standardDeviation);    double    standardDeviation    =    Math.abs(x    -    standardDeviation);    	non-compiled	[CE]  cannot  find  symbol  MAXIMUM_PROBABILITY	159	None	replace
438	[BUG]  [BUGGY]  double  mean  =  Math.abs(x  +  2);  [CE]  cannot  find  symbol  dev  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(x  +  2);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.abs(x  +  2);	  double    mean    =    Math.abs(x    +    1);    	non-compiled	[CE]  cannot  find  symbol  dev	156	None	replace
439	[BUG]  [BUGGY]  final  double  dev  =  x  /  means;  [CE]  cannot  find  symbol  means  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  means;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  /  means;	  final    double    dev    =    x    /    mean;    final    double    dev    =    x    /    means;    	non-compiled	[CE]  cannot  find  symbol  means	15	None	replace
440	[BUG]  [BUGGY]  final  double  dev  =  x  /  Mean;  [CE]  cannot  find  symbol  Mean  [FE]                AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  Mean;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  /  Mean;	  final    double    dev    =    x    /    mean;    final    double    dev    =    x    /    means;    	non-compiled	[CE]  cannot  find  symbol  Mean	15	None	replace
441	[BUG]  [BUGGY]  long  standardDeviation  =  FastMath.sqrt(x);  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  long  standardDeviation  =  FastMath.sqrt(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	long  standardDeviation  =  FastMath.sqrt(x);	          double    mean    =    Math.sqrt(x);    long    standardDeviation    =    FastMath.sqrt(x);    	non-compiled	[CE]  possible  loss  of  precision	54	None	replace
442	[BUG]  [BUGGY]  int  standardDeviation  =  FastMath.sqrt(x);  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  int  standardDeviation  =  FastMath.sqrt(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	int  standardDeviation  =  FastMath.sqrt(x);	          double    mean    =    Math.sqrt(x);    long    standardDeviation    =    FastMath.sqrt(x);    	non-compiled	[CE]  possible  loss  of  precision	54	None	replace
443	[BUG]  [BUGGY]  int  mean  =  Math.sqrt(x);  int  standardDeviation  =  FastMath.sqrt(x);  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  int  mean  =  Math.sqrt(x);  int  standardDeviation  =  FastMath.sqrt(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	int  mean  =  Math.sqrt(x);  int  standardDeviation  =  FastMath.sqrt(x);	          double    mean    =    Math.sqrt(x);    long    standardDeviation    =    FastMath.sqrt(x);    	non-compiled	[CE]  possible  loss  of  precision	54	None	replace
444	[BUG]  [BUGGY]  Math.rint(Math.log(x)/  2.0);  Math.rint(Math.log(x)/  1.0);  [CE]  cannot  find  symbol  dev  [FE]    ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Math.rint(Math.log(x)/  2.0);  Math.rint(Math.log(x)/  1.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.rint(Math.log(x)/  2.0);  Math.rint(Math.log(x)/  1.0);	          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/    1.0);    	non-compiled	[CE]  cannot  find  symbol  dev	114	None	replace
445	[BUG]  [BUGGY]  Math.pow(10,  Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  1.0);  [CE]  cannot  find  symbol  dev  [FE]      ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Math.pow(10,  Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  1.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.pow(10,  Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  1.0);	          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/    1.0);    	non-compiled	[CE]  cannot  find  symbol  dev	114	None	replace
446	[BUG]  [BUGGY]  double  mean  =  Math.rint(Math.log(x));  x  =  Math.rint(Math.log(x));  [CE]  cannot  find  symbol  dev  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.rint(Math.log(x));  x  =  Math.rint(Math.log(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.rint(Math.log(x));  x  =  Math.rint(Math.log(x));	          double    mean    =    Math.sqrt(Math.log(x));    x    =    Math.sqrt(Math.log(x));    	non-compiled	[CE]  cannot  find  symbol  dev	87	None	replace
447	[BUG]  [BUGGY]  double  mean  =  Math.rint(Math.log(x));  x  =  Math.sqrt(Math.log(x));  [CE]  cannot  find  symbol  dev  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.rint(Math.log(x));  x  =  Math.sqrt(Math.log(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.rint(Math.log(x));  x  =  Math.sqrt(Math.log(x));	          double    mean    =    Math.sqrt(Math.log(x));    x    =    Math.sqrt(Math.log(x));    	non-compiled	[CE]  cannot  find  symbol  dev	87	None	replace
448	[BUG]  [BUGGY]  x  =  Math.sqrt(Math.log(x));  [CE]  cannot  find  symbol  dev  [FE]        AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  x  =  Math.sqrt(Math.log(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	x  =  Math.sqrt(Math.log(x));	          double    mean    =    Math.sqrt(Math.log(x));    x    =    Math.sqrt(Math.log(x));    	non-compiled	[CE]  cannot  find  symbol  dev	87	None	replace
449	[BUG]  [BUGGY]  long  mean  =  Math.max(0,  Math.abs(x));  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  long  mean  =  Math.max(0,  Math.abs(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	long  mean  =  Math.max(0,  Math.abs(x));	          double    mean    =    Math.max(0,    Math.abs(x));    long    mean    =    Math.max(0,    Math.abs(x));    	non-compiled	[CE]  possible  loss  of  precision	125	None	replace
450	[BUG]  [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(x,  solverAbsoluteAccuracy);  [CE]  cannot  find  symbol  dev  [FE]                        ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(x,  solverAbsoluteAccuracy);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.log(x)/  cumulativeProbability(x,  solverAbsoluteAccuracy);	  double    mean    =    Math.log(x)/    cumulativeProbability(x,    inverseCumAccuracy);    	non-compiled	[CE]  cannot  find  symbol  dev	39	None	replace
451	[BUG]  [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(x,  standardDeviation);  [CE]  cannot  find  symbol  dev  [FE]                          ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(x,  standardDeviation);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.log(x)/  cumulativeProbability(x,  standardDeviation);	  double    mean    =    Math.log(x)/    cumulativeProbability(x,    inverseCumAccuracy);    	non-compiled	[CE]  cannot  find  symbol  dev	39	None	replace
452	[BUG]  [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(x,  sd);  [CE]  cannot  find  symbol  sd  [FE]                            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(x,  sd);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.log(x)/  cumulativeProbability(x,  sd);	  double    mean    =    Math.log(x)/    cumulativeProbability(x,    inverseCumAccuracy);    	non-compiled	[CE]  cannot  find  symbol  sd	39	None	replace
453	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(standardDeviation);  x  =  Math.sqrt(x);  [CE]  cannot  find  symbol  dev  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(standardDeviation);  x  =  Math.sqrt(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(standardDeviation);  x  =  Math.sqrt(x);	          double    mean    =    Math.sqrt(x);    x    =    Math.sqrt(x);    	non-compiled	[CE]  cannot  find  symbol  dev	128	None	replace
454	[BUG]  [BUGGY]  double  mean  =  Math.max(1.0,  x);  x  =  Math.sqrt(x);  [CE]  cannot  find  symbol  dev  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.max(1.0,  x);  x  =  Math.sqrt(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.max(1.0,  x);  x  =  Math.sqrt(x);	          double    mean    =    Math.sqrt(x);    x    =    Math.sqrt(x);    	non-compiled	[CE]  cannot  find  symbol  dev	128	None	replace
455	[BUG]  [BUGGY]  double  mean  =  Math.log(x);  x  =  Math.log(x);  [CE]  cannot  find  symbol  dev  [FE]        AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.log(x);  x  =  Math.log(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.log(x);  x  =  Math.log(x);	          double    mean    =    Math.sqrt(x);    x    =    Math.sqrt(x);    	non-compiled	[CE]  cannot  find  symbol  dev	128	None	replace
456	[BUG]  [BUGGY]  double  mean  =  Math.max(0,  Math.abs(x  /  1));  [CE]  cannot  find  symbol  dev  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.max(0,  Math.abs(x  /  1));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.max(0,  Math.abs(x  /  1));	  double    mean    =    Math.max(0,    Math.abs(x    +    1));    	non-compiled	[CE]  cannot  find  symbol  dev	91	None	replace
457	[BUG]  [BUGGY]  final  double  x  =  x  -  standardDeviation;  [CE]  variable  x  is  already  defined  in  method  cumulativeProbability(double)  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  x  =  x  -  standardDeviation;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  x  =  x  -  standardDeviation;	  final    double    dev    =    x    -    standardDeviation;    final    double    x    =    x    -    standardDeviation;    	non-compiled	[CE]  variable  x  is  already  defined  in  method  cumulativeProbability(double)	134	None	replace
458	[BUG]  [BUGGY]  final  double  x  =  x  /  standardDeviation;  [CE]  variable  x  is  already  defined  in  method  cumulativeProbability(double)  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  x  =  x  /  standardDeviation;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  x  =  x  /  standardDeviation;	  final    double    dev    =    x    -    standardDeviation;    final    double    x    =    x    -    standardDeviation;    	non-compiled	[CE]  variable  x  is  already  defined  in  method  cumulativeProbability(double)	134	None	replace
459	[BUG]  [BUGGY]  final  double  x  =  x  -  normalDeviation;  [CE]  variable  x  is  already  defined  in  method  cumulativeProbability(double)  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  x  =  x  -  normalDeviation;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  x  =  x  -  normalDeviation;	  final    double    dev    =    x    -    standardDeviation;    final    double    x    =    x    -    standardDeviation;    	non-compiled	[CE]  variable  x  is  already  defined  in  method  cumulativeProbability(double)	134	None	replace
460	[BUG]  [BUGGY]  final  double  dev  =  means  -  x;  [CE]  cannot  find  symbol  means  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  means  -  x;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  means  -  x;	  final    double    dev    =    mean    -    x;    final    double    dev    =    means    -    x;    	non-compiled	[CE]  cannot  find  symbol  means	163	None	replace
461	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  1;  final  double  dev  =  x  -  mean  *  1;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]    ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  *  1;  final  double  dev  =  x  -  mean  *  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    mean    *    1;    final  double  dev  =  x  -  mean  *  1;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	150	None	add
462	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  1;  final  double  dev  =  x  -  mean  *  2;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]      ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  *  1;  final  double  dev  =  x  -  mean  *  2;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    mean    *    1;    final  double  dev  =  x  -  mean  *  2;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	150	None	add
463	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  1;  Final  double  dev  =  x  -  mean  *  1;  [CE]  not  a  statement  [FE]        ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  *  1;  Final  double  dev  =  x  -  mean  *  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    mean    *    1;    Final  double  dev  =  x  -  mean  *  1;	  	non-compiled	[CE]  not  a  statement	150	None	add
464	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  1;  final  double  dev  =  x  -  mean  *  3;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]          ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  *  1;  final  double  dev  =  x  -  mean  *  3;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    mean    *    1;    final  double  dev  =  x  -  mean  *  3;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	150	None	add
465	[BUG]  [BUGGY]  final  double  dev  =  x  -  standardDeviation  +  1;  final  double  dev  =  x  -  standardDeviation  +  1;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]    ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  standardDeviation  +  1;  final  double  dev  =  x  -  standardDeviation  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    standardDeviation    +    1;    final  double  dev  =  x  -  standardDeviation  +  1;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	20	None	add
466	[BUG]  [BUGGY]  final  double  dev  =  x  -  standardDeviation  +  1;  Final  double  dev  =  x  -  standardDeviation  +  1;  [CE]  not  a  statement  [FE]      ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  standardDeviation  +  1;  Final  double  dev  =  x  -  standardDeviation  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    standardDeviation    +    1;    Final  double  dev  =  x  -  standardDeviation  +  1;	  	non-compiled	[CE]  not  a  statement	20	None	add
467	[BUG]  [BUGGY]  final  double  dev  =  x  -  standardDeviation  +  1;  final  double  dev  =  x  -  StandardDeviation  +  1;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]        ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  standardDeviation  +  1;  final  double  dev  =  x  -  StandardDeviation  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    standardDeviation    +    1;    final  double  dev  =  x  -  StandardDeviation  +  1;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	20	None	add
468	[BUG]  [BUGGY]  final  double  dev  =  x  -  standardDeviation  +  1;  final  double  dev  =  x  -  standardDeviation  +  2;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]          ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  standardDeviation  +  1;  final  double  dev  =  x  -  standardDeviation  +  2;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    standardDeviation    +    1;    final  double  dev  =  x  -  standardDeviation  +  2;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	20	None	add
469	[BUG]  [BUGGY]  final  double  dev  =  Math.abs(x  -  mean);  final  double  dev  =  Math.abs(x  -  mean);  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  Math.abs(x  -  mean);  final  double  dev  =  Math.abs(x  -  mean);  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    Math.abs(x    -    mean);    final  double  dev  =  Math.abs(x  -  mean);	  timeout    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	165	None	add
470	[BUG]  [BUGGY]  final  double  dev  =  Math.abs(x  -  mean);  Final  double  dev  =  Math.abs(x  -  mean);  [CE]  not  a  statement  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  Math.abs(x  -  mean);  Final  double  dev  =  Math.abs(x  -  mean);  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    Math.abs(x    -    mean);    Final  double  dev  =  Math.abs(x  -  mean);	  timeout    	non-compiled	[CE]  not  a  statement	165	None	add
471	[BUG]  [BUGGY]  final  double  dev  =  Math.abs(x  -  mean);  final  double  dev  =  Math.abs(y  -  mean);  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  Math.abs(x  -  mean);  final  double  dev  =  Math.abs(y  -  mean);  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    Math.abs(x    -    mean);    final  double  dev  =  Math.abs(y  -  mean);	  timeout    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	165	None	add
472	[BUG]  [BUGGY]  final  double  dev  =  Math.abs(x  -  mean);  final  double  dev  =  Math.abs(x  -  Mean);  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]                      ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  Math.abs(x  -  mean);  final  double  dev  =  Math.abs(x  -  Mean);  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    Math.abs(x    -    mean);    final  double  dev  =  Math.abs(x  -  Mean);	  timeout    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	165	None	add
473	[BUG]  [BUGGY]          double    mean    =    Math.sqrt(x);    x  =  Math.sqrt(x);  double  mean  =  Math.sqrt(x);  x  =  Math.sqrt(x);  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          double    mean    =    Math.sqrt(x);    x  =  Math.sqrt(x);  double  mean  =  Math.sqrt(x);  x  =  Math.sqrt(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                double        mean        =        Math.sqrt(x);        x    =    Math.sqrt(x);    double  mean  =  Math.sqrt(x);  x  =  Math.sqrt(x);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	127	None	add
474	[BUG]  [BUGGY]          double    mean    =    Math.sqrt(x);    x  =  Math.sqrt(x);  Double  mean  =  Math.sqrt(x);  x  =  Math.sqrt(x);  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          double    mean    =    Math.sqrt(x);    x  =  Math.sqrt(x);  Double  mean  =  Math.sqrt(x);  x  =  Math.sqrt(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                double        mean        =        Math.sqrt(x);        x    =    Math.sqrt(x);    Double  mean  =  Math.sqrt(x);  x  =  Math.sqrt(x);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	127	None	add
475	[BUG]  [BUGGY]          double    mean    =    Math.sqrt(x);    x  =  Math.sqrt(x);  double  mean  =  Math.sqrt(y);  x  =  Math.sqrt(x);  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]        AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          double    mean    =    Math.sqrt(x);    x  =  Math.sqrt(x);  double  mean  =  Math.sqrt(y);  x  =  Math.sqrt(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                double        mean        =        Math.sqrt(x);        x    =    Math.sqrt(x);    double  mean  =  Math.sqrt(y);  x  =  Math.sqrt(x);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	127	None	add
476	[BUG]  [BUGGY]          double    mean    =    Math.sqrt(x);    x  =  Math.sqrt(x);  double  mean  =  Math.cos(x);  x  =  Math.sqrt(x);  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]          AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          double    mean    =    Math.sqrt(x);    x  =  Math.sqrt(x);  double  mean  =  Math.cos(x);  x  =  Math.sqrt(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                double        mean        =        Math.sqrt(x);        x    =    Math.sqrt(x);    double  mean  =  Math.cos(x);  x  =  Math.sqrt(x);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	127	None	add
477	[BUG]  [BUGGY]          double    mean    =    Math.sqrt(x);    x  =  Math.sqrt(x);  double  mean  =  Math.dqrt(x);  x  =  Math.sqrt(x);  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]            AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          double    mean    =    Math.sqrt(x);    x  =  Math.sqrt(x);  double  mean  =  Math.dqrt(x);  x  =  Math.sqrt(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                double        mean        =        Math.sqrt(x);        x    =    Math.sqrt(x);    double  mean  =  Math.dqrt(x);  x  =  Math.sqrt(x);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	127	None	add
478	[BUG]  [BUGGY]          double    mean    =    Math.abs(x);    x  =  Math.abs(x);  double  mean  =  Math.abs(x);  x  =  Math.abs(x);  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          double    mean    =    Math.abs(x);    x  =  Math.abs(x);  double  mean  =  Math.abs(x);  x  =  Math.abs(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                double        mean        =        Math.abs(x);        x    =    Math.abs(x);    double  mean  =  Math.abs(x);  x  =  Math.abs(x);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	78	None	add
479	[BUG]  [BUGGY]          double    mean    =    Math.abs(x);    x  =  Math.abs(x);  Double  mean  =  Math.abs(x);  x  =  Math.abs(x);  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          double    mean    =    Math.abs(x);    x  =  Math.abs(x);  Double  mean  =  Math.abs(x);  x  =  Math.abs(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                double        mean        =        Math.abs(x);        x    =    Math.abs(x);    Double  mean  =  Math.abs(x);  x  =  Math.abs(x);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	78	None	add
480	[BUG]  [BUGGY]          double    mean    =    Math.abs(x);    x  =  Math.abs(x);  double  mean  =  Math.abs(y);  x  =  Math.abs(x);  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]        AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          double    mean    =    Math.abs(x);    x  =  Math.abs(x);  double  mean  =  Math.abs(y);  x  =  Math.abs(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                double        mean        =        Math.abs(x);        x    =    Math.abs(x);    double  mean  =  Math.abs(y);  x  =  Math.abs(x);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	78	None	add
481	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          double    mean    =    Math.abs(x);    x  =  Math.abs(x);  double  means  =  Math.abs(x);  x  =  Math.abs(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	                double        mean        =        Math.abs(x);        x    =    Math.abs(x);    double  means  =  Math.abs(x);  x  =  Math.abs(x);	  	compilable	  [FE]  AssertionFailedError  	78	6	add
482	[BUG]  [BUGGY]          double    mean    =    Math.abs(x);    x  =  Math.abs(x);  double  means  =  Math.abs(x);  x  =  Math.abs(x);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          double    mean    =    Math.abs(x);    x  =  Math.abs(x);  double  means  =  Math.abs(x);  x  =  Math.abs(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                double        mean        =        Math.abs(x);        x    =    Math.abs(x);    double  means  =  Math.abs(x);  x  =  Math.abs(x);	  	compilable	  [FE]  AssertionFailedError  	78	6	add
483	[BUG]  [BUGGY]          double    mean    =    Math.abs(x);    x  =  Math.abs(x);  long  mean  =  Math.abs(x);  x  =  Math.abs(x);  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]            AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          double    mean    =    Math.abs(x);    x  =  Math.abs(x);  long  mean  =  Math.abs(x);  x  =  Math.abs(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                double        mean        =        Math.abs(x);        x    =    Math.abs(x);    long  mean  =  Math.abs(x);  x  =  Math.abs(x);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	78	None	add
484	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.random()  /  Math.log(x));  [CE]  cannot  find  symbol  dev  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.random()  /  Math.log(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.random()  /  Math.log(x));	  double    mean    =    Math.sqrt(Math.random()    *    Math.log(x));    	non-compiled	[CE]  cannot  find  symbol  dev	164	None	replace
485	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.random()  *  FastMath.log(x));  [CE]  cannot  find  symbol  dev  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.random()  *  FastMath.log(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.random()  *  FastMath.log(x));	  double    mean    =    Math.sqrt(Math.random()    *    Math.log(x));    	non-compiled	[CE]  cannot  find  symbol  dev	164	None	replace
486	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.random()  *  Math.floor(x));  [CE]  cannot  find  symbol  dev  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.random()  *  Math.floor(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.random()  *  Math.floor(x));	  double    mean    =    Math.sqrt(Math.random()    *    Math.log(x));    	non-compiled	[CE]  cannot  find  symbol  dev	164	None	replace
487	[BUG]  [BUGGY]  double  mean  =  Math.abs(mean  -  StandardDeviation);  [CE]  cannot  find  symbol  StandardDeviation  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(mean  -  StandardDeviation);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.abs(mean  -  StandardDeviation);	          double    mean    =    Math.abs(x    -    standardDeviation);    double    mean    =    Math.abs(x    -    StandardDeviation);    	non-compiled	[CE]  cannot  find  symbol  StandardDeviation	9	None	replace
488	[BUG]  [BUGGY]  double  mean  =  Math.abs(x  -  StandardDeviation);  [CE]  cannot  find  symbol  StandardDeviation  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(x  -  StandardDeviation);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.abs(x  -  StandardDeviation);	          double    mean    =    Math.abs(x    -    standardDeviation);    double    mean    =    Math.abs(x    -    StandardDeviation);    	non-compiled	[CE]  cannot  find  symbol  StandardDeviation	9	None	replace
489	[BUG]  [BUGGY]  int  mean  =  Math.abs(x);  int  standardDeviation  =  Math.abs(x);  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  int  mean  =  Math.abs(x);  int  standardDeviation  =  Math.abs(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	int  mean  =  Math.abs(x);  int  standardDeviation  =  Math.abs(x);	          double    mean    =    Math.abs(x);    long    standardDeviation    =    Math.abs(x);    	non-compiled	[CE]  possible  loss  of  precision	76	None	replace
490	[BUG]  [BUGGY]  double  mean  =  Math.abs(x);  double  standardDeviation  =  Math.abs(x);  [CE]  cannot  find  symbol  dev  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(x);  double  standardDeviation  =  Math.abs(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.abs(x);  double  standardDeviation  =  Math.abs(x);	          double    mean    =    Math.abs(x);    long    standardDeviation    =    Math.abs(x);    	non-compiled	[CE]  cannot  find  symbol  dev	76	None	replace
491	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.pow(10,  x));  Math.sqrt(Math.log(10));  [CE]  cannot  find  symbol  dev  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.pow(10,  x));  Math.sqrt(Math.log(10));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.pow(10,  x));  Math.sqrt(Math.log(10));	          double    mean    =    Math.sqrt(Math.log(x));    Math.sqrt(Math.log(x));    	non-compiled	[CE]  cannot  find  symbol  dev	148	None	replace
492	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.log(x)+  1);  Math.sqrt(Math.log(x));  [CE]  cannot  find  symbol  dev  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.log(x)+  1);  Math.sqrt(Math.log(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.log(x)+  1);  Math.sqrt(Math.log(x));	          double    mean    =    Math.sqrt(Math.log(x));    Math.sqrt(Math.log(x));    	non-compiled	[CE]  cannot  find  symbol  dev	148	None	replace
493	[BUG]  [BUGGY]  Math.sqrt(Math.exp(x)/  2.0  -  mean);  [CE]  cannot  find  symbol  dev  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Math.sqrt(Math.exp(x)/  2.0  -  mean);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.sqrt(Math.exp(x)/  2.0  -  mean);	  Math.sqrt(Math.exp(x)/    2.0);    	non-compiled	[CE]  cannot  find  symbol  dev	31	None	replace
494	[BUG]  [BUGGY]  Math.sqrt(Math.exp(x)/  2.0  /  2.0);  [CE]  cannot  find  symbol  dev  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Math.sqrt(Math.exp(x)/  2.0  /  2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.sqrt(Math.exp(x)/  2.0  /  2.0);	  Math.sqrt(Math.exp(x)/    2.0);    	non-compiled	[CE]  cannot  find  symbol  dev	31	None	replace
495	[BUG]  [BUGGY]  null  dev  =  x  -  mean;  final  double  dev  =  mean  -  x;  [CE]  not  a  statement  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  null  dev  =  x  -  mean;  final  double  dev  =  mean  -  x;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	null  dev  =  x  -  mean;  final  double  dev  =  mean  -  x;	  final    double    dev    =    mean    -    x;    final    double    dev    =    mean    -    x;    	non-compiled	[CE]  not  a  statement	32	None	replace
496	[BUG]  [BUGGY]  null  dev  =  x  -  mean;  final  double  dev  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  -  x;  [CE]  not  a  statement  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  null  dev  =  x  -  mean;  final  double  dev  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  -  x;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	null  dev  =  x  -  mean;  final  double  dev  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  -  x;	  final    double    dev    =    mean    -    x;    final    double    dev    =    mean    -    x;    	non-compiled	[CE]  not  a  statement	32	None	replace
497	[BUG]  [BUGGY]  null  dev  =  x  -  mean;  final  double  dev  =  x  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  not  a  statement  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  null  dev  =  x  -  mean;  final  double  dev  =  x  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	null  dev  =  x  -  mean;  final  double  dev  =  x  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  final    double    dev    =    mean    -    x;    final    double    dev    =    mean    -    x;    	non-compiled	[CE]  not  a  statement	32	None	replace
498	[BUG]  [BUGGY]  final  double  x  =  y  /  mean;  [CE]  variable  x  is  already  defined  in  method  cumulativeProbability(double)  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  x  =  y  /  mean;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  x  =  y  /  mean;	  final    double    dev    =    x    /    mean;    final    double    x    =    x    /    mean;    	non-compiled	[CE]  variable  x  is  already  defined  in  method  cumulativeProbability(double)	145	None	replace
499	[BUG]  [BUGGY]  null  mean  =  Math.max(0,  Math.abs(x));  double  means  =  Math.max(0,  Math.abs(x));  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  null  mean  =  Math.max(0,  Math.abs(x));  double  means  =  Math.max(0,  Math.abs(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	null  mean  =  Math.max(0,  Math.abs(x));  double  means  =  Math.max(0,  Math.abs(x));	          double    mean    =    Math.max(0,    Math.abs(x));    double    means    =    Math.max(0,    Math.abs(x));    	non-compiled	[CE]  not  a  statement	104	None	replace
500	[BUG]  [BUGGY]  final  double  dev  =  Math.abs(x  -  mean);  static  final  double  dev  =  Math.abs(x  -  mean);  [CE]  illegal  start  of  expression  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  Math.abs(x  -  mean);  static  final  double  dev  =  Math.abs(x  -  mean);  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    Math.abs(x    -    mean);    static  final  double  dev  =  Math.abs(x  -  mean);	  timeout    	non-compiled	[CE]  illegal  start  of  expression	165	None	add
501	[BUG]  [BUGGY]  double  mean  =  Math.abs(x  -  1);  Double  standardDeviation  =  Math.abs(x  -  1);  [CE]  cannot  find  symbol  dev  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(x  -  1);  Double  standardDeviation  =  Math.abs(x  -  1);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.abs(x  -  1);  Double  standardDeviation  =  Math.abs(x  -  1);	          double    mean    =    Math.abs(x    -    standardDeviation);    Double    standardDeviation    =    Math.abs(x    -    standardDeviation);    	non-compiled	[CE]  cannot  find  symbol  dev	160	None	replace
502	[BUG]  [BUGGY]  double  mean  =  Math.abs(x  -  baseDeviation);  Double  standardDeviation  =  Math.abs(x  -  baseDeviation);  [CE]  cannot  find  symbol  baseDeviation  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(x  -  baseDeviation);  Double  standardDeviation  =  Math.abs(x  -  baseDeviation);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.abs(x  -  baseDeviation);  Double  standardDeviation  =  Math.abs(x  -  baseDeviation);	          double    mean    =    Math.abs(x    -    standardDeviation);    Double    standardDeviation    =    Math.abs(x    -    standardDeviation);    	non-compiled	[CE]  cannot  find  symbol  baseDeviation	160	None	replace
503	[BUG]  [BUGGY]  Double  standardDeviation  =  Math.abs(x  -  baseDeviation);  [CE]  cannot  find  symbol  baseDeviation  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Double  standardDeviation  =  Math.abs(x  -  baseDeviation);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Double  standardDeviation  =  Math.abs(x  -  baseDeviation);	          double    mean    =    Math.abs(x    -    standardDeviation);    Double    standardDeviation    =    Math.abs(x    -    standardDeviation);    	non-compiled	[CE]  cannot  find  symbol  baseDeviation	160	None	replace
504	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  4;  static  final  double  dev  =  x  -  mean  *  4;  [CE]  illegal  start  of  expression  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  *  4;  static  final  double  dev  =  x  -  mean  *  4;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    mean    *    4;    static  final  double  dev  =  x  -  mean  *  4;	  timeout    	non-compiled	[CE]  illegal  start  of  expression	152	None	add
505	[BUG]  [BUGGY]  final  double  dev  =  x  /  SQRT2PI;  static  final  double  dev  =  x  /  SQRT2PI;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  SQRT2PI;  static  final  double  dev  =  x  /  SQRT2PI;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    /    SQRT2PI;    static  final  double  dev  =  x  /  SQRT2PI;	  	non-compiled	[CE]  illegal  start  of  expression	92	None	add
506	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x)/  2  -  standardDeviation);  [CE]  cannot  find  symbol  dev  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x)/  2  -  standardDeviation);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.abs(x)/  2  -  standardDeviation);	  double    mean    =    Math.sqrt(Math.abs(x)/    2);    	non-compiled	[CE]  cannot  find  symbol  dev	73	None	replace
507	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  this.mean  *  x;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  this.mean  *  x;	  final    double    dev    =    this.mean    -    x;    timeout    	compilable	  [FE]  AssertionFailedError  	61	6	replace
508	[BUG]  [BUGGY]  final  double  dev  =  this.mean  *  x;  [FE]  AssertionFailedError  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  this.mean  *  x;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  this.mean  *  x;	  final    double    dev    =    this.mean    -    x;    timeout    	compilable	  [FE]  AssertionFailedError  	61	6	replace
509	[BUG]  [BUGGY]          double    mean    =    Math.sqrt(Math.abs(x));    x  =  Math.sqrt(Math.abs(x));  double  mean  =  Math.abs(x));  x  =  Math.sqrt(Math.abs(x));  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          double    mean    =    Math.sqrt(Math.abs(x));    x  =  Math.sqrt(Math.abs(x));  double  mean  =  Math.abs(x));  x  =  Math.sqrt(Math.abs(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                double        mean        =        Math.sqrt(Math.abs(x));        x    =    Math.sqrt(Math.abs(x));    double  mean  =  Math.abs(x));  x  =  Math.sqrt(Math.abs(x));	  	non-compiled	[CE]  ';'  expected	178	None	add
510	[BUG]  [BUGGY]          double    mean    =    Math.sqrt(Math.abs(x));    x  =  Math.sqrt(Math.abs(x));  double  mean  =  Math.sqrt(Math.abs(x));  x  =  Math.sqrt(Math.abs(y));  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          double    mean    =    Math.sqrt(Math.abs(x));    x  =  Math.sqrt(Math.abs(x));  double  mean  =  Math.sqrt(Math.abs(x));  x  =  Math.sqrt(Math.abs(y));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                double        mean        =        Math.sqrt(Math.abs(x));        x    =    Math.sqrt(Math.abs(x));    double  mean  =  Math.sqrt(Math.abs(x));  x  =  Math.sqrt(Math.abs(y));	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	178	None	add
511	[BUG]  [BUGGY]  int  mean  =  Math.abs(x);  int  standardDeviation  =  FastMath.sqrt(1.0);  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  int  mean  =  Math.abs(x);  int  standardDeviation  =  FastMath.sqrt(1.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	int  mean  =  Math.abs(x);  int  standardDeviation  =  FastMath.sqrt(1.0);	          double    mean    =    Math.abs(x);    long    standardDeviation    =    FastMath.sqrt(1.0);    	non-compiled	[CE]  possible  loss  of  precision	143	None	replace
512	[BUG]  [BUGGY]  double  mean  =  Math.abs(x);  final  double  standardDeviation  =  FastMath.sqrt(1.0);  [CE]  cannot  find  symbol  dev  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(x);  final  double  standardDeviation  =  FastMath.sqrt(1.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.abs(x);  final  double  standardDeviation  =  FastMath.sqrt(1.0);	          double    mean    =    Math.abs(x);    long    standardDeviation    =    FastMath.sqrt(1.0);    	non-compiled	[CE]  cannot  find  symbol  dev	143	None	replace
513	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  1;  static  final  double  dev  =  x  -  mean  *  1;  [CE]  illegal  start  of  expression  [FE]    ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  *  1;  static  final  double  dev  =  x  -  mean  *  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    mean    *    1;    static  final  double  dev  =  x  -  mean  *  1;	  	non-compiled	[CE]  illegal  start  of  expression	150	None	add
514	[BUG]  [BUGGY]  final  double  dev  =  x  -  normalDeviation;  [CE]  cannot  find  symbol  normalDeviation  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  normalDeviation;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  normalDeviation;	  final    double    dev    =    x    -    standardDeviation;    final    double    dev    =    x    -    standardDeviation;    	non-compiled	[CE]  cannot  find  symbol  normalDeviation	16	None	replace
515	[BUG]  [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(variables);  [CE]  cannot  find  symbol  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(variables);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.log(x)/  cumulativeProbability(variables);	  double    mean    =    Math.log(x)/    cumulativeProbability(sd);    	non-compiled	[CE]  cannot  find  symbol  	37	None	replace
516	[BUG]  [BUGGY]  timeout  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  *  SQRT2PI  +  2;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  -  mean  *  SQRT2PI  +  2;	  final    double    dev    =    x    -    mean    *    SQRT2PI    +    1;    timeout    	compilable	timeout	155	1	replace
517	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  SQRT2PI  +  2;  timeout  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  *  SQRT2PI  +  2;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  mean  *  SQRT2PI  +  2;	  final    double    dev    =    x    -    mean    *    SQRT2PI    +    1;    timeout    	compilable	timeout	155	1	replace
518	[BUG]  [BUGGY]  int  mean  =  Math.abs(x);  int  standardDeviation  =  FastMath.sqrt(2.0);  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  int  mean  =  Math.abs(x);  int  standardDeviation  =  FastMath.sqrt(2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	int  mean  =  Math.abs(x);  int  standardDeviation  =  FastMath.sqrt(2.0);	          double    mean    =    Math.abs(x);    long    standardDeviation    =    FastMath.sqrt(2.0);    	non-compiled	[CE]  possible  loss  of  precision	142	None	replace
519	[BUG]  [BUGGY]  double  mean  =  Math.abs(x);  final  double  standardDeviation  =  FastMath.sqrt(2.0);  [CE]  cannot  find  symbol  dev  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(x);  final  double  standardDeviation  =  FastMath.sqrt(2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.abs(x);  final  double  standardDeviation  =  FastMath.sqrt(2.0);	          double    mean    =    Math.abs(x);    long    standardDeviation    =    FastMath.sqrt(2.0);    	non-compiled	[CE]  cannot  find  symbol  dev	142	None	replace
520	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  final    double    dev    =    value    -    x;    	compilable	  [FE]  ConvergenceException  	162	6	replace
521	[BUG]  [BUGGY]  final  double  dev  =  x  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [FE]  ConvergenceException  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  final    double    dev    =    value    -    x;    	compilable	  [FE]  ConvergenceException  	162	6	replace
522	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x  -  standardDeviation)+  1);  [CE]  cannot  find  symbol  dev  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x  -  standardDeviation)+  1);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.abs(x  -  standardDeviation)+  1);	  double    mean    =    Math.sqrt(Math.abs(x    -    standardDeviation));    	non-compiled	[CE]  cannot  find  symbol  dev	183	None	replace
523	[BUG]  [BUGGY]  double  mean  =  Math.abs(x  -  standardDeviation);  final  double  standardDeviation  =  Math.abs(x  -  standardDeviation);  [CE]  cannot  find  symbol  dev  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(x  -  standardDeviation);  final  double  standardDeviation  =  Math.abs(x  -  standardDeviation);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.abs(x  -  standardDeviation);  final  double  standardDeviation  =  Math.abs(x  -  standardDeviation);	          double    mean    =    Math.abs(x    -    standardDeviation);    long    standardDeviation    =    Math.abs(x    -    standardDeviation);    	non-compiled	[CE]  cannot  find  symbol  dev	161	None	replace
524	[BUG]  [BUGGY]  double  mean  =  Math.log(x)/  sd;  [CE]  cannot  find  symbol  sd  [FE]                      ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.log(x)/  sd;  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.log(x)/  sd;	  double    mean    =    Math.log(x)/    inverseCumAccuracy;    	non-compiled	[CE]  cannot  find  symbol  sd	27	None	replace
525	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  mean  /  x  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  mean  /  x  +  1;	  final    double    dev    =    x    /    mean    +    1;    	compilable	  [FE]  AssertionFailedError  	175	6	replace
526	[BUG]  [BUGGY]  final  double  dev  =  mean  /  x  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  mean  /  x  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  mean  /  x  +  1;	  final    double    dev    =    x    /    mean    +    1;    	compilable	  [FE]  AssertionFailedError  	175	6	replace
527	[BUG]  [BUGGY]  final  double  dev  =  Math.max(dev.doubleValue(),  x  +  1);  [CE]  double  cannot  be  dereferenced  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  Math.max(dev.doubleValue(),  x  +  1);  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  Math.max(dev.doubleValue(),  x  +  1);	  final    double    dev    =    Math.max(dev.doubleValue(),    x);    	non-compiled	[CE]  double  cannot  be  dereferenced	59	None	replace
528	[BUG]  [BUGGY]  float  mean  =  Math.sqrt(Math.abs(x));  float  standardDeviation  =  Math.sqrt(Math.abs(x));  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  float  mean  =  Math.sqrt(Math.abs(x));  float  standardDeviation  =  Math.sqrt(Math.abs(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	float  mean  =  Math.sqrt(Math.abs(x));  float  standardDeviation  =  Math.sqrt(Math.abs(x));	          double    mean    =    Math.sqrt(Math.abs(x));    long    standardDeviation    =    Math.sqrt(Math.abs(x));    	non-compiled	[CE]  possible  loss  of  precision	65	None	replace
529	[BUG]  [BUGGY]  int  mean  =  Math.sqrt(Math.abs(x));  int  standardDeviation  =  Math.sqrt(Math.abs(x));  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  int  mean  =  Math.sqrt(Math.abs(x));  int  standardDeviation  =  Math.sqrt(Math.abs(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	int  mean  =  Math.sqrt(Math.abs(x));  int  standardDeviation  =  Math.sqrt(Math.abs(x));	          double    mean    =    Math.sqrt(Math.abs(x));    long    standardDeviation    =    Math.sqrt(Math.abs(x));    	non-compiled	[CE]  possible  loss  of  precision	65	None	replace
530	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          double    mean    =    Math.abs(x);    x  =  Math.abs(x);  x  =  Math.abs(x);  x  =  Math.abs(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	                double        mean        =        Math.abs(x);        x    =    Math.abs(x);    x  =  Math.abs(x);  x  =  Math.abs(x);	  	compilable	  [FE]  AssertionFailedError  	78	6	add
531	[BUG]  [BUGGY]          double    mean    =    Math.abs(x);    x  =  Math.abs(x);  x  =  Math.abs(x);  x  =  Math.abs(x);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          double    mean    =    Math.abs(x);    x  =  Math.abs(x);  x  =  Math.abs(x);  x  =  Math.abs(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                double        mean        =        Math.abs(x);        x    =    Math.abs(x);    x  =  Math.abs(x);  x  =  Math.abs(x);	  	compilable	  [FE]  AssertionFailedError  	78	6	add
532	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x)/  2.0  -  standardDeviation);  [CE]  cannot  find  symbol  dev  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x)/  2.0  -  standardDeviation);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.abs(x)/  2.0  -  standardDeviation);	  double    mean    =    Math.sqrt(Math.abs(x)/    2.0);    	non-compiled	[CE]  cannot  find  symbol  dev	71	None	replace
533	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x)/  2.0  -  1);  [CE]  cannot  find  symbol  dev  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x)/  2.0  -  1);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.abs(x)/  2.0  -  1);	  double    mean    =    Math.sqrt(Math.abs(x)/    2.0);    	non-compiled	[CE]  cannot  find  symbol  dev	71	None	replace
534	[BUG]  [BUGGY]  final  double  dev  =  x  /  standardDeviation;  static  final  double  dev  =  x  /  standardDeviation;  [CE]  illegal  start  of  expression  [FE]    ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  standardDeviation;  static  final  double  dev  =  x  /  standardDeviation;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    /    standardDeviation;    static  final  double  dev  =  x  /  standardDeviation;	  	non-compiled	[CE]  illegal  start  of  expression	94	None	add
535	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean;  static  final  double  dev  =  x  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  expression  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean;  static  final  double  dev  =  x  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  mean;  static  final  double  dev  =  x  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  final    double    dev    =    mean    -    x;    static    final    double    dev    =    mean    -    x;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
536	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean;  static  final  double  dev  =  mean  -  x;  [CE]  illegal  start  of  expression  [FE]                      ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean;  static  final  double  dev  =  mean  -  x;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  mean;  static  final  double  dev  =  mean  -  x;	  final    double    dev    =    mean    -    x;    static    final    double    dev    =    mean    -    x;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
537	[BUG]  [BUGGY]  final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE;  [CE]  cannot  find  symbol  DEFAULT_INVERSE_ABSOLUTE  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE;	  final    double    dev    =    x    /    mean;    Final    double    dev    =    x    /    mean;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_INVERSE_ABSOLUTE	13	None	replace
538	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  SQRT2PI  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  -  standardDeviation  *  SQRT2PI  +  1;	  final    double    dev    =    x    -    standardDeviation    *    SQRT2PI;    timeout    	compilable	  [FE]  AssertionFailedError  	43	6	replace
539	[BUG]  [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  SQRT2PI  +  1;  [FE]  AssertionFailedError  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  SQRT2PI  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  standardDeviation  *  SQRT2PI  +  1;	  final    double    dev    =    x    -    standardDeviation    *    SQRT2PI;    timeout    	compilable	  [FE]  AssertionFailedError  	43	6	replace
540	[BUG]  [BUGGY]  Math.pow(10,  Math.log(x)/  2.0);  Math.sqrt(Math.log(10)/  2.0);  [CE]  cannot  find  symbol  dev  [FE]    ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Math.pow(10,  Math.log(x)/  2.0);  Math.sqrt(Math.log(10)/  2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.pow(10,  Math.log(x)/  2.0);  Math.sqrt(Math.log(10)/  2.0);	          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/    2.0);    	non-compiled	[CE]  cannot  find  symbol  dev	111	None	replace
541	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  2;  static  final  double  dev  =  x  -  mean  *  2;  [CE]  illegal  start  of  expression  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  *  2;  static  final  double  dev  =  x  -  mean  *  2;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    mean    *    2;    static  final  double  dev  =  x  -  mean  *  2;	  timeout    	non-compiled	[CE]  illegal  start  of  expression	44	None	add
542	[BUG]  [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  2;  final  double  dev  =  x  -  standardDeviation  *  2);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  2;  final  double  dev  =  x  -  standardDeviation  *  2);  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    standardDeviation    *    2;    final  double  dev  =  x  -  standardDeviation  *  2);	  	non-compiled	[CE]  ';'  expected	120	None	add
543	[BUG]  [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  2;  final  double  dev  =  x  -  standardDeviation  *  3;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  2;  final  double  dev  =  x  -  standardDeviation  *  3;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    standardDeviation    *    2;    final  double  dev  =  x  -  standardDeviation  *  3;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	120	None	add
544	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(x,  0);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(x,  0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(x,  0);	          double    mean    =    Math.sqrt(x);    Double    mean    =    Math.sqrt(x);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	53	None	replace
545	[BUG]  [BUGGY]          double    mean    =    Math.sqrt(Math.log(x));    Math.sqrt(Math.log(x));  long  mean  =  Math.sqrt(Math.log(x));  Math.sqrt(Math.log(x));  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          double    mean    =    Math.sqrt(Math.log(x));    Math.sqrt(Math.log(x));  long  mean  =  Math.sqrt(Math.log(x));  Math.sqrt(Math.log(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                double        mean        =        Math.sqrt(Math.log(x));        Math.sqrt(Math.log(x));    long  mean  =  Math.sqrt(Math.log(x));  Math.sqrt(Math.log(x));	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	147	None	add
546	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(x  -  standardDeviation);  [CE]  cannot  find  symbol  dev  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(x  -  standardDeviation);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(x  -  standardDeviation);	  double    mean    =    Math.abs(mean    -    standardDeviation);    	non-compiled	[CE]  cannot  find  symbol  dev	3	None	replace
547	[BUG]  [BUGGY]  static  final  double  dev  =  x  -  normalDeviation;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  static  final  double  dev  =  x  -  normalDeviation;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	static  final  double  dev  =  x  -  normalDeviation;	  final    double    dev    =    x    -    standardDeviation;    static    final    double    dev    =    x    -    standardDeviation;    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
548	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  2;  timeout  =  System.currentTimeMillis();  [CE]  cannot  find  symbol  timeout  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  *  2;  timeout  =  System.currentTimeMillis();  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  mean  *  2;  timeout  =  System.currentTimeMillis();	  final    double    dev    =    x    -    mean;    timeout    =    System.currentTimeMillis();    	non-compiled	[CE]  cannot  find  symbol  timeout	58	None	replace
549	[BUG]  [BUGGY]  static  final  double  x  =  x  -  standardDeviation;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  static  final  double  x  =  x  -  standardDeviation;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	static  final  double  x  =  x  -  standardDeviation;	  final    double    dev    =    x    -    standardDeviation;    final    double    x    =    x    -    standardDeviation;    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
550	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  1  +  1;  static  final  double  dev  =  x  -  mean  *  1  +  1;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  *  1  +  1;  static  final  double  dev  =  x  -  mean  *  1  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    mean    *    1    +    1;    static  final  double  dev  =  x  -  mean  *  1  +  1;	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
551	[BUG]  [BUGGY]  Double  mean  =  Math.max(0,  Math.abs(x)-  1);  [CE]  cannot  find  symbol  dev  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Double  mean  =  Math.max(0,  Math.abs(x)-  1);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Double  mean  =  Math.max(0,  Math.abs(x)-  1);	  double    mean    =    Math.max(0,    Math.abs(x)-    1);    	non-compiled	[CE]  cannot  find  symbol  dev	89	None	replace
552	[BUG]  [BUGGY]          double    mean    =    Math.max(0,    Math.abs(x));    double  means  =  Math.max(0,  Math.abs(x));  double  mean  =  Math.max(0,  Math.abs(x));  Double  means  =  Math.max(0,  Math.abs(x));  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          double    mean    =    Math.max(0,    Math.abs(x));    double  means  =  Math.max(0,  Math.abs(x));  double  mean  =  Math.max(0,  Math.abs(x));  Double  means  =  Math.max(0,  Math.abs(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                double        mean        =        Math.max(0,        Math.abs(x));        double    means    =    Math.max(0,    Math.abs(x));    double  mean  =  Math.max(0,  Math.abs(x));  Double  means  =  Math.max(0,  Math.abs(x));	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	103	None	add
553	[BUG]  [BUGGY]  double  mean  =  Math.max(0,  Math.abs(x),  y);  [CE]  cannot  find  symbol  y  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.max(0,  Math.abs(x),  y);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.max(0,  Math.abs(x),  y);	          double    mean    =    Math.max(0,    Math.abs(x));    double    mean    =    Math.max(0,    Math.abs(y));    	non-compiled	[CE]  cannot  find  symbol  y	102	None	replace
554	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.random());  x  =  Math.sqrt(Math.random());  [CE]  cannot  find  symbol  dev  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.random());  x  =  Math.sqrt(Math.random());  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.random());  x  =  Math.sqrt(Math.random());	          double    mean    =    Math.sqrt(Math.log(x));    x    =    Math.sqrt(Math.log(x));    	non-compiled	[CE]  cannot  find  symbol  dev	87	None	replace
555	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.pow(10,  x));  x  =  Math.sqrt(Math.log(x));  [CE]  cannot  find  symbol  dev  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.pow(10,  x));  x  =  Math.sqrt(Math.log(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.pow(10,  x));  x  =  Math.sqrt(Math.log(x));	          double    mean    =    Math.sqrt(Math.log(x));    x    =    Math.sqrt(Math.log(x));    	non-compiled	[CE]  cannot  find  symbol  dev	87	None	replace
556	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.log(x)+  1);  x  =  Math.sqrt(Math.log(x));  [CE]  cannot  find  symbol  dev  [FE]        AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.log(x)+  1);  x  =  Math.sqrt(Math.log(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.log(x)+  1);  x  =  Math.sqrt(Math.log(x));	          double    mean    =    Math.sqrt(Math.log(x));    x    =    Math.sqrt(Math.log(x));    	non-compiled	[CE]  cannot  find  symbol  dev	87	None	replace
557	[BUG]  [BUGGY]  null  dev  =  x  -  mean  *  SQRT2PI;  static  final  double  dev  =  x  -  mean  *  SQRT2PI;  [CE]  not  a  statement  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  null  dev  =  x  -  mean  *  SQRT2PI;  static  final  double  dev  =  x  -  mean  *  SQRT2PI;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	null  dev  =  x  -  mean  *  SQRT2PI;  static  final  double  dev  =  x  -  mean  *  SQRT2PI;	  final    double    dev    =    x    -    mean    *    SQRT2PI;    static    final    double    dev    =    x    -    mean    *    SQRT2PI;    	non-compiled	[CE]  not  a  statement	126	None	replace
558	[BUG]  [BUGGY]  double  dev  =  x  -  mean  *  SQRT2PI;  static  final  double  dev  =  x  -  mean  *  SQRT2PI;  [CE]  illegal  start  of  expression  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  dev  =  x  -  mean  *  SQRT2PI;  static  final  double  dev  =  x  -  mean  *  SQRT2PI;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  dev  =  x  -  mean  *  SQRT2PI;  static  final  double  dev  =  x  -  mean  *  SQRT2PI;	  final    double    dev    =    x    -    mean    *    SQRT2PI;    static    final    double    dev    =    x    -    mean    *    SQRT2PI;    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
559	[BUG]  [BUGGY]          double    mean    =    Math.sqrt(Math.log(x));    x  =  Math.sqrt(Math.log(x));  long  mean  =  Math.sqrt(Math.log(x));  x  =  Math.sqrt(Math.log(x));  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          double    mean    =    Math.sqrt(Math.log(x));    x  =  Math.sqrt(Math.log(x));  long  mean  =  Math.sqrt(Math.log(x));  x  =  Math.sqrt(Math.log(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                double        mean        =        Math.sqrt(Math.log(x));        x    =    Math.sqrt(Math.log(x));    long  mean  =  Math.sqrt(Math.log(x));  x  =  Math.sqrt(Math.log(x));	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	86	None	add
560	[BUG]  [BUGGY]          double    mean    =    Math.sqrt(Math.log(x));    x  =  Math.sqrt(Math.log(x));  double  mean  =  Math.sqrt(Math.log(x));  x  =  Math.sqrt(Math.log(y));  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          double    mean    =    Math.sqrt(Math.log(x));    x  =  Math.sqrt(Math.log(x));  double  mean  =  Math.sqrt(Math.log(x));  x  =  Math.sqrt(Math.log(y));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                double        mean        =        Math.sqrt(Math.log(x));        x    =    Math.sqrt(Math.log(x));    double  mean  =  Math.sqrt(Math.log(x));  x  =  Math.sqrt(Math.log(y));	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	86	None	add
561	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  *  mean  *  SQRT2PI;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  *  mean  *  SQRT2PI;	  final    double    dev    =    x    /    mean    *    SQRT2PI;    	compilable	  [FE]  AssertionFailedError  	47	6	replace
562	[BUG]  [BUGGY]  final  double  dev  =  x  *  mean  *  SQRT2PI;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  *  mean  *  SQRT2PI;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  *  mean  *  SQRT2PI;	  final    double    dev    =    x    /    mean    *    SQRT2PI;    	compilable	  [FE]  AssertionFailedError  	47	6	replace
563	[BUG]  [BUGGY]  final  double  dev  =  x  /  mean;  static  final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  mean;  static  final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  /  mean;  static  final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  final    double    dev    =    x    /    mean;    static    final    double    dev    =    x    /    mean;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
564	[BUG]  [BUGGY]  final  double  dev  =  x  /  mean;  static  final  double  dev  =  x  /  DEFULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  mean;  static  final  double  dev  =  x  /  DEFULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  /  mean;  static  final  double  dev  =  x  /  DEFULT_INVERSE_ABSOLUTE_ACCURACY;	  final    double    dev    =    x    /    mean;    static    final    double    dev    =    x    /    mean;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
565	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  +  1;  static  final  double  dev  =  x  -  mean  *  1;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  +  1;  static  final  double  dev  =  x  -  mean  *  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  mean  +  1;  static  final  double  dev  =  x  -  mean  *  1;	  final    double    dev    =    x    -    mean    +    1;    static    final    double    dev    =    x    -    mean    +    1;    	non-compiled	[CE]  illegal  start  of  expression	158	None	replace
566	[BUG]  [BUGGY]          double    mean    =    Math.sqrt(x);    x  =  Math.sqrt(x);  long  mean  =  Math.sqrt(x);  x  =  Math.sqrt(x);  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          double    mean    =    Math.sqrt(x);    x  =  Math.sqrt(x);  long  mean  =  Math.sqrt(x);  x  =  Math.sqrt(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                double        mean        =        Math.sqrt(x);        x    =    Math.sqrt(x);    long  mean  =  Math.sqrt(x);  x  =  Math.sqrt(x);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	127	None	add
567	[BUG]  [BUGGY]  timeout  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          double    mean    =    Math.sqrt(x);    x  =  Math.sqrt(x);  double  means  =  Math.sqrt(x);  x  =  Math.sqrt(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	                double        mean        =        Math.sqrt(x);        x    =    Math.sqrt(x);    double  means  =  Math.sqrt(x);  x  =  Math.sqrt(x);	  	compilable	timeout	127	1	add
568	[BUG]  [BUGGY]          double    mean    =    Math.sqrt(x);    x  =  Math.sqrt(x);  double  means  =  Math.sqrt(x);  x  =  Math.sqrt(x);  timeout  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          double    mean    =    Math.sqrt(x);    x  =  Math.sqrt(x);  double  means  =  Math.sqrt(x);  x  =  Math.sqrt(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                double        mean        =        Math.sqrt(x);        x    =    Math.sqrt(x);    double  means  =  Math.sqrt(x);  x  =  Math.sqrt(x);	  	compilable	timeout	127	1	add
569	[BUG]  [BUGGY]  null  dev  =  x  -  mean;  Final  double  dev  =  mean  -  x;  [CE]  not  a  statement  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  null  dev  =  x  -  mean;  Final  double  dev  =  mean  -  x;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	null  dev  =  x  -  mean;  Final  double  dev  =  mean  -  x;	  final    double    dev    =    mean    -    x;    Final    double    dev    =    mean    -    x;    	non-compiled	[CE]  not  a  statement	33	None	replace
570	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.random()  *  Math.log(x)+  1);  [CE]  cannot  find  symbol  dev  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.random()  *  Math.log(x)+  1);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.random()  *  Math.log(x)+  1);	  double    mean    =    Math.sqrt(Math.random()    *    Math.log(x));    	non-compiled	[CE]  cannot  find  symbol  dev	164	None	replace
571	[BUG]  [BUGGY]  double  mean  =  Math.cos(x)/  standardDeviation;  [CE]  cannot  find  symbol  dev  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.cos(x)/  standardDeviation;  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.cos(x)/  standardDeviation;	  double    mean    =    Math.log(x)/    standardDeviation;    	non-compiled	[CE]  cannot  find  symbol  dev	26	None	replace
572	[BUG]  [BUGGY]  double  mean  =  Math.log(standardDeviation)/  x;  [CE]  cannot  find  symbol  dev  [FE]                      ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.log(standardDeviation)/  x;  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.log(standardDeviation)/  x;	  double    mean    =    Math.log(x)/    standardDeviation;    	non-compiled	[CE]  cannot  find  symbol  dev	26	None	replace
573	[BUG]  [BUGGY]  Double  mean  =  Math.sqrt(Math.log(x)+  1);  [CE]  cannot  find  symbol  dev  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Double  mean  =  Math.sqrt(Math.log(x)+  1);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Double  mean  =  Math.sqrt(Math.log(x)+  1);	          double    mean    =    Math.sqrt(Math.log(x));    Double    mean    =    Math.sqrt(Math.log(x));    	non-compiled	[CE]  cannot  find  symbol  dev	84	None	replace
574	[BUG]  [BUGGY]  timeout  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  *  10  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  -  mean  *  10  +  1;	  final    double    dev    =    x    -    mean    *    1    +    1;    	compilable	timeout	23	1	replace
575	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  10  +  1;  timeout  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  *  10  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  mean  *  10  +  1;	  final    double    dev    =    x    -    mean    *    1    +    1;    	compilable	timeout	23	1	replace
576	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.log(x));  float  standardDeviation  =  Math.sqrt(Math.log(x));  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.log(x));  float  standardDeviation  =  Math.sqrt(Math.log(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.log(x));  float  standardDeviation  =  Math.sqrt(Math.log(x));	          double    mean    =    Math.sqrt(Math.log(x));    int    standardDeviation    =    Math.sqrt(Math.log(x));    	non-compiled	[CE]  possible  loss  of  precision	173	None	replace
577	[BUG]  [BUGGY]  final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  final  double  dev  =  x  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  final  double  dev  =  x  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    final  double  dev  =  x  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	96	None	add
578	[BUG]  [BUGGY]  null  dev  =  x  -  mean;  final  double  dev  =  mean  *  x;  [CE]  not  a  statement  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  null  dev  =  x  -  mean;  final  double  dev  =  mean  *  x;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	null  dev  =  x  -  mean;  final  double  dev  =  mean  *  x;	  final    double    dev    =    mean    -    x;    final    double    dev    =    mean    *    x;    	non-compiled	[CE]  not  a  statement	137	None	replace
579	[BUG]  [BUGGY]  final  double  dev  =  this.mean  -  x;  final  double  x  =  this.mean  -  x;  [CE]  variable  x  is  already  defined  in  method  cumulativeProbability(double)  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  this.mean  -  x;  final  double  x  =  this.mean  -  x;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    this.mean    -    x;    final  double  x  =  this.mean  -  x;	  timeout    	non-compiled	[CE]  variable  x  is  already  defined  in  method  cumulativeProbability(double)	60	None	add
580	[BUG]  [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  3.0);  Math.sqrt(Math.log(y)/  2.0);  Math.sqrt(Math.log(x)/  3.0);  [CE]  cannot  find  symbol  y  [FE]    ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  3.0);  Math.sqrt(Math.log(y)/  2.0);  Math.sqrt(Math.log(x)/  3.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                Math.sqrt(Math.log(x)/        2.0);        Math.sqrt(Math.log(x)/    3.0);    Math.sqrt(Math.log(y)/  2.0);  Math.sqrt(Math.log(x)/  3.0);	  	non-compiled	[CE]  cannot  find  symbol  y	116	None	add
581	[BUG]  [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  3.0);  Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(y)/  3.0);  [CE]  cannot  find  symbol  y  [FE]      ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  3.0);  Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(y)/  3.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                Math.sqrt(Math.log(x)/        2.0);        Math.sqrt(Math.log(x)/    3.0);    Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(y)/  3.0);	  	non-compiled	[CE]  cannot  find  symbol  y	116	None	add
582	[BUG]  [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  3.0);  Mat.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  3.0);  [CE]  cannot  find  symbol  Mat  [FE]        ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  3.0);  Mat.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  3.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                Math.sqrt(Math.log(x)/        2.0);        Math.sqrt(Math.log(x)/    3.0);    Mat.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  3.0);	  	non-compiled	[CE]  cannot  find  symbol  Mat	116	None	add
583	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(x  /  2.0)+  1;  [CE]  cannot  find  symbol  dev  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(x  /  2.0)+  1;  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(x  /  2.0)+  1;	  double    mean    =    Math.sqrt(x    /    2.0);    	non-compiled	[CE]  cannot  find  symbol  dev	129	None	replace
584	[BUG]  [BUGGY]  null  mean  =  Math.sqrt(x0);  final  double  mean  =  Math.sqrt(x);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  null  mean  =  Math.sqrt(x0);  final  double  mean  =  Math.sqrt(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	null  mean  =  Math.sqrt(x0);  final  double  mean  =  Math.sqrt(x);	          double    mean    =    Math.sqrt(x);    final    double    mean    =    Math.sqrt(x);    	non-compiled	[CE]  not  a  statement	55	None	replace
585	[BUG]  [BUGGY]  Math.rint(Math.log(x)/  2.0);  Mat.sqrt(Math.log(x)/  2.0);  [CE]  cannot  find  symbol  Mat  [FE]          ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Math.rint(Math.log(x)/  2.0);  Mat.sqrt(Math.log(x)/  2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.rint(Math.log(x)/  2.0);  Mat.sqrt(Math.log(x)/  2.0);	          Math.sqrt(Math.log(x)/    2.0);    Mat.sqrt(Math.log(x)/    2.0);    	non-compiled	[CE]  cannot  find  symbol  Mat	112	None	replace
586	[BUG]  [BUGGY]  Math.sqrt(Math.pow(10,  x)/  2.0);  Mat.sqrt(Math.log(10)/  2.0);  [CE]  cannot  find  symbol  Mat  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Math.sqrt(Math.pow(10,  x)/  2.0);  Mat.sqrt(Math.log(10)/  2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.sqrt(Math.pow(10,  x)/  2.0);  Mat.sqrt(Math.log(10)/  2.0);	          Math.sqrt(Math.log(x)/    2.0);    Mat.sqrt(Math.log(x)/    2.0);    	non-compiled	[CE]  cannot  find  symbol  Mat	112	None	replace
587	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  +  3;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  -  mean  +  3;	  final    double    dev    =    x    -    mean    +    1;    final    double    dev    =    x    -    mean    +    2;    	compilable	timeout	108	1	replace
588	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  +  3;  timeout  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  +  3;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  mean  +  3;	  final    double    dev    =    x    -    mean    +    1;    final    double    dev    =    x    -    mean    +    2;    	compilable	timeout	108	1	replace
589	[BUG]  [BUGGY]  Math.sqrt(Math.abs(x)/  2.0  -  mean);  [CE]  cannot  find  symbol  dev  [FE]        ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Math.sqrt(Math.abs(x)/  2.0  -  mean);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.sqrt(Math.abs(x)/  2.0  -  mean);	  Math.sqrt(Math.abs(x)/    2.0);    	non-compiled	[CE]  cannot  find  symbol  dev	171	None	replace
590	[BUG]  [BUGGY]  Math.sqrt(Math.abs(x)/  2.0,  MAX_INVERSE_ABSOLUTE_ACCURACY);  [CE]  cannot  find  symbol  MAX_INVERSE_ABSOLUTE_ACCURACY  [FE]          ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Math.sqrt(Math.abs(x)/  2.0,  MAX_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.sqrt(Math.abs(x)/  2.0,  MAX_INVERSE_ABSOLUTE_ACCURACY);	  Math.sqrt(Math.abs(x)/    2.0);    	non-compiled	[CE]  cannot  find  symbol  MAX_INVERSE_ABSOLUTE_ACCURACY	171	None	replace
591	[BUG]  [BUGGY]  Math.sqrt(Math.abs(x)/  2.0,  Math.abs(standardDeviation));  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Math.sqrt(Math.abs(x)/  2.0,  Math.abs(standardDeviation));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.sqrt(Math.abs(x)/  2.0,  Math.abs(standardDeviation));	  Math.sqrt(Math.abs(x)/    2.0);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	171	None	replace
592	[BUG]  [BUGGY]  Math.rint(Math.log(x)/  2.0);  Math.rint(Math.log(y)/  2.0);  [CE]  cannot  find  symbol  y  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Math.rint(Math.log(x)/  2.0);  Math.rint(Math.log(y)/  2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.rint(Math.log(x)/  2.0);  Math.rint(Math.log(y)/  2.0);	          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(y)/    2.0);    	non-compiled	[CE]  cannot  find  symbol  y	115	None	replace
593	[BUG]  [BUGGY]  Math.rint(Math.log(x)/  2.0);  Math.sqrt(Math.log(standardDeviation)/  2.0);  [CE]  cannot  find  symbol  dev  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Math.rint(Math.log(x)/  2.0);  Math.sqrt(Math.log(standardDeviation)/  2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.rint(Math.log(x)/  2.0);  Math.sqrt(Math.log(standardDeviation)/  2.0);	          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(y)/    2.0);    	non-compiled	[CE]  cannot  find  symbol  dev	115	None	replace
594	[BUG]  [BUGGY]  Math.min(Math.log(x)/  2.0);  Math.sqrt(Math.log(standardDeviation)/  2.0);  [CE]  no  suitable  method  found  for  min(double)  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Math.min(Math.log(x)/  2.0);  Math.sqrt(Math.log(standardDeviation)/  2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.min(Math.log(x)/  2.0);  Math.sqrt(Math.log(standardDeviation)/  2.0);	          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(y)/    2.0);    	non-compiled	[CE]  no  suitable  method  found  for  min(double)	115	None	replace
595	[BUG]  [BUGGY]  double  mean  =  Math.abs(x  -  2  -  1);  [CE]  cannot  find  symbol  dev  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(x  -  2  -  1);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.abs(x  -  2  -  1);	  double    mean    =    Math.abs(x    -    2);    	non-compiled	[CE]  cannot  find  symbol  dev	157	None	replace
596	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  final  double  x  =  x  -  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  variable  x  is  already  defined  in  method  cumulativeProbability(double)  [FE]    ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  final  double  x  =  x  -  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    mean    *    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    final  double  x  =  x  -  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  	non-compiled	[CE]  variable  x  is  already  defined  in  method  cumulativeProbability(double)	40	None	add
597	[BUG]  [BUGGY]  Math.min(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  1.0);  [CE]  no  suitable  method  found  for  min(double)  [FE]    ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Math.min(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  1.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.min(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  1.0);	          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/    1.0);    	non-compiled	[CE]  no  suitable  method  found  for  min(double)	114	None	replace
598	[BUG]  [BUGGY]  timeout  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  mean  *  x  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  mean  *  x  +  1;	  final    double    dev    =    x    *    mean    +    1;    timeout    	compilable	timeout	177	1	replace
599	[BUG]  [BUGGY]  final  double  dev  =  mean  *  x  +  1;  timeout  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  mean  *  x  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  mean  *  x  +  1;	  final    double    dev    =    x    *    mean    +    1;    timeout    	compilable	timeout	177	1	replace
600	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  *  mean  +  2;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  *  mean  +  2;	  final    double    dev    =    x    *    mean    +    1;    timeout    	compilable	timeout	177	1	replace
601	[BUG]  [BUGGY]  final  double  dev  =  x  *  mean  +  2;  timeout  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  *  mean  +  2;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  *  mean  +  2;	  final    double    dev    =    x    *    mean    +    1;    timeout    	compilable	timeout	177	1	replace
602	[BUG]  [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(sqrt,  null);  [CE]  cannot  find  symbol  sqrt  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(sqrt,  null);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.log(x)/  cumulativeProbability(sqrt,  null);	  double    mean    =    Math.log(x)/    cumulativeProbability(null);    	non-compiled	[CE]  cannot  find  symbol  sqrt	139	None	replace
603	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x)-  1  -  standardDeviation);  [CE]  cannot  find  symbol  dev  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x)-  1  -  standardDeviation);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.abs(x)-  1  -  standardDeviation);	  double    mean    =    Math.sqrt(Math.abs(x)-    1);    	non-compiled	[CE]  cannot  find  symbol  dev	72	None	replace
604	[BUG]  [BUGGY]  double  mean  =  Math.abs(standardDeviation  *  x);  [CE]  cannot  find  symbol  dev  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(standardDeviation  *  x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.abs(standardDeviation  *  x);	  double    mean    =    Math.abs(x    *    standardDeviation);    	non-compiled	[CE]  cannot  find  symbol  dev	5	None	replace
605	[BUG]  [BUGGY]  final  double  dev  =  x  *  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  StandardDeviation  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  *  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  *  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  final    double    dev    =    x    *    mean;    	non-compiled	[CE]  cannot  find  symbol  StandardDeviation	131	None	replace
606	[BUG]  [BUGGY]  timeout  [FE]    ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  *  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  *  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  final    double    dev    =    x    -    mean    *    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	timeout	41	1	replace
607	[BUG]  [BUGGY]  final  double  dev  =  x  *  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  timeout  [FE]    ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  *  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  *  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  final    double    dev    =    x    -    mean    *    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	timeout	41	1	replace
608	[BUG]  [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(false,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  no  suitable  method  found  for  cumulativeProbability(boolean,double)  [FE]                      ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(false,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.log(x)/  cumulativeProbability(false,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  double    mean    =    Math.log(x)/    cumulativeProbability(false);    	non-compiled	[CE]  no  suitable  method  found  for  cumulativeProbability(boolean,double)	140	None	replace
609	[BUG]  [BUGGY]  Double  mean  =  Math.log(x)/  cumulativeProbability(true);  [CE]  no  suitable  method  found  for  cumulativeProbability(boolean)  [FE]                        ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Double  mean  =  Math.log(x)/  cumulativeProbability(true);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Double  mean  =  Math.log(x)/  cumulativeProbability(true);	  double    mean    =    Math.log(x)/    cumulativeProbability(false);    	non-compiled	[CE]  no  suitable  method  found  for  cumulativeProbability(boolean)	140	None	replace
610	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(double)/  2.0;  [CE]  '.class'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(double)/  2.0;  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(double)/  2.0;	  double    mean    =    Math.sqrt(x)/    2.0;    	non-compiled	[CE]  '.class'  expected	2	None	replace
611	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(new  Double(x)/  2.0);  [CE]  cannot  find  symbol  dev  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(new  Double(x)/  2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(new  Double(x)/  2.0);	  double    mean    =    Math.sqrt(x)/    2.0;    	non-compiled	[CE]  cannot  find  symbol  dev	2	None	replace
612	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  mean  +  2;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  /  mean  +  2;	  final    double    dev    =    x    -    mean    +    2;    	compilable	  [FE]  AssertionFailedError  	25	6	replace
613	[BUG]  [BUGGY]  final  double  dev  =  x  /  mean  +  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  mean  +  2;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  /  mean  +  2;	  final    double    dev    =    x    -    mean    +    2;    	compilable	  [FE]  AssertionFailedError  	25	6	replace
614	[BUG]  [BUGGY]  Math.sqrt(Math.pow(10,  x)/  2.0).doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]          ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Math.sqrt(Math.pow(10,  x)/  2.0).doubleValue();  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.sqrt(Math.pow(10,  x)/  2.0).doubleValue();	  Math.sqrt(Math.pow(10,    x)/    2.0);    	non-compiled	[CE]  double  cannot  be  dereferenced	30	None	replace
615	[BUG]  [BUGGY]  double  mean  =  Math.max(0,  Math.abs(x),  1.0);  [CE]  no  suitable  method  found  for  max(int,double,double)  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.max(0,  Math.abs(x),  1.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.max(0,  Math.abs(x),  1.0);	          double    mean    =    Math.max(0,    Math.abs(x));    long    mean    =    Math.max(0,    Math.abs(x));    	non-compiled	[CE]  no  suitable  method  found  for  max(int,double,double)	125	None	replace
616	[BUG]  [BUGGY]  double  mean  =  Math.cos(x)/  cumulativeProbability(x);  [CE]  cannot  find  symbol  dev  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.cos(x)/  cumulativeProbability(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.cos(x)/  cumulativeProbability(x);	  double    mean    =    Math.log(x)/    cumulativeProbability(x);    	non-compiled	[CE]  cannot  find  symbol  dev	36	None	replace
617	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(x);  final  double  standardDeviation  =  FastMath.sqrt(x);  [CE]  cannot  find  symbol  dev  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(x);  final  double  standardDeviation  =  FastMath.sqrt(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(x);  final  double  standardDeviation  =  FastMath.sqrt(x);	          double    mean    =    Math.sqrt(x);    long    standardDeviation    =    FastMath.sqrt(x);    	non-compiled	[CE]  cannot  find  symbol  dev	54	None	replace
618	[BUG]  [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  1.0);  Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(y)/  1.0);  [CE]  cannot  find  symbol  y  [FE]    ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  1.0);  Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(y)/  1.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                Math.sqrt(Math.log(x)/        2.0);        Math.sqrt(Math.log(x)/    1.0);    Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(y)/  1.0);	  	non-compiled	[CE]  cannot  find  symbol  y	113	None	add
619	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  1.0);  Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  0.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	                Math.sqrt(Math.log(x)/        2.0);        Math.sqrt(Math.log(x)/    1.0);    Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  0.0);	  	compilable	  [FE]  ConvergenceException  	113	1	add
620	[BUG]  [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  1.0);  Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  0.0);  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  1.0);  Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  0.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                Math.sqrt(Math.log(x)/        2.0);        Math.sqrt(Math.log(x)/    1.0);    Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  0.0);	  	compilable	  [FE]  ConvergenceException  	113	1	add
621	[BUG]  [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  1.0);  Mat.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  1.0);  [CE]  cannot  find  symbol  Mat  [FE]        ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  1.0);  Mat.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  1.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                Math.sqrt(Math.log(x)/        2.0);        Math.sqrt(Math.log(x)/    1.0);    Mat.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  1.0);	  	non-compiled	[CE]  cannot  find  symbol  Mat	113	None	add
622	[BUG]  [BUGGY]  final  double  dev  =  x  /  mean  *  SQRT2PI;  static  final  double  dev  =  x  /  mean  *  SQRT2PI;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  mean  *  SQRT2PI;  static  final  double  dev  =  x  /  mean  *  SQRT2PI;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    /    mean    *    SQRT2PI;    static  final  double  dev  =  x  /  mean  *  SQRT2PI;	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
623	[BUG]  [BUGGY]  float  mean  =  Math.sqrt(Math.log(x));  float  standardDeviation  =  Math.sqrt(Math.log(x));  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  float  mean  =  Math.sqrt(Math.log(x));  float  standardDeviation  =  Math.sqrt(Math.log(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	float  mean  =  Math.sqrt(Math.log(x));  float  standardDeviation  =  Math.sqrt(Math.log(x));	          double    mean    =    Math.sqrt(Math.log(x));    long    standardDeviation    =    Math.sqrt(Math.log(x));    	non-compiled	[CE]  possible  loss  of  precision	85	None	replace
624	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.log(x));  final  double  standardDeviation  =  Math.sqrt(Math.log(x));  [CE]  cannot  find  symbol  dev  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.log(x));  final  double  standardDeviation  =  Math.sqrt(Math.log(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.log(x));  final  double  standardDeviation  =  Math.sqrt(Math.log(x));	          double    mean    =    Math.sqrt(Math.log(x));    long    standardDeviation    =    Math.sqrt(Math.log(x));    	non-compiled	[CE]  cannot  find  symbol  dev	85	None	replace
625	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(1.0);  x  =  Math.sqrt(1.0);  [CE]  cannot  find  symbol  dev  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(1.0);  x  =  Math.sqrt(1.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(1.0);  x  =  Math.sqrt(1.0);	          double    mean    =    Math.abs(x);    x    =    Math.abs(x);    	non-compiled	[CE]  cannot  find  symbol  dev	79	None	replace
626	[BUG]  [BUGGY]  double  standardDeviation  =  Math.abs(x  -  baseDeviation);  [CE]  cannot  find  symbol  baseDeviation  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  standardDeviation  =  Math.abs(x  -  baseDeviation);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  standardDeviation  =  Math.abs(x  -  baseDeviation);	          double    mean    =    Math.abs(x    -    standardDeviation);    double    standardDeviation    =    Math.abs(x    -    standardDeviation);    	non-compiled	[CE]  cannot  find  symbol  baseDeviation	159	None	replace
627	[BUG]  [BUGGY]  double  standardDeviation  =  Math.abs(x  -  mean);  [CE]  cannot  find  symbol  dev  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  standardDeviation  =  Math.abs(x  -  mean);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  standardDeviation  =  Math.abs(x  -  mean);	          double    mean    =    Math.abs(x    -    standardDeviation);    double    standardDeviation    =    Math.abs(x    -    standardDeviation);    	non-compiled	[CE]  cannot  find  symbol  dev	159	None	replace
628	[BUG]  [BUGGY]  static  final  double  dev  =  mean  -  x0;  [CE]  illegal  start  of  expression  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  static  final  double  dev  =  mean  -  x0;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	static  final  double  dev  =  mean  -  x0;	  static    final    double    dev    =    x    -    mean;    	non-compiled	[CE]  illegal  start  of  expression	167	None	replace
629	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.rint(x)/  2.0);  [CE]  cannot  find  symbol  dev  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.rint(x)/  2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.rint(x)/  2.0);	  double    mean    =    Math.sqrt(Math.rint(x));    	non-compiled	[CE]  cannot  find  symbol  dev	48	None	replace
630	[BUG]  [BUGGY]  Math.pow(10,  Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  2.0);  [CE]  cannot  find  symbol  dev  [FE]        ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Math.pow(10,  Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.pow(10,  Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  2.0);	          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)1/    2.0);    	non-compiled	[CE]  cannot  find  symbol  dev	132	None	replace
631	[BUG]  [BUGGY]  final  double  dev  =  x  *  mean;  final  double  x  =  x  *  mean;  [CE]  variable  x  is  already  defined  in  method  cumulativeProbability(double)  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  *  mean;  final  double  x  =  x  *  mean;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    *    mean;    final  double  x  =  x  *  mean;	  	non-compiled	[CE]  variable  x  is  already  defined  in  method  cumulativeProbability(double)	130	None	add
632	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  2;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  2;	  final    double    dev    =    x    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  AssertionFailedError  	97	6	replace
633	[BUG]  [BUGGY]  final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  2;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  2;	  final    double    dev    =    x    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  AssertionFailedError  	97	6	replace
634	[BUG]  [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(y)/  2.0);  Math.sqrt(Math.log(y)/  2.0);  [CE]  cannot  find  symbol  y  [FE]    ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(y)/  2.0);  Math.sqrt(Math.log(y)/  2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                Math.sqrt(Math.log(x)/        2.0);        Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(y)/  2.0);  Math.sqrt(Math.log(y)/  2.0);	  	non-compiled	[CE]  cannot  find  symbol  y	110	None	add
635	[BUG]  [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(y)/  2.0);  [CE]  cannot  find  symbol  y  [FE]      ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(y)/  2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                Math.sqrt(Math.log(x)/        2.0);        Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(y)/  2.0);	  	non-compiled	[CE]  cannot  find  symbol  y	110	None	add
636	[BUG]  [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(double)/  2.0);  Math.sqrt(Math.log(x)/  2.0);  [CE]  '.class'  expected  [FE]        ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(double)/  2.0);  Math.sqrt(Math.log(x)/  2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                Math.sqrt(Math.log(x)/        2.0);        Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(double)/  2.0);  Math.sqrt(Math.log(x)/  2.0);	  	non-compiled	[CE]  '.class'  expected	110	None	add
637	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.random()  +  1);  [CE]  cannot  find  symbol  dev  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.random()  +  1);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.random()  +  1);	  double    mean    =    Math.sqrt(Math.random());    	non-compiled	[CE]  cannot  find  symbol  dev	123	None	replace
638	[BUG]  [BUGGY]  null  dev  =  x  -  mean;  final  double  dev  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  -  x);  [CE]  not  a  statement  [FE]                      ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  null  dev  =  x  -  mean;  final  double  dev  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  -  x);  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	null  dev  =  x  -  mean;  final  double  dev  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  -  x);	  final    double    dev    =    mean    -    x;    final    double    dev    =    mean    -    x);    	non-compiled	[CE]  not  a  statement	35	None	replace
639	[BUG]  [BUGGY]  null  dev  =  x  -  mean;  final  double  dev  =  mean  -  x);  [CE]  not  a  statement  [FE]                        ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  null  dev  =  x  -  mean;  final  double  dev  =  mean  -  x);  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	null  dev  =  x  -  mean;  final  double  dev  =  mean  -  x);	  final    double    dev    =    mean    -    x;    final    double    dev    =    mean    -    x);    	non-compiled	[CE]  not  a  statement	35	None	replace
640	[BUG]  [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  SQRT2PI;  static  final  double  dev  =  x  -  standardDeviation  *  SQRT2PI;  [CE]  illegal  start  of  expression  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  SQRT2PI;  static  final  double  dev  =  x  -  standardDeviation  *  SQRT2PI;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    standardDeviation    *    SQRT2PI;    static  final  double  dev  =  x  -  standardDeviation  *  SQRT2PI;	  timeout    	non-compiled	[CE]  illegal  start  of  expression	42	None	add
641	[BUG]  [BUGGY]          double    mean    =    Math.sqrt(x);    double  means  =  Math.sqrt(x);  double  mean  =  Math.sqrt(x);  Double  means  =  Math.sqrt(x);  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          double    mean    =    Math.sqrt(x);    double  means  =  Math.sqrt(x);  double  mean  =  Math.sqrt(x);  Double  means  =  Math.sqrt(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                double        mean        =        Math.sqrt(x);        double    means    =    Math.sqrt(x);    double  mean  =  Math.sqrt(x);  Double  means  =  Math.sqrt(x);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	56	None	add
642	[BUG]  [BUGGY]          double    mean    =    Math.sqrt(x);    double  means  =  Math.sqrt(x);  double  mean  =  Math.sqrt(x);  double  means  =  Math.sqrt(y);  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          double    mean    =    Math.sqrt(x);    double  means  =  Math.sqrt(x);  double  mean  =  Math.sqrt(x);  double  means  =  Math.sqrt(y);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                double        mean        =        Math.sqrt(x);        double    means    =    Math.sqrt(x);    double  mean  =  Math.sqrt(x);  double  means  =  Math.sqrt(y);	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	56	None	add
643	[BUG]  [BUGGY]  Math.min(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  3.0);  [CE]  no  suitable  method  found  for  min(double)  [FE]    ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Math.min(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  3.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.min(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  3.0);	          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/    3.0);    	non-compiled	[CE]  no  suitable  method  found  for  min(double)	117	None	replace
644	[BUG]  [BUGGY]  final  double  dev  =  x  *  standardDeviation;  static  final  double  dev  =  x  *  standardDeviation;  [CE]  illegal  start  of  expression  [FE]    ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  *  standardDeviation;  static  final  double  dev  =  x  *  standardDeviation;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    *    standardDeviation;    static  final  double  dev  =  x  *  standardDeviation;	  	non-compiled	[CE]  illegal  start  of  expression	118	None	add
645	[BUG]  [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(true,  inverseCumAccuracy);  [CE]  cannot  find  symbol  inverseCumAccuracy  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(true,  inverseCumAccuracy);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.log(x)/  cumulativeProbability(true,  inverseCumAccuracy);	  double    mean    =    Math.log(x)/    cumulativeProbability(true);    	non-compiled	[CE]  cannot  find  symbol  inverseCumAccuracy	138	None	replace
646	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(1.0);  x  =  Math.sqrt(x);  [CE]  cannot  find  symbol  dev  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(1.0);  x  =  Math.sqrt(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(1.0);  x  =  Math.sqrt(x);	          double    mean    =    Math.sqrt(x);    x    =    Math.sqrt(x);    	non-compiled	[CE]  cannot  find  symbol  dev	128	None	replace
647	[BUG]  [BUGGY]  null  mean  =  Math.sqrt(x);  x  =  Math.sqrt(x);  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  null  mean  =  Math.sqrt(x);  x  =  Math.sqrt(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	null  mean  =  Math.sqrt(x);  x  =  Math.sqrt(x);	          double    mean    =    Math.sqrt(x);    x    =    Math.sqrt(x);    	non-compiled	[CE]  not  a  statement	128	None	replace
648	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.log(x));  long  standardDeviation  =  FastMath.sqrt(Math.log(x));  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.log(x));  long  standardDeviation  =  FastMath.sqrt(Math.log(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.log(x));  long  standardDeviation  =  FastMath.sqrt(Math.log(x));	          double    mean    =    Math.sqrt(Math.log(x));    int    standardDeviation    =    FastMath.sqrt(Math.log(x));    	non-compiled	[CE]  possible  loss  of  precision	146	None	replace
649	[BUG]  [BUGGY]  null  mean  =  Math.sqrt(x0);  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  null  mean  =  Math.sqrt(x0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	null  mean  =  Math.sqrt(x0);	          double    mean    =    Math.sqrt(x);    long    mean    =    Math.sqrt(x);    	non-compiled	[CE]  not  a  statement	182	None	replace
650	[BUG]  [BUGGY]  final  double  dev  =  x  -  standardDeviation  +  1;  static  final  double  dev  =  x  -  standardDeviation  +  1;  [CE]  illegal  start  of  expression  [FE]    ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  standardDeviation  +  1;  static  final  double  dev  =  x  -  standardDeviation  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    standardDeviation    +    1;    static  final  double  dev  =  x  -  standardDeviation  +  1;	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
651	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  2PI;  [CE]  ';'  expected  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  *  2PI;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  mean  *  2PI;	  final    double    dev    =    x    -    mean    *    SQRT2PI;    final    double    dev    =    x    -    mean    *    SQRT2PI);    	non-compiled	[CE]  ';'  expected	70	None	replace
652	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.log(y));  [CE]  cannot  find  symbol  y  [FE]                AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.log(y));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.log(y));	          double    mean    =    Math.sqrt(Math.log(x));    double    mean    =    Math.sqrt(Math.log(y));    	non-compiled	[CE]  cannot  find  symbol  y	88	None	replace
653	[BUG]  [BUGGY]  double  mean  =  Math.cos(x)/  SQRT2PI;  [CE]  cannot  find  symbol  dev  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.cos(x)/  SQRT2PI;  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.cos(x)/  SQRT2PI;	  double    mean    =    Math.log(x)/    SQRT2PI;    	non-compiled	[CE]  cannot  find  symbol  dev	149	None	replace
654	[BUG]  [BUGGY]  double  mean  =  Math.abs(x)/  SQRT2PI;  [CE]  cannot  find  symbol  dev  [FE]                      ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(x)/  SQRT2PI;  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.abs(x)/  SQRT2PI;	  double    mean    =    Math.log(x)/    SQRT2PI;    	non-compiled	[CE]  cannot  find  symbol  dev	149	None	replace
655	[BUG]  [BUGGY]  int  mean  =  Math.abs(x);  int  standardDeviation  =  FastMath.sqrt(0.0);  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  int  mean  =  Math.abs(x);  int  standardDeviation  =  FastMath.sqrt(0.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	int  mean  =  Math.abs(x);  int  standardDeviation  =  FastMath.sqrt(0.0);	          double    mean    =    Math.abs(x);    long    standardDeviation    =    FastMath.sqrt(0.0);    	non-compiled	[CE]  possible  loss  of  precision	144	None	replace
656	[BUG]  [BUGGY]  final  double  dev  =  standardDeviation  -  x;  static  final  double  dev  =  standardDeviation  -  x;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  standardDeviation  -  x;  static  final  double  dev  =  standardDeviation  -  x;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    standardDeviation    -    x;    static  final  double  dev  =  standardDeviation  -  x;	  timeout    	non-compiled	[CE]  illegal  start  of  expression	135	None	add
657	[BUG]  [BUGGY]  Math.rint(Math.pow(10,  x)/  2.0);  [CE]  cannot  find  symbol  dev  [FE]        ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Math.rint(Math.pow(10,  x)/  2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.rint(Math.pow(10,  x)/  2.0);	  Math.rint(Math.log(x)/    2.0);    	non-compiled	[CE]  cannot  find  symbol  dev	29	None	replace
658	[BUG]  [BUGGY]  Math.rint(Math.random()  /  2.0);  [CE]  cannot  find  symbol  dev  [FE]          ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Math.rint(Math.random()  /  2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.rint(Math.random()  /  2.0);	  Math.rint(Math.log(x)/    2.0);    	non-compiled	[CE]  cannot  find  symbol  dev	29	None	replace
659	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.random()  *  Math.random()  +  1);  [CE]  cannot  find  symbol  dev  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.random()  *  Math.random()  +  1);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.random()  *  Math.random()  +  1);	  double    mean    =    Math.sqrt(Math.random()    *    Math.random());    	non-compiled	[CE]  cannot  find  symbol  dev	51	None	replace
660	[BUG]  [BUGGY]  timeout  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  dev  =  Math.abs(x  -  standardDeviation);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	double  dev  =  Math.abs(x  -  standardDeviation);	  double    mean    =    Math.abs(mean    -    standardDeviation);    	compilable	timeout	3	1	replace
661	[BUG]  [BUGGY]  double  dev  =  Math.abs(x  -  standardDeviation);  timeout  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  dev  =  Math.abs(x  -  standardDeviation);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  dev  =  Math.abs(x  -  standardDeviation);	  double    mean    =    Math.abs(mean    -    standardDeviation);    	compilable	timeout	3	1	replace
662	[BUG]  [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(false,  MAX_INVERSE_ABSOLUTE_ACCURACY);  [CE]  cannot  find  symbol  MAX_INVERSE_ABSOLUTE_ACCURACY  [FE]                      ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(false,  MAX_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.log(x)/  cumulativeProbability(false,  MAX_INVERSE_ABSOLUTE_ACCURACY);	  double    mean    =    Math.log(x)/    cumulativeProbability(false);    	non-compiled	[CE]  cannot  find  symbol  MAX_INVERSE_ABSOLUTE_ACCURACY	140	None	replace
663	[BUG]  [BUGGY]  double  mean  =  Math.min(Math.abs(x)/  2.0);  x  =  Math.abs(x);  [CE]  no  suitable  method  found  for  min(double)  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.min(Math.abs(x)/  2.0);  x  =  Math.abs(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.min(Math.abs(x)/  2.0);  x  =  Math.abs(x);	          double    mean    =    Math.abs(x);    x    =    Math.abs(x);    	non-compiled	[CE]  no  suitable  method  found  for  min(double)	79	None	replace
664	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(1.0);  x  =  Math.abs(x);  [CE]  cannot  find  symbol  dev  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(1.0);  x  =  Math.abs(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(1.0);  x  =  Math.abs(x);	          double    mean    =    Math.abs(x);    x    =    Math.abs(x);    	non-compiled	[CE]  cannot  find  symbol  dev	79	None	replace
665	[BUG]  [BUGGY]  final  double  dev  =  x  /  mean  *  SQRT2PI;  final  double  dev  =  x  /  mean  *  SQRT2PI);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  mean  *  SQRT2PI;  final  double  dev  =  x  /  mean  *  SQRT2PI);  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    /    mean    *    SQRT2PI;    final  double  dev  =  x  /  mean  *  SQRT2PI);	  	non-compiled	[CE]  ';'  expected	46	None	add
666	[BUG]  [BUGGY]  double  mean  =  Math.abs(stdDeviation);  [CE]  cannot  find  symbol  stdDeviation  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(stdDeviation);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.abs(stdDeviation);	  double    mean    =    Math.abs(standardDeviation);    	non-compiled	[CE]  cannot  find  symbol  stdDeviation	172	None	replace
667	[BUG]  [BUGGY]  Math.rint(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  2.0);  [CE]  cannot  find  symbol  dev  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Math.rint(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.rint(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/  2.0);	          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(y)/    2.0);    	non-compiled	[CE]  cannot  find  symbol  dev	115	None	replace
668	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.pow(10,  x)/  2.0);  [CE]  cannot  find  symbol  dev  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.pow(10,  x)/  2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.pow(10,  x)/  2.0);	  double    mean    =    Math.sqrt(Math.log(x)/    2.0);    	non-compiled	[CE]  cannot  find  symbol  dev	124	None	replace
669	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(y);  [CE]  cannot  find  symbol  y  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(y);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(y);	  double    mean    =    Math.sqrt(standardDeviation);    	non-compiled	[CE]  cannot  find  symbol  y	80	None	replace
670	[BUG]  [BUGGY]  final  double  mean  =  Math.sqrt(new  Double(x));  [CE]  cannot  find  symbol  dev  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  mean  =  Math.sqrt(new  Double(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  mean  =  Math.sqrt(new  Double(x));	          double    mean    =    Math.sqrt(x);    final    double    mean    =    Math.sqrt(x);    	non-compiled	[CE]  cannot  find  symbol  dev	55	None	replace
671	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Factory.abs(x)/  2.0);  [CE]  cannot  find  symbol  Factory  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Factory.abs(x)/  2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Factory.abs(x)/  2.0);	  double    mean    =    Math.sqrt(Math.abs(x)/    2.0);    	non-compiled	[CE]  cannot  find  symbol  Factory	71	None	replace
672	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.log(x)-  1);  [CE]  cannot  find  symbol  dev  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.log(x)-  1);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.log(x)-  1);	          double    mean    =    Math.sqrt(Math.log(x));    Double    mean    =    Math.sqrt(Math.log(x));    	non-compiled	[CE]  cannot  find  symbol  dev	84	None	replace
673	[BUG]  [BUGGY]  int  mean  =  Math.max(0,  Math.abs(x));  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  int  mean  =  Math.max(0,  Math.abs(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	int  mean  =  Math.max(0,  Math.abs(x));	          double    mean    =    Math.max(0,    Math.abs(x));    long    mean    =    Math.max(0,    Math.abs(x));    	non-compiled	[CE]  possible  loss  of  precision	125	None	replace
674	[BUG]  [BUGGY]  timeout  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  standardDeviation  /  mean  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  standardDeviation  /  mean  +  1;	  final    double    dev    =    x    /    mean    +    1;    	compilable	timeout	175	1	replace
675	[BUG]  [BUGGY]  final  double  dev  =  standardDeviation  /  mean  +  1;  timeout  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  standardDeviation  /  mean  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  standardDeviation  /  mean  +  1;	  final    double    dev    =    x    /    mean    +    1;    	compilable	timeout	175	1	replace
676	[BUG]  [BUGGY]  double  mean  =  Math.min(Math.abs(x)/  2.0);  x  =  Math.sqrt(x);  [CE]  no  suitable  method  found  for  min(double)  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.min(Math.abs(x)/  2.0);  x  =  Math.sqrt(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.min(Math.abs(x)/  2.0);  x  =  Math.sqrt(x);	          double    mean    =    Math.sqrt(x);    x    =    Math.sqrt(x);    	non-compiled	[CE]  no  suitable  method  found  for  min(double)	128	None	replace
677	[BUG]  [BUGGY]  x  =  Math.sqrt(x);  [CE]  cannot  find  symbol  dev  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  x  =  Math.sqrt(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	x  =  Math.sqrt(x);	          double    mean    =    Math.sqrt(x);    x    =    Math.sqrt(x);    	non-compiled	[CE]  cannot  find  symbol  dev	128	None	replace
678	[BUG]  [BUGGY]  final  double  x  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  variable  x  is  already  defined  in  method  cumulativeProbability(double)  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  x  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  x  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  final    double    dev    =    x    /    mean;    final    double    x    =    x    /    mean;    	non-compiled	[CE]  variable  x  is  already  defined  in  method  cumulativeProbability(double)	145	None	replace
679	[BUG]  [BUGGY]  final  double  x  =  x  /  DEFAULT_INVERSE_ABSOLUTE;  [CE]  variable  x  is  already  defined  in  method  cumulativeProbability(double)  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  x  =  x  /  DEFAULT_INVERSE_ABSOLUTE;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  x  =  x  /  DEFAULT_INVERSE_ABSOLUTE;	  final    double    dev    =    x    /    mean;    final    double    x    =    x    /    mean;    	non-compiled	[CE]  variable  x  is  already  defined  in  method  cumulativeProbability(double)	145	None	replace
680	[BUG]  [BUGGY]  static  final  double  dev  =  x  /  SQRT2PI;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  static  final  double  dev  =  x  /  SQRT2PI;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	static  final  double  dev  =  x  /  SQRT2PI;	  final    double    dev    =    x    /    mean;    static    final    double    dev    =    x    /    mean;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
681	[BUG]  [BUGGY]  final  double  dev  =  x  /  MILLIS_PER_SQRT2PI;  [CE]  cannot  find  symbol  MILLIS_PER_SQRT2PI  [FE]    ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  MILLIS_PER_SQRT2PI;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  /  MILLIS_PER_SQRT2PI;	  final    double    dev    =    x    /    standardDeviation;    	non-compiled	[CE]  cannot  find  symbol  MILLIS_PER_SQRT2PI	95	None	replace
682	[BUG]  [BUGGY]  final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  final  double  dev  =  x  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  final  double  dev  =  x  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    final  double  dev  =  x  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	96	None	add
683	[BUG]  [BUGGY]  double  mean  =  Math.abs(x  *  20);  [CE]  cannot  find  symbol  dev  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(x  *  20);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.abs(x  *  20);	  double    mean    =    Math.abs(x    -    20);    	non-compiled	[CE]  cannot  find  symbol  dev	6	None	replace
684	[BUG]  [BUGGY]  int  mean  =  Math.sqrt(x);  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  int  mean  =  Math.sqrt(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	int  mean  =  Math.sqrt(x);	          double    mean    =    Math.sqrt(x);    long    mean    =    Math.sqrt(x);    	non-compiled	[CE]  possible  loss  of  precision	182	None	replace
685	[BUG]  [BUGGY]  final  double  dev  =  x  *  mean;  final  double  dev  =  x  *  mean.doubleValue();  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  *  mean;  final  double  dev  =  x  *  mean.doubleValue();  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    *    mean;    final  double  dev  =  x  *  mean.doubleValue();	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	130	None	add
686	[BUG]  [BUGGY]  final  double  dev  =  x0  -  mean;  [CE]  cannot  find  symbol  x0  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x0  -  mean;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x0  -  mean;	  final    double    dev    =    mean    -    x;    final    double    dev    =    mean    -    x;    	non-compiled	[CE]  cannot  find  symbol  x0	32	None	replace
687	[BUG]  [BUGGY]  Math.abs(Math.abs(x)/  2.0);  Math.sqrt(Math.abs(x)/  2.0);  [CE]  cannot  find  symbol  dev  [FE]        ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Math.abs(Math.abs(x)/  2.0);  Math.sqrt(Math.abs(x)/  2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.abs(Math.abs(x)/  2.0);  Math.sqrt(Math.abs(x)/  2.0);	          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)1/    2.0);    	non-compiled	[CE]  cannot  find  symbol  dev	132	None	replace
688	[BUG]  [BUGGY]  final  double  dev  =  Math.abs(x  -  mean);  final  long  dev  =  Math.abs(x  -  mean);  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  Math.abs(x  -  mean);  final  long  dev  =  Math.abs(x  -  mean);  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    Math.abs(x    -    mean);    final  long  dev  =  Math.abs(x  -  mean);	  timeout    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	165	None	add
689	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  4;  final  double  dev  =  x  -  mean  *  5;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  *  4;  final  double  dev  =  x  -  mean  *  5;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    mean    *    4;    final  double  dev  =  x  -  mean  *  5;	  timeout    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	152	None	add
690	[BUG]  [BUGGY]  static  final  double  dev  =  x0  -  mean;  [CE]  illegal  start  of  expression  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  static  final  double  dev  =  x0  -  mean;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	static  final  double  dev  =  x0  -  mean;	  final    double    dev    =    mean    -    x;    static    final    double    dev    =    mean    -    x;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
691	[BUG]  [BUGGY]  timeout  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  standardDeviation  *  mean;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  standardDeviation  *  mean;	  final    double    dev    =    x    *    mean;    	compilable	timeout	131	1	replace
692	[BUG]  [BUGGY]  final  double  dev  =  standardDeviation  *  mean;  timeout  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  standardDeviation  *  mean;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  standardDeviation  *  mean;	  final    double    dev    =    x    *    mean;    	compilable	timeout	131	1	replace
693	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.exp(x)/  2);  [CE]  cannot  find  symbol  dev  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.exp(x)/  2);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.exp(x)/  2);	  double    mean    =    Math.sqrt(Math.exp(x));    	non-compiled	[CE]  cannot  find  symbol  dev	50	None	replace
694	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  *  SQRT2PI  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  *  SQRT2PI  +  1;	  final    double    dev    =    x    *    mean    +    1;    timeout    	compilable	  [FE]  AssertionFailedError  	177	6	replace
695	[BUG]  [BUGGY]  final  double  dev  =  x  *  SQRT2PI  +  1;  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  *  SQRT2PI  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  *  SQRT2PI  +  1;	  final    double    dev    =    x    *    mean    +    1;    timeout    	compilable	  [FE]  AssertionFailedError  	177	6	replace
696	[BUG]  [BUGGY]  double  mean  =  Math.min(0,  Math.abs(x  -  1));  [CE]  cannot  find  symbol  dev  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.min(0,  Math.abs(x  -  1));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.min(0,  Math.abs(x  -  1));	  double    mean    =    Math.min(0,    Math.abs(x));    	non-compiled	[CE]  cannot  find  symbol  dev	90	None	replace
697	[BUG]  [BUGGY]  double  mean  =  Math.abs(x)/  cumulativeProbability(x);  [CE]  cannot  find  symbol  dev  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(x)/  cumulativeProbability(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.abs(x)/  cumulativeProbability(x);	  double    mean    =    Math.log(x)/    cumulativeProbability(x);    	non-compiled	[CE]  cannot  find  symbol  dev	36	None	replace
698	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  final  double  dev  =  x  +  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)  [FE]    ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  final  double  dev  =  x  +  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    mean    *    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    final  double  dev  =  x  +  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  cumulativeProbability(double)	40	None	add
699	[BUG]  [BUGGY]  float  standardDeviation  =  Math.sqrt(Math.abs(x));  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  float  standardDeviation  =  Math.sqrt(Math.abs(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	float  standardDeviation  =  Math.sqrt(Math.abs(x));	          double    mean    =    Math.sqrt(Math.abs(x));    long    standardDeviation    =    Math.sqrt(Math.abs(x));    	non-compiled	[CE]  possible  loss  of  precision	65	None	replace
700	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.log(x));  int  standardDeviation  =  FastMath.sqrt(Math.log(standardDeviation));  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.log(x));  int  standardDeviation  =  FastMath.sqrt(Math.log(standardDeviation));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.log(x));  int  standardDeviation  =  FastMath.sqrt(Math.log(standardDeviation));	          double    mean    =    Math.sqrt(Math.log(x));    int    standardDeviation    =    FastMath.sqrt(Math.log(x));    	non-compiled	[CE]  possible  loss  of  precision	146	None	replace
701	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  mean  *  2;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  /  mean  *  2;	  final    double    dev    =    x    -    mean    *    2;    timeout    	compilable	  [FE]  AssertionFailedError  	45	6	replace
702	[BUG]  [BUGGY]  final  double  dev  =  x  /  mean  *  2;  [FE]  AssertionFailedError  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  mean  *  2;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  /  mean  *  2;	  final    double    dev    =    x    -    mean    *    2;    timeout    	compilable	  [FE]  AssertionFailedError  	45	6	replace
703	[BUG]  [BUGGY]  Math.abs(Math.abs(x)/  2.0);  Math.sqrt(Math.abs(x)/  3.0);  [CE]  cannot  find  symbol  dev  [FE]    ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Math.abs(Math.abs(x)/  2.0);  Math.sqrt(Math.abs(x)/  3.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.abs(Math.abs(x)/  2.0);  Math.sqrt(Math.abs(x)/  3.0);	          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/    3.0);    	non-compiled	[CE]  cannot  find  symbol  dev	117	None	replace
704	[BUG]  [BUGGY]  double  mean  =  Math.random()  /  2.0;  [CE]  cannot  find  symbol  dev  [FE]                        ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.random()  /  2.0;  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.random()  /  2.0;	  double    mean    =    Math.log(x)/    2.0;    	non-compiled	[CE]  cannot  find  symbol  dev	28	None	replace
705	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  *  mean  *  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  *  mean  *  1;	  final    double    dev    =    x    -    mean    *    1;    	compilable	  [FE]  AssertionFailedError  	151	6	replace
706	[BUG]  [BUGGY]  final  double  dev  =  x  *  mean  *  1;  [FE]  AssertionFailedError  [FE]    ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  *  mean  *  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  *  mean  *  1;	  final    double    dev    =    x    -    mean    *    1;    	compilable	  [FE]  AssertionFailedError  	151	6	replace
707	[BUG]  [BUGGY]  Double  mean  =  Math.abs(x  -  1);  [CE]  cannot  find  symbol  dev  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Double  mean  =  Math.abs(x  -  1);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Double  mean  =  Math.abs(x  -  1);	          double    mean    =    Math.abs(x);    Double    mean    =    Math.abs(x);    	non-compiled	[CE]  cannot  find  symbol  dev	75	None	replace
708	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x)-  3);  [CE]  cannot  find  symbol  dev  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x)-  3);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.abs(x)-  3);	  double    mean    =    Math.sqrt(Math.abs(x)-    1);    	non-compiled	[CE]  cannot  find  symbol  dev	72	None	replace
709	[BUG]  [BUGGY]  double  standardDeviation  =  Math.abs(x  -  MAX_PROBABILITY);  [CE]  cannot  find  symbol  MAX_PROBABILITY  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  standardDeviation  =  Math.abs(x  -  MAX_PROBABILITY);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  standardDeviation  =  Math.abs(x  -  MAX_PROBABILITY);	          double    mean    =    Math.abs(x    -    standardDeviation);    double    standardDeviation    =    Math.abs(x    -    standardDeviation);    	non-compiled	[CE]  cannot  find  symbol  MAX_PROBABILITY	159	None	replace
710	[BUG]  [BUGGY]  double  mean  =  Math.max(0,  Math.abs(x),  standardDeviation);  [CE]  no  suitable  method  found  for  max(int,double,double)  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.max(0,  Math.abs(x),  standardDeviation);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.max(0,  Math.abs(x),  standardDeviation);	          double    mean    =    Math.max(0,    Math.abs(x));    Double    mean    =    Math.max(0,    Math.abs(x));    	non-compiled	[CE]  no  suitable  method  found  for  max(int,double,double)	101	None	replace
711	[BUG]  [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  DEFULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  DEFULT_INVERSE_ABSOLUTE_ACCURACY  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  DEFULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  standardDeviation  *  DEFULT_INVERSE_ABSOLUTE_ACCURACY;	  final    double    dev    =    x    -    standardDeviation    *    SQRT2PI;    timeout    	non-compiled	[CE]  cannot  find  symbol  DEFULT_INVERSE_ABSOLUTE_ACCURACY	43	None	replace
712	[BUG]  [BUGGY]  Final  double  dev  =  x  -  mean  *  SQRT2PI;  [CE]  not  a  statement  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Final  double  dev  =  x  -  mean  *  SQRT2PI;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Final  double  dev  =  x  -  mean  *  SQRT2PI;	  final    double    dev    =    x    -    mean    *    SQRT2PI;    Final    double    dev    =    x    -    mean    *    SQRT2PI;    	non-compiled	[CE]  not  a  statement	69	None	replace
713	[BUG]  [BUGGY]  timeout  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          double    mean    =    Math.sqrt(x);    x  =  Math.sqrt(x);  x  =  Math.sqrt(x);  x  =  Math.sqrt(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	                double        mean        =        Math.sqrt(x);        x    =    Math.sqrt(x);    x  =  Math.sqrt(x);  x  =  Math.sqrt(x);	  	compilable	timeout	127	1	add
714	[BUG]  [BUGGY]          double    mean    =    Math.sqrt(x);    x  =  Math.sqrt(x);  x  =  Math.sqrt(x);  x  =  Math.sqrt(x);  timeout  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          double    mean    =    Math.sqrt(x);    x  =  Math.sqrt(x);  x  =  Math.sqrt(x);  x  =  Math.sqrt(x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                double        mean        =        Math.sqrt(x);        x    =    Math.sqrt(x);    x  =  Math.sqrt(x);  x  =  Math.sqrt(x);	  	compilable	timeout	127	1	add
715	[BUG]  [BUGGY]  Math.exp(Math.exp(x)/  2.0);  [CE]  cannot  find  symbol  dev  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Math.exp(Math.exp(x)/  2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.exp(Math.exp(x)/  2.0);	  Math.sqrt(Math.exp(x)/    2.0);    	non-compiled	[CE]  cannot  find  symbol  dev	31	None	replace
716	[BUG]  [BUGGY]  Math.abs(Math.exp(x)/  2.0);  [CE]  cannot  find  symbol  dev  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Math.abs(Math.exp(x)/  2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.abs(Math.exp(x)/  2.0);	  Math.sqrt(Math.exp(x)/    2.0);    	non-compiled	[CE]  cannot  find  symbol  dev	31	None	replace
717	[BUG]  [BUGGY]  Final  double  dev  =  mean  -  x;  [CE]  not  a  statement  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Final  double  dev  =  mean  -  x;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Final  double  dev  =  mean  -  x;	  final    double    dev    =    mean    -    x;    Final    double    dev    =    mean    -    x;    	non-compiled	[CE]  not  a  statement	33	None	replace
718	[BUG]  [BUGGY]  timeout  [FE]    ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  standardDeviation  -  x  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  standardDeviation  -  x  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  final    double    dev    =    x    -    standardDeviation    *    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	timeout	170	1	replace
719	[BUG]  [BUGGY]  final  double  dev  =  standardDeviation  -  x  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  timeout  [FE]    ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  standardDeviation  -  x  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  standardDeviation  -  x  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  final    double    dev    =    x    -    standardDeviation    *    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	timeout	170	1	replace
720	[BUG]  [BUGGY]  final  double  dev  =  this.mean  -  x;  final  double  dev  =  this.mean  -  x);  [CE]  ';'  expected  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  this.mean  -  x;  final  double  dev  =  this.mean  -  x);  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    this.mean    -    x;    final  double  dev  =  this.mean  -  x);	  timeout    	non-compiled	[CE]  ';'  expected	60	None	add
721	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.rint(x)/  2);  [CE]  cannot  find  symbol  dev  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.rint(x)/  2);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.rint(x)/  2);	  double    mean    =    Math.sqrt(Math.rint(x));    	non-compiled	[CE]  cannot  find  symbol  dev	48	None	replace
722	[BUG]  [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(standardDeviation,  null);  [CE]  no  suitable  method  found  for  cumulativeProbability(double,<null>)  [FE]                    ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(standardDeviation,  null);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.log(x)/  cumulativeProbability(standardDeviation,  null);	  double    mean    =    Math.log(x)/    cumulativeProbability(null);    	non-compiled	[CE]  no  suitable  method  found  for  cumulativeProbability(double,<null>)	139	None	replace
723	[BUG]  [BUGGY]  float  standardDeviation  =  Math.sqrt(Math.log(x));  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  float  standardDeviation  =  Math.sqrt(Math.log(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	float  standardDeviation  =  Math.sqrt(Math.log(x));	          double    mean    =    Math.sqrt(Math.log(x));    long    standardDeviation    =    Math.sqrt(Math.log(x));    	non-compiled	[CE]  possible  loss  of  precision	85	None	replace
724	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  mean  *  4;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  /  mean  *  4;	  final    double    dev    =    x    -    mean    *    4;    timeout    	compilable	  [FE]  AssertionFailedError  	153	6	replace
725	[BUG]  [BUGGY]  final  double  dev  =  x  /  mean  *  4;  [FE]  AssertionFailedError  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  mean  *  4;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  /  mean  *  4;	  final    double    dev    =    x    -    mean    *    4;    timeout    	compilable	  [FE]  AssertionFailedError  	153	6	replace
726	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x  *  standardDeviation));  [CE]  cannot  find  symbol  dev  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x  *  standardDeviation));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.abs(x  *  standardDeviation));	  double    mean    =    Math.sqrt(Math.abs(x    -    standardDeviation));    	non-compiled	[CE]  cannot  find  symbol  dev	183	None	replace
727	[BUG]  [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  SQRT2PI;  final  double  dev  =  x  -  standardDeviation  *  SQRT2PI);  [CE]  ';'  expected  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  standardDeviation  *  SQRT2PI;  final  double  dev  =  x  -  standardDeviation  *  SQRT2PI);  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    standardDeviation    *    SQRT2PI;    final  double  dev  =  x  -  standardDeviation  *  SQRT2PI);	  timeout    	non-compiled	[CE]  ';'  expected	42	None	add
728	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  standardDeviation  *  x;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  standardDeviation  *  x;	  final    double    dev    =    mean    /    x;    	compilable	  [FE]  ConvergenceException  	99	5	replace
729	[BUG]  [BUGGY]  final  double  dev  =  standardDeviation  *  x;  [FE]  ConvergenceException  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  standardDeviation  *  x;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  standardDeviation  *  x;	  final    double    dev    =    mean    /    x;    	compilable	  [FE]  ConvergenceException  	99	5	replace
730	[BUG]  [BUGGY]          double    mean    =    Math.sqrt(Math.abs(x));    x  =  Math.sqrt(Math.abs(x));  double  mean  =  Math.abs(x);  x  =  Math.sqrt(Math.abs(x));  [CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          double    mean    =    Math.sqrt(Math.abs(x));    x  =  Math.sqrt(Math.abs(x));  double  mean  =  Math.abs(x);  x  =  Math.sqrt(Math.abs(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                double        mean        =        Math.sqrt(Math.abs(x));        x    =    Math.sqrt(Math.abs(x));    double  mean  =  Math.abs(x);  x  =  Math.sqrt(Math.abs(x));	  	non-compiled	[CE]  variable  mean  is  already  defined  in  method  cumulativeProbability(double)	178	None	add
731	[BUG]  [BUGGY]  final  double  dev  =  x  /  standardsDeviation;  [CE]  cannot  find  symbol  standardsDeviation  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  /  standardsDeviation;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  /  standardsDeviation;	  final    double    dev    =    x    -    standardDeviation;    final    double    dev    =    x    -    standardsDeviation;    	non-compiled	[CE]  cannot  find  symbol  standardsDeviation	19	None	replace
732	[BUG]  [BUGGY]  Math.abs(Math.abs(x)/  2.0);  Math.sqrt(Math.abs(x)/  1.0);  [CE]  cannot  find  symbol  dev  [FE]    ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Math.abs(Math.abs(x)/  2.0);  Math.sqrt(Math.abs(x)/  1.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.abs(Math.abs(x)/  2.0);  Math.sqrt(Math.abs(x)/  1.0);	          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/    1.0);    	non-compiled	[CE]  cannot  find  symbol  dev	114	None	replace
733	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  SQURT2PI;  [CE]  cannot  find  symbol  SQURT2PI  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  *  SQURT2PI;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  mean  *  SQURT2PI;	  final    double    dev    =    x    -    mean    *    SQRT2PI;    final    double    dev    =    x    -    mean    *    SqRT2PI;    	non-compiled	[CE]  cannot  find  symbol  SQURT2PI	68	None	replace
734	[BUG]  [BUGGY]  final  double  mean  =  Math.abs(x  -  1);  [CE]  cannot  find  symbol  dev  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  mean  =  Math.abs(x  -  1);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  mean  =  Math.abs(x  -  1);	          double    mean    =    Math.abs(x);    final    double    mean    =    Math.abs(x);    	non-compiled	[CE]  cannot  find  symbol  dev	77	None	replace
735	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x)*  1);  [CE]  cannot  find  symbol  dev  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x)*  1);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.abs(x)*  1);	  double    mean    =    Math.sqrt(Math.abs(x)+    1);    	non-compiled	[CE]  cannot  find  symbol  dev	122	None	replace
736	[BUG]  [BUGGY]  Math.abs(Math.abs(x)/  2.0);  Mat.sqrt(Math.abs(x)/  2.0);  [CE]  cannot  find  symbol  Mat  [FE]          ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Math.abs(Math.abs(x)/  2.0);  Mat.sqrt(Math.abs(x)/  2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.abs(Math.abs(x)/  2.0);  Mat.sqrt(Math.abs(x)/  2.0);	          Math.sqrt(Math.log(x)/    2.0);    Mat.sqrt(Math.log(x)/    2.0);    	non-compiled	[CE]  cannot  find  symbol  Mat	112	None	replace
737	[BUG]  [BUGGY]  double  mean  =  Math.ceil(Math.log(x));  x  =  Math.sqrt(Math.log(x));  [CE]  cannot  find  symbol  dev  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.ceil(Math.log(x));  x  =  Math.sqrt(Math.log(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.ceil(Math.log(x));  x  =  Math.sqrt(Math.log(x));	          double    mean    =    Math.sqrt(Math.log(x));    x    =    Math.sqrt(Math.log(x));    	non-compiled	[CE]  cannot  find  symbol  dev	87	None	replace
738	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.random()  *  Math.log(x));  x  =  Math.sqrt(Math.log(x));  [CE]  cannot  find  symbol  dev  [FE]      AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.random()  *  Math.log(x));  x  =  Math.sqrt(Math.log(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.random()  *  Math.log(x));  x  =  Math.sqrt(Math.log(x));	          double    mean    =    Math.sqrt(Math.log(x));    x    =    Math.sqrt(Math.log(x));    	non-compiled	[CE]  cannot  find  symbol  dev	87	None	replace
739	[BUG]  [BUGGY]  final  double  dev  =  x  -  MAXIMUM_PROBABILITY;  [CE]  cannot  find  symbol  MAXIMUM_PROBABILITY  [FE]                ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  MAXIMUM_PROBABILITY;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  MAXIMUM_PROBABILITY;	  final    double    dev    =    value    -    x;    	non-compiled	[CE]  cannot  find  symbol  MAXIMUM_PROBABILITY	162	None	replace
740	[BUG]  [BUGGY]  final  double  dev  =  x  -  baseDeviation;  [CE]  cannot  find  symbol  baseDeviation  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  baseDeviation;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  baseDeviation;	  final    double    dev    =    value    -    x;    	non-compiled	[CE]  cannot  find  symbol  baseDeviation	162	None	replace
741	[BUG]  [BUGGY]  double  standardDeviation  =  Math.abs(x  -  baseDimension);  [CE]  cannot  find  symbol  baseDimension  [FE]              ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  standardDeviation  =  Math.abs(x  -  baseDimension);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  standardDeviation  =  Math.abs(x  -  baseDimension);	          double    mean    =    Math.abs(x    -    standardDeviation);    Double    standardDeviation    =    Math.abs(x    -    standardDeviation);    	non-compiled	[CE]  cannot  find  symbol  baseDimension	160	None	replace
742	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  SQRT2PI;  static  final  double  dev  =  x  -  mean  *  SQRT1PI;  [CE]  illegal  start  of  expression  [FE]            ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  *  SQRT2PI;  static  final  double  dev  =  x  -  mean  *  SQRT1PI;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  mean  *  SQRT2PI;  static  final  double  dev  =  x  -  mean  *  SQRT1PI;	  final    double    dev    =    x    -    mean    *    SQRT2PI;    static    final    double    dev    =    x    -    mean    *    SQRT2PI;    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
743	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  1  +  1;  final  double  dev  =  x  -  mean  *  1)  +  1;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  dev  =  x  -  mean  *  1  +  1;  final  double  dev  =  x  -  mean  *  1)  +  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final    double    dev    =    x    -    mean    *    1    +    1;    final  double  dev  =  x  -  mean  *  1)  +  1;	  	non-compiled	[CE]  ';'  expected	22	None	add
744	[BUG]  [BUGGY]  Math.exp(Math.abs(x)/  2.0);  [CE]  cannot  find  symbol  dev  [FE]        ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Math.exp(Math.abs(x)/  2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.exp(Math.abs(x)/  2.0);	  Math.sqrt(Math.abs(x)/    2.0);    	non-compiled	[CE]  cannot  find  symbol  dev	171	None	replace
745	[BUG]  [BUGGY]  static  final  double  dev  =  x  *  standardDeviation;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  static  final  double  dev  =  x  *  standardDeviation;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	static  final  double  dev  =  x  *  standardDeviation;	  final    double    dev    =    x    -    standardDeviation;    static    final    double    dev    =    x    -    standardDeviation;    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
746	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x)/  2.0);  x  =  Math.sqrt(Math.abs(x));  [CE]  cannot  find  symbol  dev  [FE]    AssertionFailedError    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x)/  2.0);  x  =  Math.sqrt(Math.abs(x));  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(Math.abs(x)/  2.0);  x  =  Math.sqrt(Math.abs(x));	          double    mean    =    Math.sqrt(Math.abs(x));    x    =    Math.sqrt(Math.abs(x));    	non-compiled	[CE]  cannot  find  symbol  dev	179	None	replace
747	[BUG]  [BUGGY]  double  dev  =  x  -  mean;  final  double  dev  =  mean  -  x);  [CE]  ';'  expected  [FE]                      ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  dev  =  x  -  mean;  final  double  dev  =  mean  -  x);  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  dev  =  x  -  mean;  final  double  dev  =  mean  -  x);	  final    double    dev    =    mean    -    x;    final    double    dev    =    mean    -    x);    	non-compiled	[CE]  ';'  expected	35	None	replace
748	[BUG]  [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(sqrt2PI);  [CE]  cannot  find  symbol  sqrt2PI  [FE]                  ConvergenceException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.log(x)/  cumulativeProbability(sqrt2PI);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.log(x)/  cumulativeProbability(sqrt2PI);	  double    mean    =    Math.log(x)/    cumulativeProbability(standardDeviation);    	non-compiled	[CE]  cannot  find  symbol  sqrt2PI	168	None	replace
749	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(standardDeviation,  x);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(standardDeviation,  x);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(standardDeviation,  x);	          double    mean    =    Math.sqrt(x);    Double    mean    =    Math.sqrt(x);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	53	None	replace
750	[BUG]  [BUGGY]  static  final  double  dev  =  x  -  mean  *  1;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  static  final  double  dev  =  x  -  mean  *  1;  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	static  final  double  dev  =  x  -  mean  *  1;	  final    double    dev    =    x    -    mean    +    1;    static    final    double    dev    =    x    -    mean    +    1;    	non-compiled	[CE]  illegal  start  of  expression	158	None	replace
751	[BUG]  [BUGGY]  final  double  x  =  x  -  standardDeviation.doubleValue();  [CE]  variable  x  is  already  defined  in  method  cumulativeProbability(double)  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  final  double  x  =  x  -  standardDeviation.doubleValue();  [BUGGY]      try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  x  =  x  -  standardDeviation.doubleValue();	  final    double    dev    =    x    -    standardDeviation;    final    double    x    =    x    -    standardDeviation;    	non-compiled	[CE]  variable  x  is  already  defined  in  method  cumulativeProbability(double)	134	None	replace
752	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(x  /  2.0)-  1;  [CE]  cannot  find  symbol  dev  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(x  /  2.0)-  1;  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.sqrt(x  /  2.0)-  1;	  double    mean    =    Math.sqrt(x    /    2.0);    	non-compiled	[CE]  cannot  find  symbol  dev	129	None	replace
753	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/2);  Math.sqrt(Math.log(x)/  2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	                Math.sqrt(Math.log(x)/        2.0);        Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/2);  Math.sqrt(Math.log(x)/  2.0);	  	compilable	  [FE]  ConvergenceException  	110	1	add
754	[BUG]  [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/2);  Math.sqrt(Math.log(x)/  2.0);  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/  2.0);  Math.sqrt(Math.log(x)/2);  Math.sqrt(Math.log(x)/  2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	                Math.sqrt(Math.log(x)/        2.0);        Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/2);  Math.sqrt(Math.log(x)/  2.0);	  	compilable	  [FE]  ConvergenceException  	110	1	add
755	[BUG]  [BUGGY]  double  mean  =  Math.max(0,  Math.abs(x)*  1);  [CE]  cannot  find  symbol  dev  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.max(0,  Math.abs(x)*  1);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	double  mean  =  Math.max(0,  Math.abs(x)*  1);	  double    mean    =    Math.max(0,    Math.abs(x)+    1);    	non-compiled	[CE]  cannot  find  symbol  dev	141	None	replace
756	[BUG]  [BUGGY]  Math.abs(Math.abs(x)/  2.0);  Math.abs(Math.abs(x)/  2.0);  [CE]  cannot  find  symbol  dev  [FE]    ConvergenceException    [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Math.abs(Math.abs(x)/  2.0);  Math.abs(Math.abs(x)/  2.0);  [BUGGY]      final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	Math.abs(Math.abs(x)/  2.0);  Math.abs(Math.abs(x)/  2.0);	          Math.sqrt(Math.log(x)/    2.0);    Math.sqrt(Math.log(x)/    2.0);    	non-compiled	[CE]  cannot  find  symbol  dev	111	None	replace
