bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ConvergenceException  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  [BUGGY]    double  mean  =  Math.max(0,  Math.abs(x));  [BUGGY]  final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	    double  mean  =  Math.max(0,  Math.abs(x));		compilable	  [FE]  AssertionFailedError  	2	6	add
2	[BUG]  [BUGGY]    double  mean  =  Math.max(0,  Math.abs(x));  [FE]  AssertionFailedError  [FE]    ConvergenceException  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  [BUGGY]    double  mean  =  Math.max(0,  Math.abs(x));  [BUGGY]  final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	    double  mean  =  Math.max(0,  Math.abs(x));		compilable	  [FE]  AssertionFailedError  	2	6	add
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ConvergenceException  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  [BUGGY]    double  mean  =  Math.sqrt(x);  [BUGGY]  final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	    double  mean  =  Math.sqrt(x);		compilable	  [FE]  AssertionFailedError  	2	7	add
4	[BUG]  [BUGGY]    double  mean  =  Math.sqrt(x);  [FE]  AssertionFailedError  [FE]      ConvergenceException  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  [BUGGY]    double  mean  =  Math.sqrt(x);  [BUGGY]  final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	    double  mean  =  Math.sqrt(x);		compilable	  [FE]  AssertionFailedError  	2	7	add
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        ConvergenceException  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  [BUGGY]    double  mean  =  Math.abs(x);  [BUGGY]  final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	    double  mean  =  Math.abs(x);		compilable	  [FE]  AssertionFailedError  	2	6	add
6	[BUG]  [BUGGY]    double  mean  =  Math.abs(x);  [FE]  AssertionFailedError  [FE]        ConvergenceException  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  [BUGGY]    double  mean  =  Math.abs(x);  [BUGGY]  final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	    double  mean  =  Math.abs(x);		compilable	  [FE]  AssertionFailedError  	2	6	add
7	[BUG]  [BUGGY]    double  mean  =  Math.log(x)/  cumulativeProbability();  [CE]  no  suitable  method  found  for  cumulativeProbability()  [FE]          ConvergenceException  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  [BUGGY]    double  mean  =  Math.log(x)/  cumulativeProbability();  [BUGGY]  final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	    double  mean  =  Math.log(x)/  cumulativeProbability();		non-compiled	[CE]  no  suitable  method  found  for  cumulativeProbability()	2	None	add
8	[BUG]  [BUGGY]    double  mean  =  Math.log(x)/  cumulativeProbability;  [CE]  cannot  find  symbol  cumulativeProbability  [FE]            ConvergenceException  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  [BUGGY]    double  mean  =  Math.log(x)/  cumulativeProbability;  [BUGGY]  final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	    double  mean  =  Math.log(x)/  cumulativeProbability;		non-compiled	[CE]  cannot  find  symbol  cumulativeProbability	2	None	add
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ConvergenceException  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  [BUGGY]  final  double  dev  =  x  -  standardDeviation;  [BUGGY]  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  -  standardDeviation;	final  double  dev  =  x  -  mean;  	compilable	  [FE]  AssertionFailedError  	1	6	replace
10	[BUG]  [BUGGY]  final  double  dev  =  x  -  standardDeviation;  [FE]  AssertionFailedError  [FE]    ConvergenceException  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  [BUGGY]  final  double  dev  =  x  -  standardDeviation;  [BUGGY]  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  standardDeviation;	final  double  dev  =  x  -  mean;  	compilable	  [FE]  AssertionFailedError  	1	6	replace
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ConvergenceException  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  [BUGGY]  final  double  dev  =  x  /  mean;  [BUGGY]  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  /  mean;	final  double  dev  =  x  -  mean;  	compilable	  [FE]  AssertionFailedError  	1	6	replace
12	[BUG]  [BUGGY]  final  double  dev  =  x  /  mean;  [FE]  AssertionFailedError  [FE]      ConvergenceException  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  [BUGGY]  final  double  dev  =  x  /  mean;  [BUGGY]  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  /  mean;	final  double  dev  =  x  -  mean;  	compilable	  [FE]  AssertionFailedError  	1	6	replace
13	[BUG]  [BUGGY]  timeout  [FE]        ConvergenceException  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  [BUGGY]  final  double  dev  =  mean  -  x;  [BUGGY]  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  mean  -  x;	final  double  dev  =  x  -  mean;  	compilable	timeout	1	1	replace
14	[BUG]  [BUGGY]  final  double  dev  =  mean  -  x;  timeout  [FE]        ConvergenceException  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  [BUGGY]  final  double  dev  =  mean  -  x;  [BUGGY]  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  mean  -  x;	final  double  dev  =  x  -  mean;  	compilable	timeout	1	1	replace
15	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          ConvergenceException  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  [BUGGY]  final  double  dev  =  x  -  mean  +  1;  [BUGGY]  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  -  mean  +  1;	final  double  dev  =  x  -  mean;  	compilable	  [FE]  AssertionFailedError  	1	6	replace
16	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  +  1;  [FE]  AssertionFailedError  [FE]          ConvergenceException  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  [BUGGY]  final  double  dev  =  x  -  mean  +  1;  [BUGGY]  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  mean  +  1;	final  double  dev  =  x  -  mean;  	compilable	  [FE]  AssertionFailedError  	1	6	replace
17	[BUG]  [BUGGY]  timeout  [FE]    ConvergenceException  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  [BUGGY]    double  mean  =  Math.abs(x  -  standardDeviation);  [BUGGY]  final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	    double  mean  =  Math.abs(x  -  standardDeviation);		compilable	timeout	2	1	add
18	[BUG]  [BUGGY]    double  mean  =  Math.abs(x  -  standardDeviation);  timeout  [FE]    ConvergenceException  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  [BUGGY]    double  mean  =  Math.abs(x  -  standardDeviation);  [BUGGY]  final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	    double  mean  =  Math.abs(x  -  standardDeviation);		compilable	timeout	2	1	add
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ConvergenceException  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  [BUGGY]    double  mean  =  Math.sqrt(Math.abs(x));  [BUGGY]  final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	    double  mean  =  Math.sqrt(Math.abs(x));		compilable	  [FE]  AssertionFailedError  	2	6	add
20	[BUG]  [BUGGY]    double  mean  =  Math.sqrt(Math.abs(x));  [FE]  AssertionFailedError  [FE]      ConvergenceException  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  [BUGGY]    double  mean  =  Math.sqrt(Math.abs(x));  [BUGGY]  final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	    double  mean  =  Math.sqrt(Math.abs(x));		compilable	  [FE]  AssertionFailedError  	2	6	add
21	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        ConvergenceException  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  [BUGGY]    Math.sqrt(Math.log(x)/  2.0);  [BUGGY]  final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	    Math.sqrt(Math.log(x)/  2.0);		compilable	  [FE]  ConvergenceException  	2	1	add
22	[BUG]  [BUGGY]    Math.sqrt(Math.log(x)/  2.0);  [FE]  ConvergenceException  [FE]        ConvergenceException  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  [BUGGY]    Math.sqrt(Math.log(x)/  2.0);  [BUGGY]  final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	    Math.sqrt(Math.log(x)/  2.0);		compilable	  [FE]  ConvergenceException  	2	1	add
23	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ConvergenceException  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  [BUGGY]    double  mean  =  Math.sqrt(Math.log(x));  [BUGGY]  final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	    double  mean  =  Math.sqrt(Math.log(x));		compilable	  [FE]  AssertionFailedError  	2	7	add
24	[BUG]  [BUGGY]    double  mean  =  Math.sqrt(Math.log(x));  [FE]  AssertionFailedError  [FE]    ConvergenceException  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  [BUGGY]    double  mean  =  Math.sqrt(Math.log(x));  [BUGGY]  final  double  dev  =  x  -  mean;  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	    double  mean  =  Math.sqrt(Math.log(x));		compilable	  [FE]  AssertionFailedError  	2	7	add
25	[BUG]  [BUGGY]  timeout  [FE]    ConvergenceException  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  [BUGGY]  final  double  dev  =  x  -  mean  *  SQRT2PI;  [BUGGY]  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	add	final  double  dev  =  x  -  mean  *  SQRT2PI;	final  double  dev  =  x  -  mean;  	compilable	timeout	1	1	replace
26	[BUG]  [BUGGY]  final  double  dev  =  x  -  mean  *  SQRT2PI;  timeout  [FE]    ConvergenceException  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  [BUGGY]  final  double  dev  =  x  -  mean  *  SQRT2PI;  [BUGGY]  try  {  return  0.5  *  (1.0  +  Erf.erf((dev)  /  (standardDeviation  *  FastMath.sqrt(2.0))));  }  catch  (MaxIterationsExceededException  ex)  {  if  (x  <  (mean  -  20  *  standardDeviation))  {  //  JDK  1.5  blows  at  38  return  0;  }  else  if  (x  >  (mean  +  20  *  standardDeviation))  {  return  1;  }  else  {  throw  ex;  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  MaxIterationsExceededException  ex  boolean  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  dev  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  x  x0  x1  long  serialVersionUID  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	125	125	1	replace	final  double  dev  =  x  -  mean  *  SQRT2PI;	final  double  dev  =  x  -  mean;  	compilable	timeout	1	1	replace
