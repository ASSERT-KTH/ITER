projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=normalDeviation;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.create(sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.newInstance(sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=standardDeviation;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublemean,doublesd,doubleinverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublemean,doubleinverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(mean,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublemean,doublesd,doublestandardDeviation){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(mean,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublemean,doublestandardDeviation,doublesd,doubleinverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublemean){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,sd);this.standardDeviation=standardDeviation;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublemean,doublestandardDeviation,doublesd,inverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(mean,sd,inverseCumAccuracy,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation,doublemean){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublemean,intstandardDeviation){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation,doublesd){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,sd,true);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,sd,standardDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,sd,null);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublemean,doublestandardDeviation,doublesolverAbsoluteAccuracy,doublesd,doubleinverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublemean,doublestandardDeviation,doublesolverAbsoluteAccuracy,doublesd){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublemean,doublestandardDeviation,doublesolverAbsoluteAccuracy,sd,inverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation,doublesd,inverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY||StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=NormalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(mean,standardDeviation,sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublemean,doublestandardDeviation,doublesolverAbsoluteAccuracy,doublesd,inverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublemean,doublestandardDeviation){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublemean,doublesd,doublesolverAbsoluteAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doubles,doublemean,doublestandardDeviation){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.create(sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.create(sd,inverseCumAccuracy,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.create(null,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation,doubleinverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(sd,mean,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublenormalDeviation,doubleinverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,mean);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,DEFAULT_INVERSE_ABSOLUTE_ACCURacy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.newInstance(sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.newInstance(sd,inverseCumAccuracy,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=NormalDistributionImpl.newInstance(sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=sd;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=inverseCumAccuracy+DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,LAST_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,LocalizedFormats.STANDARD_DEVIATION);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,mean);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,SQRT2PI);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(sd,inverseCumAccuracy,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(null,sd,inverseCumAccuracy,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(null,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(SQRT2PI,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(mean,standardDeviation,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublemean,doubleinverseCumAccuracy){if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublemean,doubleinverseCumAccuracy){(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublemean,doubleinverseCumAccuracy){if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}this.mean=mean;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublemean,doubleinverseCumAccuracy){if(sd<=1){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublemean,doubleinverseCumAccuracy){if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.METHOD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(null,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(SQRT2PI,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(NumberFormat.DECEMBER,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=localizedFormats.STANDARD_DEVIATION;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDeviation;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY+1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY-1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublemean,doubleinverseCumAccuracy){if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STRING_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublestandardDeviation,doublesd,doublemean){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.SQRT2PI,sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,standardDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.SQRT2PI,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(resolverAbsoluteAccuracy,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation,doublemean,inverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doubles,doublestandardDeviation,mean,sd,inverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.newInstance(resolverAbsoluteAccuracy,sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.newInstance(null,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doubles,doublestandardDeviation,doublesd,solverAbsoluteAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(double[]sd,doublestandardDeviation,doublesd,inverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(double[]sd,doublestandardDeviation,doubleinverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublemean,doublesolverAbsoluteAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(longsd,longstandardDeviation,doubleinverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.create(null,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY|StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73PublicNormalDistributionImpl(doublesd,doublestandardDeviation){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublemean,doublestandardDeviation,solverAbsoluteAccuracy,sd,inverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublemean,doublestandardDeviation,sd,solverAbsoluteAccuracy,doubleinverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.newInstance(mean,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.newInstance(d,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublemean,doubleinverseCumAccuracy){if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}this.standardDeviation=sd;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,standardDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doubles,doublesd,doublestandardDeviation){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublemean,doublestandardDeviation,sd){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublemean,doublestandardDeviation,doublesolverAbsoluteAccuracy,sd){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(mean,standardDeviation,solverAbsoluteAccuracy,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(sd,inverseCumAccuracy,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,standardDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(mean,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=NormalDistributionImpl.create(sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(null,null,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(sd,standardDeviation,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDeviation.NEGATIVE_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.SQRT2PI,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,mean);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.SQRT2,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,mean);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.SQRT2PI,DEFAULT_INVERSION_ABSOLUTE_ACCURACY,mean);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.SQRT2PI,DEFAULT_NON_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,mean,SQRT2PI);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,SQRT2PI,mean);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,mean);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,LocalizedFormats.STANDARD_DEVIATION,mean);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,LocalizedFormats.STANDARD_DEVIATION,sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,DEFAULT_STANDARD_DEVIATION);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(sd,solverAbsoluteAccuracy,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(sd,inverseCumAccuracy,standardDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(null,standardDeviation,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,inverseCumAccuracy,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,mean,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,inverseCumAccuracy,standardDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY+1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.create(sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.create(sd,inverseCumAccuracy,solverAbsoluteAccuracy,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.create(sd,solverAbsoluteAccuracy,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,sd,this);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,sd,normalDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73PublicNormalDistributionImpl(doublesd,doublestandardDeviation,longsolverAbsoluteAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73PublicNormalDistributionImpl(doublesd,doublestandardDeviation,intsolverAbsoluteAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73PublicNormalDistributionImpl(doublesd,doublestandardDeviation,longserialVersionUID){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(mean,standardDeviation,solverAbsoluteAccuracy,sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublemean,doublesd,standardDeviation,solverAbsoluteAccuracy,inverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation,solverAbsoluteAccuracy,mean,inverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublemean,doublestandardDeviation,solverAbsoluteAccuracy,sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY||StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=NormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(null,inverseCumAccuracy,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDeviation.NEGATIVE_INVERSE_ABSOLUTE_ACCURACY/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDeviation.NEGATIVE_INVERSE_ABSOLUTE_ACCURACY+1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation,doubleinverseCumAccuracy){if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STRING_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation,doubleinverseCumAccuracy){if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(s,standardDeviation,sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(s,standardDeviation,sd,solverAbsoluteAccuracy,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(s,standardDeviation,sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY&&StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.DEFAULT_INVERSE_ACCURACY||StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY||StandardDistributionImpl.DEFAULT_INVERSION_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(sd,inverseCumAccuracy,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.inverseCumAccuracy=inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublestandardDeviation,doublesd,doublesolverAbsoluteAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublestandardDeviation,doublemean,doublesd){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(mean,standardDeviation,solverAbsoluteAccuracy,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation,doublesolverAbsoluteAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=DEFAULT_INVERSE_ABSOLUTE_ACCURACY+inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=inverseCumAccuracy*DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=standardDeviation+DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(null,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(null,sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(null,null,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(null,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.create(null,sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.create(null,mean,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.create(sd,inverseCumAccuracy,sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(sd,inverseCumAccuracy,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,inverseCumAccuracy,standardDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.newInstance(null,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.newInstance(null,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.newInstance(this,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}this.standardDeviation=sd;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,mean,sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,sd,fixerAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,sd,this.solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation,doublesolverAbsoluteAccuracy,doubleinverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(sd,standardDeviation,mean,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(null,null,standardDeviation,mean,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doubles,doublestandardDeviation,mean){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.newInstance(sd,solverAbsoluteAccuracy,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.newInstance(sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.newInstance(sd,inverseCumAccuracy,solverAbsoluteAccuracy,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY/1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY-2;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDeviation.DEFAULT_INVERSION_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(sd,mean,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(sd,inverseCumAccuracy,mean);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=sd+1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublemean,standardDeviation,solverAbsoluteAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73PublicNormalDistributionImpl(doublesd,doublestandardDeviation,doublesolverAbsoluteAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=NormalDistributionImpl.create(sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=NormalDistributionImpl.create(sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=NormalDistributionImpl.create(sd,solverAbsoluteAccuracy,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=NormalDistributionImpl.create(sd,solverAbsoluteAccuracy,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,mean,sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,mean,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(sd,inverseCumAccuracy,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(null,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,inverseCumAccuracy,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,mean,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,mean,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.newInstance(mean,sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.newInstance(message,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.newInstance(sd,mean,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation,mean){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublemean,doublesd,standardDeviation){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(mean,standardDeviation,sd,true);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(mean,standardDeviation,sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(null,sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(null,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(null,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doubles,doublesd,doublesolverAbsoluteAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doubles,doublesd,longstandardDeviation){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doubles,doublesd,intstandardDeviation){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublemean,doublestandardDeviation){if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,standardDeviation,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublemean,doublestandardDeviation,doublesolverAbsoluteAccuracy,sd,solverAbsoluteAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation,doublesolverAbsoluteAccuracy,sd,inverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(mean,standardDeviation,solverAbsoluteAccuracy,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(inverseCumAccuracy,sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(resolverAbsoluteAccuracy,sd,standardDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(inverseCumAccuracy,sd,resolverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation,doubleinverseCumAccuracy){(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublemean,doublestandardDeviation){(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(double[]sd,doublemean,doubleinverseCumAccuracy){(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,sd,false);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,sd,true);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(resolverAbsoluteAccuracy,standardDeviation,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(mean,solverAbsoluteAccuracy,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(null,standardDeviation,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.create(null,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.create(null,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(null,null,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(null,null,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,SQRT2PI);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(null,null,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,DEFAULT_STANDARD_DEVIATION);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(null,null,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,mean);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,DEFAULT_INVERS
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(LocalizedFormats.DECEMBER,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(NumberFormat.DECEMBER,sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(NumberFormat.DECEMBER,sd,standardDeviation,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(NumberFormat.DECEMBER,sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=DEFAULT_INVERSE_ABSOLUTE_ACCURACY|DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=DEFAULT_INVERSE_ABSOLUTE_ACCURACY+1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=DEFAULT_INVERSE_ABSOLUTE_ACCURACY/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation,doublesolverAbsoluteAccuracy,doublesd,doubleinverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublemean,doublestandardDeviation,doublesolverAbsoluteAccuracy,doublesd,intinverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=NormalDistributionImpl.newInstance(sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=NormalDistributionImpl.newInstance(sd,solverAbsoluteAccuracy,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=NormalDistributionImpl.newInstance(sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=NormalDistributionImpl.newInstance(sd,solverAbsoluteAccuracy,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(null,sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(null,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(null,null,sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(null,null,inverseCumAccuracy,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublemean,doublesd,standardDeviation,solverAbsoluteAccuracy,sd){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublemean,doublestandardDeviation,sd,solverAbsoluteAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,LAST_INVERSE_ABSOLUTE_ACCURACY,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,LAST_INVERSE_ABSOLUTE_ACCURACY,mean);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,LAST_INVERSE_ABSOLUTE_ACCURACY,DEFAULT_INVERSE_ABSOLUTE_ACCURacy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(double[]sd,doublestandardDeviation,doublesolverAbsoluteAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(double[]sd,doublestandardDeviation,intsolverAbsoluteAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(double[]sd,doublestandardDeviation,doublesolverAbsoluteAccuracy,doubleinverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(double[]sd,doublestandardDeviation,longsolverAbsoluteAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(inverseCumAccuracy,sd,SQRT2PI);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(SQRT2PI,sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(sd,SQRT2PI,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY&StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY-StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY/StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublemean,doublestandardDeviation,doublesd,doublesolverAbsoluteAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublemean,doublesd,standardDeviation,solverAbsoluteAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublemean,doublestandardDeviation,doublesd,solverAbsoluteAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublemean,standardDeviation,intsolverAbsoluteAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublemean,intstandardDeviation,longsolverAbsoluteAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,sd,standardDeviation,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,mean,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,DEFAULT_INVERSE_ABSOLUTE_ACCURacy,mean);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,DEFAULT_INVERSE_ABSOLUTE_ACCURacy,standardDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,DEFAULT_INVERSE_ABSOLUTE_ACCURacy,SQRT2PI);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation,doublesd,solverAbsoluteAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(sd,standardDeviation,sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(sd,standardDeviation,sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(sd,standardDeviation,sd,solverAbsoluteAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}this.standardDeviation=standardDeviation;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,mean);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,DEFAULT_STANDARD_DEVIATION);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.create(sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.create(sd,solverAbsoluteAccuracy,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation,doublesolverAbsoluteAccuracy,doublesd,inverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(SQRT2PI,sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(sd,SQRT2PI,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(SQRT2PI,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,mean);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73PublicNormalDistributionImpl(doublesd,doublestandardDeviation,doublesd){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation,longsd){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(mean,standardDeviation,sd,solverAbsoluteAccuracy,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation,mean,solverAbsoluteAccuracy,inverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(mean,standardDeviation,sd,solverAbsoluteAccuracy,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation,intsolverAbsoluteAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(longsd,longstandardDeviation){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation,longserialVersionUID){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(null,standardDeviation,sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,sd,standardDeviation,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(null,mean,standardDeviation,sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(null,standardDeviation,solverAbsoluteAccuracy,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(sd,standardDeviation,solverAbsoluteAccuracy,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,mean,standardDeviation,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,sd,solverAbsoluteAccuracy,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.newInstance(sd,inverseCumAccuracy,sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.newInstance(d,sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation,doubleinverseCumAccuracy){if(sd<=1){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.newInstance(sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.newInstance(sd,solverAbsoluteAccuracy,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation,longsolverAbsoluteAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation,solverAbsoluteAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublemean,doublestandardDeviation,doubleinverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,standardDeviation,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=normalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=NormalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY+2;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY+1L;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(double[]sd,doublestandardDeviation,doublesd,solverAbsoluteAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(double[]sd,doublestandardDeviation,doublesolverAbsoluteAccuracy,doublesd){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(newdouble[]{sd,standardDeviation,sd,inverseCumAccuracy});
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation,mean,solverAbsoluteAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublenormalDeviation,doublesolverAbsoluteAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73PublicNormalDistributionImpl(doublesd,doublestandardDeviation,doubleinverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublestandardDeviation,doublesd,doubleinverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(SQRT2PI,sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doubles,doublestandardDeviation,solverAbsoluteAccuracy,sd,inverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doubles,doublestandardDeviation,solverAbsoluteAccuracy,mean,sd,inverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(s,standardDeviation,solverAbsoluteAccuracy,sd,inverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(s,standardDeviation,solverAbsoluteAccuracy,sd,inverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73PublicNormalDistributionImpl(doublesd,doublemean,doublestandardDeviation){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,mean,standardDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,standardDeviation,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.newInstance(inverseCumAccuracy,sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.newInstance(resolverAbsoluteAccuracy,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.newInstance(null,solverAbsoluteAccuracy,sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation,doubleinverseCumAccuracy){if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.METHOD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublemean,doublestandardDeviation){if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.METHOD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.SQRT2PI,sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.SQRT2PI,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.SQRT2PI,sd,true);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.SQRT2PI,sd,standardDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(longsd,longstandardDeviation,doublesolverAbsoluteAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(longsd,longstandardDeviation,solverAbsoluteAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,longstandardDeviation,doubleinverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(longsd,intstandardDeviation,doubleinverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,mean);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,standardDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY*DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY/DEFAULT_INVERSE_ABSOLUTE_ACCURACY+1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doubles,doublestandardDeviation,solverAbsoluteAccuracy,sd){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doubles,doublestandardDeviation,doublesolverAbsoluteAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(double[]s,doublestandardDeviation,doublesd,solverAbsoluteAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.SQRT2PI,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,standardDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(SQRT2PI,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,DEFAULT_INVERSE_ABSOLUTE_ACCURacy,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublemean,doublestandardDeviation,solverAbsoluteAccuracy,sd){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation,doublesolverAbsoluteAccuracy,doublemean){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublemean,doublesd,standardDeviation,solverAbsoluteAccuracy,doublesd){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY+DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDeviation.NEGATIVE_INVERSE_ABSOLUTE_ACCURACY|StandardDeviation.NEGATIVE_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(null,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(SQRT2PI,sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(sd,solverAbsoluteAccuracy,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,standardDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(null,inverseCumAccuracy,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,standardDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublemean,standardDeviation,longsolverAbsoluteAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(null,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,sd,standardDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,LocalizedFormats.DEFAULT_STANDARD_DEVIATION,sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(longsd,longstandardDeviation,doublemean,inverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,DEFAULT_INVERSE_ABSOLUTE_ACCURacy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,SQRT2PI,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation,intsd){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.SQRT2PI,sd,null);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(double[]sd,doublestandardDeviation,solverAbsoluteAccuracy,doubleinverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(double[]sd,doublestandardDeviation,solverAbsoluteAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(double[]sd,doublesolverAbsoluteAccuracy,doublestandardDeviation,doubleinverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.SQRT2PI,Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,standardDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(DateTimeUtils.currentTimeMillis(),Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,standardDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(null,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doubles,doublesd,standardDeviation){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=inverseCumAccuracy+DEFAULT_INVERSE_ABSOLUTE_ACCURACY+1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(inverseCumAccuracy,sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDeviation.NO_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation,inverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation,doubleinverseCumAccuracy){if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVI
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(LocalizedFormats.DECEMBER,sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(NumberFormat.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY-1L;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublemean,doublesolverAbsoluteAccuracy){if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublemean,doublesolverAbsoluteAccuracy){if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVI
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublemean,doublesolverAbsoluteAccuracy){if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,s
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublemean){if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation,doublesolverAbsoluteAccuracy,doublesd){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublesolverAbsoluteAccuracy,doublesd,inverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.create(null,inverseCumAccuracy,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.create(inverseCumAccuracy,sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublemean,doublestandardDeviation,sd,solverAbsoluteAccuracy,inverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doubles,doublestandardDeviation,mean,solverAbsoluteAccuracy,inverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.newInstance(mean,solverAbsoluteAccuracy,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation,booleansolverAbsoluteAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation,solverAbsoluteAccuracy,doublesd,inverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doubles,doublestandardDeviation,solverAbsoluteAccuracy,doublesd,inverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublemean,doublestandardDeviation,solverAbsoluteAccuracy,sd,solverAbsoluteAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublemean,doublestandardDeviation,solverAbsoluteAccuracy,doublesd,inverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.newInstance(resolverAbsoluteAccuracy,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(null,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(longsd,longstandardDeviation,solverAbsoluteAccuracy,doubleinverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(longsd,doublestandardDeviation,doubleinverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(null,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,standardDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73PublicNormalDistributionImpl(doublesd,doublestandardDeviation,solverAbsoluteAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(null,sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(null,DEFAULT_INVERSE_ABSOLUTE_ACCURacy,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.newInstance(null,inverseCumAccuracy,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(double[]sd,doublesolverAbsoluteAccuracy,doublesd,inverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(double[]sd,doublevalueDeviation,doublesd,inverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublemean,doublestandardDeviation,doublesolverAbsoluteAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation,doublesolverAbsoluteAccuracy,mean,inverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublemean,doublesd,standardDeviation,solverAbsoluteAccuracy,sd,inverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY|StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY-1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublemean,doublenormalDeviation,doubleinverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(longsd,longnormalDeviation,longinverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,LAST_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doubles,doublemean,standardDeviation){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation,doubleinverseCumAccuracy){if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=DEFAULT_INVERSE_ABSOLUTE_ACCURACY-1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublestandardDeviation,doublesd,longsolverAbsoluteAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY+1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY|StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=sd+2;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,sd,standardDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD,sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doubles,doublestandardDeviation,solverAbsoluteAccuracy,mean,inverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation,solverAbsoluteAccuracy,doublesd,doubleinverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.DEFAULT_INVERSE_ACCURACY&&StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY||StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY+1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(null,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,solverAbsoluteAccuracy,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(resolverAbsoluteAccuracy,sd,standardDeviation,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(SQRT2PI,sd,standardDeviation,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(null,standardDeviation,solverAbsoluteAccuracy,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation,doubleinverseCumAccuracy){(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation,doubleinverseCumAccuracy){(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVI
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation,doubleinverseCumAccuracy){(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,s
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(null,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(null,null,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(null,null,inverseCumAccuracy,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,true);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,sd,null);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublemean,doublesd,standardDeviation,solverAbsoluteAccuracy,solverAbsoluteAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=LocalizedFormats.STANDARD_DEVIATION;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=NormalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY+1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=NormalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY-1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.create(inverseCumAccuracy,sd,sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.newInstance(inverseAccumAccuracy,sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STRING_DEVIATION,sd,false);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,sd,0,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,normalDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.SQRT2,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.SQRT2PI,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.SQRT2PI,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(resolverAbsoluteAccuracy,sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doubles,doublestandardDeviation,sd){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73Super(inverseCumAccuracy,sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,standardDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublemean,doublestandardDeviation,doublesolverAbsoluteAccuracy,doublesd,solverAbsoluteAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(double[]standardDeviation,doublestandardDeviation,solverAbsoluteAccuracy,doublesd,inverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation,smean){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation,msg){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73Super(LocalizedFormats.STANDARD_DEVIATION,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,standardDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,normalDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublemean,doublestandardDeviation,sd,solverAbsoluteAccuracy,solverAbsoluteAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(mean,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,solverAbsoluteAccuracy,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,mean,standardDeviation,solverAbsoluteAccuracy,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73Super(LocalizedFormats.STANDARD_DEVIATION,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,DEFAULT_NOT_INVERSE_ABSOLUTE_ACCURACY,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(null,sd,solverAbsoluteAccuracy,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublesd,standardDeviation){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,standardDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(null,standardDeviation,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.newInstance(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation,doubleinverseCumAccuracy){if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,s
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublemean,doublestandardDeviation,solverAbsoluteAccuracy,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,sd,inverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=normalizedFormats.STANDARD_DEVIATION;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73Super(LocalizedFormats.STANDARD_DEVIATION,Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.newInstance(sd,inverseCumAccuracy,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.newInstance(sd,standardDeviation,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation,doublesolverAbsoluteAccuracy,inverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(double[]sd,doublestandardDeviation,doublesolverAbsoluteAccuracy,inverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}this.standardDeviation=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}this.mean=mean;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(double[]sd,doublestandardDeviation,intsolverAbsoluteAccuracy,doubleinverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation,solverAbsoluteAccuracy,mean){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(mean,standardDeviation,solverAbsoluteAccuracy,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation,doubleinverseCumAccuracy){if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STRING_DEVIATION,sd
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY|StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73Super(LocalizedFormats.STANDARD_DEVIATION,sd,false);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublemean,doublestandardDeviation,solverAbsoluteAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublemean,standardDeviation){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(sd,standardDeviation,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(null,standardDeviation,solverAbsoluteAccuracy,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,mean,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,SQRT2PI,standardDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doubles,doublesd,doubleinverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73PublicNormalDistributionImpl(doublesd,doublemean,doublesolverAbsoluteAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation,doubleinverseCumAccuracy){if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.METHOD_DEVIATION,s
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,sd,StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(SQRT2PI,sd,solverAbsoluteAccuracy,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,normalDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73Super(LocalizedFormats.STANDARD_DEVIATION,Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.SQRT2PI,sd,StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.SQRT2PI,sd,normalDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,LocalizedFormats.STANDARD_DEVIATION,standardDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDeviation.UNDEFINED;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,sd,standardAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(double[]sd,doublestandardDeviation,doubleinverseCumAccuracy){(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation){(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation,solverAbsoluteAccuracy,sd,inverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=standardAccuracy+DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73Super(LocalizedFormats.STANDARD_DEVIATION,sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.newInstance(resolverAbsoluteAccuracy,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,sd,standardDeviation,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doubles,doublestandardDeviation,doubled,solverAbsoluteAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(double[]sd,doublestandardDeviation,doublesolverAbsoluteAccuracy,intsolverAbsoluteAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(null,sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.create(null,sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.create(double,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,DEFAULT_INVERSE_ABSOLUTE_ACCURacy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,DEFAULT_INVERSE_ABSOLUTE_ACCURacy,normalDeviation);
