projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=normalDeviation;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.create(sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.newInstance(sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=standardDeviation;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublemean,doublesd,doubleinverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublemean,doubleinverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(mean,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublemean,doublesd,doublestandardDeviation){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(mean,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublemean,doublestandardDeviation,doublesd,doubleinverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublemean){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,sd);this.standardDeviation=standardDeviation;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublemean,doublestandardDeviation,doublesd,inverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(mean,sd,inverseCumAccuracy,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation,doublemean){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublemean,intstandardDeviation){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation,doublesd){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,sd,true);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,sd,standardDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,sd,null);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublemean,doublestandardDeviation,doublesolverAbsoluteAccuracy,doublesd,doubleinverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublemean,doublestandardDeviation,doublesolverAbsoluteAccuracy,doublesd){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublemean,doublestandardDeviation,doublesolverAbsoluteAccuracy,sd,inverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation,doublesd,inverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY||StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=NormalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(mean,standardDeviation,sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublemean,doublestandardDeviation,doublesolverAbsoluteAccuracy,doublesd,inverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublemean,doublestandardDeviation){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublemean,doublesd,doublesolverAbsoluteAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doubles,doublemean,doublestandardDeviation){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.create(sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.create(sd,inverseCumAccuracy,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.create(null,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation,doubleinverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(sd,mean,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublenormalDeviation,doubleinverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,mean);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,DEFAULT_INVERSE_ABSOLUTE_ACCURacy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.newInstance(sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.newInstance(sd,inverseCumAccuracy,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=NormalDistributionImpl.newInstance(sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=sd;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=inverseCumAccuracy+DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,LAST_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,LocalizedFormats.STANDARD_DEVIATION);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,mean);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,SQRT2PI);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(sd,inverseCumAccuracy,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(null,sd,inverseCumAccuracy,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(null,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(SQRT2PI,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(mean,standardDeviation,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublemean,doubleinverseCumAccuracy){if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublemean,doubleinverseCumAccuracy){(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublemean,doubleinverseCumAccuracy){if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}this.mean=mean;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublemean,doubleinverseCumAccuracy){if(sd<=1){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublemean,doubleinverseCumAccuracy){if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.METHOD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(null,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(SQRT2PI,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(NumberFormat.DECEMBER,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=localizedFormats.STANDARD_DEVIATION;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDeviation;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY+1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY-1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublemean,doubleinverseCumAccuracy){if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STRING_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublestandardDeviation,doublesd,doublemean){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.SQRT2PI,sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,standardDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.SQRT2PI,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(resolverAbsoluteAccuracy,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublestandardDeviation,doublemean,inverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doubles,doublestandardDeviation,mean,sd,inverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.newInstance(resolverAbsoluteAccuracy,sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.newInstance(null,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doubles,doublestandardDeviation,doublesd,solverAbsoluteAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(double[]sd,doublestandardDeviation,doublesd,inverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(double[]sd,doublestandardDeviation,doubleinverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublemean,doublesolverAbsoluteAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(longsd,longstandardDeviation,doubleinverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.create(null,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY|StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73PublicNormalDistributionImpl(doublesd,doublestandardDeviation){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublemean,doublestandardDeviation,solverAbsoluteAccuracy,sd,inverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublemean,doublestandardDeviation,sd,solverAbsoluteAccuracy,doubleinverseCumAccuracy){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.newInstance(mean,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDistributionImpl.newInstance(d,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublesd,doublemean,doubleinverseCumAccuracy){if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}this.standardDeviation=sd;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(LocalizedFormats.STANDARD_DEVIATION,Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,standardDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doubles,doublesd,doublestandardDeviation){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublemean,doublestandardDeviation,sd){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73publicNormalDistributionImpl(doublemean,doublestandardDeviation,doublesolverAbsoluteAccuracy,sd){
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(mean,standardDeviation,solverAbsoluteAccuracy,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(sd,inverseCumAccuracy,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,standardDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(mean,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=NormalDistributionImpl.create(sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this(null,null,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73super(sd,standardDeviation,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java73this.standardDeviation=StandardDeviation.NEGATIVE_INVERSE_ABSOLUTE_ACCURACY;
