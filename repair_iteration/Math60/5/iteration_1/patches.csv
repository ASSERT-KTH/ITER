bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation)  {  [CE]  constructor  NormalDistributionImpl(double,double)  is  already  defined  in  class  NormalDistributionImpl  [FE]          ConvergenceException    [CONTEXT]      [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation)  {  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  standardDeviation)  {	  public    NormalDistributionImpl(double    sd,    double    mean)    {    	non-compiled	[CE]  constructor  NormalDistributionImpl(double,double)  is  already  defined  in  class  NormalDistributionImpl	12	None	replace
2	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  mean)  {  [CE]  cannot  find  symbol  inverseCumAccuracy  [FE]            ConvergenceException    [CONTEXT]      [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  mean)  {  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  mean)  {	  public    NormalDistributionImpl(double    sd,    double    mean)    {    	non-compiled	[CE]  cannot  find  symbol  inverseCumAccuracy	12	None	replace
3	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  mean,  int  standardDeviation)  {  [CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)  [FE]              ConvergenceException    [CONTEXT]      [BUGGY]  public  NormalDistributionImpl(double  sd,  double  mean,  int  standardDeviation)  {  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  mean,  int  standardDeviation)  {	  public    NormalDistributionImpl(double    sd,    double    mean)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)	12	None	replace
4	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  sd)  {  [CE]  variable  sd  is  already  defined  in  constructor  NormalDistributionImpl  [FE]                ConvergenceException    [CONTEXT]      [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  sd)  {  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  sd)  {	  public    NormalDistributionImpl(double    sd,    double    mean)    {    	non-compiled	[CE]  variable  sd  is  already  defined  in  constructor  NormalDistributionImpl	12	None	replace
5	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]          ConvergenceException    [CONTEXT]      [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  inverseCumAccuracy);  [BUGGY]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  sd,  inverseCumAccuracy);	      super(LocalizedFormats.STANDARD_DEVIATION,    sd);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
6	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  true);  [CE]  illegal  start  of  type  [FE]            ConvergenceException    [CONTEXT]      [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  true);  [BUGGY]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  sd,  true);	      super(LocalizedFormats.STANDARD_DEVIATION,    sd);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
7	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  standardDeviation);  [CE]  illegal  start  of  type  [FE]              ConvergenceException    [CONTEXT]      [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  standardDeviation);  [BUGGY]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  sd,  standardDeviation);	      super(LocalizedFormats.STANDARD_DEVIATION,    sd);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
8	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  null);  [CE]  illegal  start  of  type  [FE]                ConvergenceException    [CONTEXT]      [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  null);  [BUGGY]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  sd,  null);	      super(LocalizedFormats.STANDARD_DEVIATION,    sd);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
9	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  mean,  double  standardDeviation,  double  solverAbsoluteAccuracy,  double  sd,  double  inverseCumAccuracy)  {  [CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)  [FE]        ConvergenceException    [CONTEXT]      [BUGGY]  public  NormalDistributionImpl(double  mean,  double  standardDeviation,  double  solverAbsoluteAccuracy,  double  sd,  double  inverseCumAccuracy)  {  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  mean,  double  standardDeviation,  double  solverAbsoluteAccuracy,  double  sd,  double  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    double    sd,    double    inverseCumAccuracy)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)	11	None	replace
10	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  mean,  double  standardDeviation,  double  solverAbsoluteAccuracy,  double  sd)  {  [CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)  [FE]          ConvergenceException    [CONTEXT]      [BUGGY]  public  NormalDistributionImpl(double  mean,  double  standardDeviation,  double  solverAbsoluteAccuracy,  double  sd)  {  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  mean,  double  standardDeviation,  double  solverAbsoluteAccuracy,  double  sd)  {	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    double    sd,    double    inverseCumAccuracy)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)	11	None	replace
11	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  mean,  double  standardDeviation,  double  solverAbsoluteAccuracy,  sd,  inverseCumAccuracy)  {  [CE]  <identifier>  expected  [FE]            ConvergenceException    [CONTEXT]      [BUGGY]  public  NormalDistributionImpl(double  mean,  double  standardDeviation,  double  solverAbsoluteAccuracy,  sd,  inverseCumAccuracy)  {  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  mean,  double  standardDeviation,  double  solverAbsoluteAccuracy,  sd,  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    double    sd,    double    inverseCumAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
12	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  sd,  inverseCumAccuracy)  {  [CE]  <identifier>  expected  [FE]              ConvergenceException    [CONTEXT]      [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  sd,  inverseCumAccuracy)  {  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  sd,  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    double    sd,    double    inverseCumAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
13	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]        ConvergenceException    [CONTEXT]      [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	      this.standardDeviation    =    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
14	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]          ConvergenceException    [CONTEXT]      [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	      this.standardDeviation    =    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
15	[BUG]  [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]            ConvergenceException    [CONTEXT]      [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  NormalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	      this.standardDeviation    =    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
16	[BUG]  [BUGGY]  this(mean,  standardDeviation,  sd,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]        ConvergenceException    [CONTEXT]      [BUGGY]  this(mean,  standardDeviation,  sd,  solverAbsoluteAccuracy);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(mean,  standardDeviation,  sd,  solverAbsoluteAccuracy);	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    double    sd,    inverseCumAccuracy)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
17	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  mean,  double  standardDeviation,  double  solverAbsoluteAccuracy,  double  sd,  inverseCumAccuracy)  {  [CE]  <identifier>  expected  [FE]          ConvergenceException    [CONTEXT]      [BUGGY]  public  NormalDistributionImpl(double  mean,  double  standardDeviation,  double  solverAbsoluteAccuracy,  double  sd,  inverseCumAccuracy)  {  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  mean,  double  standardDeviation,  double  solverAbsoluteAccuracy,  double  sd,  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    double    sd,    inverseCumAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
18	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  mean,  double  standardDeviation)  {  [CE]  cannot  find  symbol  inverseCumAccuracy  [FE]            ConvergenceException    [CONTEXT]      [BUGGY]  public  NormalDistributionImpl(double  sd,  double  mean,  double  standardDeviation)  {  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  mean,  double  standardDeviation)  {	  public    NormalDistributionImpl(double    mean,    double    sd,    double    standardDeviation)    {    	non-compiled	[CE]  cannot  find  symbol  inverseCumAccuracy	9	None	replace
19	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  mean,  double  sd,  double  solverAbsoluteAccuracy)  {  [CE]  cannot  find  symbol  inverseCumAccuracy  [FE]              ConvergenceException    [CONTEXT]      [BUGGY]  public  NormalDistributionImpl(double  mean,  double  sd,  double  solverAbsoluteAccuracy)  {  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  mean,  double  sd,  double  solverAbsoluteAccuracy)  {	  public    NormalDistributionImpl(double    mean,    double    sd,    double    standardDeviation)    {    	non-compiled	[CE]  cannot  find  symbol  inverseCumAccuracy	9	None	replace
20	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  s,  double  mean,  double  standardDeviation)  {  [CE]  cannot  find  symbol  sd  [FE]                ConvergenceException    [CONTEXT]      [BUGGY]  public  NormalDistributionImpl(double  s,  double  mean,  double  standardDeviation)  {  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  s,  double  mean,  double  standardDeviation)  {	  public    NormalDistributionImpl(double    mean,    double    sd,    double    standardDeviation)    {    	non-compiled	[CE]  cannot  find  symbol  sd	9	None	replace
21	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(sd,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]          ConvergenceException    [CONTEXT]      [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(sd,  solverAbsoluteAccuracy);  [BUGGY]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.create(sd,  solverAbsoluteAccuracy);	      this.standardDeviation    =    StandardDistributionImpl.create(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
22	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]            ConvergenceException    [CONTEXT]      [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy);  [BUGGY]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.create(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy);	      this.standardDeviation    =    StandardDistributionImpl.create(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
23	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(null,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]              ConvergenceException    [CONTEXT]      [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(null,  sd,  inverseCumAccuracy);  [BUGGY]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.create(null,  sd,  inverseCumAccuracy);	      this.standardDeviation    =    StandardDistributionImpl.create(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
24	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {  [CE]  variable  mean  might  not  have  been  initialized  [FE]    NotStrictlyPositiveException    [CONTEXT]      [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double    sd,    double    mean,    double    inverseCumAccuracy)    {    	non-compiled	[CE]  variable  mean  might  not  have  been  initialized	7	None	replace
25	[BUG]  [BUGGY]  super(sd,  mean,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]      NotStrictlyPositiveException    [CONTEXT]      [BUGGY]  super(sd,  mean,  inverseCumAccuracy);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(sd,  mean,  inverseCumAccuracy);	  public    NormalDistributionImpl(double    sd,    double    mean,    double    inverseCumAccuracy)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
26	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  normalDeviation,  double  inverseCumAccuracy)  {  [CE]  variable  mean  might  not  have  been  initialized  [FE]        NotStrictlyPositiveException    [CONTEXT]      [BUGGY]  public  NormalDistributionImpl(double  sd,  double  normalDeviation,  double  inverseCumAccuracy)  {  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  normalDeviation,  double  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double    sd,    double    mean,    double    inverseCumAccuracy)    {    	non-compiled	[CE]  variable  mean  might  not  have  been  initialized	7	None	replace
27	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]          ConvergenceException    [CONTEXT]      [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	      super(LocalizedFormats.STANDARD_DEVIATION,    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
28	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  mean);  [CE]  illegal  start  of  type  [FE]            ConvergenceException    [CONTEXT]      [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  mean);  [BUGGY]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  mean);	      super(LocalizedFormats.STANDARD_DEVIATION,    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
29	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURacy);  [CE]  illegal  start  of  type  [FE]              ConvergenceException    [CONTEXT]      [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURacy);  [BUGGY]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURacy);	      super(LocalizedFormats.STANDARD_DEVIATION,    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
30	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]              ConvergenceException    [CONTEXT]      [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  solverAbsoluteAccuracy);  [BUGGY]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  solverAbsoluteAccuracy);	      this.standardDeviation    =    StandardDistributionImpl.newInstance(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
31	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException    [CONTEXT]      [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy);  [BUGGY]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy);	      this.standardDeviation    =    StandardDistributionImpl.newInstance(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
32	[BUG]  [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.newInstance(sd,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException    [CONTEXT]      [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.newInstance(sd,  solverAbsoluteAccuracy);  [BUGGY]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  NormalDistributionImpl.newInstance(sd,  solverAbsoluteAccuracy);	      this.standardDeviation    =    StandardDistributionImpl.newInstance(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
33	[BUG]  [BUGGY]  this.standardDeviation  =  sd;  [CE]  illegal  start  of  type  [FE]            ConvergenceException    [CONTEXT]      [BUGGY]  this.standardDeviation  =  sd;  [BUGGY]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  sd;	      this.standardDeviation    =    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
34	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]              ConvergenceException    [CONTEXT]      [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	      this.standardDeviation    =    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
35	[BUG]  [BUGGY]  this.standardDeviation  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                ConvergenceException    [CONTEXT]      [BUGGY]  this.standardDeviation  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	      this.standardDeviation    =    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
36	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]            ConvergenceException    [CONTEXT]      [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	      super(LocalizedFormats.STANDARD_DEVIATION);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
37	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  LAST_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]              ConvergenceException    [CONTEXT]      [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  LAST_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  LAST_INVERSE_ABSOLUTE_ACCURACY);	      super(LocalizedFormats.STANDARD_DEVIATION);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
38	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  LocalizedFormats.STANDARD_DEVIATION);  [CE]  illegal  start  of  type  [FE]                ConvergenceException    [CONTEXT]      [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  LocalizedFormats.STANDARD_DEVIATION);  [BUGGY]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  LocalizedFormats.STANDARD_DEVIATION);	      super(LocalizedFormats.STANDARD_DEVIATION);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
39	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);  [CE]  illegal  start  of  type  [FE]        ConvergenceException    [CONTEXT]      [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);  [BUGGY]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);	      super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
40	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);  [CE]  illegal  start  of  type  [FE]          ConvergenceException    [CONTEXT]      [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);  [BUGGY]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);	      super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
41	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  SQRT2PI);  [CE]  illegal  start  of  type  [FE]            ConvergenceException    [CONTEXT]      [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  SQRT2PI);  [BUGGY]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  SQRT2PI);	      super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
42	[BUG]  [BUGGY]  this(sd,  inverseCumAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]          ConvergenceException    [CONTEXT]      [BUGGY]  this(sd,  inverseCumAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(sd,  inverseCumAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  this(mean,    sd,    inverseCumAccuracy,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
43	[BUG]  [BUGGY]  this(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]            ConvergenceException    [CONTEXT]      [BUGGY]  this(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);	  this(mean,    sd,    inverseCumAccuracy,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
44	[BUG]  [BUGGY]  this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]              ConvergenceException    [CONTEXT]      [BUGGY]  this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  inverseCumAccuracy);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  inverseCumAccuracy);	  this(mean,    sd,    inverseCumAccuracy,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
45	[BUG]  [BUGGY]  this(null,  sd,  inverseCumAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]                ConvergenceException    [CONTEXT]      [BUGGY]  this(null,  sd,  inverseCumAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(null,  sd,  inverseCumAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  this(mean,    sd,    inverseCumAccuracy,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
46	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]        ConvergenceException    [CONTEXT]      [BUGGY]  this.standardDeviation  =  StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	      this.standardDeviation    =    normalDeviation;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
47	[BUG]  [BUGGY]  super(sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]              ConvergenceException    [CONTEXT]      [BUGGY]  super(sd,  inverseCumAccuracy);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(sd,  inverseCumAccuracy);	  super(mean,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
48	[BUG]  [BUGGY]  super(null,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException    [CONTEXT]      [BUGGY]  super(null,  sd,  inverseCumAccuracy);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(null,  sd,  inverseCumAccuracy);	  super(mean,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
49	[BUG]  [BUGGY]  super(SQRT2PI,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException    [CONTEXT]      [BUGGY]  super(SQRT2PI,  sd,  inverseCumAccuracy);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(SQRT2PI,  sd,  inverseCumAccuracy);	  super(mean,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
50	[BUG]  [BUGGY]  super(mean,  standardDeviation,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException    [CONTEXT]      [BUGGY]  super(mean,  standardDeviation,  sd,  inverseCumAccuracy);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(mean,  standardDeviation,  sd,  inverseCumAccuracy);	  super(mean,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
51	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  mean,  double  inverseCumAccuracy)  {  if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  expression  [FE]    NotStrictlyPositiveException    [CONTEXT]      [BUGGY]  public  NormalDistributionImpl(double  sd,  double  mean,  double  inverseCumAccuracy)  {  if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public    NormalDistributionImpl(double    sd,    double    mean,    double    inverseCumAccuracy)    {    if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
52	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  mean,  double  inverseCumAccuracy)  {  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  expression  [FE]      NotStrictlyPositiveException    [CONTEXT]      [BUGGY]  public  NormalDistributionImpl(double  sd,  double  mean,  double  inverseCumAccuracy)  {  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public    NormalDistributionImpl(double    sd,    double    mean,    double    inverseCumAccuracy)    {    (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
53	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  mean,  double  inverseCumAccuracy)  {  if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  [CE]  illegal  start  of  expression  [FE]        NotStrictlyPositiveException    [CONTEXT]      [BUGGY]  public  NormalDistributionImpl(double  sd,  double  mean,  double  inverseCumAccuracy)  {  if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public    NormalDistributionImpl(double    sd,    double    mean,    double    inverseCumAccuracy)    {    if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
54	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  mean,  double  inverseCumAccuracy)  {  if  (sd  <  =  1)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  expression  [FE]          NotStrictlyPositiveException    [CONTEXT]      [BUGGY]  public  NormalDistributionImpl(double  sd,  double  mean,  double  inverseCumAccuracy)  {  if  (sd  <  =  1)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public    NormalDistributionImpl(double    sd,    double    mean,    double    inverseCumAccuracy)    {    if  (sd  <  =  1)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
55	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  mean,  double  inverseCumAccuracy)  {  if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.METHOD_DEVIATION,  sd);  }  [CE]  illegal  start  of  expression  [FE]            NotStrictlyPositiveException    [CONTEXT]      [BUGGY]  public  NormalDistributionImpl(double  sd,  double  mean,  double  inverseCumAccuracy)  {  if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.METHOD_DEVIATION,  sd);  }  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public    NormalDistributionImpl(double    sd,    double    mean,    double    inverseCumAccuracy)    {    if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.METHOD_DEVIATION,  sd);  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
56	[BUG]  [BUGGY]  this(sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]          ConvergenceException    [CONTEXT]      [BUGGY]  this(sd,  inverseCumAccuracy);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(sd,  inverseCumAccuracy);	  this(mean,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
57	[BUG]  [BUGGY]  this(null,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]            ConvergenceException    [CONTEXT]      [BUGGY]  this(null,  sd,  inverseCumAccuracy);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(null,  sd,  inverseCumAccuracy);	  this(mean,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
58	[BUG]  [BUGGY]  this(SQRT2PI,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]              ConvergenceException    [CONTEXT]      [BUGGY]  this(SQRT2PI,  sd,  inverseCumAccuracy);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(SQRT2PI,  sd,  inverseCumAccuracy);	  this(mean,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
59	[BUG]  [BUGGY]  this(NumberFormat.DECEMBER,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException    [CONTEXT]      [BUGGY]  this(NumberFormat.DECEMBER,  sd,  inverseCumAccuracy);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(NumberFormat.DECEMBER,  sd,  inverseCumAccuracy);	  this(mean,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
60	[BUG]  [BUGGY]  this.standardDeviation  =  localizedFormats.STANDARD_DEVIATION;  [CE]  illegal  start  of  type  [FE]              ConvergenceException    [CONTEXT]      [BUGGY]  this.standardDeviation  =  localizedFormats.STANDARD_DEVIATION;  [BUGGY]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  localizedFormats.STANDARD_DEVIATION;	      super(LocalizedFormats.STANDARD_DEVIATION,    sd);    this.standardDeviation    =    standardDeviation;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
61	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                ConvergenceException    [CONTEXT]      [BUGGY]  this.standardDeviation  =  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	      super(LocalizedFormats.STANDARD_DEVIATION,    sd);    this.standardDeviation    =    standardDeviation;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
62	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDeviation;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException    [CONTEXT]      [BUGGY]  this.standardDeviation  =  StandardDeviation;  [BUGGY]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDeviation;	      super(LocalizedFormats.STANDARD_DEVIATION,    sd);    this.standardDeviation    =    standardDeviation;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
63	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [CE]  illegal  start  of  type  [FE]        ConvergenceException    [CONTEXT]      [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;	      this.standardDeviation    =    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
64	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  -  1;  [CE]  illegal  start  of  type  [FE]          ConvergenceException    [CONTEXT]      [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  -  1;  [BUGGY]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  -  1;	      this.standardDeviation    =    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
65	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  mean,  double  inverseCumAccuracy)  {  if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STRING_DEVIATION,  sd);  }  [CE]  illegal  start  of  expression  [FE]    NotStrictlyPositiveException    [CONTEXT]      [BUGGY]  public  NormalDistributionImpl(double  sd,  double  mean,  double  inverseCumAccuracy)  {  if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STRING_DEVIATION,  sd);  }  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public    NormalDistributionImpl(double    sd,    double    mean,    double    inverseCumAccuracy)    {    if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STRING_DEVIATION,  sd);  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
66	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  standardDeviation,  double  sd,  double  mean)  {  [CE]  cannot  find  symbol  inverseCumAccuracy  [FE]          ConvergenceException    [CONTEXT]      [BUGGY]  public  NormalDistributionImpl(double  standardDeviation,  double  sd,  double  mean)  {  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  standardDeviation,  double  sd,  double  mean)  {	  public    NormalDistributionImpl(double    sd,    double    mean)    {    	non-compiled	[CE]  cannot  find  symbol  inverseCumAccuracy	12	None	replace
67	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);  [CE]  illegal  start  of  type  [FE]            ConvergenceException    [CONTEXT]      [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);  [BUGGY]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);	      super(LocalizedFormats.STANDARD_DEVIATION);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
68	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]          ConvergenceException    [CONTEXT]      [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	      super(LocalizedFormats.STANDARD_DEVIATION,    sd);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
69	[BUG]  [BUGGY]  super(LocalizedFormats.SQRT2PI,  sd);  [CE]  illegal  start  of  type  [FE]            ConvergenceException    [CONTEXT]      [BUGGY]  super(LocalizedFormats.SQRT2PI,  sd);  [BUGGY]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.SQRT2PI,  sd);	      super(LocalizedFormats.STANDARD_DEVIATION,    sd);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
70	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);  [CE]  illegal  start  of  type  [FE]        ConvergenceException    [CONTEXT]      [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);  [BUGGY]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);	      super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
71	[BUG]  [BUGGY]  super(LocalizedFormats.SQRT2PI,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]          ConvergenceException    [CONTEXT]      [BUGGY]  super(LocalizedFormats.SQRT2PI,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.SQRT2PI,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	      super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
72	[BUG]  [BUGGY]  super(resolverAbsoluteAccuracy,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]              ConvergenceException    [CONTEXT]      [BUGGY]  super(resolverAbsoluteAccuracy,  sd,  inverseCumAccuracy);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(resolverAbsoluteAccuracy,  sd,  inverseCumAccuracy);	  super(mean,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
73	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  mean,  inverseCumAccuracy)  {  [CE]  <identifier>  expected  [FE]        ConvergenceException    [CONTEXT]      [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  mean,  inverseCumAccuracy)  {  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  mean,  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    double    sd,    double    inverseCumAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
74	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  s,  double  standardDeviation,  mean,  sd,  inverseCumAccuracy)  {  [CE]  <identifier>  expected  [FE]          ConvergenceException    [CONTEXT]      [BUGGY]  public  NormalDistributionImpl(double  s,  double  standardDeviation,  mean,  sd,  inverseCumAccuracy)  {  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  s,  double  standardDeviation,  mean,  sd,  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    double    sd,    double    inverseCumAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
75	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(resolverAbsoluteAccuracy,  sd);  [CE]  illegal  start  of  type  [FE]              ConvergenceException    [CONTEXT]      [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(resolverAbsoluteAccuracy,  sd);  [BUGGY]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.newInstance(resolverAbsoluteAccuracy,  sd);	      this.standardDeviation    =    StandardDistributionImpl.newInstance(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
76	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(null,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException    [CONTEXT]      [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(null,  inverseCumAccuracy);  [BUGGY]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.newInstance(null,  inverseCumAccuracy);	      this.standardDeviation    =    StandardDistributionImpl.newInstance(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
77	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  s,  double  standardDeviation,  double  sd,  solverAbsoluteAccuracy)  {  [CE]  <identifier>  expected  [FE]        ConvergenceException    [CONTEXT]      [BUGGY]  public  NormalDistributionImpl(double  s,  double  standardDeviation,  double  sd,  solverAbsoluteAccuracy)  {  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  s,  double  standardDeviation,  double  sd,  solverAbsoluteAccuracy)  {	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    double    sd,    inverseCumAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
78	[BUG]  [BUGGY]  public  NormalDistributionImpl(double[]  sd,  double  standardDeviation,  double  sd,  inverseCumAccuracy)  {  [CE]  <identifier>  expected  [FE]          ConvergenceException    [CONTEXT]      [BUGGY]  public  NormalDistributionImpl(double[]  sd,  double  standardDeviation,  double  sd,  inverseCumAccuracy)  {  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double[]  sd,  double  standardDeviation,  double  sd,  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    double    sd,    inverseCumAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
79	[BUG]  [BUGGY]  public  NormalDistributionImpl(double[]  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {  [CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)  [FE]    NotStrictlyPositiveException    [CONTEXT]      [BUGGY]  public  NormalDistributionImpl(double[]  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double[]  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double    sd,    double    mean,    double    inverseCumAccuracy)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)	7	None	replace
80	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  mean,  double  solverAbsoluteAccuracy)  {  [CE]  cannot  find  symbol  inverseCumAccuracy  [FE]      NotStrictlyPositiveException    [CONTEXT]      [BUGGY]  public  NormalDistributionImpl(double  sd,  double  mean,  double  solverAbsoluteAccuracy)  {  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  mean,  double  solverAbsoluteAccuracy)  {	  public    NormalDistributionImpl(double    sd,    double    mean,    double    inverseCumAccuracy)    {    	non-compiled	[CE]  cannot  find  symbol  inverseCumAccuracy	7	None	replace
81	[BUG]  [BUGGY]  public  NormalDistributionImpl(long  sd,  long  standardDeviation,  double  inverseCumAccuracy)  {  [CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)  [FE]        NotStrictlyPositiveException    [CONTEXT]      [BUGGY]  public  NormalDistributionImpl(long  sd,  long  standardDeviation,  double  inverseCumAccuracy)  {  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(long  sd,  long  standardDeviation,  double  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double    sd,    double    mean,    double    inverseCumAccuracy)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)	7	None	replace
82	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(null,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]          ConvergenceException    [CONTEXT]      [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(null,  inverseCumAccuracy);  [BUGGY]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.create(null,  inverseCumAccuracy);	      this.standardDeviation    =    StandardDistributionImpl.create(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
83	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]        ConvergenceException    [CONTEXT]      [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	      this.standardDeviation    =    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
84	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]        ConvergenceException    [CONTEXT]      [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	      super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
85	[BUG]  [BUGGY]  Public  NormalDistributionImpl(double  sd,  double  standardDeviation)  {  [CE]  cannot  find  symbol  [FE]          ConvergenceException    [CONTEXT]      [BUGGY]  Public  NormalDistributionImpl(double  sd,  double  standardDeviation)  {  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	Public  NormalDistributionImpl(double  sd,  double  standardDeviation)  {	  public    NormalDistributionImpl(double    sd,    double    mean)    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
86	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  mean,  double  standardDeviation,  solverAbsoluteAccuracy,  sd,  inverseCumAccuracy)  {  [CE]  <identifier>  expected  [FE]        ConvergenceException    [CONTEXT]      [BUGGY]  public  NormalDistributionImpl(double  mean,  double  standardDeviation,  solverAbsoluteAccuracy,  sd,  inverseCumAccuracy)  {  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  mean,  double  standardDeviation,  solverAbsoluteAccuracy,  sd,  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    double    sd,    double    inverseCumAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
87	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  mean,  double  standardDeviation,  sd,  solverAbsoluteAccuracy,  double  inverseCumAccuracy)  {  [CE]  <identifier>  expected  [FE]          ConvergenceException    [CONTEXT]      [BUGGY]  public  NormalDistributionImpl(double  mean,  double  standardDeviation,  sd,  solverAbsoluteAccuracy,  double  inverseCumAccuracy)  {  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  mean,  double  standardDeviation,  sd,  solverAbsoluteAccuracy,  double  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    double    sd,    double    inverseCumAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
88	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(mean,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]              ConvergenceException    [CONTEXT]      [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(mean,  sd,  inverseCumAccuracy);  [BUGGY]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.newInstance(mean,  sd,  inverseCumAccuracy);	      this.standardDeviation    =    StandardDistributionImpl.newInstance(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
89	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(d,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException    [CONTEXT]      [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(d,  sd,  inverseCumAccuracy);  [BUGGY]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.newInstance(d,  sd,  inverseCumAccuracy);	      this.standardDeviation    =    StandardDistributionImpl.newInstance(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
90	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  mean,  double  inverseCumAccuracy)  {  if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.standardDeviation  =  sd;  [CE]  illegal  start  of  expression  [FE]    NotStrictlyPositiveException    [CONTEXT]      [BUGGY]  public  NormalDistributionImpl(double  sd,  double  mean,  double  inverseCumAccuracy)  {  if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.standardDeviation  =  sd;  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public    NormalDistributionImpl(double    sd,    double    mean,    double    inverseCumAccuracy)    {    if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.standardDeviation  =  sd;	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
91	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);  [CE]  illegal  start  of  type  [FE]          ConvergenceException    [CONTEXT]      [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);  [BUGGY]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);	      super(LocalizedFormats.STANDARD_DEVIATION,    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
92	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  s,  double  sd,  double  standardDeviation)  {  [CE]  cannot  find  symbol  inverseCumAccuracy  [FE]            ConvergenceException    [CONTEXT]      [BUGGY]  public  NormalDistributionImpl(double  s,  double  sd,  double  standardDeviation)  {  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  s,  double  sd,  double  standardDeviation)  {	  public    NormalDistributionImpl(double    mean,    double    sd,    double    standardDeviation)    {    	non-compiled	[CE]  cannot  find  symbol  inverseCumAccuracy	9	None	replace
93	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  mean,  double  standardDeviation,  sd)  {  [CE]  <identifier>  expected  [FE]              ConvergenceException    [CONTEXT]      [BUGGY]  public  NormalDistributionImpl(double  mean,  double  standardDeviation,  sd)  {  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  mean,  double  standardDeviation,  sd)  {	  public    NormalDistributionImpl(double    mean,    double    sd,    double    standardDeviation)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
94	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  mean,  double  standardDeviation,  double  solverAbsoluteAccuracy,  sd)  {  [CE]  <identifier>  expected  [FE]        ConvergenceException    [CONTEXT]      [BUGGY]  public  NormalDistributionImpl(double  mean,  double  standardDeviation,  double  solverAbsoluteAccuracy,  sd)  {  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  mean,  double  standardDeviation,  double  solverAbsoluteAccuracy,  sd)  {	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    double    sd,    inverseCumAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
95	[BUG]  [BUGGY]  this(mean,  standardDeviation,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]          ConvergenceException    [CONTEXT]      [BUGGY]  this(mean,  standardDeviation,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(mean,  standardDeviation,  solverAbsoluteAccuracy,  inverseCumAccuracy);	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    double    sd,    inverseCumAccuracy)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
96	[BUG]  [BUGGY]  this(sd,  inverseCumAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);  [CE]  illegal  start  of  type  [FE]          ConvergenceException    [CONTEXT]      [BUGGY]  this(sd,  inverseCumAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(sd,  inverseCumAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);	  this(mean,    sd,    inverseCumAccuracy,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
97	[BUG]  [BUGGY]  this(mean,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]            ConvergenceException    [CONTEXT]      [BUGGY]  this(mean,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(mean,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);	  this(mean,    sd,    inverseCumAccuracy,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
98	[BUG]  [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.create(sd,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]          ConvergenceException    [CONTEXT]      [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.create(sd,  solverAbsoluteAccuracy);  [BUGGY]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  NormalDistributionImpl.create(sd,  solverAbsoluteAccuracy);	      this.standardDeviation    =    StandardDistributionImpl.create(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
99	[BUG]  [BUGGY]  this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]    NotStrictlyPositiveException    [CONTEXT]      [BUGGY]  this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  public    NormalDistributionImpl(double    sd,    double    mean,    double    inverseCumAccuracy)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
100	[BUG]  [BUGGY]  super(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]              ConvergenceException    [CONTEXT]      [BUGGY]  super(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);	  super(mean,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
101	[BUG]  [BUGGY]  super(sd,  standardDeviation,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException    [CONTEXT]      [BUGGY]  super(sd,  standardDeviation,  inverseCumAccuracy);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(sd,  standardDeviation,  inverseCumAccuracy);	  super(mean,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
102	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDeviation.NEGATIVE_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]              ConvergenceException    [CONTEXT]      [BUGGY]  this.standardDeviation  =  StandardDeviation.NEGATIVE_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDeviation.NEGATIVE_INVERSE_ABSOLUTE_ACCURACY;	      super(LocalizedFormats.STANDARD_DEVIATION,    sd);    this.standardDeviation    =    standardDeviation;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
