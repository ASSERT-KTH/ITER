bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    this.standardDeviation  =  normalDeviation;  [CE]  illegal  start  of  type  [FE]    ConvergenceException  [CONTEXT]    [BUGGY]    this.standardDeviation  =  normalDeviation;  [BUGGY]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	    this.standardDeviation  =  normalDeviation;		non-compiled	[CE]  illegal  start  of  type	10	None	add
2	[BUG]  [BUGGY]    this.standardDeviation  =  StandardDistributionImpl.create(sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]      ConvergenceException  [CONTEXT]    [BUGGY]    this.standardDeviation  =  StandardDistributionImpl.create(sd,  inverseCumAccuracy);  [BUGGY]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	    this.standardDeviation  =  StandardDistributionImpl.create(sd,  inverseCumAccuracy);		non-compiled	[CE]  illegal  start  of  type	10	None	add
3	[BUG]  [BUGGY]    this.standardDeviation  =  inverseCumAccuracy;  [CE]  illegal  start  of  type  [FE]        ConvergenceException  [CONTEXT]    [BUGGY]    this.standardDeviation  =  inverseCumAccuracy;  [BUGGY]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	    this.standardDeviation  =  inverseCumAccuracy;		non-compiled	[CE]  illegal  start  of  type	10	None	add
4	[BUG]  [BUGGY]    this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]          ConvergenceException  [CONTEXT]    [BUGGY]    this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  inverseCumAccuracy);  [BUGGY]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	    this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  inverseCumAccuracy);		non-compiled	[CE]  illegal  start  of  type	10	None	add
5	[BUG]  [BUGGY]    this.standardDeviation  =  standardDeviation;  [CE]  illegal  start  of  type  [FE]            ConvergenceException  [CONTEXT]    [BUGGY]    this.standardDeviation  =  standardDeviation;  [BUGGY]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	    this.standardDeviation  =  standardDeviation;		non-compiled	[CE]  illegal  start  of  type	10	None	add
6	[BUG]  [BUGGY]  [FE]  NotStrictlyPositiveException  [FE]    ConvergenceException  [CONTEXT]    [BUGGY]  public  NormalDistributionImpl(double  sd,  double  mean,  double  inverseCumAccuracy)  {  [BUGGY]  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	add	public  NormalDistributionImpl(double  sd,  double  mean,  double  inverseCumAccuracy)  {	public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  	compilable	  [FE]  NotStrictlyPositiveException  	9	10	replace
7	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  mean,  double  inverseCumAccuracy)  {  [FE]  NotStrictlyPositiveException  [FE]    ConvergenceException  [CONTEXT]    [BUGGY]  public  NormalDistributionImpl(double  sd,  double  mean,  double  inverseCumAccuracy)  {  [BUGGY]  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  mean,  double  inverseCumAccuracy)  {	public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  	compilable	  [FE]  NotStrictlyPositiveException  	9	10	replace
8	[BUG]  [BUGGY]  this(mean,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]      ConvergenceException  [CONTEXT]    [BUGGY]  this(mean,  sd,  inverseCumAccuracy);  [BUGGY]  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(mean,  sd,  inverseCumAccuracy);	public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  	non-compiled	[CE]  illegal  start  of  type	9	None	replace
9	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  mean,  double  sd,  double  standardDeviation)  {  [CE]  cannot  find  symbol  inverseCumAccuracy  [FE]        ConvergenceException  [CONTEXT]    [BUGGY]  public  NormalDistributionImpl(double  mean,  double  sd,  double  standardDeviation)  {  [BUGGY]  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  mean,  double  sd,  double  standardDeviation)  {	public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  	non-compiled	[CE]  cannot  find  symbol  inverseCumAccuracy	9	None	replace
10	[BUG]  [BUGGY]  super(mean,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]          ConvergenceException  [CONTEXT]    [BUGGY]  super(mean,  sd,  inverseCumAccuracy);  [BUGGY]  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(mean,  sd,  inverseCumAccuracy);	public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  	non-compiled	[CE]  illegal  start  of  type	9	None	replace
11	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  mean,  double  standardDeviation,  double  sd,  double  inverseCumAccuracy)  {  [CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)  [FE]    ConvergenceException  [CONTEXT]    [BUGGY]  public  NormalDistributionImpl(double  mean,  double  standardDeviation,  double  sd,  double  inverseCumAccuracy)  {  [BUGGY]  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  mean,  double  standardDeviation,  double  sd,  double  inverseCumAccuracy)  {	public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  	non-compiled	[CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)	9	None	replace
12	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  mean)  {  [CE]  constructor  NormalDistributionImpl(double,double)  is  already  defined  in  class  NormalDistributionImpl  [FE]      ConvergenceException  [CONTEXT]    [BUGGY]  public  NormalDistributionImpl(double  sd,  double  mean)  {  [BUGGY]  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  mean)  {	public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  	non-compiled	[CE]  constructor  NormalDistributionImpl(double,double)  is  already  defined  in  class  NormalDistributionImpl	9	None	replace
13	[BUG]  [BUGGY]    this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]    ConvergenceException  [CONTEXT]    [BUGGY]    this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	    this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;		non-compiled	[CE]  illegal  start  of  type	10	None	add
14	[BUG]  [BUGGY]    super(LocalizedFormats.STANDARD_DEVIATION,  sd);  [CE]  illegal  start  of  type  [FE]      ConvergenceException  [CONTEXT]    [BUGGY]    super(LocalizedFormats.STANDARD_DEVIATION,  sd);  [BUGGY]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	    super(LocalizedFormats.STANDARD_DEVIATION,  sd);		non-compiled	[CE]  illegal  start  of  type	10	None	add
15	[BUG]  [BUGGY]    super(LocalizedFormats.STANDARD_DEVIATION);  [CE]  illegal  start  of  type  [FE]        ConvergenceException  [CONTEXT]    [BUGGY]    super(LocalizedFormats.STANDARD_DEVIATION);  [BUGGY]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	    super(LocalizedFormats.STANDARD_DEVIATION);		non-compiled	[CE]  illegal  start  of  type	10	None	add
16	[BUG]  [BUGGY]    super(LocalizedFormats.STANDARD_DEVIATION,  sd);  this.standardDeviation  =  standardDeviation;  [CE]  illegal  start  of  type  [FE]          ConvergenceException  [CONTEXT]    [BUGGY]    super(LocalizedFormats.STANDARD_DEVIATION,  sd);  this.standardDeviation  =  standardDeviation;  [BUGGY]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	    super(LocalizedFormats.STANDARD_DEVIATION,  sd);  this.standardDeviation  =  standardDeviation;		non-compiled	[CE]  illegal  start  of  type	10	None	add
17	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  mean,  double  standardDeviation,  double  sd,  inverseCumAccuracy)  {  [CE]  <identifier>  expected  [FE]    ConvergenceException  [CONTEXT]    [BUGGY]  public  NormalDistributionImpl(double  mean,  double  standardDeviation,  double  sd,  inverseCumAccuracy)  {  [BUGGY]  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  mean,  double  standardDeviation,  double  sd,  inverseCumAccuracy)  {	public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  	non-compiled	[CE]  <identifier>  expected	9	None	replace
18	[BUG]  [BUGGY]  this(mean,  sd,  inverseCumAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]      ConvergenceException  [CONTEXT]    [BUGGY]  this(mean,  sd,  inverseCumAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(mean,  sd,  inverseCumAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  	non-compiled	[CE]  illegal  start  of  type	9	None	replace
19	[BUG]  [BUGGY]    super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]    ConvergenceException  [CONTEXT]    [BUGGY]    super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	    super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);		non-compiled	[CE]  illegal  start  of  type	10	None	add
20	[BUG]  [BUGGY]    super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]      ConvergenceException  [CONTEXT]    [BUGGY]    super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	    super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY);		non-compiled	[CE]  illegal  start  of  type	10	None	add
