bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  super(LocalizedFormats.SQRT2PI,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.SQRT2PI,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.SQRT2PI,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);	  super(LocalizedFormats.SQRT2PI,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
2	[BUG]  [BUGGY]  super(LocalizedFormats.SQRT2,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.SQRT2,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.SQRT2,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);	  super(LocalizedFormats.SQRT2PI,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
3	[BUG]  [BUGGY]  super(LocalizedFormats.SQRT2PI,  DEFAULT_INVERSION_ABSOLUTE_ACCURACY,  mean);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.SQRT2PI,  DEFAULT_INVERSION_ABSOLUTE_ACCURACY,  mean);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.SQRT2PI,  DEFAULT_INVERSION_ABSOLUTE_ACCURACY,  mean);	  super(LocalizedFormats.SQRT2PI,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
4	[BUG]  [BUGGY]  super(LocalizedFormats.SQRT2PI,  DEFAULT_NON_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.SQRT2PI,  DEFAULT_NON_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.SQRT2PI,  DEFAULT_NON_INVERSE_ABSOLUTE_ACCURACY);	  super(LocalizedFormats.SQRT2PI,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
5	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  SQRT2PI);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  SQRT2PI);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  SQRT2PI);	  super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    SQRT2PI);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
6	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  SQRT2PI,  mean);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  SQRT2PI,  mean);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  SQRT2PI,  mean);	  super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    SQRT2PI);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
7	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);	  super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    SQRT2PI);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
8	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  LocalizedFormats.STANDARD_DEVIATION,  mean);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  LocalizedFormats.STANDARD_DEVIATION,  mean);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  LocalizedFormats.STANDARD_DEVIATION,  mean);	  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    LocalizedFormats.STANDARD_DEVIATION);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
9	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  LocalizedFormats.STANDARD_DEVIATION,  sd);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  LocalizedFormats.STANDARD_DEVIATION,  sd);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  LocalizedFormats.STANDARD_DEVIATION,  sd);	  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    LocalizedFormats.STANDARD_DEVIATION);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
10	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_STANDARD_DEVIATION);  [CE]  illegal  start  of  type  [FE]                        ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_STANDARD_DEVIATION);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_STANDARD_DEVIATION);	  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    LocalizedFormats.STANDARD_DEVIATION);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
11	[BUG]  [BUGGY]  super(sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  super(sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);	  super(sd,    standardDeviation,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
12	[BUG]  [BUGGY]  super(sd,  inverseCumAccuracy,  standardDeviation);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]        [BUGGY]  super(sd,  inverseCumAccuracy,  standardDeviation);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(sd,  inverseCumAccuracy,  standardDeviation);	  super(sd,    standardDeviation,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
13	[BUG]  [BUGGY]  super(null,  standardDeviation,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                        ConvergenceException      [CONTEXT]        [BUGGY]  super(null,  standardDeviation,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(null,  standardDeviation,  inverseCumAccuracy);	  super(sd,    standardDeviation,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
14	[BUG]  [BUGGY]  super(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  super(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);	  super(sd,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
15	[BUG]  [BUGGY]  super(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  super(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy,  solverAbsoluteAccuracy);	  super(sd,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
16	[BUG]  [BUGGY]  super(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]        [BUGGY]  super(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  inverseCumAccuracy);	  super(sd,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
17	[BUG]  [BUGGY]  super(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy,  standardDeviation);  [CE]  illegal  start  of  type  [FE]                        ConvergenceException      [CONTEXT]        [BUGGY]  super(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy,  standardDeviation);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy,  standardDeviation);	  super(sd,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
18	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
19	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;	  this.standardDeviation    =    StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
20	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.create(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);	  this.standardDeviation    =    StandardDistributionImpl.create(sd,    inverseCumAccuracy,    solverAbsoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
21	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.create(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  this.standardDeviation    =    StandardDistributionImpl.create(sd,    inverseCumAccuracy,    solverAbsoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
22	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.create(sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);	  this.standardDeviation    =    StandardDistributionImpl.create(sd,    inverseCumAccuracy,    solverAbsoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
23	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  this);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  this);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  sd,  this);	  super(LocalizedFormats.STANDARD_DEVIATION,    sd,    null);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
24	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  normalDeviation);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  normalDeviation);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  sd,  normalDeviation);	  super(LocalizedFormats.STANDARD_DEVIATION,    sd,    null);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
25	[BUG]  [BUGGY]  Public  NormalDistributionImpl(double  sd,  double  standardDeviation,  long  solverAbsoluteAccuracy)  {  [CE]  cannot  find  symbol  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  Public  NormalDistributionImpl(double  sd,  double  standardDeviation,  long  solverAbsoluteAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	Public  NormalDistributionImpl(double  sd,  double  standardDeviation,  long  solverAbsoluteAccuracy)  {	  Public    NormalDistributionImpl(double    sd,    double    standardDeviation)    {    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
26	[BUG]  [BUGGY]  Public  NormalDistributionImpl(double  sd,  double  standardDeviation,  int  solverAbsoluteAccuracy)  {  [CE]  cannot  find  symbol  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  Public  NormalDistributionImpl(double  sd,  double  standardDeviation,  int  solverAbsoluteAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	Public  NormalDistributionImpl(double  sd,  double  standardDeviation,  int  solverAbsoluteAccuracy)  {	  Public    NormalDistributionImpl(double    sd,    double    standardDeviation)    {    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
27	[BUG]  [BUGGY]  Public  NormalDistributionImpl(double  sd,  double  standardDeviation,  long  serialVersionUID)  {  [CE]  cannot  find  symbol  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  Public  NormalDistributionImpl(double  sd,  double  standardDeviation,  long  serialVersionUID)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	Public  NormalDistributionImpl(double  sd,  double  standardDeviation,  long  serialVersionUID)  {	  Public    NormalDistributionImpl(double    sd,    double    standardDeviation)    {    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
28	[BUG]  [BUGGY]  this(mean,  standardDeviation,  solverAbsoluteAccuracy,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]        [BUGGY]  this(mean,  standardDeviation,  solverAbsoluteAccuracy,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(mean,  standardDeviation,  solverAbsoluteAccuracy,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    solverAbsoluteAccuracy,    sd,    inverseCumAccuracy)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
29	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  mean,  double  sd,  standardDeviation,  solverAbsoluteAccuracy,  inverseCumAccuracy)  {  [CE]  <identifier>  expected  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  mean,  double  sd,  standardDeviation,  solverAbsoluteAccuracy,  inverseCumAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  mean,  double  sd,  standardDeviation,  solverAbsoluteAccuracy,  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    solverAbsoluteAccuracy,    sd,    inverseCumAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	86	None	replace
30	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  solverAbsoluteAccuracy,  mean,  inverseCumAccuracy)  {  [CE]  <identifier>  expected  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  solverAbsoluteAccuracy,  mean,  inverseCumAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  standardDeviation,  solverAbsoluteAccuracy,  mean,  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    solverAbsoluteAccuracy,    sd,    inverseCumAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	86	None	replace
31	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  mean,  double  standardDeviation,  solverAbsoluteAccuracy,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [CE]  <identifier>  expected  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  mean,  double  standardDeviation,  solverAbsoluteAccuracy,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  mean,  double  standardDeviation,  solverAbsoluteAccuracy,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    solverAbsoluteAccuracy,    sd,    inverseCumAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	86	None	replace
32	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
33	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
34	[BUG]  [BUGGY]  this.standardDeviation  =  NormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  NormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  NormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
35	[BUG]  [BUGGY]  this(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  this(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  this(sd,    inverseCumAccuracy,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
36	[BUG]  [BUGGY]  this(null,  inverseCumAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  this(null,  inverseCumAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(null,  inverseCumAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  this(sd,    inverseCumAccuracy,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
37	[BUG]  [BUGGY]  this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);	  this(sd,    inverseCumAccuracy,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
38	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDeviation.NEGATIVE_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDeviation.NEGATIVE_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDeviation.NEGATIVE_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    StandardDeviation.NEGATIVE_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
39	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDeviation.NEGATIVE_INVERSE_ABSOLUTE_ACCURACY  +  1;  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDeviation.NEGATIVE_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDeviation.NEGATIVE_INVERSE_ABSOLUTE_ACCURACY  +  1;	  this.standardDeviation    =    StandardDeviation.NEGATIVE_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
40	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {  if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STRING_DEVIATION,  sd);  }  [CE]  illegal  start  of  expression  [FE]        NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {  if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STRING_DEVIATION,  sd);  }  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {  if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STRING_DEVIATION,  sd);  }	  public    NormalDistributionImpl(double    sd,    double    mean,    double    inverseCumAccuracy)    {    if    (sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STRING_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
41	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {  if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  expression  [FE]          NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {  if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {  if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  public    NormalDistributionImpl(double    sd,    double    mean,    double    inverseCumAccuracy)    {    if    (sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STRING_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
42	[BUG]  [BUGGY]  super(s,  standardDeviation,  sd,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]        [BUGGY]  super(s,  standardDeviation,  sd,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(s,  standardDeviation,  sd,  solverAbsoluteAccuracy);	  public    NormalDistributionImpl(double    s,    double    standardDeviation,    double    sd,    solverAbsoluteAccuracy)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
43	[BUG]  [BUGGY]  this(s,  standardDeviation,  sd,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  this(s,  standardDeviation,  sd,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(s,  standardDeviation,  sd,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  public    NormalDistributionImpl(double    s,    double    standardDeviation,    double    sd,    solverAbsoluteAccuracy)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
44	[BUG]  [BUGGY]  this(s,  standardDeviation,  sd,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  this(s,  standardDeviation,  sd,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(s,  standardDeviation,  sd,  solverAbsoluteAccuracy);	  public    NormalDistributionImpl(double    s,    double    standardDeviation,    double    sd,    solverAbsoluteAccuracy)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
45	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  &&  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  &&  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  &&  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY    ||    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
46	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ACCURACY  ||  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ACCURACY  ||  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ACCURACY  ||  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY    ||    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
47	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  StandardDistributionImpl.DEFAULT_INVERSION_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  StandardDistributionImpl.DEFAULT_INVERSION_ABSOLUTE_ACCURACY;  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  StandardDistributionImpl.DEFAULT_INVERSION_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY    ||    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
48	[BUG]  [BUGGY]  this(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  this(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy);	  this(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
49	[BUG]  [BUGGY]  this(sd,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  this(sd,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(sd,  solverAbsoluteAccuracy);	  this(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
50	[BUG]  [BUGGY]  this(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  this(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  this(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
51	[BUG]  [BUGGY]  this.inverseCumAccuracy  =  inverseCumAccuracy;  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  this.inverseCumAccuracy  =  inverseCumAccuracy;  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.inverseCumAccuracy  =  inverseCumAccuracy;	  this(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
52	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  standardDeviation,  double  sd,  double  solverAbsoluteAccuracy)  {  [CE]  cannot  find  symbol  inverseCumAccuracy  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  standardDeviation,  double  sd,  double  solverAbsoluteAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  standardDeviation,  double  sd,  double  solverAbsoluteAccuracy)  {	  public    NormalDistributionImpl(double    standardDeviation,    double    sd,    double    mean)    {    	non-compiled	[CE]  cannot  find  symbol  inverseCumAccuracy	66	None	replace
53	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  standardDeviation,  double  mean,  double  sd)  {  [CE]  cannot  find  symbol  inverseCumAccuracy  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  standardDeviation,  double  mean,  double  sd)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  standardDeviation,  double  mean,  double  sd)  {	  public    NormalDistributionImpl(double    standardDeviation,    double    sd,    double    mean)    {    	non-compiled	[CE]  cannot  find  symbol  inverseCumAccuracy	66	None	replace
54	[BUG]  [BUGGY]  this(mean,  standardDeviation,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]        [BUGGY]  this(mean,  standardDeviation,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(mean,  standardDeviation,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    double    solverAbsoluteAccuracy,    sd)    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
55	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  solverAbsoluteAccuracy)  {  [CE]  cannot  find  symbol  inverseCumAccuracy  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  solverAbsoluteAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  solverAbsoluteAccuracy)  {	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    double    solverAbsoluteAccuracy,    sd)    {    	non-compiled	[CE]  cannot  find  symbol  inverseCumAccuracy	94	None	replace
56	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  inverseCumAccuracy;  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  inverseCumAccuracy;  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  inverseCumAccuracy;	  this.standardDeviation    =    inverseCumAccuracy    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
57	[BUG]  [BUGGY]  this.standardDeviation  =  inverseCumAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  inverseCumAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  inverseCumAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    inverseCumAccuracy    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
58	[BUG]  [BUGGY]  this.standardDeviation  =  standardDeviation  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                        ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  standardDeviation  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  standardDeviation  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    inverseCumAccuracy    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
59	[BUG]  [BUGGY]  this(null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  this(null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);	  this(null,    sd,    inverseCumAccuracy,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
60	[BUG]  [BUGGY]  this(null,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]        [BUGGY]  this(null,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(null,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  this(null,    sd,    inverseCumAccuracy,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
61	[BUG]  [BUGGY]  this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                        ConvergenceException      [CONTEXT]        [BUGGY]  this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);	  this(null,    sd,    inverseCumAccuracy,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
62	[BUG]  [BUGGY]  this(null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);  [CE]  illegal  start  of  type  [FE]                          ConvergenceException      [CONTEXT]        [BUGGY]  this(null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);	  this(null,    sd,    inverseCumAccuracy,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
63	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(null,  sd,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(null,  sd,  solverAbsoluteAccuracy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.create(null,  sd,  solverAbsoluteAccuracy);	  this.standardDeviation    =    StandardDistributionImpl.create(null,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
64	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(null,  mean,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(null,  mean,  sd,  inverseCumAccuracy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.create(null,  mean,  sd,  inverseCumAccuracy);	  this.standardDeviation    =    StandardDistributionImpl.create(null,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
65	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(sd,  inverseCumAccuracy,  sd);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(sd,  inverseCumAccuracy,  sd);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.create(sd,  inverseCumAccuracy,  sd);	  this.standardDeviation    =    StandardDistributionImpl.create(null,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
66	[BUG]  [BUGGY]  this(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  this(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);	  this(sd,    inverseCumAccuracy,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    standardDeviation);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
67	[BUG]  [BUGGY]  this(sd,  inverseCumAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  this(sd,  inverseCumAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(sd,  inverseCumAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);	  this(sd,    inverseCumAccuracy,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    standardDeviation);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
68	[BUG]  [BUGGY]  this(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy,  standardDeviation);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  this(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy,  standardDeviation);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy,  standardDeviation);	  this(sd,    inverseCumAccuracy,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    standardDeviation);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
69	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(null,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(null,  solverAbsoluteAccuracy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.newInstance(null,  solverAbsoluteAccuracy);	  this.standardDeviation    =    StandardDistributionImpl.newInstance(null,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
70	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(null,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(null,  sd,  inverseCumAccuracy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.newInstance(null,  sd,  inverseCumAccuracy);	  this.standardDeviation    =    StandardDistributionImpl.newInstance(null,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
71	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(this,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                        ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(this,  inverseCumAccuracy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.newInstance(this,  inverseCumAccuracy);	  this.standardDeviation    =    StandardDistributionImpl.newInstance(null,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
72	[BUG]  [BUGGY]  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.standardDeviation  =  sd;  [CE]  illegal  start  of  type  [FE]        NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.standardDeviation  =  sd;  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.standardDeviation  =  sd;	  public    NormalDistributionImpl(double    sd,    double    mean,    double    inverseCumAccuracy)    {    if    (sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    this.standardDeviation    =    sd;    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
73	[BUG]  [BUGGY]  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  type  [FE]          NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  public    NormalDistributionImpl(double    sd,    double    mean,    double    inverseCumAccuracy)    {    if    (sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    this.standardDeviation    =    sd;    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
74	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  solverAbsoluteAccuracy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  sd,  solverAbsoluteAccuracy);	  super(LocalizedFormats.STANDARD_DEVIATION,    sd,    standardDeviation);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
75	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  mean,  sd);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  mean,  sd);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  mean,  sd);	  super(LocalizedFormats.STANDARD_DEVIATION,    sd,    standardDeviation);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
76	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  fixerAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  fixerAbsoluteAccuracy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  sd,  fixerAbsoluteAccuracy);	  super(LocalizedFormats.STANDARD_DEVIATION,    sd,    standardDeviation);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
77	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  this.solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                        ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  this.solverAbsoluteAccuracy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  sd,  this.solverAbsoluteAccuracy);	  super(LocalizedFormats.STANDARD_DEVIATION,    sd,    standardDeviation);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
78	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  solverAbsoluteAccuracy,  double  inverseCumAccuracy)  {  [CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)  [FE]            ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  solverAbsoluteAccuracy,  double  inverseCumAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  solverAbsoluteAccuracy,  double  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double    sd,    double    standardDeviation,    double    mean,    inverseCumAccuracy)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)	73	None	replace
79	[BUG]  [BUGGY]  super(sd,  standardDeviation,  mean,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  super(sd,  standardDeviation,  mean,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(sd,  standardDeviation,  mean,  inverseCumAccuracy);	  public    NormalDistributionImpl(double    sd,    double    standardDeviation,    double    mean,    inverseCumAccuracy)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
80	[BUG]  [BUGGY]  this(null,  null,  standardDeviation,  mean,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  this(null,  null,  standardDeviation,  mean,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(null,  null,  standardDeviation,  mean,  inverseCumAccuracy);	  public    NormalDistributionImpl(double    sd,    double    standardDeviation,    double    mean,    inverseCumAccuracy)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
81	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  s,  double  standardDeviation,  mean)  {  [CE]  <identifier>  expected  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  s,  double  standardDeviation,  mean)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  s,  double  standardDeviation,  mean)  {	  public    NormalDistributionImpl(double    s,    double    mean,    double    standardDeviation)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
82	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);	  this.standardDeviation    =    StandardDistributionImpl.newInstance(sd,    inverseCumAccuracy,    solverAbsoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
83	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);	  this.standardDeviation    =    StandardDistributionImpl.newInstance(sd,    inverseCumAccuracy,    solverAbsoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
84	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]                        ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  this.standardDeviation    =    StandardDistributionImpl.newInstance(sd,    inverseCumAccuracy,    solverAbsoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
85	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  1;  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  1;  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  1;	  this.standardDeviation    =    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY    -    1;    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
86	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  -  2;  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  -  2;  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  -  2;	  this.standardDeviation    =    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY    -    1;    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
87	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDeviation.DEFAULT_INVERSION_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDeviation.DEFAULT_INVERSION_ABSOLUTE_ACCURACY;  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDeviation.DEFAULT_INVERSION_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    StandardDeviation;    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
88	[BUG]  [BUGGY]  super(sd,  mean,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]          NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  super(sd,  mean,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(sd,  mean,  solverAbsoluteAccuracy);	  super(sd,    mean,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
89	[BUG]  [BUGGY]  super(sd,  inverseCumAccuracy,  mean);  [CE]  illegal  start  of  type  [FE]            NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  super(sd,  inverseCumAccuracy,  mean);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(sd,  inverseCumAccuracy,  mean);	  super(sd,    mean,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
90	[BUG]  [BUGGY]  this.standardDeviation  =  sd  +  1;  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  sd  +  1;  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  sd  +  1;	  this.standardDeviation    =    sd;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
91	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  mean,  standardDeviation,  solverAbsoluteAccuracy)  {  [CE]  <identifier>  expected  [FE]          NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  mean,  standardDeviation,  solverAbsoluteAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  mean,  standardDeviation,  solverAbsoluteAccuracy)  {	  public    NormalDistributionImpl(double    sd,    double    mean,    double    solverAbsoluteAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	80	None	replace
92	[BUG]  [BUGGY]  Public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  solverAbsoluteAccuracy)  {  [CE]  cannot  find  symbol  [FE]            NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  Public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  solverAbsoluteAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	Public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  solverAbsoluteAccuracy)  {	  public    NormalDistributionImpl(double    sd,    double    mean,    double    solverAbsoluteAccuracy)    {    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
93	[BUG]  [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.create(sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.create(sd,  inverseCumAccuracy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  NormalDistributionImpl.create(sd,  inverseCumAccuracy);	  this.standardDeviation    =    NormalDistributionImpl.create(sd,    solverAbsoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
94	[BUG]  [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.create(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.create(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  NormalDistributionImpl.create(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  this.standardDeviation    =    NormalDistributionImpl.create(sd,    solverAbsoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
95	[BUG]  [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.create(sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.create(sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  NormalDistributionImpl.create(sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);	  this.standardDeviation    =    NormalDistributionImpl.create(sd,    solverAbsoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
96	[BUG]  [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.create(sd,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.create(sd,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  NormalDistributionImpl.create(sd,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  this.standardDeviation    =    NormalDistributionImpl.create(sd,    solverAbsoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
97	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  sd);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  sd);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  sd);	  super(LocalizedFormats.STANDARD_DEVIATION,    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,    mean);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
98	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  mean,  sd);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  mean,  sd);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  mean,  sd);	  super(LocalizedFormats.STANDARD_DEVIATION,    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,    mean);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
99	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  mean,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  mean,  inverseCumAccuracy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  mean,  inverseCumAccuracy);	  super(LocalizedFormats.STANDARD_DEVIATION,    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,    mean);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
100	[BUG]  [BUGGY]  super(sd,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  super(sd,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(sd,  solverAbsoluteAccuracy);	  super(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
101	[BUG]  [BUGGY]  super(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  super(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy);	  super(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
102	[BUG]  [BUGGY]  super(null,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]        [BUGGY]  super(null,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(null,  inverseCumAccuracy);	  super(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
103	[BUG]  [BUGGY]  this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);	  this(sd,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
104	[BUG]  [BUGGY]  this(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  this(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy,  solverAbsoluteAccuracy);	  this(sd,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
105	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  inverseCumAccuracy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  inverseCumAccuracy);	  super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    mean);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
106	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  mean,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  mean,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  mean,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    mean);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
107	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(mean,  sd,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(mean,  sd,  solverAbsoluteAccuracy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.newInstance(mean,  sd,  solverAbsoluteAccuracy);	  this.standardDeviation    =    StandardDistributionImpl.newInstance(mean,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
108	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(message,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(message,  sd,  inverseCumAccuracy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.newInstance(message,  sd,  inverseCumAccuracy);	  this.standardDeviation    =    StandardDistributionImpl.newInstance(mean,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
109	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  mean,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  mean,  inverseCumAccuracy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  mean,  inverseCumAccuracy);	  this.standardDeviation    =    StandardDistributionImpl.newInstance(mean,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
110	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  mean)  {  [CE]  <identifier>  expected  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  mean)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  standardDeviation,  mean)  {	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    sd)    {    	non-compiled	[CE]  <identifier>  expected	93	None	replace
111	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  mean,  double  sd,  standardDeviation)  {  [CE]  <identifier>  expected  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  mean,  double  sd,  standardDeviation)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  mean,  double  sd,  standardDeviation)  {	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    sd)    {    	non-compiled	[CE]  <identifier>  expected	93	None	replace
112	[BUG]  [BUGGY]  this(mean,  standardDeviation,  sd,  true);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]        [BUGGY]  this(mean,  standardDeviation,  sd,  true);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(mean,  standardDeviation,  sd,  true);	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    sd)    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
113	[BUG]  [BUGGY]  super(mean,  standardDeviation,  sd);  [CE]  illegal  start  of  type  [FE]                        ConvergenceException      [CONTEXT]        [BUGGY]  super(mean,  standardDeviation,  sd);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(mean,  standardDeviation,  sd);	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    sd)    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
114	[BUG]  [BUGGY]  super(null,  sd,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  super(null,  sd,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(null,  sd,  solverAbsoluteAccuracy);	  super(null,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
115	[BUG]  [BUGGY]  super(null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]        [BUGGY]  super(null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  inverseCumAccuracy);	  super(null,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
116	[BUG]  [BUGGY]  super(null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);  [CE]  illegal  start  of  type  [FE]                        ConvergenceException      [CONTEXT]        [BUGGY]  super(null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);	  super(null,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
117	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  s,  double  sd,  double  solverAbsoluteAccuracy)  {  [CE]  cannot  find  symbol  inverseCumAccuracy  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  s,  double  sd,  double  solverAbsoluteAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  s,  double  sd,  double  solverAbsoluteAccuracy)  {	  public    NormalDistributionImpl(double    s,    double    sd,    double    standardDeviation)    {    	non-compiled	[CE]  cannot  find  symbol  inverseCumAccuracy	92	None	replace
118	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  s,  double  sd,  long  standardDeviation)  {  [CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  s,  double  sd,  long  standardDeviation)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  s,  double  sd,  long  standardDeviation)  {	  public    NormalDistributionImpl(double    s,    double    sd,    double    standardDeviation)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)	92	None	replace
119	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  s,  double  sd,  int  standardDeviation)  {  [CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  s,  double  sd,  int  standardDeviation)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  s,  double  sd,  int  standardDeviation)  {	  public    NormalDistributionImpl(double    s,    double    sd,    double    standardDeviation)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)	92	None	replace
120	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  mean,  double  standardDeviation)  {  if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  expression  [FE]        NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  mean,  double  standardDeviation)  {  if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  mean,  double  standardDeviation)  {  if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  public    NormalDistributionImpl(double    sd,    double    mean,    double    inverseCumAccuracy)    {    if    (sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
121	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);	  super(LocalizedFormats.STANDARD_DEVIATION,    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,    standardDeviation);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
122	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation,  solverAbsoluteAccuracy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation,  solverAbsoluteAccuracy);	  super(LocalizedFormats.STANDARD_DEVIATION,    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,    standardDeviation);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
123	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  mean,  double  standardDeviation,  double  solverAbsoluteAccuracy,  sd,  solverAbsoluteAccuracy)  {  [CE]  <identifier>  expected  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  mean,  double  standardDeviation,  double  solverAbsoluteAccuracy,  sd,  solverAbsoluteAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  mean,  double  standardDeviation,  double  solverAbsoluteAccuracy,  sd,  solverAbsoluteAccuracy)  {	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    double    solverAbsoluteAccuracy,    sd,    inverseCumAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
124	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  solverAbsoluteAccuracy,  sd,  inverseCumAccuracy)  {  [CE]  <identifier>  expected  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  solverAbsoluteAccuracy,  sd,  inverseCumAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  solverAbsoluteAccuracy,  sd,  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    double    solverAbsoluteAccuracy,    sd,    inverseCumAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
125	[BUG]  [BUGGY]  this(mean,  standardDeviation,  solverAbsoluteAccuracy,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  this(mean,  standardDeviation,  solverAbsoluteAccuracy,  sd,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(mean,  standardDeviation,  solverAbsoluteAccuracy,  sd,  inverseCumAccuracy);	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    double    solverAbsoluteAccuracy,    sd,    inverseCumAccuracy)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
126	[BUG]  [BUGGY]  super(inverseCumAccuracy,  sd,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  super(inverseCumAccuracy,  sd,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(inverseCumAccuracy,  sd,  solverAbsoluteAccuracy);	  super(resolverAbsoluteAccuracy,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
127	[BUG]  [BUGGY]  super(resolverAbsoluteAccuracy,  sd,  standardDeviation);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  super(resolverAbsoluteAccuracy,  sd,  standardDeviation);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(resolverAbsoluteAccuracy,  sd,  standardDeviation);	  super(resolverAbsoluteAccuracy,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
128	[BUG]  [BUGGY]  super(inverseCumAccuracy,  sd,  resolverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]        [BUGGY]  super(inverseCumAccuracy,  sd,  resolverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(inverseCumAccuracy,  sd,  resolverAbsoluteAccuracy);	  super(resolverAbsoluteAccuracy,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
129	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  expression  [FE]          NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  public    NormalDistributionImpl(double    sd,    double    mean,    double    inverseCumAccuracy)    {    (sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
130	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  mean,  double  standardDeviation)  {  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  expression  [FE]            NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  mean,  double  standardDeviation)  {  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  mean,  double  standardDeviation)  {  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  public    NormalDistributionImpl(double    sd,    double    mean,    double    inverseCumAccuracy)    {    (sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
131	[BUG]  [BUGGY]  public  NormalDistributionImpl(double[]  sd,  double  mean,  double  inverseCumAccuracy)  {  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  expression  [FE]              NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double[]  sd,  double  mean,  double  inverseCumAccuracy)  {  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double[]  sd,  double  mean,  double  inverseCumAccuracy)  {  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  public    NormalDistributionImpl(double    sd,    double    mean,    double    inverseCumAccuracy)    {    (sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
132	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  false);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  false);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  sd,  false);	  super(LocalizedFormats.STANDARD_DEVIATION,    sd,    true);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
133	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  true);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  true);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  true);	  super(LocalizedFormats.STANDARD_DEVIATION,    sd,    true);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
134	[BUG]  [BUGGY]  super(resolverAbsoluteAccuracy,  standardDeviation,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                        ConvergenceException      [CONTEXT]        [BUGGY]  super(resolverAbsoluteAccuracy,  standardDeviation,  sd,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(resolverAbsoluteAccuracy,  standardDeviation,  sd,  inverseCumAccuracy);	  super(mean,    standardDeviation,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
135	[BUG]  [BUGGY]  super(mean,  solverAbsoluteAccuracy,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                          ConvergenceException      [CONTEXT]        [BUGGY]  super(mean,  solverAbsoluteAccuracy,  sd,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(mean,  solverAbsoluteAccuracy,  sd,  inverseCumAccuracy);	  super(mean,    standardDeviation,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
136	[BUG]  [BUGGY]  super(null,  standardDeviation,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                            ConvergenceException      [CONTEXT]        [BUGGY]  super(null,  standardDeviation,  sd,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(null,  standardDeviation,  sd,  inverseCumAccuracy);	  super(mean,    standardDeviation,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
137	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(null,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(null,  solverAbsoluteAccuracy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.create(null,  solverAbsoluteAccuracy);	  this.standardDeviation    =    StandardDistributionImpl.create(null,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
138	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.create(null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  this.standardDeviation    =    StandardDistributionImpl.create(null,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
139	[BUG]  [BUGGY]  this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]        NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  this(null,    null,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
140	[BUG]  [BUGGY]  this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  SQRT2PI);  [CE]  illegal  start  of  type  [FE]          NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  SQRT2PI);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  SQRT2PI);	  this(null,    null,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
141	[BUG]  [BUGGY]  this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_STANDARD_DEVIATION);  [CE]  illegal  start  of  type  [FE]            NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_STANDARD_DEVIATION);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_STANDARD_DEVIATION);	  this(null,    null,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
142	[BUG]  [BUGGY]  this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);  [CE]  illegal  start  of  type  [FE]              NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);	  this(null,    null,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
143	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);	  super(LocalizedFormats.STANDARD_DEVIATION,    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
144	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERS  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERS  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERS	  super(LocalizedFormats.STANDARD_DEVIATION,    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
145	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);	  super(LocalizedFormats.STANDARD_DEVIATION,    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
146	[BUG]  [BUGGY]  this(LocalizedFormats.DECEMBER,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  this(LocalizedFormats.DECEMBER,  sd,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(LocalizedFormats.DECEMBER,  sd,  inverseCumAccuracy);	  this(NumberFormat.DECEMBER,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
147	[BUG]  [BUGGY]  this(NumberFormat.DECEMBER,  sd,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]        [BUGGY]  this(NumberFormat.DECEMBER,  sd,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(NumberFormat.DECEMBER,  sd,  solverAbsoluteAccuracy);	  this(NumberFormat.DECEMBER,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
148	[BUG]  [BUGGY]  this(NumberFormat.DECEMBER,  sd,  standardDeviation,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                        ConvergenceException      [CONTEXT]        [BUGGY]  this(NumberFormat.DECEMBER,  sd,  standardDeviation,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(NumberFormat.DECEMBER,  sd,  standardDeviation,  inverseCumAccuracy);	  this(NumberFormat.DECEMBER,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
149	[BUG]  [BUGGY]  this(NumberFormat.DECEMBER,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]                          ConvergenceException      [CONTEXT]        [BUGGY]  this(NumberFormat.DECEMBER,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(NumberFormat.DECEMBER,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  this(NumberFormat.DECEMBER,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
150	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
151	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;	  this.standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
152	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
153	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  solverAbsoluteAccuracy,  double  sd,  double  inverseCumAccuracy)  {  [CE]  variable  sd  is  already  defined  in  constructor  NormalDistributionImpl  [FE]            ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  solverAbsoluteAccuracy,  double  sd,  double  inverseCumAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  solverAbsoluteAccuracy,  double  sd,  double  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    double    solverAbsoluteAccuracy,    double    sd,    double    inverseCumAccuracy)    {    	non-compiled	[CE]  variable  sd  is  already  defined  in  constructor  NormalDistributionImpl	9	None	replace
154	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  mean,  double  standardDeviation,  double  solverAbsoluteAccuracy,  double  sd,  int  inverseCumAccuracy)  {  [CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  mean,  double  standardDeviation,  double  solverAbsoluteAccuracy,  double  sd,  int  inverseCumAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  mean,  double  standardDeviation,  double  solverAbsoluteAccuracy,  double  sd,  int  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    double    solverAbsoluteAccuracy,    double    sd,    double    inverseCumAccuracy)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)	9	None	replace
155	[BUG]  [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.newInstance(sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.newInstance(sd,  inverseCumAccuracy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  NormalDistributionImpl.newInstance(sd,  inverseCumAccuracy);	  this.standardDeviation    =    NormalDistributionImpl.newInstance(sd,    solverAbsoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
156	[BUG]  [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.newInstance(sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                        ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.newInstance(sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  NormalDistributionImpl.newInstance(sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);	  this.standardDeviation    =    NormalDistributionImpl.newInstance(sd,    solverAbsoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
157	[BUG]  [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.newInstance(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]                          ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.newInstance(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  NormalDistributionImpl.newInstance(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  this.standardDeviation    =    NormalDistributionImpl.newInstance(sd,    solverAbsoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
158	[BUG]  [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.newInstance(sd,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]                            ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.newInstance(sd,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  NormalDistributionImpl.newInstance(sd,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  this.standardDeviation    =    NormalDistributionImpl.newInstance(sd,    solverAbsoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
159	[BUG]  [BUGGY]  this(null,  sd,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  this(null,  sd,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(null,  sd,  solverAbsoluteAccuracy);	  this(null,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
160	[BUG]  [BUGGY]  this(null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  this(null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  inverseCumAccuracy);	  this(null,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
161	[BUG]  [BUGGY]  this(null,  null,  sd,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  this(null,  null,  sd,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(null,  null,  sd,  solverAbsoluteAccuracy);	  this(null,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
162	[BUG]  [BUGGY]  this(null,  null,  inverseCumAccuracy,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]        [BUGGY]  this(null,  null,  inverseCumAccuracy,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(null,  null,  inverseCumAccuracy,  solverAbsoluteAccuracy);	  this(null,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
163	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  mean,  double  sd,  standardDeviation,  solverAbsoluteAccuracy,  sd)  {  [CE]  <identifier>  expected  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  mean,  double  sd,  standardDeviation,  solverAbsoluteAccuracy,  sd)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  mean,  double  sd,  standardDeviation,  solverAbsoluteAccuracy,  sd)  {	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    double    solverAbsoluteAccuracy,    double    sd)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
164	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  mean,  double  standardDeviation,  sd,  solverAbsoluteAccuracy)  {  [CE]  <identifier>  expected  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  mean,  double  standardDeviation,  sd,  solverAbsoluteAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  mean,  double  standardDeviation,  sd,  solverAbsoluteAccuracy)  {	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    double    solverAbsoluteAccuracy,    double    sd)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
165	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  LAST_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  LAST_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  LAST_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  super(LocalizedFormats.STANDARD_DEVIATION,    LAST_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
166	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  LAST_INVERSE_ABSOLUTE_ACCURACY,  mean);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  LAST_INVERSE_ABSOLUTE_ACCURACY,  mean);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  LAST_INVERSE_ABSOLUTE_ACCURACY,  mean);	  super(LocalizedFormats.STANDARD_DEVIATION,    LAST_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
167	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  LAST_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURacy);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  LAST_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURacy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  LAST_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURacy);	  super(LocalizedFormats.STANDARD_DEVIATION,    LAST_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
168	[BUG]  [BUGGY]  public  NormalDistributionImpl(double[]  sd,  double  standardDeviation,  double  solverAbsoluteAccuracy)  {  [CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)  [FE]        NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double[]  sd,  double  standardDeviation,  double  solverAbsoluteAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double[]  sd,  double  standardDeviation,  double  solverAbsoluteAccuracy)  {	  public    NormalDistributionImpl(double[]    sd,    double    standardDeviation,    double    inverseCumAccuracy)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)	79	None	replace
169	[BUG]  [BUGGY]  public  NormalDistributionImpl(double[]  sd,  double  standardDeviation,  int  solverAbsoluteAccuracy)  {  [CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)  [FE]          NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double[]  sd,  double  standardDeviation,  int  solverAbsoluteAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double[]  sd,  double  standardDeviation,  int  solverAbsoluteAccuracy)  {	  public    NormalDistributionImpl(double[]    sd,    double    standardDeviation,    double    inverseCumAccuracy)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)	79	None	replace
170	[BUG]  [BUGGY]  public  NormalDistributionImpl(double[]  sd,  double  standardDeviation,  double  solverAbsoluteAccuracy,  double  inverseCumAccuracy)  {  [CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)  [FE]            NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double[]  sd,  double  standardDeviation,  double  solverAbsoluteAccuracy,  double  inverseCumAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double[]  sd,  double  standardDeviation,  double  solverAbsoluteAccuracy,  double  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double[]    sd,    double    standardDeviation,    double    inverseCumAccuracy)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)	79	None	replace
171	[BUG]  [BUGGY]  public  NormalDistributionImpl(double[]  sd,  double  standardDeviation,  long  solverAbsoluteAccuracy)  {  [CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)  [FE]              NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double[]  sd,  double  standardDeviation,  long  solverAbsoluteAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double[]  sd,  double  standardDeviation,  long  solverAbsoluteAccuracy)  {	  public    NormalDistributionImpl(double[]    sd,    double    standardDeviation,    double    inverseCumAccuracy)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)	79	None	replace
172	[BUG]  [BUGGY]  super(inverseCumAccuracy,  sd,  SQRT2PI);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]        [BUGGY]  super(inverseCumAccuracy,  sd,  SQRT2PI);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(inverseCumAccuracy,  sd,  SQRT2PI);	  super(SQRT2PI,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
173	[BUG]  [BUGGY]  super(SQRT2PI,  sd,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                        ConvergenceException      [CONTEXT]        [BUGGY]  super(SQRT2PI,  sd,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(SQRT2PI,  sd,  solverAbsoluteAccuracy);	  super(SQRT2PI,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
174	[BUG]  [BUGGY]  super(sd,  SQRT2PI,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                          ConvergenceException      [CONTEXT]        [BUGGY]  super(sd,  SQRT2PI,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(sd,  SQRT2PI,  inverseCumAccuracy);	  super(SQRT2PI,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
175	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  &  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  &  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  &  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY    |    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
176	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  -  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  -  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  -  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY    |    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
177	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY    |    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
178	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  mean,  double  standardDeviation,  double  sd,  double  solverAbsoluteAccuracy)  {  [CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  mean,  double  standardDeviation,  double  sd,  double  solverAbsoluteAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  mean,  double  standardDeviation,  double  sd,  double  solverAbsoluteAccuracy)  {	  public    NormalDistributionImpl(double    mean,    double    sd,    double    solverAbsoluteAccuracy)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)	19	None	replace
179	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  mean,  double  sd,  standardDeviation,  solverAbsoluteAccuracy)  {  [CE]  <identifier>  expected  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  mean,  double  sd,  standardDeviation,  solverAbsoluteAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  mean,  double  sd,  standardDeviation,  solverAbsoluteAccuracy)  {	  public    NormalDistributionImpl(double    mean,    double    sd,    double    solverAbsoluteAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
180	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  mean,  double  standardDeviation,  double  sd,  solverAbsoluteAccuracy)  {  [CE]  <identifier>  expected  [FE]                      ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  mean,  double  standardDeviation,  double  sd,  solverAbsoluteAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  mean,  double  standardDeviation,  double  sd,  solverAbsoluteAccuracy)  {	  public    NormalDistributionImpl(double    mean,    double    sd,    double    solverAbsoluteAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
181	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  mean,  standardDeviation,  int  solverAbsoluteAccuracy)  {  [CE]  <identifier>  expected  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  mean,  standardDeviation,  int  solverAbsoluteAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  mean,  standardDeviation,  int  solverAbsoluteAccuracy)  {	  public    NormalDistributionImpl(double    sd,    double    mean,    int    standardDeviation)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
182	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  mean,  int  standardDeviation,  long  solverAbsoluteAccuracy)  {  [CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  mean,  int  standardDeviation,  long  solverAbsoluteAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  mean,  int  standardDeviation,  long  solverAbsoluteAccuracy)  {	  public    NormalDistributionImpl(double    sd,    double    mean,    int    standardDeviation)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)	3	None	replace
183	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  standardDeviation,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  standardDeviation,  inverseCumAccuracy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  sd,  standardDeviation,  inverseCumAccuracy);	  super(LocalizedFormats.STANDARD_DEVIATION,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
184	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  mean,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  mean,  sd,  inverseCumAccuracy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  mean,  sd,  inverseCumAccuracy);	  super(LocalizedFormats.STANDARD_DEVIATION,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
185	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURacy,  mean);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURacy,  mean);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURacy,  mean);	  super(LocalizedFormats.STANDARD_DEVIATION,    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,    DEFAULT_INVERSE_ABSOLUTE_ACCURacy);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
186	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURacy,  standardDeviation);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURacy,  standardDeviation);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURacy,  standardDeviation);	  super(LocalizedFormats.STANDARD_DEVIATION,    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,    DEFAULT_INVERSE_ABSOLUTE_ACCURacy);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
187	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURacy,  SQRT2PI);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURacy,  SQRT2PI);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURacy,  SQRT2PI);	  super(LocalizedFormats.STANDARD_DEVIATION,    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,    DEFAULT_INVERSE_ABSOLUTE_ACCURacy);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
188	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  sd,  solverAbsoluteAccuracy)  {  [CE]  <identifier>  expected  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  sd,  solverAbsoluteAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  sd,  solverAbsoluteAccuracy)  {	  public    NormalDistributionImpl(double    sd,    double    standardDeviation,    double    sd,    inverseCumAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
189	[BUG]  [BUGGY]  super(sd,  standardDeviation,  sd,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  super(sd,  standardDeviation,  sd,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(sd,  standardDeviation,  sd,  solverAbsoluteAccuracy);	  public    NormalDistributionImpl(double    sd,    double    standardDeviation,    double    sd,    inverseCumAccuracy)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
190	[BUG]  [BUGGY]  this(sd,  standardDeviation,  sd,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]        [BUGGY]  this(sd,  standardDeviation,  sd,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(sd,  standardDeviation,  sd,  solverAbsoluteAccuracy);	  public    NormalDistributionImpl(double    sd,    double    standardDeviation,    double    sd,    inverseCumAccuracy)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
191	[BUG]  [BUGGY]  super(sd,  standardDeviation,  sd,  solverAbsoluteAccuracy)  {  [CE]  illegal  start  of  type  [FE]                        ConvergenceException      [CONTEXT]        [BUGGY]  super(sd,  standardDeviation,  sd,  solverAbsoluteAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(sd,  standardDeviation,  sd,  solverAbsoluteAccuracy)  {	  public    NormalDistributionImpl(double    sd,    double    standardDeviation,    double    sd,    inverseCumAccuracy)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
192	[BUG]  [BUGGY]  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.standardDeviation  =  standardDeviation;  [CE]  illegal  start  of  type  [FE]            NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.standardDeviation  =  standardDeviation;  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.standardDeviation  =  standardDeviation;	  public    NormalDistributionImpl(double    sd,    double    mean,    double    inverseCumAccuracy)    {    if    (sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    this.mean    =    mean;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
193	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
194	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);	  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
195	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_STANDARD_DEVIATION);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_STANDARD_DEVIATION);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_STANDARD_DEVIATION);	  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
196	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.create(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  this.standardDeviation    =    StandardDistributionImpl.create(sd,    solverAbsoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
197	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(sd,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(sd,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.create(sd,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  this.standardDeviation    =    StandardDistributionImpl.create(sd,    solverAbsoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
198	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  solverAbsoluteAccuracy,  double  sd,  inverseCumAccuracy)  {  [CE]  <identifier>  expected  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  solverAbsoluteAccuracy,  double  sd,  inverseCumAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  solverAbsoluteAccuracy,  double  sd,  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    double    solverAbsoluteAccuracy,    double    sd,    inverseCumAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
199	[BUG]  [BUGGY]  this(SQRT2PI,  sd,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  this(SQRT2PI,  sd,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(SQRT2PI,  sd,  solverAbsoluteAccuracy);	  this(SQRT2PI,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
200	[BUG]  [BUGGY]  this(sd,  SQRT2PI,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  this(sd,  SQRT2PI,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(sd,  SQRT2PI,  inverseCumAccuracy);	  this(SQRT2PI,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
201	[BUG]  [BUGGY]  this(SQRT2PI,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]        [BUGGY]  this(SQRT2PI,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(SQRT2PI,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  inverseCumAccuracy);	  this(SQRT2PI,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
202	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);	  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    sd);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
203	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  inverseCumAccuracy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  inverseCumAccuracy);	  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    sd);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
204	[BUG]  [BUGGY]  Public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  sd)  {  [CE]  variable  sd  is  already  defined  in  method  NormalDistributionImpl  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  Public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  sd)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	Public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  sd)  {	  public    NormalDistributionImpl(double    sd,    double    standardDeviation,    double    sd)    {    	non-compiled	[CE]  variable  sd  is  already  defined  in  method  NormalDistributionImpl	4	None	replace
205	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  long  sd)  {  [CE]  variable  sd  is  already  defined  in  constructor  NormalDistributionImpl  [FE]                      ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  long  sd)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  standardDeviation,  long  sd)  {	  public    NormalDistributionImpl(double    sd,    double    standardDeviation,    double    sd)    {    	non-compiled	[CE]  variable  sd  is  already  defined  in  constructor  NormalDistributionImpl	4	None	replace
206	[BUG]  [BUGGY]  this(mean,  standardDeviation,  sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  this(mean,  standardDeviation,  sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(mean,  standardDeviation,  sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    sd,    solverAbsoluteAccuracy,    double    inverseCumAccuracy)    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
207	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  mean,  solverAbsoluteAccuracy,  inverseCumAccuracy)  {  [CE]  <identifier>  expected  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  mean,  solverAbsoluteAccuracy,  inverseCumAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  standardDeviation,  mean,  solverAbsoluteAccuracy,  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    sd,    solverAbsoluteAccuracy,    double    inverseCumAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	87	None	replace
208	[BUG]  [BUGGY]  super(mean,  standardDeviation,  sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  super(mean,  standardDeviation,  sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(mean,  standardDeviation,  sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    sd,    solverAbsoluteAccuracy,    double    inverseCumAccuracy)    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
209	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  int  solverAbsoluteAccuracy)  {  [CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  int  solverAbsoluteAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  standardDeviation,  int  solverAbsoluteAccuracy)  {	  public    NormalDistributionImpl(double    sd,    double    standardDeviation)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)	1	None	replace
210	[BUG]  [BUGGY]  public  NormalDistributionImpl(long  sd,  long  standardDeviation)  {  [CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(long  sd,  long  standardDeviation)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(long  sd,  long  standardDeviation)  {	  public    NormalDistributionImpl(double    sd,    double    standardDeviation)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)	1	None	replace
211	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  long  serialVersionUID)  {  [CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  long  serialVersionUID)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  standardDeviation,  long  serialVersionUID)  {	  public    NormalDistributionImpl(double    sd,    double    standardDeviation)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)	1	None	replace
212	[BUG]  [BUGGY]  this(null,  standardDeviation,  sd,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]        [BUGGY]  this(null,  standardDeviation,  sd,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(null,  standardDeviation,  sd,  solverAbsoluteAccuracy);	  this(mean,    standardDeviation,    sd,    solverAbsoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
213	[BUG]  [BUGGY]  this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  standardDeviation,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  standardDeviation,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  standardDeviation,  solverAbsoluteAccuracy);	  this(mean,    standardDeviation,    sd,    solverAbsoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
214	[BUG]  [BUGGY]  this(null,  mean,  standardDeviation,  sd,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  this(null,  mean,  standardDeviation,  sd,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(null,  mean,  standardDeviation,  sd,  solverAbsoluteAccuracy);	  this(mean,    standardDeviation,    sd,    solverAbsoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
215	[BUG]  [BUGGY]  this(null,  standardDeviation,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  this(null,  standardDeviation,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(null,  standardDeviation,  solverAbsoluteAccuracy,  inverseCumAccuracy);	  this(mean,    standardDeviation,    solverAbsoluteAccuracy,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
216	[BUG]  [BUGGY]  this(sd,  standardDeviation,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  this(sd,  standardDeviation,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(sd,  standardDeviation,  solverAbsoluteAccuracy,  inverseCumAccuracy);	  this(mean,    standardDeviation,    solverAbsoluteAccuracy,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
217	[BUG]  [BUGGY]  this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  standardDeviation,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  standardDeviation,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  standardDeviation,  solverAbsoluteAccuracy);	  this(mean,    standardDeviation,    solverAbsoluteAccuracy,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
218	[BUG]  [BUGGY]  this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);	  this(mean,    standardDeviation,    solverAbsoluteAccuracy,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
219	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  inverseCumAccuracy,  sd);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  inverseCumAccuracy,  sd);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  inverseCumAccuracy,  sd);	  this.standardDeviation    =    StandardDistributionImpl.newInstance(d,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
220	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(d,  sd,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(d,  sd,  solverAbsoluteAccuracy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.newInstance(d,  sd,  solverAbsoluteAccuracy);	  this.standardDeviation    =    StandardDistributionImpl.newInstance(d,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
221	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {  if  (sd  <  =  1)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  expression  [FE]              NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {  if  (sd  <  =  1)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {  if  (sd  <  =  1)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  public    NormalDistributionImpl(double    sd,    double    mean,    double    inverseCumAccuracy)    {    if    (sd    <    =    1)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
222	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  this.standardDeviation    =    StandardDistributionImpl.newInstance(sd,    solverAbsoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
223	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  this.standardDeviation    =    StandardDistributionImpl.newInstance(sd,    solverAbsoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
224	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  long  solverAbsoluteAccuracy)  {  [CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)  [FE]        NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  long  solverAbsoluteAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  standardDeviation,  long  solverAbsoluteAccuracy)  {	  public    NormalDistributionImpl(double    sd,    double    standardDeviation,    double    inverseCumAccuracy)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)	24	None	replace
225	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  solverAbsoluteAccuracy)  {  [CE]  <identifier>  expected  [FE]          NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  solverAbsoluteAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  standardDeviation,  solverAbsoluteAccuracy)  {	  public    NormalDistributionImpl(double    sd,    double    standardDeviation,    double    inverseCumAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
226	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  mean,  double  standardDeviation,  double  inverseCumAccuracy)  {  [CE]  cannot  find  symbol  sd  [FE]            NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  mean,  double  standardDeviation,  double  inverseCumAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  mean,  double  standardDeviation,  double  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double    sd,    double    standardDeviation,    double    inverseCumAccuracy)    {    	non-compiled	[CE]  cannot  find  symbol  sd	24	None	replace
227	[BUG]  [BUGGY]  this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation,  inverseCumAccuracy);	  this(mean,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
228	[BUG]  [BUGGY]  this.standardDeviation  =  normalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  normalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  normalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    NormalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
229	[BUG]  [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  NormalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    NormalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
230	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  2;  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  2;  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  2;	  this.standardDeviation    =    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    1;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
231	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1L;  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1L;  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1L;	  this.standardDeviation    =    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    1;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
232	[BUG]  [BUGGY]  public  NormalDistributionImpl(double[]  sd,  double  standardDeviation,  double  sd,  solverAbsoluteAccuracy)  {  [CE]  <identifier>  expected  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double[]  sd,  double  standardDeviation,  double  sd,  solverAbsoluteAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double[]  sd,  double  standardDeviation,  double  sd,  solverAbsoluteAccuracy)  {	  public    NormalDistributionImpl(double[]    sd,    double    standardDeviation,    double    sd,    inverseCumAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	78	None	replace
233	[BUG]  [BUGGY]  public  NormalDistributionImpl(double[]  sd,  double  standardDeviation,  double  solverAbsoluteAccuracy,  double  sd)  {  [CE]  variable  sd  is  already  defined  in  constructor  NormalDistributionImpl  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double[]  sd,  double  standardDeviation,  double  solverAbsoluteAccuracy,  double  sd)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double[]  sd,  double  standardDeviation,  double  solverAbsoluteAccuracy,  double  sd)  {	  public    NormalDistributionImpl(double[]    sd,    double    standardDeviation,    double    sd,    inverseCumAccuracy)    {    	non-compiled	[CE]  variable  sd  is  already  defined  in  constructor  NormalDistributionImpl	78	None	replace
234	[BUG]  [BUGGY]  this(new  double[]  {  sd,  standardDeviation,  sd,  inverseCumAccuracy  }  );  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  this(new  double[]  {  sd,  standardDeviation,  sd,  inverseCumAccuracy  }  );  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(new  double[]  {  sd,  standardDeviation,  sd,  inverseCumAccuracy  }  );	  public    NormalDistributionImpl(double[]    sd,    double    standardDeviation,    double    sd,    inverseCumAccuracy)    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
235	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  mean,  solverAbsoluteAccuracy)  {  [CE]  <identifier>  expected  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  mean,  solverAbsoluteAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  standardDeviation,  mean,  solverAbsoluteAccuracy)  {	  public    NormalDistributionImpl(double    sd,    double    standardDeviation,    double    mean)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
236	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  normalDeviation,  double  solverAbsoluteAccuracy)  {  [CE]  cannot  find  symbol  inverseCumAccuracy  [FE]            NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  normalDeviation,  double  solverAbsoluteAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  normalDeviation,  double  solverAbsoluteAccuracy)  {	  public    NormalDistributionImpl(double    sd,    double    normalDeviation,    double    inverseCumAccuracy)    {    	non-compiled	[CE]  cannot  find  symbol  inverseCumAccuracy	26	None	replace
237	[BUG]  [BUGGY]  Public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  Public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	Public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double    sd,    double    normalDeviation,    double    inverseCumAccuracy)    {    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
238	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  standardDeviation,  double  sd,  double  inverseCumAccuracy)  {  [CE]  variable  mean  might  not  have  been  initialized  [FE]                NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  standardDeviation,  double  sd,  double  inverseCumAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  standardDeviation,  double  sd,  double  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double    sd,    double    normalDeviation,    double    inverseCumAccuracy)    {    	non-compiled	[CE]  variable  mean  might  not  have  been  initialized	26	None	replace
239	[BUG]  [BUGGY]  this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  solverAbsoluteAccuracy);	  this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
240	[BUG]  [BUGGY]  this(SQRT2PI,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  this(SQRT2PI,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(SQRT2PI,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
241	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  s,  double  standardDeviation,  solverAbsoluteAccuracy,  sd,  inverseCumAccuracy)  {  [CE]  <identifier>  expected  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  s,  double  standardDeviation,  solverAbsoluteAccuracy,  sd,  inverseCumAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  s,  double  standardDeviation,  solverAbsoluteAccuracy,  sd,  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double    s,    double    standardDeviation,    mean,    sd,    inverseCumAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	74	None	replace
242	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  s,  double  standardDeviation,  solverAbsoluteAccuracy,  mean,  sd,  inverseCumAccuracy)  {  [CE]  <identifier>  expected  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  s,  double  standardDeviation,  solverAbsoluteAccuracy,  mean,  sd,  inverseCumAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  s,  double  standardDeviation,  solverAbsoluteAccuracy,  mean,  sd,  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double    s,    double    standardDeviation,    mean,    sd,    inverseCumAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	74	None	replace
243	[BUG]  [BUGGY]  this(s,  standardDeviation,  solverAbsoluteAccuracy,  sd,  inverseCumAccuracy)  {  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  this(s,  standardDeviation,  solverAbsoluteAccuracy,  sd,  inverseCumAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(s,  standardDeviation,  solverAbsoluteAccuracy,  sd,  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double    s,    double    standardDeviation,    mean,    sd,    inverseCumAccuracy)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
244	[BUG]  [BUGGY]  super(s,  standardDeviation,  solverAbsoluteAccuracy,  sd,  inverseCumAccuracy)  {  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  super(s,  standardDeviation,  solverAbsoluteAccuracy,  sd,  inverseCumAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(s,  standardDeviation,  solverAbsoluteAccuracy,  sd,  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double    s,    double    standardDeviation,    mean,    sd,    inverseCumAccuracy)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
245	[BUG]  [BUGGY]  Public  NormalDistributionImpl(double  sd,  double  mean,  double  standardDeviation)  {  [CE]  cannot  find  symbol  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  Public  NormalDistributionImpl(double  sd,  double  mean,  double  standardDeviation)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	Public  NormalDistributionImpl(double  sd,  double  mean,  double  standardDeviation)  {	  public    NormalDistributionImpl(double    sd,    double    mean,    double    standardDeviation)    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
246	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);	  super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    standardDeviation);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
247	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  standardDeviation);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  standardDeviation);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  standardDeviation);	  super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    standardDeviation);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
248	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation,  solverAbsoluteAccuracy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation,  solverAbsoluteAccuracy);	  super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    standardDeviation);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
249	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(inverseCumAccuracy,  sd);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(inverseCumAccuracy,  sd);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.newInstance(inverseCumAccuracy,  sd);	  this.standardDeviation    =    StandardDistributionImpl.newInstance(resolverAbsoluteAccuracy,    sd);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
250	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(resolverAbsoluteAccuracy,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(resolverAbsoluteAccuracy,  sd,  inverseCumAccuracy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.newInstance(resolverAbsoluteAccuracy,  sd,  inverseCumAccuracy);	  this.standardDeviation    =    StandardDistributionImpl.newInstance(resolverAbsoluteAccuracy,    sd);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
251	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(null,  solverAbsoluteAccuracy,  sd);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(null,  solverAbsoluteAccuracy,  sd);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.newInstance(null,  solverAbsoluteAccuracy,  sd);	  this.standardDeviation    =    StandardDistributionImpl.newInstance(resolverAbsoluteAccuracy,    sd);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
252	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {  if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.METHOD_DEVIATION,  sd);  }  [CE]  illegal  start  of  expression  [FE]                NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {  if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.METHOD_DEVIATION,  sd);  }  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {  if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.METHOD_DEVIATION,  sd);  }	  public    NormalDistributionImpl(double    sd,    double    mean,    double    inverseCumAccuracy)    {    if    (sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.METHOD_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
253	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  mean,  double  standardDeviation)  {  if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.METHOD_DEVIATION,  sd);  }  [CE]  illegal  start  of  expression  [FE]                  NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  mean,  double  standardDeviation)  {  if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.METHOD_DEVIATION,  sd);  }  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  mean,  double  standardDeviation)  {  if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.METHOD_DEVIATION,  sd);  }	  public    NormalDistributionImpl(double    sd,    double    mean,    double    inverseCumAccuracy)    {    if    (sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.METHOD_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
254	[BUG]  [BUGGY]  super(LocalizedFormats.SQRT2PI,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.SQRT2PI,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.SQRT2PI,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  super(LocalizedFormats.SQRT2PI,    sd);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
255	[BUG]  [BUGGY]  super(LocalizedFormats.SQRT2PI,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.SQRT2PI,  sd,  inverseCumAccuracy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.SQRT2PI,  sd,  inverseCumAccuracy);	  super(LocalizedFormats.SQRT2PI,    sd);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
256	[BUG]  [BUGGY]  super(LocalizedFormats.SQRT2PI,  sd,  true);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.SQRT2PI,  sd,  true);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.SQRT2PI,  sd,  true);	  super(LocalizedFormats.SQRT2PI,    sd);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
257	[BUG]  [BUGGY]  super(LocalizedFormats.SQRT2PI,  sd,  standardDeviation);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.SQRT2PI,  sd,  standardDeviation);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.SQRT2PI,  sd,  standardDeviation);	  super(LocalizedFormats.SQRT2PI,    sd);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
258	[BUG]  [BUGGY]  public  NormalDistributionImpl(long  sd,  long  standardDeviation,  double  solverAbsoluteAccuracy)  {  [CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)  [FE]            NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(long  sd,  long  standardDeviation,  double  solverAbsoluteAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(long  sd,  long  standardDeviation,  double  solverAbsoluteAccuracy)  {	  public    NormalDistributionImpl(long    sd,    long    standardDeviation,    double    inverseCumAccuracy)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)	81	None	replace
259	[BUG]  [BUGGY]  public  NormalDistributionImpl(long  sd,  long  standardDeviation,  solverAbsoluteAccuracy)  {  [CE]  <identifier>  expected  [FE]              NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(long  sd,  long  standardDeviation,  solverAbsoluteAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(long  sd,  long  standardDeviation,  solverAbsoluteAccuracy)  {	  public    NormalDistributionImpl(long    sd,    long    standardDeviation,    double    inverseCumAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	81	None	replace
260	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  long  standardDeviation,  double  inverseCumAccuracy)  {  [CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)  [FE]                NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  long  standardDeviation,  double  inverseCumAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  long  standardDeviation,  double  inverseCumAccuracy)  {	  public    NormalDistributionImpl(long    sd,    long    standardDeviation,    double    inverseCumAccuracy)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)	81	None	replace
261	[BUG]  [BUGGY]  public  NormalDistributionImpl(long  sd,  int  standardDeviation,  double  inverseCumAccuracy)  {  [CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)  [FE]                  NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(long  sd,  int  standardDeviation,  double  inverseCumAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(long  sd,  int  standardDeviation,  double  inverseCumAccuracy)  {	  public    NormalDistributionImpl(long    sd,    long    standardDeviation,    double    inverseCumAccuracy)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)	81	None	replace
262	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);	  super(LocalizedFormats.STANDARD_DEVIATION,    sd,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
263	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);	  super(LocalizedFormats.STANDARD_DEVIATION,    sd,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
264	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
265	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;	  this.standardDeviation    =    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
266	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  s,  double  standardDeviation,  solverAbsoluteAccuracy,  sd)  {  [CE]  <identifier>  expected  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  s,  double  standardDeviation,  solverAbsoluteAccuracy,  sd)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  s,  double  standardDeviation,  solverAbsoluteAccuracy,  sd)  {	  public    NormalDistributionImpl(double    s,    double    standardDeviation,    mean,    sd,    inverseCumAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	74	None	replace
267	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  s,  double  standardDeviation,  double  solverAbsoluteAccuracy)  {  [CE]  cannot  find  symbol  sd  [FE]            ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  s,  double  standardDeviation,  double  solverAbsoluteAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  s,  double  standardDeviation,  double  solverAbsoluteAccuracy)  {	  public    NormalDistributionImpl(double    s,    double    standardDeviation,    double    sd,    solverAbsoluteAccuracy)    {    	non-compiled	[CE]  cannot  find  symbol  sd	77	None	replace
268	[BUG]  [BUGGY]  public  NormalDistributionImpl(double[]  s,  double  standardDeviation,  double  sd,  solverAbsoluteAccuracy)  {  [CE]  <identifier>  expected  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double[]  s,  double  standardDeviation,  double  sd,  solverAbsoluteAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double[]  s,  double  standardDeviation,  double  sd,  solverAbsoluteAccuracy)  {	  public    NormalDistributionImpl(double    s,    double    standardDeviation,    double    sd,    solverAbsoluteAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	77	None	replace
269	[BUG]  [BUGGY]  super(LocalizedFormats.SQRT2PI,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.SQRT2PI,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.SQRT2PI,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);	  super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    standardDeviation);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
270	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);	  super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    standardDeviation);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
271	[BUG]  [BUGGY]  this(SQRT2PI,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  this(SQRT2PI,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(SQRT2PI,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);	  this(SQRT2PI,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
272	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURacy,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURacy,  inverseCumAccuracy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURacy,  inverseCumAccuracy);	  super(LocalizedFormats.STANDARD_DEVIATION,    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,    DEFAULT_INVERSE_ABSOLUTE_ACCURacy);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
273	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  mean,  double  standardDeviation,  solverAbsoluteAccuracy,  sd)  {  [CE]  <identifier>  expected  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  mean,  double  standardDeviation,  solverAbsoluteAccuracy,  sd)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  mean,  double  standardDeviation,  solverAbsoluteAccuracy,  sd)  {	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    double    solverAbsoluteAccuracy,    double    sd)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
274	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  solverAbsoluteAccuracy,  double  mean)  {  [CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  solverAbsoluteAccuracy,  double  mean)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  solverAbsoluteAccuracy,  double  mean)  {	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    double    solverAbsoluteAccuracy,    double    sd)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)	10	None	replace
275	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  mean,  double  sd,  standardDeviation,  solverAbsoluteAccuracy,  double  sd)  {  [CE]  <identifier>  expected  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  mean,  double  sd,  standardDeviation,  solverAbsoluteAccuracy,  double  sd)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  mean,  double  sd,  standardDeviation,  solverAbsoluteAccuracy,  double  sd)  {	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    double    solverAbsoluteAccuracy,    double    sd)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
276	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
277	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDeviation.NEGATIVE_INVERSE_ABSOLUTE_ACCURACY  |  StandardDeviation.NEGATIVE_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDeviation.NEGATIVE_INVERSE_ABSOLUTE_ACCURACY  |  StandardDeviation.NEGATIVE_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDeviation.NEGATIVE_INVERSE_ABSOLUTE_ACCURACY  |  StandardDeviation.NEGATIVE_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    StandardDeviation.NEGATIVE_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
278	[BUG]  [BUGGY]  super(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  super(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);	  super(sd,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
279	[BUG]  [BUGGY]  super(null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  super(null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);	  super(sd,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
280	[BUG]  [BUGGY]  super(SQRT2PI,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]        [BUGGY]  super(SQRT2PI,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(SQRT2PI,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);	  super(sd,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
281	[BUG]  [BUGGY]  this(sd,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  this(sd,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(sd,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);	  this(sd,    inverseCumAccuracy,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    standardDeviation);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
282	[BUG]  [BUGGY]  this(null,  inverseCumAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  this(null,  inverseCumAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(null,  inverseCumAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);	  this(sd,    inverseCumAccuracy,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    standardDeviation);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
283	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  mean,  standardDeviation,  long  solverAbsoluteAccuracy)  {  [CE]  <identifier>  expected  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  mean,  standardDeviation,  long  solverAbsoluteAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  mean,  standardDeviation,  long  solverAbsoluteAccuracy)  {	  public    NormalDistributionImpl(double    sd,    double    mean,    int    standardDeviation)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
284	[BUG]  [BUGGY]  this(null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]        [BUGGY]  this(null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  solverAbsoluteAccuracy);	  this(mean,    standardDeviation,    sd,    solverAbsoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
285	[BUG]  [BUGGY]  this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  standardDeviation);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  standardDeviation);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  standardDeviation);	  this(mean,    standardDeviation,    sd,    solverAbsoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
286	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  LocalizedFormats.DEFAULT_STANDARD_DEVIATION,  sd);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  LocalizedFormats.DEFAULT_STANDARD_DEVIATION,  sd);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  LocalizedFormats.DEFAULT_STANDARD_DEVIATION,  sd);	  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    LocalizedFormats.STANDARD_DEVIATION);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
287	[BUG]  [BUGGY]  public  NormalDistributionImpl(long  sd,  long  standardDeviation,  double  mean,  inverseCumAccuracy)  {  [CE]  <identifier>  expected  [FE]            ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(long  sd,  long  standardDeviation,  double  mean,  inverseCumAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(long  sd,  long  standardDeviation,  double  mean,  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double    sd,    double    standardDeviation,    double    mean,    inverseCumAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	73	None	replace
288	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURacy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURacy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURacy);	  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
289	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  SQRT2PI,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  SQRT2PI,  inverseCumAccuracy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  SQRT2PI,  inverseCumAccuracy);	  super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    SQRT2PI);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
290	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  int  sd)  {  [CE]  variable  sd  is  already  defined  in  constructor  NormalDistributionImpl  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  int  sd)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  standardDeviation,  int  sd)  {	  public    NormalDistributionImpl(double    sd,    double    standardDeviation,    double    sd)    {    	non-compiled	[CE]  variable  sd  is  already  defined  in  constructor  NormalDistributionImpl	4	None	replace
291	[BUG]  [BUGGY]  super(LocalizedFormats.SQRT2PI,  sd,  null);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.SQRT2PI,  sd,  null);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.SQRT2PI,  sd,  null);	  super(LocalizedFormats.SQRT2PI,    sd);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
292	[BUG]  [BUGGY]  public  NormalDistributionImpl(double[]  sd,  double  standardDeviation,  solverAbsoluteAccuracy,  double  inverseCumAccuracy)  {  [CE]  <identifier>  expected  [FE]        NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double[]  sd,  double  standardDeviation,  solverAbsoluteAccuracy,  double  inverseCumAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double[]  sd,  double  standardDeviation,  solverAbsoluteAccuracy,  double  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double[]    sd,    double    standardDeviation,    double    inverseCumAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	79	None	replace
293	[BUG]  [BUGGY]  public  NormalDistributionImpl(double[]  sd,  double  standardDeviation,  solverAbsoluteAccuracy)  {  [CE]  <identifier>  expected  [FE]          NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double[]  sd,  double  standardDeviation,  solverAbsoluteAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double[]  sd,  double  standardDeviation,  solverAbsoluteAccuracy)  {	  public    NormalDistributionImpl(double[]    sd,    double    standardDeviation,    double    inverseCumAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	79	None	replace
294	[BUG]  [BUGGY]  public  NormalDistributionImpl(double[]  sd,  double  solverAbsoluteAccuracy,  double  standardDeviation,  double  inverseCumAccuracy)  {  [CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)  [FE]            NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double[]  sd,  double  solverAbsoluteAccuracy,  double  standardDeviation,  double  inverseCumAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double[]  sd,  double  solverAbsoluteAccuracy,  double  standardDeviation,  double  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double[]    sd,    double    standardDeviation,    double    inverseCumAccuracy)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)	79	None	replace
295	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);	  super(LocalizedFormats.STANDARD_DEVIATION,    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,    standardDeviation);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
296	[BUG]  [BUGGY]  super(LocalizedFormats.SQRT2PI,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.SQRT2PI,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.SQRT2PI,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);	  super(LocalizedFormats.STANDARD_DEVIATION,    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,    standardDeviation);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
297	[BUG]  [BUGGY]  super(DateTimeUtils.currentTimeMillis(),  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  super(DateTimeUtils.currentTimeMillis(),  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(DateTimeUtils.currentTimeMillis(),  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);	  super(LocalizedFormats.STANDARD_DEVIATION,    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,    standardDeviation);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
298	[BUG]  [BUGGY]  this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);	  this(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
299	[BUG]  [BUGGY]  this(null,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  this(null,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(null,  inverseCumAccuracy);	  this(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
300	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  s,  double  sd,  standardDeviation)  {  [CE]  <identifier>  expected  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  s,  double  sd,  standardDeviation)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  s,  double  sd,  standardDeviation)  {	  public    NormalDistributionImpl(double    s,    double    sd,    double    standardDeviation)    {    	non-compiled	[CE]  <identifier>  expected	92	None	replace
301	[BUG]  [BUGGY]  this.standardDeviation  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;	  this.standardDeviation    =    inverseCumAccuracy    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
302	[BUG]  [BUGGY]  super(inverseCumAccuracy,  sd);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]        [BUGGY]  super(inverseCumAccuracy,  sd);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(inverseCumAccuracy,  sd);	  super(SQRT2PI,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
303	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDeviation.NO_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDeviation.NO_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDeviation.NO_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    StandardDeviation;    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
304	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  inverseCumAccuracy)  {  [CE]  <identifier>  expected  [FE]        NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  inverseCumAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  standardDeviation,  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double    sd,    double    standardDeviation,    double    inverseCumAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
305	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {  if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVI  [CE]  illegal  start  of  expression  [FE]                NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {  if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVI  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {  if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVI	  public    NormalDistributionImpl(double    sd,    double    mean,    double    inverseCumAccuracy)    {    if    (sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.METHOD_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
306	[BUG]  [BUGGY]  this(LocalizedFormats.DECEMBER,  sd,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  this(LocalizedFormats.DECEMBER,  sd,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(LocalizedFormats.DECEMBER,  sd,  solverAbsoluteAccuracy);	  this(NumberFormat.DECEMBER,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
307	[BUG]  [BUGGY]  this(NumberFormat.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]        [BUGGY]  this(NumberFormat.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(NumberFormat.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  inverseCumAccuracy);	  this(NumberFormat.DECEMBER,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
308	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  -  1L;  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  -  1L;  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  -  1L;	  this.standardDeviation    =    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY    -    1;    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
309	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  mean,  double  solverAbsoluteAccuracy)  {  if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  expression  [FE]        NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  mean,  double  solverAbsoluteAccuracy)  {  if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  mean,  double  solverAbsoluteAccuracy)  {  if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  public    NormalDistributionImpl(double    sd,    double    mean,    double    inverseCumAccuracy)    {    if    (sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    this.standardDeviation    =    sd;    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
310	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  mean,  double  solverAbsoluteAccuracy)  {  if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVI  [CE]  illegal  start  of  expression  [FE]          NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  mean,  double  solverAbsoluteAccuracy)  {  if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVI  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  mean,  double  solverAbsoluteAccuracy)  {  if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVI	  public    NormalDistributionImpl(double    sd,    double    mean,    double    inverseCumAccuracy)    {    if    (sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    this.standardDeviation    =    sd;    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
311	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  mean,  double  solverAbsoluteAccuracy)  {  if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  s  [CE]  illegal  start  of  expression  [FE]            NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  mean,  double  solverAbsoluteAccuracy)  {  if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  s  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  mean,  double  solverAbsoluteAccuracy)  {  if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  s	  public    NormalDistributionImpl(double    sd,    double    mean,    double    inverseCumAccuracy)    {    if    (sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    this.standardDeviation    =    sd;    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
312	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  mean)  {  if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  expression  [FE]              NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  mean)  {  if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  mean)  {  if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  public    NormalDistributionImpl(double    sd,    double    mean,    double    inverseCumAccuracy)    {    if    (sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    this.standardDeviation    =    sd;    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
313	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  solverAbsoluteAccuracy,  double  sd)  {  [CE]  variable  sd  is  already  defined  in  constructor  NormalDistributionImpl  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  solverAbsoluteAccuracy,  double  sd)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  solverAbsoluteAccuracy,  double  sd)  {	  public    NormalDistributionImpl(double    sd,    double    standardDeviation,    double    sd,    inverseCumAccuracy)    {    	non-compiled	[CE]  variable  sd  is  already  defined  in  constructor  NormalDistributionImpl	12	None	replace
314	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  solverAbsoluteAccuracy,  double  sd,  inverseCumAccuracy)  {  [CE]  <identifier>  expected  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  solverAbsoluteAccuracy,  double  sd,  inverseCumAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  solverAbsoluteAccuracy,  double  sd,  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double    sd,    double    standardDeviation,    double    sd,    inverseCumAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
315	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(null,  inverseCumAccuracy,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(null,  inverseCumAccuracy,  solverAbsoluteAccuracy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.create(null,  inverseCumAccuracy,  solverAbsoluteAccuracy);	  this.standardDeviation    =    StandardDistributionImpl.create(null,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
316	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(inverseCumAccuracy,  sd);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(inverseCumAccuracy,  sd);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.create(inverseCumAccuracy,  sd);	  this.standardDeviation    =    StandardDistributionImpl.create(null,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
317	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  mean,  double  standardDeviation,  sd,  solverAbsoluteAccuracy,  inverseCumAccuracy)  {  [CE]  <identifier>  expected  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  mean,  double  standardDeviation,  sd,  solverAbsoluteAccuracy,  inverseCumAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  mean,  double  standardDeviation,  sd,  solverAbsoluteAccuracy,  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    sd,    solverAbsoluteAccuracy,    double    inverseCumAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	87	None	replace
318	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  s,  double  standardDeviation,  mean,  solverAbsoluteAccuracy,  inverseCumAccuracy)  {  [CE]  <identifier>  expected  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  s,  double  standardDeviation,  mean,  solverAbsoluteAccuracy,  inverseCumAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  s,  double  standardDeviation,  mean,  solverAbsoluteAccuracy,  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    sd,    solverAbsoluteAccuracy,    double    inverseCumAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	87	None	replace
319	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(mean,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(mean,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.newInstance(mean,  solverAbsoluteAccuracy,  inverseCumAccuracy);	  this.standardDeviation    =    StandardDistributionImpl.newInstance(mean,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
320	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  boolean  solverAbsoluteAccuracy)  {  [CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  boolean  solverAbsoluteAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  standardDeviation,  boolean  solverAbsoluteAccuracy)  {	  public    NormalDistributionImpl(double    sd,    double    standardDeviation)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)	1	None	replace
321	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  solverAbsoluteAccuracy,  double  sd,  inverseCumAccuracy)  {  [CE]  <identifier>  expected  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  solverAbsoluteAccuracy,  double  sd,  inverseCumAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  standardDeviation,  solverAbsoluteAccuracy,  double  sd,  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    double    solverAbsoluteAccuracy,    double    sd,    inverseCumAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
322	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  s,  double  standardDeviation,  solverAbsoluteAccuracy,  double  sd,  inverseCumAccuracy)  {  [CE]  <identifier>  expected  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  s,  double  standardDeviation,  solverAbsoluteAccuracy,  double  sd,  inverseCumAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  s,  double  standardDeviation,  solverAbsoluteAccuracy,  double  sd,  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    double    solverAbsoluteAccuracy,    double    sd,    inverseCumAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
323	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  mean,  double  standardDeviation,  solverAbsoluteAccuracy,  sd,  solverAbsoluteAccuracy)  {  [CE]  <identifier>  expected  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  mean,  double  standardDeviation,  solverAbsoluteAccuracy,  sd,  solverAbsoluteAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  mean,  double  standardDeviation,  solverAbsoluteAccuracy,  sd,  solverAbsoluteAccuracy)  {	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    double    solverAbsoluteAccuracy,    double    sd,    inverseCumAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
324	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  mean,  double  standardDeviation,  solverAbsoluteAccuracy,  double  sd,  inverseCumAccuracy)  {  [CE]  <identifier>  expected  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  mean,  double  standardDeviation,  solverAbsoluteAccuracy,  double  sd,  inverseCumAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  mean,  double  standardDeviation,  solverAbsoluteAccuracy,  double  sd,  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    double    solverAbsoluteAccuracy,    double    sd,    inverseCumAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
325	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(resolverAbsoluteAccuracy,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(resolverAbsoluteAccuracy,  inverseCumAccuracy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.newInstance(resolverAbsoluteAccuracy,  inverseCumAccuracy);	  this.standardDeviation    =    StandardDistributionImpl.newInstance(null,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
326	[BUG]  [BUGGY]  this(null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]        NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  this(null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  this(null,    null,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
327	[BUG]  [BUGGY]  public  NormalDistributionImpl(long  sd,  long  standardDeviation,  solverAbsoluteAccuracy,  double  inverseCumAccuracy)  {  [CE]  <identifier>  expected  [FE]            NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(long  sd,  long  standardDeviation,  solverAbsoluteAccuracy,  double  inverseCumAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(long  sd,  long  standardDeviation,  solverAbsoluteAccuracy,  double  inverseCumAccuracy)  {	  public    NormalDistributionImpl(long    sd,    long    standardDeviation,    double    inverseCumAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	81	None	replace
328	[BUG]  [BUGGY]  public  NormalDistributionImpl(long  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {  [CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)  [FE]              NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(long  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(long  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {	  public    NormalDistributionImpl(long    sd,    long    standardDeviation,    double    inverseCumAccuracy)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)	81	None	replace
329	[BUG]  [BUGGY]  this(null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  this(null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);	  this(sd,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
330	[BUG]  [BUGGY]  this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);	  this(sd,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
331	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);	  super(LocalizedFormats.STANDARD_DEVIATION,    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
332	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);	  super(LocalizedFormats.STANDARD_DEVIATION,    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
333	[BUG]  [BUGGY]  Public  NormalDistributionImpl(double  sd,  double  standardDeviation,  solverAbsoluteAccuracy)  {  [CE]  <identifier>  expected  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  Public  NormalDistributionImpl(double  sd,  double  standardDeviation,  solverAbsoluteAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	Public  NormalDistributionImpl(double  sd,  double  standardDeviation,  solverAbsoluteAccuracy)  {	  Public    NormalDistributionImpl(double    sd,    double    standardDeviation)    {    	non-compiled	[CE]  <identifier>  expected	85	None	replace
334	[BUG]  [BUGGY]  this(null,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  this(null,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(null,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);	  this(null,    sd,    inverseCumAccuracy,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
335	[BUG]  [BUGGY]  this(null,  DEFAULT_INVERSE_ABSOLUTE_ACCURacy,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]        [BUGGY]  this(null,  DEFAULT_INVERSE_ABSOLUTE_ACCURacy,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(null,  DEFAULT_INVERSE_ABSOLUTE_ACCURacy,  inverseCumAccuracy);	  this(null,    sd,    inverseCumAccuracy,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
336	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(null,  inverseCumAccuracy,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(null,  inverseCumAccuracy,  solverAbsoluteAccuracy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.newInstance(null,  inverseCumAccuracy,  solverAbsoluteAccuracy);	  this.standardDeviation    =    StandardDistributionImpl.newInstance(sd,    inverseCumAccuracy,    solverAbsoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
337	[BUG]  [BUGGY]  public  NormalDistributionImpl(double[]  sd,  double  solverAbsoluteAccuracy,  double  sd,  inverseCumAccuracy)  {  [CE]  <identifier>  expected  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double[]  sd,  double  solverAbsoluteAccuracy,  double  sd,  inverseCumAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double[]  sd,  double  solverAbsoluteAccuracy,  double  sd,  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double[]    sd,    double    standardDeviation,    double    sd,    inverseCumAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	78	None	replace
338	[BUG]  [BUGGY]  public  NormalDistributionImpl(double[]  sd,  double  valueDeviation,  double  sd,  inverseCumAccuracy)  {  [CE]  <identifier>  expected  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double[]  sd,  double  valueDeviation,  double  sd,  inverseCumAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double[]  sd,  double  valueDeviation,  double  sd,  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double[]    sd,    double    standardDeviation,    double    sd,    inverseCumAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	78	None	replace
339	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  mean,  double  standardDeviation,  double  solverAbsoluteAccuracy)  {  [CE]  cannot  find  symbol  sd  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  mean,  double  standardDeviation,  double  solverAbsoluteAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  mean,  double  standardDeviation,  double  solverAbsoluteAccuracy)  {	  public    NormalDistributionImpl(double    mean,    double    sd,    double    solverAbsoluteAccuracy)    {    	non-compiled	[CE]  cannot  find  symbol  sd	19	None	replace
340	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  solverAbsoluteAccuracy,  mean,  inverseCumAccuracy)  {  [CE]  <identifier>  expected  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  solverAbsoluteAccuracy,  mean,  inverseCumAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  solverAbsoluteAccuracy,  mean,  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    double    solverAbsoluteAccuracy,    sd,    inverseCumAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
341	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  mean,  double  sd,  standardDeviation,  solverAbsoluteAccuracy,  sd,  inverseCumAccuracy)  {  [CE]  <identifier>  expected  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  mean,  double  sd,  standardDeviation,  solverAbsoluteAccuracy,  sd,  inverseCumAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  mean,  double  sd,  standardDeviation,  solverAbsoluteAccuracy,  sd,  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    double    solverAbsoluteAccuracy,    sd,    inverseCumAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
342	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
343	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  -  1;  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  -  1;  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  -  1;	  this.standardDeviation    =    StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
344	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  mean,  double  normalDeviation,  double  inverseCumAccuracy)  {  [CE]  cannot  find  symbol  sd  [FE]            NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  mean,  double  normalDeviation,  double  inverseCumAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  mean,  double  normalDeviation,  double  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double    sd,    double    normalDeviation,    double    inverseCumAccuracy)    {    	non-compiled	[CE]  cannot  find  symbol  sd	26	None	replace
345	[BUG]  [BUGGY]  public  NormalDistributionImpl(long  sd,  long  normalDeviation,  long  inverseCumAccuracy)  {  [CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)  [FE]              NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(long  sd,  long  normalDeviation,  long  inverseCumAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(long  sd,  long  normalDeviation,  long  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double    sd,    double    normalDeviation,    double    inverseCumAccuracy)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)	26	None	replace
346	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  LAST_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  LAST_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  LAST_INVERSE_ABSOLUTE_ACCURACY);	  super(LocalizedFormats.STANDARD_DEVIATION,    LAST_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
347	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  s,  double  mean,  standardDeviation)  {  [CE]  <identifier>  expected  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  s,  double  mean,  standardDeviation)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  s,  double  mean,  standardDeviation)  {	  public    NormalDistributionImpl(double    s,    double    mean,    double    standardDeviation)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
348	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {  if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION  [CE]  illegal  start  of  expression  [FE]              NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {  if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {  if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION	  public    NormalDistributionImpl(double    sd,    double    mean,    double    inverseCumAccuracy)    {    if    (sd    <    =    1)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
349	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  -  1;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  -  1;  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  -  1;	  this.standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
350	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  standardDeviation,  double  sd,  long  solverAbsoluteAccuracy)  {  [CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  standardDeviation,  double  sd,  long  solverAbsoluteAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  standardDeviation,  double  sd,  long  solverAbsoluteAccuracy)  {	  public    NormalDistributionImpl(double    standardDeviation,    double    sd,    double    mean)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)	66	None	replace
351	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;	  this.standardDeviation    =    StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
352	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
353	[BUG]  [BUGGY]  this.standardDeviation  =  sd  +  2;  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  sd  +  2;  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  sd  +  2;	  this.standardDeviation    =    sd;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
354	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  standardDeviation);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  standardDeviation);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  standardDeviation);	  super(LocalizedFormats.STANDARD_DEVIATION,    sd,    standardDeviation);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
355	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD,  sd,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.STANDARD,  sd,  solverAbsoluteAccuracy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD,  sd,  solverAbsoluteAccuracy);	  super(LocalizedFormats.STANDARD_DEVIATION,    sd,    standardDeviation);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
356	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  s,  double  standardDeviation,  solverAbsoluteAccuracy,  mean,  inverseCumAccuracy)  {  [CE]  <identifier>  expected  [FE]            ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  s,  double  standardDeviation,  solverAbsoluteAccuracy,  mean,  inverseCumAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  s,  double  standardDeviation,  solverAbsoluteAccuracy,  mean,  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    double    solverAbsoluteAccuracy,    double    sd,    double    inverseCumAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
357	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  solverAbsoluteAccuracy,  double  sd,  double  inverseCumAccuracy)  {  [CE]  <identifier>  expected  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  solverAbsoluteAccuracy,  double  sd,  double  inverseCumAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  standardDeviation,  solverAbsoluteAccuracy,  double  sd,  double  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    double    solverAbsoluteAccuracy,    double    sd,    double    inverseCumAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
358	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ACCURACY  &&  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ACCURACY  &&  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ACCURACY  &&  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY    ||    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
359	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;	  this.standardDeviation    =    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY    ||    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
360	[BUG]  [BUGGY]  this(null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  this(null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy,  inverseCumAccuracy);	  this(mean,    standardDeviation,    solverAbsoluteAccuracy,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
361	[BUG]  [BUGGY]  super(resolverAbsoluteAccuracy,  sd,  standardDeviation,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                        ConvergenceException      [CONTEXT]        [BUGGY]  super(resolverAbsoluteAccuracy,  sd,  standardDeviation,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(resolverAbsoluteAccuracy,  sd,  standardDeviation,  inverseCumAccuracy);	  super(mean,    standardDeviation,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
362	[BUG]  [BUGGY]  super(SQRT2PI,  sd,  standardDeviation,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                          ConvergenceException      [CONTEXT]        [BUGGY]  super(SQRT2PI,  sd,  standardDeviation,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(SQRT2PI,  sd,  standardDeviation,  inverseCumAccuracy);	  super(mean,    standardDeviation,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
363	[BUG]  [BUGGY]  super(null,  standardDeviation,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                            ConvergenceException      [CONTEXT]        [BUGGY]  super(null,  standardDeviation,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(null,  standardDeviation,  solverAbsoluteAccuracy,  inverseCumAccuracy);	  super(mean,    standardDeviation,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
364	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION  [CE]  illegal  start  of  expression  [FE]          NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION	  public    NormalDistributionImpl(double    sd,    double    mean,    double    inverseCumAccuracy)    {    (sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
365	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVI  [CE]  illegal  start  of  expression  [FE]            NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVI  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVI	  public    NormalDistributionImpl(double    sd,    double    mean,    double    inverseCumAccuracy)    {    (sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
366	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  s  [CE]  illegal  start  of  expression  [FE]              NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  s  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  s	  public    NormalDistributionImpl(double    sd,    double    mean,    double    inverseCumAccuracy)    {    (sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
367	[BUG]  [BUGGY]  super(null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  super(null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);	  super(null,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
368	[BUG]  [BUGGY]  super(null,  null,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]        [BUGGY]  super(null,  null,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(null,  null,  solverAbsoluteAccuracy);	  super(null,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
369	[BUG]  [BUGGY]  super(null,  null,  inverseCumAccuracy,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                        ConvergenceException      [CONTEXT]        [BUGGY]  super(null,  null,  inverseCumAccuracy,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(null,  null,  inverseCumAccuracy,  solverAbsoluteAccuracy);	  super(null,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
370	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);	  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
371	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  true);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  true);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  true);	  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
372	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  null);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  null);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  null);	  super(LocalizedFormats.STANDARD_DEVIATION,    sd,    null);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
373	[BUG]  [BUGGY]  super(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  super(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  inverseCumAccuracy);	  super(sd,    standardDeviation,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
374	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  mean,  double  sd,  standardDeviation,  solverAbsoluteAccuracy,  solverAbsoluteAccuracy)  {  [CE]  <identifier>  expected  [FE]            ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  mean,  double  sd,  standardDeviation,  solverAbsoluteAccuracy,  solverAbsoluteAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  mean,  double  sd,  standardDeviation,  solverAbsoluteAccuracy,  solverAbsoluteAccuracy)  {	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    solverAbsoluteAccuracy,    sd,    inverseCumAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	86	None	replace
375	[BUG]  [BUGGY]  this.standardDeviation  =  LocalizedFormats.STANDARD_DEVIATION;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  LocalizedFormats.STANDARD_DEVIATION;  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  LocalizedFormats.STANDARD_DEVIATION;	  this.standardDeviation    =    localizedFormats.STANDARD_DEVIATION;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
376	[BUG]  [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  NormalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;	  this.standardDeviation    =    NormalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
377	[BUG]  [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  -  1;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  -  1;  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  NormalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  -  1;	  this.standardDeviation    =    NormalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
378	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(inverseCumAccuracy,  sd,  sd);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(inverseCumAccuracy,  sd,  sd);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.create(inverseCumAccuracy,  sd,  sd);	  this.standardDeviation    =    StandardDistributionImpl.create(null,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
379	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(inverseAccumAccuracy,  sd);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(inverseAccumAccuracy,  sd);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.newInstance(inverseAccumAccuracy,  sd);	  this.standardDeviation    =    StandardDistributionImpl.newInstance(resolverAbsoluteAccuracy,    sd);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
380	[BUG]  [BUGGY]  super(LocalizedFormats.STRING_DEVIATION,  sd,  false);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.STRING_DEVIATION,  sd,  false);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STRING_DEVIATION,  sd,  false);	  super(LocalizedFormats.STANDARD_DEVIATION,    sd,    true);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
381	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  0,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  0,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  sd,  0,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  super(LocalizedFormats.STANDARD_DEVIATION,    sd,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
382	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  normalDeviation);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  normalDeviation);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  normalDeviation);	  super(LocalizedFormats.STANDARD_DEVIATION,    sd,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
383	[BUG]  [BUGGY]  super(LocalizedFormats.SQRT2,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.SQRT2,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.SQRT2,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  super(LocalizedFormats.SQRT2PI,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
384	[BUG]  [BUGGY]  super(LocalizedFormats.SQRT2PI,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.SQRT2PI,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.SQRT2PI,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  super(LocalizedFormats.SQRT2PI,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
385	[BUG]  [BUGGY]  super(LocalizedFormats.SQRT2PI,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.SQRT2PI,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.SQRT2PI,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);	  super(LocalizedFormats.SQRT2PI,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
386	[BUG]  [BUGGY]  super(resolverAbsoluteAccuracy,  sd);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  super(resolverAbsoluteAccuracy,  sd);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(resolverAbsoluteAccuracy,  sd);	  super(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
387	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  s,  double  standardDeviation,  sd)  {  [CE]  <identifier>  expected  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  s,  double  standardDeviation,  sd)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  s,  double  standardDeviation,  sd)  {	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    sd)    {    	non-compiled	[CE]  <identifier>  expected	93	None	replace
388	[BUG]  [BUGGY]  Super(inverseCumAccuracy,  sd,  solverAbsoluteAccuracy);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  Super(inverseCumAccuracy,  sd,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	Super(inverseCumAccuracy,  sd,  solverAbsoluteAccuracy);	  super(resolverAbsoluteAccuracy,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	72	None	replace
389	[BUG]  [BUGGY]  super(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  super(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);	  super(sd,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
390	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  mean,  double  standardDeviation,  double  solverAbsoluteAccuracy,  double  sd,  solverAbsoluteAccuracy)  {  [CE]  <identifier>  expected  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  mean,  double  standardDeviation,  double  solverAbsoluteAccuracy,  double  sd,  solverAbsoluteAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  mean,  double  standardDeviation,  double  solverAbsoluteAccuracy,  double  sd,  solverAbsoluteAccuracy)  {	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    double    solverAbsoluteAccuracy,    double    sd,    inverseCumAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
391	[BUG]  [BUGGY]  public  NormalDistributionImpl(double[]  standardDeviation,  double  standardDeviation,  solverAbsoluteAccuracy,  double  sd,  inverseCumAccuracy)  {  [CE]  <identifier>  expected  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double[]  standardDeviation,  double  standardDeviation,  solverAbsoluteAccuracy,  double  sd,  inverseCumAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double[]  standardDeviation,  double  standardDeviation,  solverAbsoluteAccuracy,  double  sd,  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    double    solverAbsoluteAccuracy,    double    sd,    inverseCumAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
392	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  smean)  {  [CE]  <identifier>  expected  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  smean)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  standardDeviation,  smean)  {	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    sd)    {    	non-compiled	[CE]  <identifier>  expected	93	None	replace
393	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  msg)  {  [CE]  <identifier>  expected  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  msg)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  standardDeviation,  msg)  {	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    sd)    {    	non-compiled	[CE]  <identifier>  expected	93	None	replace
394	[BUG]  [BUGGY]  Super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ConvergenceException      [CONTEXT]        [BUGGY]  Super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	Super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);	  super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    mean);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
395	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  normalDeviation);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  normalDeviation);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  normalDeviation);	  super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    mean);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
396	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  mean,  double  standardDeviation,  sd,  solverAbsoluteAccuracy,  solverAbsoluteAccuracy)  {  [CE]  <identifier>  expected  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  mean,  double  standardDeviation,  sd,  solverAbsoluteAccuracy,  solverAbsoluteAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  mean,  double  standardDeviation,  sd,  solverAbsoluteAccuracy,  solverAbsoluteAccuracy)  {	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    sd,    solverAbsoluteAccuracy,    double    inverseCumAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	87	None	replace
397	[BUG]  [BUGGY]  this(mean,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  this(mean,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(mean,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy,  inverseCumAccuracy);	  this(mean,    standardDeviation,    solverAbsoluteAccuracy,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
398	[BUG]  [BUGGY]  this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  standardDeviation,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  standardDeviation,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  standardDeviation,  solverAbsoluteAccuracy,  inverseCumAccuracy);	  this(mean,    standardDeviation,    solverAbsoluteAccuracy,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
399	[BUG]  [BUGGY]  Super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ConvergenceException      [CONTEXT]        [BUGGY]  Super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	Super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);	  super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    standardDeviation);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	70	None	replace
400	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_NOT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_NOT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_NOT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);	  super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    standardDeviation);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
401	[BUG]  [BUGGY]  this(null,  sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  this(null,  sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(null,  sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);	  this(null,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
402	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  sd,  standardDeviation)  {  [CE]  <identifier>  expected  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  sd,  standardDeviation)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  sd,  standardDeviation)  {	  public    NormalDistributionImpl(double    s,    double    sd,    double    standardDeviation)    {    	non-compiled	[CE]  <identifier>  expected	92	None	replace
403	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);	  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
404	[BUG]  [BUGGY]  super(null,  standardDeviation,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  super(null,  standardDeviation,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(null,  standardDeviation,  solverAbsoluteAccuracy);	  super(sd,    standardDeviation,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
405	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.newInstance(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);	  this.standardDeviation    =    StandardDistributionImpl.newInstance(null,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
406	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {  if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  s  [CE]  illegal  start  of  expression  [FE]        NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {  if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  s  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {  if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  s	  public    NormalDistributionImpl(double    sd,    double    mean,    double    inverseCumAccuracy)    {    if    (sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
407	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  mean,  double  standardDeviation,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  inverseCumAccuracy)  {  [CE]  <identifier>  expected  [FE]            ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  mean,  double  standardDeviation,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  inverseCumAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  mean,  double  standardDeviation,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    solverAbsoluteAccuracy,    sd,    inverseCumAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	86	None	replace
408	[BUG]  [BUGGY]  this.standardDeviation  =  normalizedFormats.STANDARD_DEVIATION;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  normalizedFormats.STANDARD_DEVIATION;  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  normalizedFormats.STANDARD_DEVIATION;	  this.standardDeviation    =    localizedFormats.STANDARD_DEVIATION;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
409	[BUG]  [BUGGY]  Super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  Super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	Super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);	  super(LocalizedFormats.STANDARD_DEVIATION,    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,    standardDeviation);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	91	None	replace
410	[BUG]  [BUGGY]  super(Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  super(Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY);	  super(LocalizedFormats.STANDARD_DEVIATION,    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,    standardDeviation);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
411	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  inverseCumAccuracy,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  inverseCumAccuracy,  inverseCumAccuracy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  inverseCumAccuracy,  inverseCumAccuracy);	  this.standardDeviation    =    StandardDistributionImpl.newInstance(d,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
412	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  standardDeviation,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  standardDeviation,  inverseCumAccuracy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  standardDeviation,  inverseCumAccuracy);	  this.standardDeviation    =    StandardDistributionImpl.newInstance(d,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
413	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  solverAbsoluteAccuracy,  inverseCumAccuracy)  {  [CE]  <identifier>  expected  [FE]            ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  solverAbsoluteAccuracy,  inverseCumAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  solverAbsoluteAccuracy,  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double    sd,    double    standardDeviation,    double    mean,    inverseCumAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	73	None	replace
414	[BUG]  [BUGGY]  public  NormalDistributionImpl(double[]  sd,  double  standardDeviation,  double  solverAbsoluteAccuracy,  inverseCumAccuracy)  {  [CE]  <identifier>  expected  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double[]  sd,  double  standardDeviation,  double  solverAbsoluteAccuracy,  inverseCumAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double[]  sd,  double  standardDeviation,  double  solverAbsoluteAccuracy,  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double    sd,    double    standardDeviation,    double    mean,    inverseCumAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	73	None	replace
415	[BUG]  [BUGGY]  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [CE]  illegal  start  of  type  [FE]        NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }	  public    NormalDistributionImpl(double    sd,    double    mean,    double    inverseCumAccuracy)    {    if    (sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    this.standardDeviation    =    sd;    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
416	[BUG]  [BUGGY]  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  [CE]  illegal  start  of  type  [FE]          NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;	  public    NormalDistributionImpl(double    sd,    double    mean,    double    inverseCumAccuracy)    {    if    (sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    this.standardDeviation    =    sd;    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
417	[BUG]  [BUGGY]  public  NormalDistributionImpl(double[]  sd,  double  standardDeviation,  int  solverAbsoluteAccuracy,  double  inverseCumAccuracy)  {  [CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)  [FE]        NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double[]  sd,  double  standardDeviation,  int  solverAbsoluteAccuracy,  double  inverseCumAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double[]  sd,  double  standardDeviation,  int  solverAbsoluteAccuracy,  double  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double[]    sd,    double    standardDeviation,    double    inverseCumAccuracy)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  NormalDistributionImpl(double,double,double)	79	None	replace
418	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  solverAbsoluteAccuracy,  mean)  {  [CE]  <identifier>  expected  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  solverAbsoluteAccuracy,  mean)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  standardDeviation,  solverAbsoluteAccuracy,  mean)  {	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    double    solverAbsoluteAccuracy,    double    sd)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
419	[BUG]  [BUGGY]  super(mean,  standardDeviation,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]        [BUGGY]  super(mean,  standardDeviation,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(mean,  standardDeviation,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  public    NormalDistributionImpl(double    mean,    double    standardDeviation,    double    solverAbsoluteAccuracy,    sd)    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
420	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {  if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STRING_DEVIATION,  sd  [CE]  illegal  start  of  expression  [FE]        NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {  if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STRING_DEVIATION,  sd  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {  if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STRING_DEVIATION,  sd	  public    NormalDistributionImpl(double    sd,    double    mean,    double    inverseCumAccuracy)    {    if    (sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STRING_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
421	[BUG]  [BUGGY]  super(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  super(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  super(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
422	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  this.standardDeviation    =    StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
423	[BUG]  [BUGGY]  Super(LocalizedFormats.STANDARD_DEVIATION,  sd,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  Super(LocalizedFormats.STANDARD_DEVIATION,  sd,  false);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	Super(LocalizedFormats.STANDARD_DEVIATION,  sd,  false);	  super(LocalizedFormats.STANDARD_DEVIATION,    sd,    true);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
424	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  mean,  double  standardDeviation,  solverAbsoluteAccuracy)  {  [CE]  <identifier>  expected  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  mean,  double  standardDeviation,  solverAbsoluteAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  mean,  double  standardDeviation,  solverAbsoluteAccuracy)  {	  public    NormalDistributionImpl(double    sd,    double    mean,    double    standardDeviation)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
425	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  mean,  standardDeviation)  {  [CE]  <identifier>  expected  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  mean,  standardDeviation)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  mean,  standardDeviation)  {	  public    NormalDistributionImpl(double    sd,    double    mean,    double    standardDeviation)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
426	[BUG]  [BUGGY]  this(sd,  standardDeviation,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]        [BUGGY]  this(sd,  standardDeviation,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(sd,  standardDeviation,  solverAbsoluteAccuracy);	  this(mean,    standardDeviation,    sd,    solverAbsoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
427	[BUG]  [BUGGY]  this(null,  standardDeviation,  solverAbsoluteAccuracy,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  this(null,  standardDeviation,  solverAbsoluteAccuracy,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(null,  standardDeviation,  solverAbsoluteAccuracy,  solverAbsoluteAccuracy);	  this(mean,    standardDeviation,    sd,    solverAbsoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
428	[BUG]  [BUGGY]  this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]            NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  public    NormalDistributionImpl(double    sd,    double    mean,    double    inverseCumAccuracy)    {    if    (sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    this.mean    =    mean;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
429	[BUG]  [BUGGY]  this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]              NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  inverseCumAccuracy);	  public    NormalDistributionImpl(double    sd,    double    mean,    double    inverseCumAccuracy)    {    if    (sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    this.mean    =    mean;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
430	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  SQRT2PI,  standardDeviation);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  SQRT2PI,  standardDeviation);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  SQRT2PI,  standardDeviation);	  super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    SQRT2PI);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
431	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  s,  double  sd,  double  inverseCumAccuracy)  {  [CE]  variable  mean  might  not  have  been  initialized  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  s,  double  sd,  double  inverseCumAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  s,  double  sd,  double  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double    standardDeviation,    double    sd,    double    mean)    {    	non-compiled	[CE]  variable  mean  might  not  have  been  initialized	66	None	replace
432	[BUG]  [BUGGY]  Public  NormalDistributionImpl(double  sd,  double  mean,  double  solverAbsoluteAccuracy)  {  [CE]  cannot  find  symbol  [FE]          NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  Public  NormalDistributionImpl(double  sd,  double  mean,  double  solverAbsoluteAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	Public  NormalDistributionImpl(double  sd,  double  mean,  double  solverAbsoluteAccuracy)  {	  public    NormalDistributionImpl(double    sd,    double    mean,    double    solverAbsoluteAccuracy)    {    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
433	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {  if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.METHOD_DEVIATION,  s  [CE]  illegal  start  of  expression  [FE]                NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {  if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.METHOD_DEVIATION,  s  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {  if  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.METHOD_DEVIATION,  s	  public    NormalDistributionImpl(double    sd,    double    mean,    double    inverseCumAccuracy)    {    if    (sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.METHOD_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
434	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  sd,  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  super(LocalizedFormats.STANDARD_DEVIATION,    sd,    null);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
435	[BUG]  [BUGGY]  this(SQRT2PI,  sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  this(SQRT2PI,  sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(SQRT2PI,  sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);	  this(SQRT2PI,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
436	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  normalDeviation);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  normalDeviation);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  normalDeviation);	  super(LocalizedFormats.STANDARD_DEVIATION,    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
437	[BUG]  [BUGGY]  Super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  Super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	Super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  super(LocalizedFormats.STANDARD_DEVIATION,    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
438	[BUG]  [BUGGY]  super(LocalizedFormats.SQRT2PI,  sd,  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.SQRT2PI,  sd,  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.SQRT2PI,  sd,  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  super(LocalizedFormats.SQRT2PI,    sd);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
439	[BUG]  [BUGGY]  super(LocalizedFormats.SQRT2PI,  sd,  normalDeviation);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.SQRT2PI,  sd,  normalDeviation);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.SQRT2PI,  sd,  normalDeviation);	  super(LocalizedFormats.SQRT2PI,    sd);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
440	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  LocalizedFormats.STANDARD_DEVIATION,  standardDeviation);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  LocalizedFormats.STANDARD_DEVIATION,  standardDeviation);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  LocalizedFormats.STANDARD_DEVIATION,  standardDeviation);	  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    LocalizedFormats.STANDARD_DEVIATION);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
441	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDeviation.UNDEFINED;  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDeviation.UNDEFINED;  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDeviation.UNDEFINED;	  this.standardDeviation    =    StandardDeviation;    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
442	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  standardAccuracy);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  standardAccuracy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  sd,  standardAccuracy);	  super(LocalizedFormats.STANDARD_DEVIATION,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
443	[BUG]  [BUGGY]  public  NormalDistributionImpl(double[]  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  expression  [FE]          NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double[]  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double[]  sd,  double  standardDeviation,  double  inverseCumAccuracy)  {  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  public    NormalDistributionImpl(double    sd,    double    mean,    double    inverseCumAccuracy)    {    (sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
444	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation)  {  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  expression  [FE]            NotStrictlyPositiveException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation)  {  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  standardDeviation)  {  (sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  public    NormalDistributionImpl(double    sd,    double    mean,    double    inverseCumAccuracy)    {    (sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
445	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  solverAbsoluteAccuracy,  sd,  inverseCumAccuracy)  {  [CE]  <identifier>  expected  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  sd,  double  standardDeviation,  solverAbsoluteAccuracy,  sd,  inverseCumAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  sd,  double  standardDeviation,  solverAbsoluteAccuracy,  sd,  inverseCumAccuracy)  {	  public    NormalDistributionImpl(double    s,    double    standardDeviation,    mean,    sd,    inverseCumAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	74	None	replace
446	[BUG]  [BUGGY]  this.standardDeviation  =  standardAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  standardAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  standardAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    inverseCumAccuracy    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
447	[BUG]  [BUGGY]  Super(LocalizedFormats.STANDARD_DEVIATION,  sd,  solverAbsoluteAccuracy);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  Super(LocalizedFormats.STANDARD_DEVIATION,  sd,  solverAbsoluteAccuracy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	Super(LocalizedFormats.STANDARD_DEVIATION,  sd,  solverAbsoluteAccuracy);	  super(LocalizedFormats.STANDARD_DEVIATION,    sd,    standardDeviation);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
448	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(resolverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(resolverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.newInstance(resolverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  this.standardDeviation    =    StandardDistributionImpl.newInstance(resolverAbsoluteAccuracy,    sd);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
449	[BUG]  [BUGGY]  this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  standardDeviation,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  standardDeviation,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  standardDeviation,  inverseCumAccuracy);	  this(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
450	[BUG]  [BUGGY]  public  NormalDistributionImpl(double  s,  double  standardDeviation,  double  d,  solverAbsoluteAccuracy)  {  [CE]  <identifier>  expected  [FE]            ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double  s,  double  standardDeviation,  double  d,  solverAbsoluteAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double  s,  double  standardDeviation,  double  d,  solverAbsoluteAccuracy)  {	  public    NormalDistributionImpl(double    s,    double    standardDeviation,    double    sd,    solverAbsoluteAccuracy)    {    	non-compiled	[CE]  <identifier>  expected	77	None	replace
451	[BUG]  [BUGGY]  public  NormalDistributionImpl(double[]  sd,  double  standardDeviation,  double  solverAbsoluteAccuracy,  int  solverAbsoluteAccuracy)  {  [CE]  variable  solverAbsoluteAccuracy  is  already  defined  in  constructor  NormalDistributionImpl  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  public  NormalDistributionImpl(double[]  sd,  double  standardDeviation,  double  solverAbsoluteAccuracy,  int  solverAbsoluteAccuracy)  {  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	public  NormalDistributionImpl(double[]  sd,  double  standardDeviation,  double  solverAbsoluteAccuracy,  int  solverAbsoluteAccuracy)  {	  public    NormalDistributionImpl(double[]    sd,    double    standardDeviation,    double    sd,    inverseCumAccuracy)    {    	non-compiled	[CE]  variable  solverAbsoluteAccuracy  is  already  defined  in  constructor  NormalDistributionImpl	78	None	replace
452	[BUG]  [BUGGY]  this(null,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  this(null,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this(null,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);	  this(null,    sd,    inverseCumAccuracy,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
453	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(null,  sd);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(null,  sd);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.create(null,  sd);	  this.standardDeviation    =    StandardDistributionImpl.create(null,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
454	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(double,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]        [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(double,  inverseCumAccuracy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	this.standardDeviation  =  StandardDistributionImpl.create(double,  inverseCumAccuracy);	  this.standardDeviation    =    StandardDistributionImpl.create(null,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
455	[BUG]  [BUGGY]  super(Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURacy);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]        [BUGGY]  super(Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURacy);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURacy);	  super(LocalizedFormats.STANDARD_DEVIATION,    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,    DEFAULT_INVERSE_ABSOLUTE_ACCURacy);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
456	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURacy,  normalDeviation);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]        [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURacy,  normalDeviation);  [BUGGY]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	73	73	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURacy,  normalDeviation);	  super(LocalizedFormats.STANDARD_DEVIATION,    Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY,    DEFAULT_INVERSE_ABSOLUTE_ACCURacy);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
