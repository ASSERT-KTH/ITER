bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    double  solverAbsoluteAccuracy  =  inverseCumAccuracy;  [CE]  variable  solverAbsoluteAccuracy  might  not  have  been  initialized  [FE]    ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  [BUGGY]    double  solverAbsoluteAccuracy  =  inverseCumAccuracy;  [BUGGY]  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	    double  solverAbsoluteAccuracy  =  inverseCumAccuracy;		non-compiled	[CE]  variable  solverAbsoluteAccuracy  might  not  have  been  initialized	16	None	add
2	[BUG]  [BUGGY]    double  solverAbsoluteAccuracy  =  inverseCumAccuracy.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]      ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  [BUGGY]    double  solverAbsoluteAccuracy  =  inverseCumAccuracy.doubleValue();  [BUGGY]  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	    double  solverAbsoluteAccuracy  =  inverseCumAccuracy.doubleValue();		non-compiled	[CE]  double  cannot  be  dereferenced	16	None	add
3	[BUG]  [BUGGY]    this.standardDeviation  =  normalize(sd,  inverseCumAccuracy);  [CE]  cannot  find  symbol  [FE]        ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  [BUGGY]    this.standardDeviation  =  normalize(sd,  inverseCumAccuracy);  [BUGGY]  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	    this.standardDeviation  =  normalize(sd,  inverseCumAccuracy);		non-compiled	[CE]  cannot  find  symbol	16	None	add
4	[BUG]  [BUGGY]    this.standardDeviation  =  inverseCumAccuracy;  [CE]  variable  standardDeviation  might  already  have  been  assigned  [FE]          ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  [BUGGY]    this.standardDeviation  =  inverseCumAccuracy;  [BUGGY]  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	    this.standardDeviation  =  inverseCumAccuracy;		non-compiled	[CE]  variable  standardDeviation  might  already  have  been  assigned	16	None	add
5	[BUG]  [BUGGY]    this.standardDeviation  =  sd;  [CE]  variable  standardDeviation  might  already  have  been  assigned  [FE]            ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  [BUGGY]    this.standardDeviation  =  sd;  [BUGGY]  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	    this.standardDeviation  =  sd;		non-compiled	[CE]  variable  standardDeviation  might  already  have  been  assigned	16	None	add
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	add	standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	standardDeviation  =  sd;  	compilable	  [FE]  AssertionFailedError  	15	9	replace
7	[BUG]  [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [FE]  AssertionFailedError  [FE]    ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	standardDeviation  =  sd;  	compilable	  [FE]  AssertionFailedError  	15	9	replace
8	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  [BUGGY]  standardDeviation  =  sd  +  1;  [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	add	standardDeviation  =  sd  +  1;	standardDeviation  =  sd;  	compilable	  [FE]  ConvergenceException  	15	8	replace
9	[BUG]  [BUGGY]  standardDeviation  =  sd  +  1;  [FE]  ConvergenceException  [FE]      ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  [BUGGY]  standardDeviation  =  sd  +  1;  [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation  =  sd  +  1;	standardDeviation  =  sd;  	compilable	  [FE]  ConvergenceException  	15	8	replace
10	[BUG]  [BUGGY]  standardDeviation  =  sd.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]        ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  [BUGGY]  standardDeviation  =  sd.doubleValue();  [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation  =  sd.doubleValue();	standardDeviation  =  sd;  	non-compiled	[CE]  double  cannot  be  dereferenced	15	None	replace
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  [BUGGY]  standardDeviation  =  inverseCumAccuracy;  [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	add	standardDeviation  =  inverseCumAccuracy;	standardDeviation  =  sd;  	compilable	  [FE]  AssertionFailedError  	15	9	replace
12	[BUG]  [BUGGY]  standardDeviation  =  inverseCumAccuracy;  [FE]  AssertionFailedError  [FE]    ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  [BUGGY]  standardDeviation  =  inverseCumAccuracy;  [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation  =  inverseCumAccuracy;	standardDeviation  =  sd;  	compilable	  [FE]  AssertionFailedError  	15	9	replace
13	[BUG]  [BUGGY]    this.standardDeviation  =  standardDeviation;  [CE]  variable  standardDeviation  might  not  have  been  initialized  [FE]    ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  [BUGGY]    this.standardDeviation  =  standardDeviation;  [BUGGY]  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	    this.standardDeviation  =  standardDeviation;		non-compiled	[CE]  variable  standardDeviation  might  not  have  been  initialized	16	None	add
14	[BUG]  [BUGGY]    double  solverAbsoluteAccuracy  =  Double.parseDouble(sd);  [CE]  method  parseDouble  in  class  Double  cannot  be  applied  to  given  types;  [FE]      ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  [BUGGY]    double  solverAbsoluteAccuracy  =  Double.parseDouble(sd);  [BUGGY]  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	    double  solverAbsoluteAccuracy  =  Double.parseDouble(sd);		non-compiled	[CE]  method  parseDouble  in  class  Double  cannot  be  applied  to  given  types;	16	None	add
15	[BUG]  [BUGGY]    this.standardDeviation  =  normalDeviation;  [CE]  cannot  find  symbol  normalDeviation  [FE]    ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  [BUGGY]    this.standardDeviation  =  normalDeviation;  [BUGGY]  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	    this.standardDeviation  =  normalDeviation;		non-compiled	[CE]  cannot  find  symbol  normalDeviation	16	None	add
16	[BUG]  [BUGGY]    this.standardDeviation  =  mean;  [CE]  variable  standardDeviation  might  already  have  been  assigned  [FE]      ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  [BUGGY]    this.standardDeviation  =  mean;  [BUGGY]  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	    this.standardDeviation  =  mean;		non-compiled	[CE]  variable  standardDeviation  might  already  have  been  assigned	16	None	add
