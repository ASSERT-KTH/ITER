bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  this.standardDeviation  =  normalize(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  this.standardDeviation  =  normalize(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  normalize(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  this.standardDeviation    =    normalize(sd,    solverAbsoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
2	[BUG]  [BUGGY]  this.standardDeviation  =  normalize(sd,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  this.standardDeviation  =  normalize(sd,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  normalize(sd,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  this.standardDeviation    =    normalize(sd,    solverAbsoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
3	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  inverseCumAccuracy;  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  double  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  inverseCumAccuracy;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	double  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  inverseCumAccuracy;	  double    solverAbsoluteAccuracy    =    inverseCumAccuracy    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
4	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  sd  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  double  solverAbsoluteAccuracy  =  sd  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	double  solverAbsoluteAccuracy  =  sd  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  double    solverAbsoluteAccuracy    =    inverseCumAccuracy    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
5	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  inverseCumAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  double  solverAbsoluteAccuracy  =  inverseCumAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	double  solverAbsoluteAccuracy  =  inverseCumAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  double    solverAbsoluteAccuracy    =    inverseCumAccuracy    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
6	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  Double.parseDouble(sd,  message);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  double  solverAbsoluteAccuracy  =  Double.parseDouble(sd,  message);  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	double  solverAbsoluteAccuracy  =  Double.parseDouble(sd,  message);	  double    solverAbsoluteAccuracy    =    Double.parseDouble(message,    sd);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
7	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  Double.parseDouble(message,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  double  solverAbsoluteAccuracy  =  Double.parseDouble(message,  sd,  inverseCumAccuracy);  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	double  solverAbsoluteAccuracy  =  Double.parseDouble(message,  sd,  inverseCumAccuracy);	  double    solverAbsoluteAccuracy    =    Double.parseDouble(message,    sd);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
8	[BUG]  [BUGGY]  normeDeviation  =  inverseCumAccuracy;  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  normeDeviation  =  inverseCumAccuracy;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	normeDeviation  =  inverseCumAccuracy;	  standardDeviation    =    inverseCumAccuracy;    normeDeviation    =    inverseCumAccuracy;    	non-compiled	[CE]  <identifier>  expected	59	None	replace
9	[BUG]  [BUGGY]  standardDeviation  =  sd;  normeDeviation  =  inverseCumAccuracy;  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  standardDeviation  =  sd;  normeDeviation  =  inverseCumAccuracy;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation  =  sd;  normeDeviation  =  inverseCumAccuracy;	  standardDeviation    =    inverseCumAccuracy;    normeDeviation    =    inverseCumAccuracy;    	non-compiled	[CE]  <identifier>  expected	59	None	replace
10	[BUG]  [BUGGY]  Normalization  =  inverseCumAccuracy;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  Normalization  =  inverseCumAccuracy;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	Normalization  =  inverseCumAccuracy;	  standardDeviation    =    inverseCumAccuracy;    normeDeviation    =    inverseCumAccuracy;    	non-compiled	[CE]  <identifier>  expected	59	None	replace
11	[BUG]  [BUGGY]  StandardDistributionImpl  solver  =  new  NormalDistributionImpl(mean,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  StandardDistributionImpl  solver  =  new  NormalDistributionImpl(mean,  sd,  inverseCumAccuracy);  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	StandardDistributionImpl  solver  =  new  NormalDistributionImpl(mean,  sd,  inverseCumAccuracy);	  standardDeviation    =    sd    +    1;    standardDeviation    =    sd    +    1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
12	[BUG]  [BUGGY]  StandardDeviation  =  sd  +  1;  [CE]  <identifier>  expected  [FE]          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  StandardDeviation  =  sd  +  1;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	StandardDeviation  =  sd  +  1;	  standardDeviation    =    sd    +    1;    standardDeviation    =    sd    +    1;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
13	[BUG]  [BUGGY]  this.standardDeviation  =  Normalize(sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  this.standardDeviation  =  Normalize(sd,  inverseCumAccuracy);  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  Normalize(sd,  inverseCumAccuracy);	  this.standardDeviation    =    Normalize(sd,    solverAbsoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
14	[BUG]  [BUGGY]  this.standardDeviation  =  Normalize(sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  this.standardDeviation  =  Normalize(sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  Normalize(sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);	  this.standardDeviation    =    Normalize(sd,    solverAbsoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
15	[BUG]  [BUGGY]  this.standardDeviation  =  Normalize(sd,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]                        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  this.standardDeviation  =  Normalize(sd,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  Normalize(sd,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  this.standardDeviation    =    Normalize(sd,    solverAbsoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
16	[BUG]  [BUGGY]  this.standardDeviation  =  Normalize(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]                          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  this.standardDeviation  =  Normalize(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  Normalize(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  this.standardDeviation    =    Normalize(sd,    solverAbsoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
17	[BUG]  [BUGGY]  standardDeviation  =  SQRT2PI.doubleValue()  +  1;  [CE]  <identifier>  expected  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  standardDeviation  =  SQRT2PI.doubleValue()  +  1;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation  =  SQRT2PI.doubleValue()  +  1;	  standardDeviation    =    SQRT2PI.doubleValue();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
18	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  SQRT2PI  :  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  SQRT2PI  :  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  SQRT2PI  :  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    SQRT2PI;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
19	[BUG]  [BUGGY]  this.standardDeviation  =  SQRT2PI  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  this.standardDeviation  =  SQRT2PI  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  SQRT2PI  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    SQRT2PI;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
20	[BUG]  [BUGGY]  normalDeviation  =  sd  +  1;  [CE]  <identifier>  expected  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  normalDeviation  =  sd  +  1;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	normalDeviation  =  sd  +  1;	  standardDeviation    =    sd    +    1;    normalDeviation    =    sd    +    1;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
21	[BUG]  [BUGGY]  standardDeviation  =  sd  +  1;  normalDeviation  =  sd  +  2;  [CE]  <identifier>  expected  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  standardDeviation  =  sd  +  1;  normalDeviation  =  sd  +  2;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation  =  sd  +  1;  normalDeviation  =  sd  +  2;	  standardDeviation    =    sd    +    1;    normalDeviation    =    sd    +    1;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
22	[BUG]  [BUGGY]  sd  =  sd  +  1;  [CE]  <identifier>  expected  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  sd  =  sd  +  1;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	sd  =  sd  +  1;	  standardDeviation    =    sd    +    1;    sd    =    sd    +    1;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
23	[BUG]  [BUGGY]  standardDeviation  =  sd  +  1;  sd  =  sd  +  2;  [CE]  <identifier>  expected  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  standardDeviation  =  sd  +  1;  sd  =  sd  +  2;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation  =  sd  +  1;  sd  =  sd  +  2;	  standardDeviation    =    sd    +    1;    sd    =    sd    +    1;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
24	[BUG]  [BUGGY]  this.standardDeviation  =  sd,  solverAbsoluteAccuracy;  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  this.standardDeviation  =  sd,  solverAbsoluteAccuracy;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  sd,  solverAbsoluteAccuracy;	  this.standardDeviation    =    sd,    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
25	[BUG]  [BUGGY]  this.standardDeviation  =  inverseCumAccuracy,  sd;  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  this.standardDeviation  =  inverseCumAccuracy,  sd;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  inverseCumAccuracy,  sd;	  this.standardDeviation    =    sd,    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
26	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  solverAbsoluteAccuracy  =  inverseCumAccuracy;	  this.standardDeviation    =    sd;    solverAbsoluteAccuracy    =    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
27	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy;  [CE]  <identifier>  expected  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	solverAbsoluteAccuracy  =  inverseCumAccuracy;	  this.standardDeviation    =    sd;    solverAbsoluteAccuracy    =    inverseCumAccuracy;    	non-compiled	[CE]  <identifier>  expected	32	None	replace
28	[BUG]  [BUGGY]  standardDeviation  =  sd,  inverseCumAccuracy.doubleValue()  +  1;  [CE]  <identifier>  expected  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  standardDeviation  =  sd,  inverseCumAccuracy.doubleValue()  +  1;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation  =  sd,  inverseCumAccuracy.doubleValue()  +  1;	  standardDeviation    =    sd,    inverseCumAccuracy.doubleValue();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
29	[BUG]  [BUGGY]  standardDeviation  =  inverseCumAccuracy,  sd.doubleValue();  [CE]  <identifier>  expected  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  standardDeviation  =  inverseCumAccuracy,  sd.doubleValue();  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation  =  inverseCumAccuracy,  sd.doubleValue();	  standardDeviation    =    sd,    inverseCumAccuracy.doubleValue();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
30	[BUG]  [BUGGY]  standardDeviation  =  mean,  inverseCumAccuracy.doubleValue();  [CE]  <identifier>  expected  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  standardDeviation  =  mean,  inverseCumAccuracy.doubleValue();  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation  =  mean,  inverseCumAccuracy.doubleValue();	  standardDeviation    =    sd,    inverseCumAccuracy.doubleValue();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
31	[BUG]  [BUGGY]  standardDeviation  =  sd;  normalDeviation  =  inverseCumAccuracy;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  standardDeviation  =  sd;  normalDeviation  =  inverseCumAccuracy;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation  =  sd;  normalDeviation  =  inverseCumAccuracy;	  standardDeviation    =    inverseCumAccuracy;    normalDeviation    =    inverseCumAccuracy;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
32	[BUG]  [BUGGY]  normalDeviation  =  inverseCumAccuracy;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  normalDeviation  =  inverseCumAccuracy;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	normalDeviation  =  inverseCumAccuracy;	  standardDeviation    =    inverseCumAccuracy;    normalDeviation    =    inverseCumAccuracy;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
33	[BUG]  [BUGGY]  StandardDeviation  normalDeviation  =  inverseCumAccuracy;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  StandardDeviation  normalDeviation  =  inverseCumAccuracy;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	StandardDeviation  normalDeviation  =  inverseCumAccuracy;	  standardDeviation    =    inverseCumAccuracy;    normalDeviation    =    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
34	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  sd.doubleValue()  +  1;  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  double  solverAbsoluteAccuracy  =  sd.doubleValue()  +  1;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	double  solverAbsoluteAccuracy  =  sd.doubleValue()  +  1;	  double    solverAbsoluteAccuracy    =    sd.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
35	[BUG]  [BUGGY]  this.standardDeviation  =  sd  +  2;  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  this.standardDeviation  =  sd  +  2;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  sd  +  2;	  this.standardDeviation    =    sd    +    1;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
36	[BUG]  [BUGGY]  this.standardDeviation  =  sd  +  3;  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  this.standardDeviation  =  sd  +  3;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  sd  +  3;	  this.standardDeviation    =    sd    +    1;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
37	[BUG]  [BUGGY]  this.standardDeviation  =  sd  +  4;  [CE]  illegal  start  of  type  [FE]                        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  this.standardDeviation  =  sd  +  4;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  sd  +  4;	  this.standardDeviation    =    sd    +    1;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
38	[BUG]  [BUGGY]  Double  solverAbsoluteAccuracy  =  sd.doubleValue();  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  Double  solverAbsoluteAccuracy  =  sd.doubleValue();  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	Double  solverAbsoluteAccuracy  =  sd.doubleValue();	  Double    solverAbsoluteAccuracy    =    inverseCumAccuracy.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
39	[BUG]  [BUGGY]  Double  solverAbsoluteAccuracy  =  inverseCumAccuracy.doubleValue()  +  1;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  Double  solverAbsoluteAccuracy  =  inverseCumAccuracy.doubleValue()  +  1;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	Double  solverAbsoluteAccuracy  =  inverseCumAccuracy.doubleValue()  +  1;	  Double    solverAbsoluteAccuracy    =    inverseCumAccuracy.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
40	[BUG]  [BUGGY]  NormalDeviation  =  sd  +  1;  [CE]  <identifier>  expected  [FE]          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  NormalDeviation  =  sd  +  1;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	NormalDeviation  =  sd  +  1;	  standardDeviation    =    sd    +    1;    StandardDeviation    =    sd    +    1;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
41	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  Double.parseDouble(sd,  inverseCumAccuracy,  mean);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  double  solverAbsoluteAccuracy  =  Double.parseDouble(sd,  inverseCumAccuracy,  mean);  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	double  solverAbsoluteAccuracy  =  Double.parseDouble(sd,  inverseCumAccuracy,  mean);	  double    solverAbsoluteAccuracy    =    Double.parseDouble(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
42	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  Double.parseDouble(sd,  mean,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  double  solverAbsoluteAccuracy  =  Double.parseDouble(sd,  mean,  inverseCumAccuracy);  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	double  solverAbsoluteAccuracy  =  Double.parseDouble(sd,  mean,  inverseCumAccuracy);	  double    solverAbsoluteAccuracy    =    Double.parseDouble(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
43	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  Double.parseDouble(mean,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  double  solverAbsoluteAccuracy  =  Double.parseDouble(mean,  sd,  inverseCumAccuracy);  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	double  solverAbsoluteAccuracy  =  Double.parseDouble(mean,  sd,  inverseCumAccuracy);	  double    solverAbsoluteAccuracy    =    Double.parseDouble(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
44	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  Double.parseDouble(sd,  inverseCumAccuracy,  standardDeviation);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  double  solverAbsoluteAccuracy  =  Double.parseDouble(sd,  inverseCumAccuracy,  standardDeviation);  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	double  solverAbsoluteAccuracy  =  Double.parseDouble(sd,  inverseCumAccuracy,  standardDeviation);	  double    solverAbsoluteAccuracy    =    Double.parseDouble(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
45	[BUG]  [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  [CE]  <identifier>  expected  [FE]    ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;	  standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    sd;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
46	[BUG]  [BUGGY]  standardDeviation  =  sd  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]      ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  standardDeviation  =  sd  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation  =  sd  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    sd;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
47	[BUG]  [BUGGY]  StandardDeviation  =  inverseCumAccuracy;  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  StandardDeviation  =  inverseCumAccuracy;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	StandardDeviation  =  inverseCumAccuracy;	  standardDeviation    =    inverseCumAccuracy;    StandardDeviation    =    inverseCumAccuracy;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
48	[BUG]  [BUGGY]  standardDeviation  =  sd;  StandardDeviation  =  inverseCumAccuracy;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  standardDeviation  =  sd;  StandardDeviation  =  inverseCumAccuracy;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation  =  sd;  StandardDeviation  =  inverseCumAccuracy;	  standardDeviation    =    inverseCumAccuracy;    StandardDeviation    =    inverseCumAccuracy;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
49	[BUG]  [BUGGY]  NormalDeviation  =  inverseCumAccuracy;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  NormalDeviation  =  inverseCumAccuracy;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	NormalDeviation  =  inverseCumAccuracy;	  standardDeviation    =    inverseCumAccuracy;    StandardDeviation    =    inverseCumAccuracy;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
50	[BUG]  [BUGGY]  Double  solverAbsoluteAccuracy  =  Double.parseDouble(mean,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  Double  solverAbsoluteAccuracy  =  Double.parseDouble(mean,  sd,  inverseCumAccuracy);  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	Double  solverAbsoluteAccuracy  =  Double.parseDouble(mean,  sd,  inverseCumAccuracy);	  double    solverAbsoluteAccuracy    =    Double.parseDouble(mean,    sd);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
51	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  Double.parseDouble(mean,  sd),  inverseCumAccuracy);  [CE]  ';'  expected  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  double  solverAbsoluteAccuracy  =  Double.parseDouble(mean,  sd),  inverseCumAccuracy);  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	double  solverAbsoluteAccuracy  =  Double.parseDouble(mean,  sd),  inverseCumAccuracy);	  double    solverAbsoluteAccuracy    =    Double.parseDouble(mean,    sd);    	non-compiled	[CE]  ';'  expected	2	None	replace
52	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  Double.parseDouble(mean,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  double  solverAbsoluteAccuracy  =  Double.parseDouble(mean,  inverseCumAccuracy);  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	double  solverAbsoluteAccuracy  =  Double.parseDouble(mean,  inverseCumAccuracy);	  double    solverAbsoluteAccuracy    =    Double.parseDouble(mean);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
53	[BUG]  [BUGGY]  Double  solverAbsoluteAccuracy  =  Double.parseDouble(mean,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  Double  solverAbsoluteAccuracy  =  Double.parseDouble(mean,  inverseCumAccuracy);  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	Double  solverAbsoluteAccuracy  =  Double.parseDouble(mean,  inverseCumAccuracy);	  double    solverAbsoluteAccuracy    =    Double.parseDouble(mean);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
54	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  Double.parseDouble(message);  [CE]  illegal  start  of  type  [FE]                        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  double  solverAbsoluteAccuracy  =  Double.parseDouble(message);  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	double  solverAbsoluteAccuracy  =  Double.parseDouble(message);	  double    solverAbsoluteAccuracy    =    Double.parseDouble(mean);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
55	[BUG]  [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  1;  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  1;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  1;	  standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    1;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
56	[BUG]  [BUGGY]  Double  solverAbsoluteAccuracy  =  Double.parseDouble(sd,  inverseCumAccuracy,  mean);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  Double  solverAbsoluteAccuracy  =  Double.parseDouble(sd,  inverseCumAccuracy,  mean);  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	Double  solverAbsoluteAccuracy  =  Double.parseDouble(sd,  inverseCumAccuracy,  mean);	  Double    solverAbsoluteAccuracy    =    Double.parseDouble(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
57	[BUG]  [BUGGY]  Double  solverAbsoluteAccuracy  =  Double.parseDouble(sd,  mean,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  Double  solverAbsoluteAccuracy  =  Double.parseDouble(sd,  mean,  inverseCumAccuracy);  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	Double  solverAbsoluteAccuracy  =  Double.parseDouble(sd,  mean,  inverseCumAccuracy);	  Double    solverAbsoluteAccuracy    =    Double.parseDouble(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
58	[BUG]  [BUGGY]  Double  solverAbsoluteAccuracy  =  Double.parseDouble(sd,  inverseCumAccuracy,  standardDeviation);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  Double  solverAbsoluteAccuracy  =  Double.parseDouble(sd,  inverseCumAccuracy,  standardDeviation);  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	Double  solverAbsoluteAccuracy  =  Double.parseDouble(sd,  inverseCumAccuracy,  standardDeviation);	  Double    solverAbsoluteAccuracy    =    Double.parseDouble(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
59	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  double  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	double  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;	  double    solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
60	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  double  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	double  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  double    solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
61	[BUG]  [BUGGY]  double  standardDeviation  =  sd  +  1;  [CE]  illegal  start  of  type  [FE]        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  double  standardDeviation  =  sd  +  1;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	double  standardDeviation  =  sd  +  1;	  standardDeviation    =    sd    +    1;    double    standardDeviation    =    sd    +    1;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
62	[BUG]  [BUGGY]  Double  standardDeviation  =  sd  +  1;  [CE]  illegal  start  of  type  [FE]          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  Double  standardDeviation  =  sd  +  1;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	Double  standardDeviation  =  sd  +  1;	  standardDeviation    =    sd    +    1;    double    standardDeviation    =    sd    +    1;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
63	[BUG]  [BUGGY]  StandardDistributionImpl  solver  =  new  NormalDistributionImpl();  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  StandardDistributionImpl  solver  =  new  NormalDistributionImpl();  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	StandardDistributionImpl  solver  =  new  NormalDistributionImpl();	  standardDeviation    =    sd    +    1;    double    standardDeviation    =    sd    +    1;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
64	[BUG]  [BUGGY]  StandardDeviation  standardDeviation  =  inverseCumAccuracy;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  StandardDeviation  standardDeviation  =  inverseCumAccuracy;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	StandardDeviation  standardDeviation  =  inverseCumAccuracy;	  standardDeviation    =    inverseCumAccuracy;    StandardDeviation    standardDeviation    =    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
65	[BUG]  [BUGGY]  StandardDistributionImpl  solverAbsoluteAccuracy  =  inverseCumAccuracy;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  StandardDistributionImpl  solverAbsoluteAccuracy  =  inverseCumAccuracy;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	StandardDistributionImpl  solverAbsoluteAccuracy  =  inverseCumAccuracy;	  standardDeviation    =    inverseCumAccuracy;    standardDeviation    =    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
66	[BUG]  [BUGGY]  StandardDistributionImpl  solverAbsoluteAccuracy  =  new  StandardDistributionImpl(sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  StandardDistributionImpl  solverAbsoluteAccuracy  =  new  StandardDistributionImpl(sd,  inverseCumAccuracy);  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	StandardDistributionImpl  solverAbsoluteAccuracy  =  new  StandardDistributionImpl(sd,  inverseCumAccuracy);	  standardDeviation    =    inverseCumAccuracy;    standardDeviation    =    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
67	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    DEFAULT_INVERSION_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
68	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  +  1;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  +  1;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  +  1;	  this.standardDeviation    =    DEFAULT_INVERSION_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
69	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  sd;  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  sd;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  sd;	  this.standardDeviation    =    sd    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
70	[BUG]  [BUGGY]  this.standardDeviation  =  sd  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  this.standardDeviation  =  sd  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  sd  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    sd    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
71	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;	  this.standardDeviation    =    sd    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
72	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  Double.parseDouble(sd,  null);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  double  solverAbsoluteAccuracy  =  Double.parseDouble(sd,  null);  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	double  solverAbsoluteAccuracy  =  Double.parseDouble(sd,  null);	  double    solverAbsoluteAccuracy    =    Double.parseDouble(null,    sd);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
73	[BUG]  [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
74	[BUG]  [BUGGY]  StandardDeviation  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  inverseCumAccuracy;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  StandardDeviation  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  inverseCumAccuracy;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	StandardDeviation  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  inverseCumAccuracy;	  StandardDeviation    standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
75	[BUG]  [BUGGY]  StandardDeviation  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  StandardDeviation  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	StandardDeviation  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  StandardDeviation    standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
76	[BUG]  [BUGGY]  StandardDeviation  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  StandardDeviation  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	StandardDeviation  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  StandardDeviation    standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
77	[BUG]  [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY.doubleValue()  +  1;  [CE]  <identifier>  expected  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY.doubleValue()  +  1;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY.doubleValue()  +  1;	  standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY.doubleValue();    	non-compiled	[CE]  <identifier>  expected	50	None	replace
78	[BUG]  [BUGGY]  normalDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  normalDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	normalDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    normalDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
79	[BUG]  [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  normalDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  inverseCumAccuracy;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  normalDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  inverseCumAccuracy;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  normalDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  inverseCumAccuracy;	  standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    normalDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
80	[BUG]  [BUGGY]  this.standardDeviation  =  normalize(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  this.standardDeviation  =  normalize(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  normalize(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);	  this.standardDeviation    =    normalize(sd,    inverseCumAccuracy,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
81	[BUG]  [BUGGY]  this.standardDeviation  =  normalize(sd,  inverseCumAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  this.standardDeviation  =  normalize(sd,  inverseCumAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  normalize(sd,  inverseCumAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);	  this.standardDeviation    =    normalize(sd,    inverseCumAccuracy,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
82	[BUG]  [BUGGY]  this.standardDeviation  =  normalize(sd,  inverseCumAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  this.standardDeviation  =  normalize(sd,  inverseCumAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  normalize(sd,  inverseCumAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);	  this.standardDeviation    =    normalize(sd,    inverseCumAccuracy,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
83	[BUG]  [BUGGY]  this.standardDeviation  =  normalize(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  this.standardDeviation  =  normalize(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  normalize(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);	  this.standardDeviation    =    normalize(sd,    solverAbsoluteAccuracy,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
84	[BUG]  [BUGGY]  this.standardDeviation  =  normalize(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  this.standardDeviation  =  normalize(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  normalize(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  this.standardDeviation    =    normalize(sd,    inverseCumAccuracy,    solverAbsoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
85	[BUG]  [BUGGY]  this.standardDeviation  =  sd  +  solverAbsoluteAccuracy;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  this.standardDeviation  =  sd  +  solverAbsoluteAccuracy;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  sd  +  solverAbsoluteAccuracy;	  this.standardDeviation    =    sd    +    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
86	[BUG]  [BUGGY]  this.standardDeviation  =  inverseCumAccuracy  +  sd;  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  this.standardDeviation  =  inverseCumAccuracy  +  sd;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  inverseCumAccuracy  +  sd;	  this.standardDeviation    =    sd    +    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
87	[BUG]  [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  sd;  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  sd;  [CE]  <identifier>  expected  [FE]    ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  sd;  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  sd;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    sd;    standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  sd;	  	non-compiled	[CE]  <identifier>  expected	5	None	add
88	[BUG]  [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  sd;  StandardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  sd;  [CE]  <identifier>  expected  [FE]      ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  sd;  StandardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  sd;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    sd;    StandardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  sd;	  	non-compiled	[CE]  <identifier>  expected	5	None	add
89	[BUG]  [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  sd;  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  sd);  [CE]  <identifier>  expected  [FE]        ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  sd;  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  sd);  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    sd;    standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  sd);	  	non-compiled	[CE]  <identifier>  expected	5	None	add
90	[BUG]  [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  sd;  normalDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  sd;  [CE]  <identifier>  expected  [FE]          ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  sd;  normalDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  sd;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    sd;    normalDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  sd;	  	non-compiled	[CE]  <identifier>  expected	5	None	add
91	[BUG]  [BUGGY]  normeDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  normeDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	normeDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    normeDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	51	None	replace
92	[BUG]  [BUGGY]  Normalization  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  Normalization  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	Normalization  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    normeDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	51	None	replace
93	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY.doubleValue();  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  double  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY.doubleValue();  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	double  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY.doubleValue();	  double    solverAbsoluteAccuracy    =    mean.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
94	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  this.mean.doubleValue();  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  double  solverAbsoluteAccuracy  =  this.mean.doubleValue();  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	double  solverAbsoluteAccuracy  =  this.mean.doubleValue();	  double    solverAbsoluteAccuracy    =    mean.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
95	[BUG]  [BUGGY]  StandardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  StandardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	StandardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    StandardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
96	[BUG]  [BUGGY]  NormalDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  NormalDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	NormalDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    StandardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
97	[BUG]  [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  *  SQRT2PI;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  *  SQRT2PI;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  *  SQRT2PI;	  standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    /    SQRT2PI;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
98	[BUG]  [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  SQRT2PI  +  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  SQRT2PI  +  1;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  SQRT2PI  +  1;	  standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    /    SQRT2PI;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
99	[BUG]  [BUGGY]  StandardDeviation  standardDeviation  =  sd.doubleValue();  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  StandardDeviation  standardDeviation  =  sd.doubleValue();  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	StandardDeviation  standardDeviation  =  sd.doubleValue();	  standardDeviation    =    sd.doubleValue()    +    1;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
100	[BUG]  [BUGGY]  StandardDeviation  normalDeviation  =  sd.doubleValue();  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  StandardDeviation  normalDeviation  =  sd.doubleValue();  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	StandardDeviation  normalDeviation  =  sd.doubleValue();	  standardDeviation    =    sd.doubleValue()    +    1;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
101	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  this.inverseCumAccuracy.doubleValue()  +  1;  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  double  solverAbsoluteAccuracy  =  this.inverseCumAccuracy.doubleValue()  +  1;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	double  solverAbsoluteAccuracy  =  this.inverseCumAccuracy.doubleValue()  +  1;	  double    solverAbsoluteAccuracy    =    this.inverseCumAccuracy.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
102	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  this.inverseCumAccuracy.doubleValue()  /  2;  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  double  solverAbsoluteAccuracy  =  this.inverseCumAccuracy.doubleValue()  /  2;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	double  solverAbsoluteAccuracy  =  this.inverseCumAccuracy.doubleValue()  /  2;	  double    solverAbsoluteAccuracy    =    this.inverseCumAccuracy.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
103	[BUG]  [BUGGY]  Double  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  Double  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	Double  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  double    solverAbsoluteAccuracy    =    mean;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
104	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
105	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;	  this.standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
106	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  this.inverseCumAccuracy.doubleValue()  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  double  solverAbsoluteAccuracy  =  this.inverseCumAccuracy.doubleValue()  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	double  solverAbsoluteAccuracy  =  this.inverseCumAccuracy.doubleValue()  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  double    solverAbsoluteAccuracy    =    this.inverseCumAccuracy.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
107	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy;  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy;	  this.standardDeviation    =    sd,    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
108	[BUG]  [BUGGY]  standardDeviation  =  sd  +  1;  StandardDeviation  =  sd  +  2;  [CE]  <identifier>  expected  [FE]          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  standardDeviation  =  sd  +  1;  StandardDeviation  =  sd  +  2;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation  =  sd  +  1;  StandardDeviation  =  sd  +  2;	  standardDeviation    =    sd    +    1;    StandardDeviation    =    sd    +    1;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
109	[BUG]  [BUGGY]  this.standardDeviation  =  inverseCumAccuracy;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  this.standardDeviation  =  inverseCumAccuracy;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  inverseCumAccuracy;  solverAbsoluteAccuracy  =  inverseCumAccuracy;	  this.standardDeviation    =    sd;    solverAbsoluteAccuracy    =    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
110	[BUG]  [BUGGY]  this.standardDeviation  =  sd  +  1;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  this.standardDeviation  =  sd  +  1;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  sd  +  1;  solverAbsoluteAccuracy  =  inverseCumAccuracy;	  this.standardDeviation    =    sd;    solverAbsoluteAccuracy    =    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
111	[BUG]  [BUGGY]  Double  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY.doubleValue();  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  Double  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY.doubleValue();  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	Double  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY.doubleValue();	  Double    solverAbsoluteAccuracy    =    inverseCumAccuracy.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
112	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  Double.parseDouble(sd,  standardDeviation,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  double  solverAbsoluteAccuracy  =  Double.parseDouble(sd,  standardDeviation,  inverseCumAccuracy);  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	double  solverAbsoluteAccuracy  =  Double.parseDouble(sd,  standardDeviation,  inverseCumAccuracy);	  double    solverAbsoluteAccuracy    =    Double.parseDouble(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
113	[BUG]  [BUGGY]  this.standardDeviation  =  sd  +  1L;  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  this.standardDeviation  =  sd  +  1L;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  sd  +  1L;	  this.standardDeviation    =    sd    +    1;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
114	[BUG]  [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  inverseCumAccuracy;  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  inverseCumAccuracy;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  inverseCumAccuracy;	  standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
115	[BUG]  [BUGGY]  standardDeviation  =  sd  /  SQRT2PI;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  standardDeviation  =  sd  /  SQRT2PI;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation  =  sd  /  SQRT2PI;	  standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    /    SQRT2PI;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
116	[BUG]  [BUGGY]  standardDeviation  =  SQRT2PI  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  standardDeviation  =  SQRT2PI  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation  =  SQRT2PI  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    /    SQRT2PI;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
117	[BUG]  [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  sd  +  1;  [CE]  <identifier>  expected  [FE]    ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  sd  +  1;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  sd  +  1;	  standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    sd;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
118	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  double  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	double  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;	  double    solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
119	[BUG]  [BUGGY]  this.standardDeviation  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  this.standardDeviation  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURacy;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
120	[BUG]  [BUGGY]  standardDeviation  =  sd  *  2;  [CE]  <identifier>  expected  [FE]        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  standardDeviation  =  sd  *  2;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation  =  sd  *  2;	  standardDeviation    =    sd    +    2;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
121	[BUG]  [BUGGY]  double  standardDeviation  =  sd  +  2;  [CE]  illegal  start  of  type  [FE]        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  double  standardDeviation  =  sd  +  2;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	double  standardDeviation  =  sd  +  2;	  standardDeviation    =    sd    +    1;    double    standardDeviation    =    sd    +    1;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
122	[BUG]  [BUGGY]  StandardDeviation  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  StandardDeviation  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	StandardDeviation  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy;	  StandardDeviation    standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
123	[BUG]  [BUGGY]  StandardDeviation  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  StandardDeviation  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	StandardDeviation  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;	  StandardDeviation    standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
124	[BUG]  [BUGGY]  StandardDeviation  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  inverseCumAccuracy;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  StandardDeviation  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  inverseCumAccuracy;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	StandardDeviation  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  inverseCumAccuracy;	  StandardDeviation    standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
125	[BUG]  [BUGGY]  StandardDeviation  =  sd.doubleValue();  [CE]  <identifier>  expected  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  StandardDeviation  =  sd.doubleValue();  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	StandardDeviation  =  sd.doubleValue();	  standardDeviation    =    sd.doubleValue()    +    1;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
126	[BUG]  [BUGGY]  Double  solverAbsoluteAccuracy  =  Double.parseDouble(message,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  Double  solverAbsoluteAccuracy  =  Double.parseDouble(message,  sd,  inverseCumAccuracy);  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	Double  solverAbsoluteAccuracy  =  Double.parseDouble(message,  sd,  inverseCumAccuracy);	  Double    solverAbsoluteAccuracy    =    Double.parseDouble(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
127	[BUG]  [BUGGY]  Double  solverAbsoluteAccuracy  =  Double.parseDouble(sd,  standardDeviation,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  Double  solverAbsoluteAccuracy  =  Double.parseDouble(sd,  standardDeviation,  inverseCumAccuracy);  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	Double  solverAbsoluteAccuracy  =  Double.parseDouble(sd,  standardDeviation,  inverseCumAccuracy);	  Double    solverAbsoluteAccuracy    =    Double.parseDouble(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
128	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  double  solverAbsoluteAccuracy  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	double  solverAbsoluteAccuracy  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;	  double    solverAbsoluteAccuracy    =    inverseCumAccuracy    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
129	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  Double.parseDouble(this.mean);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  double  solverAbsoluteAccuracy  =  Double.parseDouble(this.mean);  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	double  solverAbsoluteAccuracy  =  Double.parseDouble(this.mean);	  double    solverAbsoluteAccuracy    =    Double.parseDouble(mean);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
130	[BUG]  [BUGGY]  NormalizedDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  NormalizedDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	NormalizedDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    normeDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	51	None	replace
131	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  Double.parseDouble(null,  mean);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  double  solverAbsoluteAccuracy  =  Double.parseDouble(null,  mean);  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	double  solverAbsoluteAccuracy  =  Double.parseDouble(null,  mean);	  double    solverAbsoluteAccuracy    =    Double.parseDouble(null,    sd);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
132	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  Double.parseDouble(null,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  double  solverAbsoluteAccuracy  =  Double.parseDouble(null,  sd,  inverseCumAccuracy);  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	double  solverAbsoluteAccuracy  =  Double.parseDouble(null,  sd,  inverseCumAccuracy);	  double    solverAbsoluteAccuracy    =    Double.parseDouble(null,    sd);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
133	[BUG]  [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  2;  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  2;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  2;	  standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    1;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
134	[BUG]  [BUGGY]  standardDeviation  =  SQRT2PI  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  standardDeviation  =  SQRT2PI  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation  =  SQRT2PI  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    SQRT2PI;    	non-compiled	[CE]  <identifier>  expected	60	None	replace
135	[BUG]  [BUGGY]  this.standardDeviation  =  SQRT2PI  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  this.standardDeviation  =  SQRT2PI  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  SQRT2PI  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    SQRT2PI;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
136	[BUG]  [BUGGY]  this.standardDeviation  =  sd  +  defULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  this.standardDeviation  =  sd  +  defULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  sd  +  defULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    sd    +    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
137	[BUG]  [BUGGY]  standardDeviation  =  standardDeviation.doubleValue();  [CE]  <identifier>  expected  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  standardDeviation  =  standardDeviation.doubleValue();  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation  =  standardDeviation.doubleValue();	  standardDeviation    =    SQRT2PI.doubleValue();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
138	[BUG]  [BUGGY]  StandardDeviation  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY.doubleValue();  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  StandardDeviation  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY.doubleValue();  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	StandardDeviation  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY.doubleValue();	  standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
139	[BUG]  [BUGGY]  this.standardDeviation  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  this.standardDeviation  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    sd    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
140	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  Double.parseDouble(mime,  sd);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  double  solverAbsoluteAccuracy  =  Double.parseDouble(mime,  sd);  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	double  solverAbsoluteAccuracy  =  Double.parseDouble(mime,  sd);	  double    solverAbsoluteAccuracy    =    Double.parseDouble(mean,    sd);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
141	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  Double.parseDouble(sd,  sd);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  double  solverAbsoluteAccuracy  =  Double.parseDouble(sd,  sd);  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	double  solverAbsoluteAccuracy  =  Double.parseDouble(sd,  sd);	  double    solverAbsoluteAccuracy    =    Double.parseDouble(message,    sd);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
142	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  sd.doubleValue()  +  2;  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  double  solverAbsoluteAccuracy  =  sd.doubleValue()  +  2;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	double  solverAbsoluteAccuracy  =  sd.doubleValue()  +  2;	  double    solverAbsoluteAccuracy    =    sd.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
143	[BUG]  [BUGGY]  if(sd  <  =  0)  {  this.standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  if(sd  <  =  0)  {  this.standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	if(sd  <  =  0)  {  this.standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }	  this.standardDeviation    =    sd;    solverAbsoluteAccuracy    =    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
144	[BUG]  [BUGGY]  if(sd  >  0)  {  this.standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  if(sd  >  0)  {  this.standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	if(sd  >  0)  {  this.standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }	  this.standardDeviation    =    sd;    solverAbsoluteAccuracy    =    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
145	[BUG]  [BUGGY]  StandardDeviation  =  sd  +  2;  [CE]  <identifier>  expected  [FE]          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  StandardDeviation  =  sd  +  2;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	StandardDeviation  =  sd  +  2;	  standardDeviation    =    sd    +    1;    StandardDeviation    =    sd    +    1;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
146	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  DFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  double  solverAbsoluteAccuracy  =  DFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	double  solverAbsoluteAccuracy  =  DFAULT_INVERSE_ABSOLUTE_ACCURACY;	  double    solverAbsoluteAccuracy    =    mean;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
147	[BUG]  [BUGGY]  this.standardDeviation  =  normalize(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  this.standardDeviation  =  normalize(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  normalize(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  this.standardDeviation    =    normalize(sd,    inverseCumAccuracy,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
148	[BUG]  [BUGGY]  StandardDeviation  <  N,  V>  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  StandardDeviation  <  N,  V>  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	StandardDeviation  <  N,  V>  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
149	[BUG]  [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  sd;  [CE]  <identifier>  expected  [FE]    ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  sd;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  sd;	  standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    sd;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
150	[BUG]  [BUGGY]  StandardDeviation  normalDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  StandardDeviation  normalDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	StandardDeviation  normalDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    normalDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
151	[BUG]  [BUGGY]  StandardDeviation  standardDeviation  =  sd  +  1;  [CE]  illegal  start  of  type  [FE]        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  StandardDeviation  standardDeviation  =  sd  +  1;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	StandardDeviation  standardDeviation  =  sd  +  1;	  standardDeviation    =    sd    +    1L;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
152	[BUG]  [BUGGY]  this.standardDeviation  =  sd  *  inverseCumAccuracy;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  this.standardDeviation  =  sd  *  inverseCumAccuracy;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  sd  *  inverseCumAccuracy;	  this.standardDeviation    =    sd    +    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
153	[BUG]  [BUGGY]  StandardDeviation  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  SQRT2PI;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  StandardDeviation  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  SQRT2PI;  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	StandardDeviation  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  SQRT2PI;	  StandardDeviation    standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
154	[BUG]  [BUGGY]  StandardDeviation  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  StandardDeviation  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);  [BUGGY]      solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	StandardDeviation  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);	  StandardDeviation    standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  ';'  expected	56	None	replace
155	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  Double.parseDouble(mean),  inverseCumAccuracy);  [CE]  ';'  expected  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;      [BUGGY]  double  solverAbsoluteAccuracy  =  Double.parseDouble(mean),  inverseCumAccuracy);  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	double  solverAbsoluteAccuracy  =  Double.parseDouble(mean),  inverseCumAccuracy);	  double    solverAbsoluteAccuracy    =    Double.parseDouble(mean);    	non-compiled	[CE]  ';'  expected	4	None	replace
