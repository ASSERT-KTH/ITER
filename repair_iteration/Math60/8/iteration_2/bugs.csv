bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  Double.parseDouble(sd,  inverseCumAccuracy);  [CE]  method  parseDouble  in  class  Double  cannot  be  applied  to  given  types;  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  double  solverAbsoluteAccuracy  =  Double.parseDouble(sd,  inverseCumAccuracy);  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	double  solverAbsoluteAccuracy  =  Double.parseDouble(sd,  inverseCumAccuracy);	      double    solverAbsoluteAccuracy    =    Double.parseDouble(sd);    	non-compiled	[CE]  method  parseDouble  in  class  Double  cannot  be  applied  to  given  types;	14	None	replace
2	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  Double.parseDouble(mean,  sd);  [CE]  method  parseDouble  in  class  Double  cannot  be  applied  to  given  types;  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  double  solverAbsoluteAccuracy  =  Double.parseDouble(mean,  sd);  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	double  solverAbsoluteAccuracy  =  Double.parseDouble(mean,  sd);	      double    solverAbsoluteAccuracy    =    Double.parseDouble(sd);    	non-compiled	[CE]  method  parseDouble  in  class  Double  cannot  be  applied  to  given  types;	14	None	replace
3	[BUG]  [BUGGY]  Double  solverAbsoluteAccuracy  =  Double.parseDouble(sd,  inverseCumAccuracy);  [CE]  method  parseDouble  in  class  Double  cannot  be  applied  to  given  types;  [FE]              ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  Double  solverAbsoluteAccuracy  =  Double.parseDouble(sd,  inverseCumAccuracy);  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	Double  solverAbsoluteAccuracy  =  Double.parseDouble(sd,  inverseCumAccuracy);	      double    solverAbsoluteAccuracy    =    Double.parseDouble(sd);    	non-compiled	[CE]  method  parseDouble  in  class  Double  cannot  be  applied  to  given  types;	14	None	replace
4	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  Double.parseDouble(mean);  [CE]  method  parseDouble  in  class  Double  cannot  be  applied  to  given  types;  [FE]                ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  double  solverAbsoluteAccuracy  =  Double.parseDouble(mean);  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	double  solverAbsoluteAccuracy  =  Double.parseDouble(mean);	      double    solverAbsoluteAccuracy    =    Double.parseDouble(sd);    	non-compiled	[CE]  method  parseDouble  in  class  Double  cannot  be  applied  to  given  types;	14	None	replace
5	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionFailedError    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  sd;  [BUGGY]    solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	add	standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  sd;	  standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  ConvergenceException  	7	5	replace
6	[BUG]  [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  sd;  [FE]  ConvergenceException  [FE]    AssertionFailedError    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  sd;  [BUGGY]    solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  sd;	  standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  ConvergenceException  	7	5	replace
7	[BUG]  [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]    solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;	  standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
8	[BUG]  [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  SQRT2PI;  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  SQRT2PI;  [BUGGY]    solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  SQRT2PI;	  standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
9	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]        ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	      this.standardDeviation    =    normalDeviation;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
10	[BUG]  [BUGGY]  this.standardDeviation  =  SQRT2PI;  [CE]  illegal  start  of  type  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  this.standardDeviation  =  SQRT2PI;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  SQRT2PI;	      this.standardDeviation    =    normalDeviation;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
11	[BUG]  [BUGGY]  standardDeviation  =  sd  +  1;  standardDeviation  =  sd  +  1;  [CE]  <identifier>  expected  [FE]    ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  standardDeviation  =  sd  +  1;  standardDeviation  =  sd  +  1;  [BUGGY]    solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation    =    sd    +    1;    standardDeviation  =  sd  +  1;	  	non-compiled	[CE]  <identifier>  expected	8	None	add
12	[BUG]  [BUGGY]  standardDeviation  =  sd  +  1;  StandardDeviation  =  sd  +  1;  [CE]  <identifier>  expected  [FE]      ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  standardDeviation  =  sd  +  1;  StandardDeviation  =  sd  +  1;  [BUGGY]    solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation    =    sd    +    1;    StandardDeviation  =  sd  +  1;	  	non-compiled	[CE]  <identifier>  expected	8	None	add
13	[BUG]  [BUGGY]  standardDeviation  =  sd  +  1;  normalDeviation  =  sd  +  1;  [CE]  <identifier>  expected  [FE]        ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  standardDeviation  =  sd  +  1;  normalDeviation  =  sd  +  1;  [BUGGY]    solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation    =    sd    +    1;    normalDeviation  =  sd  +  1;	  	non-compiled	[CE]  <identifier>  expected	8	None	add
14	[BUG]  [BUGGY]  standardDeviation  =  sd  +  1;  sd  =  sd  +  1;  [CE]  <identifier>  expected  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  standardDeviation  =  sd  +  1;  sd  =  sd  +  1;  [BUGGY]    solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation    =    sd    +    1;    sd  =  sd  +  1;	  	non-compiled	[CE]  <identifier>  expected	8	None	add
15	[BUG]  [BUGGY]  this.standardDeviation  =  normalize(sd,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  this.standardDeviation  =  normalize(sd,  solverAbsoluteAccuracy);  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  normalize(sd,  solverAbsoluteAccuracy);	      this.standardDeviation    =    normalize(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
16	[BUG]  [BUGGY]  this.standardDeviation  =  normalize(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]              ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  this.standardDeviation  =  normalize(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy);  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  normalize(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy);	      this.standardDeviation    =    normalize(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
17	[BUG]  [BUGGY]  this.standardDeviation  =  Normalize(sd,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  this.standardDeviation  =  Normalize(sd,  solverAbsoluteAccuracy);  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  Normalize(sd,  solverAbsoluteAccuracy);	      this.standardDeviation    =    normalize(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
18	[BUG]  [BUGGY]  standardDeviation  =  inverseCumAccuracy;  standardDeviation  =  inverseCumAccuracy;  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  standardDeviation  =  inverseCumAccuracy;  standardDeviation  =  inverseCumAccuracy;  [BUGGY]    solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation    =    inverseCumAccuracy;    standardDeviation  =  inverseCumAccuracy;	  	non-compiled	[CE]  <identifier>  expected	11	None	add
19	[BUG]  [BUGGY]  standardDeviation  =  inverseCumAccuracy;  StandardDeviation  =  inverseCumAccuracy;  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  standardDeviation  =  inverseCumAccuracy;  StandardDeviation  =  inverseCumAccuracy;  [BUGGY]    solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation    =    inverseCumAccuracy;    StandardDeviation  =  inverseCumAccuracy;	  	non-compiled	[CE]  <identifier>  expected	11	None	add
20	[BUG]  [BUGGY]  standardDeviation  =  inverseCumAccuracy;  StandardDeviation  standardDeviation  =  inverseCumAccuracy;  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  standardDeviation  =  inverseCumAccuracy;  StandardDeviation  standardDeviation  =  inverseCumAccuracy;  [BUGGY]    solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation    =    inverseCumAccuracy;    StandardDeviation  standardDeviation  =  inverseCumAccuracy;	  	non-compiled	[CE]  <identifier>  expected	11	None	add
21	[BUG]  [BUGGY]  standardDeviation  =  inverseCumAccuracy;  normalDeviation  =  inverseCumAccuracy;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  standardDeviation  =  inverseCumAccuracy;  normalDeviation  =  inverseCumAccuracy;  [BUGGY]    solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation    =    inverseCumAccuracy;    normalDeviation  =  inverseCumAccuracy;	  	non-compiled	[CE]  <identifier>  expected	11	None	add
22	[BUG]  [BUGGY]  this.standardDeviation  =  sd  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  this.standardDeviation  =  sd  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  sd  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	      this.standardDeviation    =    mean;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
23	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY;	      this.standardDeviation    =    mean;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
24	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  sd.doubleValue();  [CE]  illegal  start  of  type  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  double  solverAbsoluteAccuracy  =  sd.doubleValue();  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	double  solverAbsoluteAccuracy  =  sd.doubleValue();	      double    solverAbsoluteAccuracy    =    inverseCumAccuracy.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
25	[BUG]  [BUGGY]  Double  solverAbsoluteAccuracy  =  inverseCumAccuracy.doubleValue();  [CE]  illegal  start  of  type  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  Double  solverAbsoluteAccuracy  =  inverseCumAccuracy.doubleValue();  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	Double  solverAbsoluteAccuracy  =  inverseCumAccuracy.doubleValue();	      double    solverAbsoluteAccuracy    =    inverseCumAccuracy.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
26	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  inverseCumAccuracy.doubleValue()  +  1;  [CE]  illegal  start  of  type  [FE]              ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  double  solverAbsoluteAccuracy  =  inverseCumAccuracy.doubleValue()  +  1;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	double  solverAbsoluteAccuracy  =  inverseCumAccuracy.doubleValue()  +  1;	      double    solverAbsoluteAccuracy    =    inverseCumAccuracy.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
27	[BUG]  [BUGGY]  standardDeviation  =  sd  +  2;  [CE]  <identifier>  expected  [FE]    ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  standardDeviation  =  sd  +  2;  [BUGGY]    solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation  =  sd  +  2;	  standardDeviation    =    sd    +    1;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
28	[BUG]  [BUGGY]  standardDeviation  =  sd  +  3;  [CE]  <identifier>  expected  [FE]      ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  standardDeviation  =  sd  +  3;  [BUGGY]    solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation  =  sd  +  3;	  standardDeviation    =    sd    +    1;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
29	[BUG]  [BUGGY]  this.standardDeviation  =  sd  +  1;  [CE]  illegal  start  of  type  [FE]                ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  this.standardDeviation  =  sd  +  1;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  sd  +  1;	      this.standardDeviation    =    sd;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
30	[BUG]  [BUGGY]  standardDeviation  =  SQRT2PI.doubleValue();  [CE]  <identifier>  expected  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  standardDeviation  =  SQRT2PI.doubleValue();  [BUGGY]    solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation  =  SQRT2PI.doubleValue();	  standardDeviation    =    sd.doubleValue();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
31	[BUG]  [BUGGY]  standardDeviation  =  sd.doubleValue()  +  1;  [CE]  <identifier>  expected  [FE]              ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  standardDeviation  =  sd.doubleValue()  +  1;  [BUGGY]    solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation  =  sd.doubleValue()  +  1;	  standardDeviation    =    sd.doubleValue();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
32	[BUG]  [BUGGY]  this.standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  [CE]  illegal  start  of  type  [FE]              ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  this.standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;	      this.standardDeviation    =    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
33	[BUG]  [BUGGY]  this.standardDeviation  =  sd,  inverseCumAccuracy;  [CE]  illegal  start  of  type  [FE]                ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  this.standardDeviation  =  sd,  inverseCumAccuracy;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  sd,  inverseCumAccuracy;	      this.standardDeviation    =    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
34	[BUG]  [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  	non-compiled	[CE]  <identifier>  expected	6	None	add
35	[BUG]  [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  StandardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  StandardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    StandardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  	non-compiled	[CE]  <identifier>  expected	6	None	add
36	[BUG]  [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  normalDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  normalDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    normalDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  	non-compiled	[CE]  <identifier>  expected	6	None	add
37	[BUG]  [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  standardsDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  standardsDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    standardsDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  	non-compiled	[CE]  <identifier>  expected	6	None	add
38	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  sd;  [CE]  illegal  start  of  type  [FE]        ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  double  solverAbsoluteAccuracy  =  sd;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	double  solverAbsoluteAccuracy  =  sd;	      double    solverAbsoluteAccuracy    =    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
39	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  double  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	double  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	      double    solverAbsoluteAccuracy    =    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
40	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  mean;  [CE]  illegal  start  of  type  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  double  solverAbsoluteAccuracy  =  mean;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	double  solverAbsoluteAccuracy  =  mean;	      double    solverAbsoluteAccuracy    =    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
41	[BUG]  [BUGGY]  standardDeviation  =  sd  +  1L;  [CE]  <identifier>  expected  [FE]    ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  standardDeviation  =  sd  +  1L;  [BUGGY]    solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation  =  sd  +  1L;	  standardDeviation    =    sd    +    1;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
42	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]        ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  double  solverAbsoluteAccuracy  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	double  solverAbsoluteAccuracy  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	      double    solverAbsoluteAccuracy    =    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
43	[BUG]  [BUGGY]  standardDeviation  =  inverseCumAccuracy;  standardsDeviation  =  inverseCumAccuracy;  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  standardDeviation  =  inverseCumAccuracy;  standardsDeviation  =  inverseCumAccuracy;  [BUGGY]    solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation    =    inverseCumAccuracy;    standardsDeviation  =  inverseCumAccuracy;	  	non-compiled	[CE]  <identifier>  expected	11	None	add
44	[BUG]  [BUGGY]  standardDeviation  =  sd  +  1;  double  standardDeviation  =  sd  +  1;  [CE]  <identifier>  expected  [FE]    ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  standardDeviation  =  sd  +  1;  double  standardDeviation  =  sd  +  1;  [BUGGY]    solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation    =    sd    +    1;    double  standardDeviation  =  sd  +  1;	  	non-compiled	[CE]  <identifier>  expected	8	None	add
45	[BUG]  [BUGGY]  this.standardDeviation  =  sd  +  inverseCumAccuracy;  [CE]  illegal  start  of  type  [FE]              ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  this.standardDeviation  =  sd  +  inverseCumAccuracy;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  sd  +  inverseCumAccuracy;	      this.standardDeviation    =    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
46	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURacy;  [CE]  illegal  start  of  type  [FE]                ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURacy;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURacy;	      this.standardDeviation    =    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
47	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE;  [CE]  illegal  start  of  type  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE;	      this.standardDeviation    =    mean;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
48	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  Double.parseDouble(null,  sd);  [CE]  illegal  start  of  type  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  double  solverAbsoluteAccuracy  =  Double.parseDouble(null,  sd);  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	double  solverAbsoluteAccuracy  =  Double.parseDouble(null,  sd);	      double    solverAbsoluteAccuracy    =    Double.parseDouble(sd);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
49	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  Double.parseDouble(message,  sd);  [CE]  illegal  start  of  type  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  double  solverAbsoluteAccuracy  =  Double.parseDouble(message,  sd);  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	double  solverAbsoluteAccuracy  =  Double.parseDouble(message,  sd);	      double    solverAbsoluteAccuracy    =    Double.parseDouble(sd);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
50	[BUG]  [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY.doubleValue();  [CE]  <identifier>  expected  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY.doubleValue();  [BUGGY]    solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY.doubleValue();	  standardDeviation    =    sd.doubleValue();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
51	[BUG]  [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  normeDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  normeDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    normeDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  	non-compiled	[CE]  <identifier>  expected	6	None	add
52	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  this.inverseCumAccuracy.doubleValue();  [CE]  illegal  start  of  type  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  double  solverAbsoluteAccuracy  =  this.inverseCumAccuracy.doubleValue();  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	double  solverAbsoluteAccuracy  =  this.inverseCumAccuracy.doubleValue();	      double    solverAbsoluteAccuracy    =    inverseCumAccuracy.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
53	[BUG]  [BUGGY]  double  solverAbsoluteAccuracy  =  mean.doubleValue();  [CE]  illegal  start  of  type  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  double  solverAbsoluteAccuracy  =  mean.doubleValue();  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	double  solverAbsoluteAccuracy  =  mean.doubleValue();	      double    solverAbsoluteAccuracy    =    inverseCumAccuracy.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
54	[BUG]  [BUGGY]  standardDeviation  =  sd,  inverseCumAccuracy.doubleValue();  [CE]  <identifier>  expected  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  standardDeviation  =  sd,  inverseCumAccuracy.doubleValue();  [BUGGY]    solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation  =  sd,  inverseCumAccuracy.doubleValue();	  standardDeviation    =    sd.doubleValue();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
55	[BUG]  [BUGGY]  this.standardDeviation  =  solverAbsoluteAccuracy;  [CE]  illegal  start  of  type  [FE]        ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  this.standardDeviation  =  solverAbsoluteAccuracy;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  solverAbsoluteAccuracy;	      this.standardDeviation    =    standardDeviation;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
56	[BUG]  [BUGGY]  StandardDeviation  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  StandardDeviation  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	StandardDeviation  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  standardDeviation    =    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
57	[BUG]  [BUGGY]  this.standardDeviation  =  normalize(sd,  inverseCumAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  this.standardDeviation  =  normalize(sd,  inverseCumAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  normalize(sd,  inverseCumAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	      this.standardDeviation    =    normalize(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
58	[BUG]  [BUGGY]  this.standardDeviation  =  normalize(sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]              ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  this.standardDeviation  =  normalize(sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	this.standardDeviation  =  normalize(sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);	      this.standardDeviation    =    normalize(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
59	[BUG]  [BUGGY]  standardDeviation  =  inverseCumAccuracy;  normeDeviation  =  inverseCumAccuracy;  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  standardDeviation  =  inverseCumAccuracy;  normeDeviation  =  inverseCumAccuracy;  [BUGGY]    solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation    =    inverseCumAccuracy;    normeDeviation  =  inverseCumAccuracy;	  	non-compiled	[CE]  <identifier>  expected	11	None	add
60	[BUG]  [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  SQRT2PI;  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;    [BUGGY]  standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  SQRT2PI;  [BUGGY]    solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	79	79	1	replace	standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  SQRT2PI;	  standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
