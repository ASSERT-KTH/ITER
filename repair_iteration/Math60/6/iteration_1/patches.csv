bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  inverseCumAccuracy);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  sd,  inverseCumAccuracy);	      super(LocalizedFormats.STANDARD_DEVIATION,    sd);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
2	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  mean,  sd);  [CE]  illegal  start  of  type  [FE]              ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  mean,  sd);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  mean,  sd);	      super(LocalizedFormats.STANDARD_DEVIATION,    sd);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
3	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  mean);  [CE]  illegal  start  of  type  [FE]                ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  mean);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  mean);	      super(LocalizedFormats.STANDARD_DEVIATION,    sd);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
4	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  standardDeviation);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  standardDeviation);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  sd,  standardDeviation);	      super(LocalizedFormats.STANDARD_DEVIATION,    sd);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
5	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  this.standardDeviation  =  standardDeviation;  [CE]  illegal  start  of  type  [FE]              ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  this.standardDeviation  =  standardDeviation;  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  this.standardDeviation  =  standardDeviation;	      super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    this.standardDeviation    =    standardDeviation;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
6	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);  this.standardDeviation  =  standardDeviation;  [CE]  illegal  start  of  type  [FE]                ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);  this.standardDeviation  =  standardDeviation;  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);  this.standardDeviation  =  standardDeviation;	      super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    this.standardDeviation    =    standardDeviation;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
7	[BUG]  [BUGGY]  this.standardDeviation  =  standardDeviation;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  this.standardDeviation  =  standardDeviation;  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this.standardDeviation  =  standardDeviation;	      super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    this.standardDeviation    =    standardDeviation;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
8	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd);  this.standardDeviation  =  standardDeviation;  [CE]  illegal  start  of  type  [FE]                    ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd);  this.standardDeviation  =  standardDeviation;  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  sd);  this.standardDeviation  =  standardDeviation;	      super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    this.standardDeviation    =    standardDeviation;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
9	[BUG]  [BUGGY]  this(null,  null,  sd,  null);  [CE]  illegal  start  of  type  [FE]                ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  this(null,  null,  sd,  null);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  sd,  null);	      this(null,    null,    null);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
10	[BUG]  [BUGGY]  this(null,  null,  null,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  this(null,  null,  null,  inverseCumAccuracy);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  null,  inverseCumAccuracy);	      this(null,    null,    null);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
11	[BUG]  [BUGGY]  this(null,  null,  null,  sd);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  this(null,  null,  null,  sd);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  null,  sd);	      this(null,    null,    null);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
12	[BUG]  [BUGGY]  this(null,  sd,  null,  null);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  this(null,  sd,  null,  null);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  sd,  null,  null);	      this(null,    null,    null);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
13	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  this.mean  =  mean;  [CE]  illegal  start  of  type  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  this.mean  =  mean;  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  this.mean  =  mean;	      super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    this.mean    =    mean;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
14	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd);  this.mean  =  mean;  [CE]  illegal  start  of  type  [FE]              ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd);  this.mean  =  mean;  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  sd);  this.mean  =  mean;	      super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    this.mean    =    mean;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
15	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]                ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	      super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    this.mean    =    mean;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
16	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);  this.mean  =  mean;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);  this.mean  =  mean;  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);  this.mean  =  mean;	      super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    this.mean    =    mean;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
17	[BUG]  [BUGGY]  this(null,  null,  mean,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  this(null,  null,  mean,  sd,  inverseCumAccuracy);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  mean,  sd,  inverseCumAccuracy);	      this(null,    null,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
18	[BUG]  [BUGGY]  this(mean,  null,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  this(mean,  null,  sd,  inverseCumAccuracy);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(mean,  null,  sd,  inverseCumAccuracy);	      this(null,    null,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
19	[BUG]  [BUGGY]  this(null,  null,  sd,  inverseCumAccuracy,  mean);  [CE]  illegal  start  of  type  [FE]              ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  this(null,  null,  sd,  inverseCumAccuracy,  mean);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  sd,  inverseCumAccuracy,  mean);	      this(null,    null,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
20	[BUG]  [BUGGY]  this(message,  null,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  this(message,  null,  sd,  inverseCumAccuracy);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(message,  null,  sd,  inverseCumAccuracy);	      this(null,    null,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
21	[BUG]  [BUGGY]  if  (sd  ==  0)  {  if  (sd  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  if  (sd  ==  0)  {  if  (sd  ==  0)  {  [BUGGY]    throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if    (sd    ==    0)    {    if  (sd  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
22	[BUG]  [BUGGY]  if  (sd  ==  0)  {  if  (sd  >=  0)  {  [CE]  illegal  start  of  expression  [FE]      ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  if  (sd  ==  0)  {  if  (sd  >=  0)  {  [BUGGY]    throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if    (sd    ==    0)    {    if  (sd  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
23	[BUG]  [BUGGY]  if  (sd  ==  0)  {  If  (sd  ==  0)  {  [CE]  ';'  expected  [FE]        ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  if  (sd  ==  0)  {  If  (sd  ==  0)  {  [BUGGY]    throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if    (sd    ==    0)    {    If  (sd  ==  0)  {	  	non-compiled	[CE]  ';'  expected	4	None	add
24	[BUG]  [BUGGY]  if  (sd  ==  0)  {  if  (sd!=  0)  {  [CE]  illegal  start  of  expression  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  if  (sd  ==  0)  {  if  (sd!=  0)  {  [BUGGY]    throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if    (sd    ==    0)    {    if  (sd!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
25	[BUG]  [BUGGY]  this(null,  null,  null,  sd,  null);  [CE]  illegal  start  of  type  [FE]              ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  this(null,  null,  null,  sd,  null);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  null,  sd,  null);	      this(null,    null,    null,    null);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
26	[BUG]  [BUGGY]  this(null,  null,  null,  null,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  this(null,  null,  null,  null,  inverseCumAccuracy);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  null,  null,  inverseCumAccuracy);	      this(null,    null,    null,    null);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
27	[BUG]  [BUGGY]  this(null,  null,  null,  inverseCumAccuracy,  null);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  this(null,  null,  null,  inverseCumAccuracy,  null);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  null,  inverseCumAccuracy,  null);	      this(null,    null,    null,    null);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
28	[BUG]  [BUGGY]  if(sd  <  =  0  ||  sd  >  STANDARD_DEVIATION)  {  [CE]  illegal  start  of  expression  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  if(sd  <  =  0  ||  sd  >  STANDARD_DEVIATION)  {  [BUGGY]    throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  =  0  ||  sd  >  STANDARD_DEVIATION)  {	  if(sd    <    =    0    ||    sd    >    standardDeviation)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
29	[BUG]  [BUGGY]  if(sd  <  0  ||  sd  >  standardDeviation)  {  [CE]  variable  standardDeviation  might  not  have  been  initialized  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  if(sd  <  0  ||  sd  >  standardDeviation)  {  [BUGGY]    throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  0  ||  sd  >  standardDeviation)  {	  if(sd    <    =    0    ||    sd    >    standardDeviation)    {    	non-compiled	[CE]  variable  standardDeviation  might  not  have  been  initialized	3	None	replace
30	[BUG]  [BUGGY]  if(sd  <  =  0  ||  sd  ==  standardDeviation)  {  [CE]  illegal  start  of  expression  [FE]              ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  if(sd  <  =  0  ||  sd  ==  standardDeviation)  {  [BUGGY]    throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  =  0  ||  sd  ==  standardDeviation)  {	  if(sd    <    =    0    ||    sd    >    standardDeviation)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
31	[BUG]  [BUGGY]  if(sd  <  0  ||  sd  >  MAX_STANDARD_DEVIATION)  {  [CE]  cannot  find  symbol  MAX_STANDARD_DEVIATION  [FE]        ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  if(sd  <  0  ||  sd  >  MAX_STANDARD_DEVIATION)  {  [BUGGY]    throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  0  ||  sd  >  MAX_STANDARD_DEVIATION)  {	  if(sd    <    =    0    ||    sd    >    MAX_STANDARD_DEVIATION)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_STANDARD_DEVIATION	18	None	replace
32	[BUG]  [BUGGY]  if(sd  <  =  0  ||  sd  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [CE]  illegal  start  of  expression  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  if(sd  <  =  0  ||  sd  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [BUGGY]    throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  =  0  ||  sd  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {	  if(sd    <    =    0    ||    sd    >    MAX_STANDARD_DEVIATION)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
33	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);  [CE]  illegal  start  of  type  [FE]        ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);	      super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
34	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);  [CE]  illegal  start  of  type  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);	      super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
35	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  mean,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  mean,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  mean,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	      super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
36	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ASSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]        ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ASSOLUTE_ACCURACY);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ASSOLUTE_ACCURACY);	      super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
37	[BUG]  [BUGGY]  if(sd  <  0  ||  sd  >  StandardDistributionImpl.STANDARD_DEVIATION)  {  [CE]  cannot  find  symbol  StandardDistributionImpl  [FE]    ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  if(sd  <  0  ||  sd  >  StandardDistributionImpl.STANDARD_DEVIATION)  {  [BUGGY]    throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  0  ||  sd  >  StandardDistributionImpl.STANDARD_DEVIATION)  {	  if    (sd    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  StandardDistributionImpl	2	None	replace
38	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  inverseCumAccuracy);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  inverseCumAccuracy);	      super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    mean);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
39	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE,  sd);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE,  sd);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE,  sd);	      super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    mean);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
40	[BUG]  [BUGGY]  if  (sd  <  =  0  ||  sd  >  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [CE]  illegal  start  of  expression  [FE]        ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  if  (sd  <  =  0  ||  sd  >  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [BUGGY]    throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if  (sd  <  =  0  ||  sd  >  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {	  if    (sd    <    =    0    ||    sd    >    StandardDeviation.STANDARD_DEVIATION)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
41	[BUG]  [BUGGY]  if  (sd  <  =  0  ||  sd  ==  StandardDeviation.STANDARD_DEVIATION)  {  [CE]  illegal  start  of  expression  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  if  (sd  <  =  0  ||  sd  ==  StandardDeviation.STANDARD_DEVIATION)  {  [BUGGY]    throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if  (sd  <  =  0  ||  sd  ==  StandardDeviation.STANDARD_DEVIATION)  {	  if    (sd    <    =    0    ||    sd    >    StandardDeviation.STANDARD_DEVIATION)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
42	[BUG]  [BUGGY]  this.standardDeviation  =  sd;  [CE]  illegal  start  of  type  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  this.standardDeviation  =  sd;  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this.standardDeviation  =  sd;	      this.standardDeviation    =    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
43	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]              ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	      this.standardDeviation    =    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
44	[BUG]  [BUGGY]  this.standardDeviation  =  sd  +  inverseCumAccuracy;  [CE]  illegal  start  of  type  [FE]                ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  this.standardDeviation  =  sd  +  inverseCumAccuracy;  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this.standardDeviation  =  sd  +  inverseCumAccuracy;	      this.standardDeviation    =    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
45	[BUG]  [BUGGY]  if  (sd  <  0)  {  if  (sd  <  0)  {  [CE]  illegal  start  of  expression  [FE]    ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  if  (sd  <  0)  {  if  (sd  <  0)  {  [BUGGY]    throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if    (sd    <    0)    {    if  (sd  <  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
46	[BUG]  [BUGGY]  if  (sd  <  0)  {  If  (sd  <  0)  {  [CE]  ';'  expected  [FE]      ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  if  (sd  <  0)  {  If  (sd  <  0)  {  [BUGGY]    throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if    (sd    <    0)    {    If  (sd  <  0)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
47	[BUG]  [BUGGY]  if  (sd  <  0)  {  if  (sd  >=  0)  {  [CE]  illegal  start  of  expression  [FE]        ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  if  (sd  <  0)  {  if  (sd  >=  0)  {  [BUGGY]    throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if    (sd    <    0)    {    if  (sd  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
48	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE,  sd);  [CE]  illegal  start  of  type  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE,  sd);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.DEFAULT_INVERSE,  sd);	      super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    sd);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
49	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]        ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY;  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY;	      this.standardDeviation    =    normalDeviation;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
50	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_STANDARD_DEVIATION);  [CE]  illegal  start  of  type  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_STANDARD_DEVIATION);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_STANDARD_DEVIATION);	      super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
51	[BUG]  [BUGGY]  super(sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]              ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  super(sd,  inverseCumAccuracy);  [BUGGY]    throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(sd,  inverseCumAccuracy);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
52	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]        ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);	      super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
53	[BUG]  [BUGGY]  this(null,  null,  sd,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  this(null,  null,  sd,  solverAbsoluteAccuracy);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  sd,  solverAbsoluteAccuracy);	      this(null,    null,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
54	[BUG]  [BUGGY]  this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  inverseCumAccuracy);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  inverseCumAccuracy);	      this(null,    null,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
55	[BUG]  [BUGGY]  this(null,  null,  inverseCumAccuracy,  null);  [CE]  illegal  start  of  type  [FE]                ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  this(null,  null,  inverseCumAccuracy,  null);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  inverseCumAccuracy,  null);	      this(null,    null,    null);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
56	[BUG]  [BUGGY]  this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  null);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  null);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  null);	      this(null,    null,    null);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
57	[BUG]  [BUGGY]  super(LocalizedFormats.STRING_DEVIATION,  sd);  [CE]  illegal  start  of  type  [FE]              ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  super(LocalizedFormats.STRING_DEVIATION,  sd);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STRING_DEVIATION,  sd);	      super(LocalizedFormats.STANDARD_DEVIATION);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
58	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	      super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
59	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE,  DEFAULT_INVERSE_ABSOLUTE);  [CE]  illegal  start  of  type  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE,  DEFAULT_INVERSE_ABSOLUTE);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE,  DEFAULT_INVERSE_ABSOLUTE);	      super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
60	[BUG]  [BUGGY]  this.standardDeviation  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  this.standardDeviation  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this.standardDeviation  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	      this.standardDeviation    =    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
61	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  this.standardDeviation  =  standardDeviation;  [CE]  illegal  start  of  type  [FE]              ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  this.standardDeviation  =  standardDeviation;  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  this.standardDeviation  =  standardDeviation;	      super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    this.standardDeviation    =    standardDeviation;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
62	[BUG]  [BUGGY]  if(sd  <  =  0  ||  sd  >  LAST_INVERSE_ABSOLUTE_ACCURACY)  {  [CE]  illegal  start  of  expression  [FE]        ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  if(sd  <  =  0  ||  sd  >  LAST_INVERSE_ABSOLUTE_ACCURACY)  {  [BUGGY]    throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  =  0  ||  sd  >  LAST_INVERSE_ABSOLUTE_ACCURACY)  {	  if(sd    <    =    0    ||    sd    >    MAX_STANDARD_DEVIATION)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
63	[BUG]  [BUGGY]  if  (sd  <  0  ||  sd  >  StandardDeviation.STANDARD_DEVIATION)  {  [CE]  cannot  find  symbol  StandardDeviation  [FE]        ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  if  (sd  <  0  ||  sd  >  StandardDeviation.STANDARD_DEVIATION)  {  [BUGGY]    throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if  (sd  <  0  ||  sd  >  StandardDeviation.STANDARD_DEVIATION)  {	  if    (sd    <    =    0    ||    sd    >    StandardDeviation.STANDARD_DEVIATION)    {    	non-compiled	[CE]  cannot  find  symbol  StandardDeviation	12	None	replace
64	[BUG]  [BUGGY]  if(sd  <  0  ||  sd  >  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [CE]  cannot  find  symbol  StandardDeviation  [FE]    ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  if(sd  <  0  ||  sd  >  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [BUGGY]    throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  0  ||  sd  >  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {	  if    (sd    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  StandardDeviation	2	None	replace
65	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  super(LocalizedFormats.STANDARD,  sd,  inverseCumAccuracy);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD,  sd,  inverseCumAccuracy);	      super(LocalizedFormats.STANDARD_DEVIATION,    sd);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
66	[BUG]  [BUGGY]  this(null,  null,  sd,  null,  null);  [CE]  illegal  start  of  type  [FE]              ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  this(null,  null,  sd,  null,  null);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  sd,  null,  null);	      this(null,    null,    null,    null);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
67	[BUG]  [BUGGY]  if(sd  <  0  ||  sd  >  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  sd  >  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [CE]  cannot  find  symbol  StandardDeviation  [FE]    ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  if(sd  <  0  ||  sd  >  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  sd  >  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [BUGGY]    throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  0  ||  sd  >  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  sd  >  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {	  if    (sd    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  StandardDeviation	2	None	replace
68	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  inverseCumAccuracy);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  inverseCumAccuracy);	      super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    sd);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
69	[BUG]  [BUGGY]  if(sd  <  =  MAX_STANDARD_DEVIATION  ||  sd  >  0)  {  [CE]  illegal  start  of  expression  [FE]        ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  if(sd  <  =  MAX_STANDARD_DEVIATION  ||  sd  >  0)  {  [BUGGY]    throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  =  MAX_STANDARD_DEVIATION  ||  sd  >  0)  {	  if(sd    <    =    0    ||    sd    >    MAX_STANDARD_DEVIATION)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
70	[BUG]  [BUGGY]  this(null,  null,  sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  this(null,  null,  sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);	      this(null,    null,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
71	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  SQRT2PI);  this.standardDeviation  =  standardDeviation;  [CE]  illegal  start  of  type  [FE]              ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  SQRT2PI);  this.standardDeviation  =  standardDeviation;  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  SQRT2PI);  this.standardDeviation  =  standardDeviation;	      super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    this.standardDeviation    =    standardDeviation;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
72	[BUG]  [BUGGY]  this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  null,  null);  [CE]  illegal  start  of  type  [FE]              ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  null,  null);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  null,  null);	      this(null,    null,    null,    null);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
73	[BUG]  [BUGGY]  this(null,  null,  null,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  this(null,  null,  null,  sd,  inverseCumAccuracy);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  null,  sd,  inverseCumAccuracy);	      this(null,    null,    null,    null);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
74	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);  [CE]  illegal  start  of  type  [FE]        ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);	      super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
75	[BUG]  [BUGGY]  this.mean  =  mean;  [CE]  illegal  start  of  type  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  this.mean  =  mean;  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this.mean  =  mean;	      super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    this.mean    =    mean;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
76	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);  this.mean  =  mean;  [CE]  illegal  start  of  type  [FE]              ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);  this.mean  =  mean;  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);  this.mean  =  mean;	      super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    this.mean    =    mean;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
77	[BUG]  [BUGGY]  [FE]  NotStrictlyPositiveException  [FE]    ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  if(sd  <  0  ||  sd  >  inverseCumAccuracy)  {  [BUGGY]    throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	add	if(sd  <  0  ||  sd  >  inverseCumAccuracy)  {	  if    (sd    ==    0)    {    	compilable	  [FE]  NotStrictlyPositiveException  	5	14	replace
78	[BUG]  [BUGGY]  if(sd  <  0  ||  sd  >  inverseCumAccuracy)  {  [FE]  NotStrictlyPositiveException  [FE]    ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  if(sd  <  0  ||  sd  >  inverseCumAccuracy)  {  [BUGGY]    throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  0  ||  sd  >  inverseCumAccuracy)  {	  if    (sd    ==    0)    {    	compilable	  [FE]  NotStrictlyPositiveException  	5	14	replace
79	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]    if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.DEFAULT_INVERSE,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	      super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
80	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  this.standardDeviation  =  sd;  [CE]  illegal  start  of  type  [FE]              ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {    [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  this.standardDeviation  =  sd;  [BUGGY]    throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  this.standardDeviation  =  sd;	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
