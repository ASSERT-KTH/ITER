bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd);  this.standardDeviation  =  inverseCumAccuracy;  [CE]  illegal  start  of  type  [FE]                        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd);  this.standardDeviation  =  inverseCumAccuracy;  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  sd);  this.standardDeviation  =  inverseCumAccuracy;	  super(LocalizedFormats.STANDARD_DEVIATION,    sd);    this.standardDeviation    =    standardDeviation;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
2	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  inverseCumAccuracy);  this.standardDeviation  =  standardDeviation;  [CE]  illegal  start  of  type  [FE]                          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  inverseCumAccuracy);  this.standardDeviation  =  standardDeviation;  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  sd,  inverseCumAccuracy);  this.standardDeviation  =  standardDeviation;	  super(LocalizedFormats.STANDARD_DEVIATION,    sd);    this.standardDeviation    =    standardDeviation;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
3	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_STANDARD_DEVIATION,  mean);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_STANDARD_DEVIATION,  mean);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_STANDARD_DEVIATION,  mean);	  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    DEFAULT_STANDARD_DEVIATION);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
4	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  DEFAULT_STANDARD_DEVIATION);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  DEFAULT_STANDARD_DEVIATION);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  DEFAULT_STANDARD_DEVIATION);	  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    DEFAULT_STANDARD_DEVIATION);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
5	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  DEFAULT_STANDARD_DEVIATION);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  DEFAULT_STANDARD_DEVIATION);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  DEFAULT_STANDARD_DEVIATION);	  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    DEFAULT_STANDARD_DEVIATION);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
6	[BUG]  [BUGGY]  if(sd  <  =  0)  {  If  (sd  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  <  =  0)  {  If  (sd  <  =  0)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  =  0)  {  If  (sd  <  =  0)  {	  if    (sd    <    0)    {    If    (sd    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
7	[BUG]  [BUGGY]  if(sd  <  0)  {  If  (sd  >  0)  {  [CE]  ';'  expected  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  <  0)  {  If  (sd  >  0)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  0)  {  If  (sd  >  0)  {	  if    (sd    <    0)    {    If    (sd    <    0)    {    	non-compiled	[CE]  ';'  expected	46	None	replace
8	[BUG]  [BUGGY]  if(sd  <  0  ||  sd  >  inverseCumAccuracy)  {  If  (sd  <  0)  {  [CE]  ';'  expected  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  <  0  ||  sd  >  inverseCumAccuracy)  {  If  (sd  <  0)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  0  ||  sd  >  inverseCumAccuracy)  {  If  (sd  <  0)  {	  if    (sd    <    0)    {    If    (sd    <    0)    {    	non-compiled	[CE]  ';'  expected	46	None	replace
9	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  mean,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  mean,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  mean,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  super(LocalizedFormats.STANDARD_DEVIATION,    mean,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
10	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  mean,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  mean,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  mean,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);	  super(LocalizedFormats.STANDARD_DEVIATION,    mean,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
11	[BUG]  [BUGGY]  super(LocalizedFormats.SQRT2PI,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.SQRT2PI,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.SQRT2PI,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);	  super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    sd);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
12	[BUG]  [BUGGY]  this(null,  null,  mean,  null,  null);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  mean,  null,  null);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  mean,  null,  null);	  this(null,    null,    sd,    null,    null);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
13	[BUG]  [BUGGY]  this(null,  null,  mean,  sd,  null,  null);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  mean,  sd,  null,  null);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  mean,  sd,  null,  null);	  this(null,    null,    sd,    null,    null);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
14	[BUG]  [BUGGY]  this(null,  null,  sd,  null,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  sd,  null,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  sd,  null,  inverseCumAccuracy);	  this(null,    null,    sd,    null,    null);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
15	[BUG]  [BUGGY]  this(mean,  null,  sd,  null,  null);  [CE]  illegal  start  of  type  [FE]                        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(mean,  null,  sd,  null,  null);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(mean,  null,  sd,  null,  null);	  this(null,    null,    sd,    null,    null);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
16	[BUG]  [BUGGY]  super(mean,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(mean,  sd,  inverseCumAccuracy);  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(mean,  sd,  inverseCumAccuracy);	  super(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
17	[BUG]  [BUGGY]  super(message,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(message,  sd,  inverseCumAccuracy);  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(message,  sd,  inverseCumAccuracy);	  super(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
18	[BUG]  [BUGGY]  super(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy);  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy);	  super(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
19	[BUG]  [BUGGY]  super(sd,  inverseCumAccuracy,  mean);  [CE]  illegal  start  of  type  [FE]                        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(sd,  inverseCumAccuracy,  mean);  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(sd,  inverseCumAccuracy,  mean);	  super(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
20	[BUG]  [BUGGY]  this(null,  null,  mean,  sd,  null);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  mean,  sd,  null);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  mean,  sd,  null);	  this(null,    null,    sd,    null);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
21	[BUG]  [BUGGY]  this(null,  null,  mean,  null);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  mean,  null);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  mean,  null);	  this(null,    null,    sd,    null);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
22	[BUG]  [BUGGY]  this(null,  null,  sd,  inverseCumAccuracy,  mean,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  sd,  inverseCumAccuracy,  mean,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  sd,  inverseCumAccuracy,  mean,  solverAbsoluteAccuracy);	  this(null,    null,    sd,    inverseCumAccuracy,    mean);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
23	[BUG]  [BUGGY]  this(null,  null,  mean,  inverseCumAccuracy,  sd);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  mean,  inverseCumAccuracy,  sd);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  mean,  inverseCumAccuracy,  sd);	  this(null,    null,    sd,    inverseCumAccuracy,    mean);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
24	[BUG]  [BUGGY]  this(null,  null,  null,  mean,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  null,  mean,  sd,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  null,  mean,  sd,  inverseCumAccuracy);	  this(null,    null,    null,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
25	[BUG]  [BUGGY]  this(mean,  sd,  null,  null,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(mean,  sd,  null,  null,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(mean,  sd,  null,  null,  inverseCumAccuracy);	  this(null,    null,    null,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
26	[BUG]  [BUGGY]  this(mean,  null,  null,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(mean,  null,  null,  sd,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(mean,  null,  null,  sd,  inverseCumAccuracy);	  this(null,    null,    null,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
27	[BUG]  [BUGGY]  this(null,  null,  null,  sd,  inverseCumAccuracy,  mean);  [CE]  illegal  start  of  type  [FE]                          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  null,  sd,  inverseCumAccuracy,  mean);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  null,  sd,  inverseCumAccuracy,  mean);	  this(null,    null,    null,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
28	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);  this.standardDeviation  =  standardDeviation;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);  this.standardDeviation  =  standardDeviation;  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);  this.standardDeviation  =  standardDeviation;	  super(LocalizedFormats.STANDARD_DEVIATION,    sd,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    this.standardDeviation    =    standardDeviation;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
29	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE,  sd,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.DEFAULT_INVERSE,  sd,  inverseCumAccuracy);	  super(LocalizedFormats.DEFAULT_INVERSE,    sd);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
30	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE,  mean);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE,  mean);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.DEFAULT_INVERSE,  mean);	  super(LocalizedFormats.DEFAULT_INVERSE,    sd);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
31	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  sd,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  sd,  inverseCumAccuracy);	  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
32	[BUG]  [BUGGY]  super(localizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(localizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  sd,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(localizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  sd,  inverseCumAccuracy);	  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
33	[BUG]  [BUGGY]  super(label,  LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(label,  LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(label,  LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  inverseCumAccuracy);	  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
34	[BUG]  [BUGGY]  [FE]  NotStrictlyPositiveException  [FE]          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  >  0)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	add	if(sd  >  0)  {	  if    (sd    ==    0)    {    if    (sd    >=    0)    {    	compilable	  [FE]  NotStrictlyPositiveException  	22	14	replace
35	[BUG]  [BUGGY]  if(sd  >  0)  {  [FE]  NotStrictlyPositiveException  [FE]          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  >  0)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  >  0)  {	  if    (sd    ==    0)    {    if    (sd    >=    0)    {    	compilable	  [FE]  NotStrictlyPositiveException  	22	14	replace
36	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD,  mean,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.STANDARD,  mean,  sd,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD,  mean,  sd,  inverseCumAccuracy);	  super(LocalizedFormats.STANDARD,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
37	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD,  sd,  mean,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.STANDARD,  sd,  mean,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD,  sd,  mean,  inverseCumAccuracy);	  super(LocalizedFormats.STANDARD,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
38	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD,  sd,  inverseCumAccuracy,  mean);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.STANDARD,  sd,  inverseCumAccuracy,  mean);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD,  sd,  inverseCumAccuracy,  mean);	  super(LocalizedFormats.STANDARD,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
39	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  inverseCumAccuracy);  this.mean  =  mean;  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  inverseCumAccuracy);  this.mean  =  mean;  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  sd,  inverseCumAccuracy);  this.mean  =  mean;	  super(LocalizedFormats.STANDARD_DEVIATION,    sd,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    this.mean    =    mean;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
40	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);  this.mean  =  mean;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);  this.mean  =  mean;  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);  this.mean  =  mean;	  super(LocalizedFormats.STANDARD_DEVIATION,    sd,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    this.mean    =    mean;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
41	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);	  super(LocalizedFormats.STANDARD_DEVIATION,    sd,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    this.mean    =    mean;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
42	[BUG]  [BUGGY]  if(sd  <  0  ||  sd  >  StandardDeviation.DEFAULT_INVERSE_ACCURACY  ||  sd  >  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [CE]  cannot  find  symbol  StandardDeviation  [FE]        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  <  0  ||  sd  >  StandardDeviation.DEFAULT_INVERSE_ACCURACY  ||  sd  >  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  0  ||  sd  >  StandardDeviation.DEFAULT_INVERSE_ACCURACY  ||  sd  >  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {	  if(sd    <    0    ||    sd    >    StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY    ||    sd    >    StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    	non-compiled	[CE]  cannot  find  symbol  StandardDeviation	67	None	replace
43	[BUG]  [BUGGY]  if(sd  <  0  ||  sd  >  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  sd  >  NormalDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [CE]  cannot  find  symbol  StandardDeviation  [FE]          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  <  0  ||  sd  >  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  sd  >  NormalDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  0  ||  sd  >  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  sd  >  NormalDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {	  if(sd    <    0    ||    sd    >    StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY    ||    sd    >    StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    	non-compiled	[CE]  cannot  find  symbol  StandardDeviation	67	None	replace
44	[BUG]  [BUGGY]  this(null,  null,  null,  mean,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  null,  mean,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  null,  mean,  inverseCumAccuracy);	  this(null,    null,    null,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
45	[BUG]  [BUGGY]  this(null,  null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);	  this(null,    null,    null,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
46	[BUG]  [BUGGY]  this(null,  null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]                          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  this(null,    null,    null,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
47	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);	  super(LocalizedFormats.STANDARD_DEVIATION,    sd,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
48	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE,  mean);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE,  mean);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE,  mean);	  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE,    sd);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
49	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE,  sd,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE,  sd,  inverseCumAccuracy);	  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE,    sd);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
50	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE,  DEFAULT_STANDARD_DEVIATION);  [CE]  illegal  start  of  type  [FE]                          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE,  DEFAULT_STANDARD_DEVIATION);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE,  DEFAULT_STANDARD_DEVIATION);	  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE,    sd);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
51	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  this.standardDeviation  =  standardDeviation;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  this.standardDeviation  =  standardDeviation;  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  this.standardDeviation  =  standardDeviation;	  super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    inverseCumAccuracy);    this.standardDeviation    =    standardDeviation;    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
52	[BUG]  [BUGGY]  this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  inverseCumAccuracy);	  this(null,    null,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
53	[BUG]  [BUGGY]  this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  sd,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  sd,  inverseCumAccuracy);	  this(null,    null,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
54	[BUG]  [BUGGY]  this(mean,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(mean,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(mean,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  inverseCumAccuracy);	  this(null,    null,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
55	[BUG]  [BUGGY]  this(message,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(message,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(message,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  inverseCumAccuracy);	  this(null,    null,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
56	[BUG]  [BUGGY]  [FE]  NotStrictlyPositiveException  [FE]    NotStrictlyPositiveException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  <  0  ||  sd  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	add	if(sd  <  0  ||  sd  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {	  if(sd    <    0    ||    sd    >    inverseCumAccuracy)    {    	compilable	  [FE]  NotStrictlyPositiveException  	78	14	replace
57	[BUG]  [BUGGY]  if(sd  <  0  ||  sd  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [FE]  NotStrictlyPositiveException  [FE]    NotStrictlyPositiveException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  <  0  ||  sd  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  0  ||  sd  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {	  if(sd    <    0    ||    sd    >    inverseCumAccuracy)    {    	compilable	  [FE]  NotStrictlyPositiveException  	78	14	replace
58	[BUG]  [BUGGY]  if(sd  <  =  0  ||  sd  >  inverseCumAccuracy)  {  [CE]  illegal  start  of  expression  [FE]      NotStrictlyPositiveException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  <  =  0  ||  sd  >  inverseCumAccuracy)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  =  0  ||  sd  >  inverseCumAccuracy)  {	  if(sd    <    0    ||    sd    >    inverseCumAccuracy)    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
59	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        NotStrictlyPositiveException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  <  0  ||  sd  ==  inverseCumAccuracy)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	add	if(sd  <  0  ||  sd  ==  inverseCumAccuracy)  {	  if(sd    <    0    ||    sd    >    inverseCumAccuracy)    {    	compilable	  [FE]  ConvergenceException  	78	2	replace
60	[BUG]  [BUGGY]  if(sd  <  0  ||  sd  ==  inverseCumAccuracy)  {  [FE]  ConvergenceException  [FE]        NotStrictlyPositiveException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  <  0  ||  sd  ==  inverseCumAccuracy)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  0  ||  sd  ==  inverseCumAccuracy)  {	  if(sd    <    0    ||    sd    >    inverseCumAccuracy)    {    	compilable	  [FE]  ConvergenceException  	78	2	replace
61	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  sd);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  sd);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  sd);	  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    mean,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
62	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  inverseCumAccuracy,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  inverseCumAccuracy,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  inverseCumAccuracy,  solverAbsoluteAccuracy);	  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    mean,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
63	[BUG]  [BUGGY]  this(mean,  null,  sd,  inverseCumAccuracy,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(mean,  null,  sd,  inverseCumAccuracy,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(mean,  null,  sd,  inverseCumAccuracy,  solverAbsoluteAccuracy);	  this(mean,    null,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
64	[BUG]  [BUGGY]  this(mean,  null,  sd,  inverseCumAccuracy,  standardDeviation);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(mean,  null,  sd,  inverseCumAccuracy,  standardDeviation);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(mean,  null,  sd,  inverseCumAccuracy,  standardDeviation);	  this(mean,    null,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
65	[BUG]  [BUGGY]  this(mean,  null,  standardDeviation,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(mean,  null,  standardDeviation,  sd,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(mean,  null,  standardDeviation,  sd,  inverseCumAccuracy);	  this(mean,    null,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
66	[BUG]  [BUGGY]  this(mean,  sd,  null,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(mean,  sd,  null,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(mean,  sd,  null,  inverseCumAccuracy);	  this(mean,    null,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
67	[BUG]  [BUGGY]  if(sd  <  0  ||  sd  >  LAST_INVERSE_ABSOLUTE_ACCURACY)  {  [CE]  cannot  find  symbol  LAST_INVERSE_ABSOLUTE_ACCURACY  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  <  0  ||  sd  >  LAST_INVERSE_ABSOLUTE_ACCURACY)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  0  ||  sd  >  LAST_INVERSE_ABSOLUTE_ACCURACY)  {	  if(sd    <    =    0    ||    sd    >    LAST_INVERSE_ABSOLUTE_ACCURACY)    {    	non-compiled	[CE]  cannot  find  symbol  LAST_INVERSE_ABSOLUTE_ACCURACY	62	None	replace
68	[BUG]  [BUGGY]  if(sd  <  =  0  ||  sd  >  LAST_INVERSE_ABSOLUTE_ACCURACY  ||  sd  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [CE]  illegal  start  of  expression  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  <  =  0  ||  sd  >  LAST_INVERSE_ABSOLUTE_ACCURACY  ||  sd  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  =  0  ||  sd  >  LAST_INVERSE_ABSOLUTE_ACCURACY  ||  sd  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {	  if(sd    <    =    0    ||    sd    >    LAST_INVERSE_ABSOLUTE_ACCURACY)    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
69	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);  this.standardDeviation  =  standardDeviation;  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);  this.standardDeviation  =  standardDeviation;  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);  this.standardDeviation  =  standardDeviation;	  super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    sd);    this.standardDeviation    =    standardDeviation;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
70	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ASSOLUTE_ACCURACY,  mean);  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ASSOLUTE_ACCURACY,  mean);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ASSOLUTE_ACCURACY,  mean);	  super(LocalizedFormats.DEFAULT_INVERSE_ASSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
71	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ASSOLUTE_ACCURACY,  sd);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ASSOLUTE_ACCURACY,  sd);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ASSOLUTE_ACCURACY,  sd);	  super(LocalizedFormats.DEFAULT_INVERSE_ASSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
72	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ASSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ASSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ASSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  super(LocalizedFormats.DEFAULT_INVERSE_ASSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
73	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  standardDeviation);  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  standardDeviation);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  standardDeviation);	  super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    standardDeviation);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
74	[BUG]  [BUGGY]  this(message,  null,  sd,  inverseCumAccuracy,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(message,  null,  sd,  inverseCumAccuracy,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(message,  null,  sd,  inverseCumAccuracy,  solverAbsoluteAccuracy);	  this(message,    null,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
75	[BUG]  [BUGGY]  this(message,  null,  sd,  inverseCumAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(message,  null,  sd,  inverseCumAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(message,  null,  sd,  inverseCumAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  this(message,    null,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
76	[BUG]  [BUGGY]  this(null,  null,  null,  mean,  sd);  [CE]  illegal  start  of  type  [FE]                        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  null,  mean,  sd);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  null,  mean,  sd);	  this(null,    null,    null,    sd);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
77	[BUG]  [BUGGY]  this(null,  null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);  [CE]  illegal  start  of  type  [FE]                          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);	  this(null,    null,    null,    sd);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
78	[BUG]  [BUGGY]  this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  null,  null);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  null,  null);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  null,  null);	  this(null,    null,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    null,    null);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
79	[BUG]  [BUGGY]  this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  null);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  null);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  null);	  this(null,    null,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    null,    null);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
80	[BUG]  [BUGGY]  this(null,  null,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  null,  null);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  null,  null);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  null,  null);	  this(null,    null,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    null,    null);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
81	[BUG]  [BUGGY]  [FE]  NotStrictlyPositiveException  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd!=  0)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	add	if(sd!=  0)  {	  if    (sd    ==    0)    {    if    (sd!=    0)    {    	compilable	  [FE]  NotStrictlyPositiveException  	24	14	replace
82	[BUG]  [BUGGY]  if(sd!=  0)  {  [FE]  NotStrictlyPositiveException  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd!=  0)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd!=  0)  {	  if    (sd    ==    0)    {    if    (sd!=    0)    {    	compilable	  [FE]  NotStrictlyPositiveException  	24	14	replace
83	[BUG]  [BUGGY]  [FE]  NotStrictlyPositiveException  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(mean  ==  0)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	add	if(mean  ==  0)  {	  if    (sd    ==    0)    {    if    (sd!=    0)    {    	compilable	  [FE]  NotStrictlyPositiveException  	24	5	replace
84	[BUG]  [BUGGY]  if(mean  ==  0)  {  [FE]  NotStrictlyPositiveException  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(mean  ==  0)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(mean  ==  0)  {	  if    (sd    ==    0)    {    if    (sd!=    0)    {    	compilable	  [FE]  NotStrictlyPositiveException  	24	5	replace
85	[BUG]  [BUGGY]  this.standardDeviation  =  inverseCumAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this.standardDeviation  =  inverseCumAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this.standardDeviation  =  inverseCumAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    inverseCumAccuracy    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
86	[BUG]  [BUGGY]  this.standardDeviation  =  sd  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this.standardDeviation  =  sd  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this.standardDeviation  =  sd  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    inverseCumAccuracy    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
87	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  inverseCumAccuracy;  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  inverseCumAccuracy;  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  inverseCumAccuracy;	  this.standardDeviation    =    inverseCumAccuracy    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
88	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.DEFAULT_INVERSE,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);	  super(LocalizedFormats.DEFAULT_INVERSE,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
89	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.DEFAULT_INVERSE,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);	  super(LocalizedFormats.DEFAULT_INVERSE,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
90	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.DEFAULT_INVERSE,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);	  super(LocalizedFormats.DEFAULT_INVERSE,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
91	[BUG]  [BUGGY]  this(null,  null,  mean,  sd,  inverseCumAccuracy,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  mean,  sd,  inverseCumAccuracy,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  mean,  sd,  inverseCumAccuracy,  solverAbsoluteAccuracy);	  this(null,    null,    mean,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
92	[BUG]  [BUGGY]  this(null,  null,  mean,  sd,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  mean,  sd,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  mean,  sd,  solverAbsoluteAccuracy);	  this(null,    null,    mean,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
93	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  standardDeviation);  this.mean  =  mean;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  standardDeviation);  this.mean  =  mean;  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  sd,  standardDeviation);  this.mean  =  mean;	  super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    standardDeviation);    this.mean    =    mean;    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
94	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  mean,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  mean,  sd,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  mean,  sd,  inverseCumAccuracy);	  super(LocalizedFormats.STANDARD_DEVIATION,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
95	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  standardDeviation,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  standardDeviation,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  sd,  standardDeviation,  inverseCumAccuracy);	  super(LocalizedFormats.STANDARD_DEVIATION,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
96	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  mean,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  mean,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  sd,  mean,  inverseCumAccuracy);	  super(LocalizedFormats.STANDARD_DEVIATION,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
97	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  sd,  solverAbsoluteAccuracy);	  super(LocalizedFormats.STANDARD_DEVIATION,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
98	[BUG]  [BUGGY]  this(null,  null,  null,  null,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  null,  null,  sd,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  null,  null,  sd,  inverseCumAccuracy);	  this(null,    null,    null,    null,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
99	[BUG]  [BUGGY]  this(null,  null,  null,  null,  mean,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  null,  null,  mean,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  null,  null,  mean,  inverseCumAccuracy);	  this(null,    null,    null,    null,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
100	[BUG]  [BUGGY]  this(null,  null,  null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);	  this(null,    null,    null,    null,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
101	[BUG]  [BUGGY]  if  (sd  <  =  0  ||  sd  ==  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [CE]  illegal  start  of  expression  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if  (sd  <  =  0  ||  sd  ==  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if  (sd  <  =  0  ||  sd  ==  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {	  if    (sd    <    =    0    ||    sd    ==    StandardDeviation.STANDARD_DEVIATION)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
102	[BUG]  [BUGGY]  this(null,  null,  mean,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  mean,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  mean,  solverAbsoluteAccuracy);	  this(null,    null,    sd,    solverAbsoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
103	[BUG]  [BUGGY]  this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  solverAbsoluteAccuracy);	  this(null,    null,    sd,    solverAbsoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
104	[BUG]  [BUGGY]  super(LocalizedFormats.STRING_DEVIATION,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.STRING_DEVIATION,  sd,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STRING_DEVIATION,  sd,  inverseCumAccuracy);	  super(LocalizedFormats.STRING_DEVIATION,    sd);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
105	[BUG]  [BUGGY]  super(LocalizedFormats.STRING_DEVIATION,  mean);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.STRING_DEVIATION,  mean);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STRING_DEVIATION,  mean);	  super(LocalizedFormats.STRING_DEVIATION,    sd);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
106	[BUG]  [BUGGY]  super(LocalizedFormats.STRING_DEVIATION,  sd,  true);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.STRING_DEVIATION,  sd,  true);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STRING_DEVIATION,  sd,  true);	  super(LocalizedFormats.STRING_DEVIATION,    sd);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
107	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd);  this.standardDeviation  =  sd;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd);  this.standardDeviation  =  sd;  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  sd);  this.standardDeviation  =  sd;	  super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    this.standardDeviation    =    sd;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
108	[BUG]  [BUGGY]  if(sd  <  0  ||  sd  >  STANDARD_DEVIATION)  {  [CE]  cannot  find  symbol  STANDARD_DEVIATION  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  <  0  ||  sd  >  STANDARD_DEVIATION)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  0  ||  sd  >  STANDARD_DEVIATION)  {	  if(sd    <    0    ||    sd    >    standardDeviation)    {    	non-compiled	[CE]  cannot  find  symbol  STANDARD_DEVIATION	29	None	replace
109	[BUG]  [BUGGY]  if(sd  <  =  0  ||  sd  ==  solverAbsoluteAccuracy)  {  [CE]  illegal  start  of  expression  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  <  =  0  ||  sd  ==  solverAbsoluteAccuracy)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  =  0  ||  sd  ==  solverAbsoluteAccuracy)  {	  if(sd    <    =    0    ||    sd    ==    standardDeviation)    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
110	[BUG]  [BUGGY]  if(sd  <  =  0  ||  sd  ==  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [CE]  illegal  start  of  expression  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  <  =  0  ||  sd  ==  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  =  0  ||  sd  ==  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {	  if(sd    <    =    0    ||    sd    ==    standardDeviation)    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
111	[BUG]  [BUGGY]  this.standardDeviation  =  sd  +  1;  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this.standardDeviation  =  sd  +  1;  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this.standardDeviation  =  sd  +  1;	  this.standardDeviation    =    sd;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
112	[BUG]  [BUGGY]  this.standardDeviation  =  sd,  inverseCumAccuracy;  [CE]  ';'  expected  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this.standardDeviation  =  sd,  inverseCumAccuracy;  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this.standardDeviation  =  sd,  inverseCumAccuracy;	  this.standardDeviation    =    sd;    	non-compiled	[CE]  ';'  expected	42	None	replace
113	[BUG]  [BUGGY]  if(sd  <  =  0)  {  If  (sd  ==  0)  {  [CE]  illegal  start  of  expression  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  <  =  0)  {  If  (sd  ==  0)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  =  0)  {  If  (sd  ==  0)  {	  if    (sd    ==    0)    {    If    (sd    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
114	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    DEFAULT_INVERSION_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
115	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  |  inverseCumAccuracy;  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  |  inverseCumAccuracy;  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  |  inverseCumAccuracy;	  this.standardDeviation    =    DEFAULT_INVERSION_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
116	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  +  inverseCumAccuracy;  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  +  inverseCumAccuracy;  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  +  inverseCumAccuracy;	  this.standardDeviation    =    DEFAULT_INVERSION_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
117	[BUG]  [BUGGY]  if(sd  <  0  ||  sd  >  standardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [CE]  double  cannot  be  dereferenced  [FE]        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  <  0  ||  sd  >  standardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  0  ||  sd  >  standardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {	  if(sd    <    0    ||    sd    >    StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	64	None	replace
118	[BUG]  [BUGGY]  if(sd  <  0  ||  sd  >  SQRT2PI.DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [CE]  double  cannot  be  dereferenced  [FE]          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  <  0  ||  sd  >  SQRT2PI.DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  0  ||  sd  >  SQRT2PI.DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {	  if(sd    <    0    ||    sd    >    StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	64	None	replace
119	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
120	[BUG]  [BUGGY]  this(null,  null,  null,  mean,  inverseCumAccuracy,  null);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  null,  mean,  inverseCumAccuracy,  null);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  null,  mean,  inverseCumAccuracy,  null);	  this(null,    null,    null,    inverseCumAccuracy,    null);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
121	[BUG]  [BUGGY]  this(null,  null,  null,  sd,  inverseCumAccuracy,  null);  [CE]  illegal  start  of  type  [FE]                        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  null,  sd,  inverseCumAccuracy,  null);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  null,  sd,  inverseCumAccuracy,  null);	  this(null,    null,    null,    inverseCumAccuracy,    null);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
122	[BUG]  [BUGGY]  this(null,  null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy,  null);  [CE]  illegal  start  of  type  [FE]                          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy,  null);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy,  null);	  this(null,    null,    null,    inverseCumAccuracy,    null);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
123	[BUG]  [BUGGY]  if(sd  <  =  0  ||  sd  >  DEFAULT_INVERSE_ABSOLUTE_ACCURacy)  {  [CE]  illegal  start  of  expression  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  <  =  0  ||  sd  >  DEFAULT_INVERSE_ABSOLUTE_ACCURacy)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  =  0  ||  sd  >  DEFAULT_INVERSE_ABSOLUTE_ACCURacy)  {	  if(sd    <    =    0    ||    sd    >    STANDARD_DEVIATION)    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
124	[BUG]  [BUGGY]  this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);	  this(null,    null,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    null);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
125	[BUG]  [BUGGY]  this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);  [CE]  illegal  start  of  type  [FE]                        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);	  this(null,    null,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    null);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
126	[BUG]  [BUGGY]  this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  null);  [CE]  illegal  start  of  type  [FE]                          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  null);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  null);	  this(null,    null,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    null);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
127	[BUG]  [BUGGY]  if  (sd  <  0  ||  sd  >  StandardDeviation.SQRT2PI)  {  [CE]  cannot  find  symbol  StandardDeviation  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if  (sd  <  0  ||  sd  >  StandardDeviation.SQRT2PI)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if  (sd  <  0  ||  sd  >  StandardDeviation.SQRT2PI)  {	  if    (sd    <    0    ||    sd    >    StandardDeviation.STANDARD_DEVIATION)    {    	non-compiled	[CE]  cannot  find  symbol  StandardDeviation	63	None	replace
128	[BUG]  [BUGGY]  if  (sd  <  0  ||  sd  >  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURacy)  {  [CE]  cannot  find  symbol  StandardDeviation  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if  (sd  <  0  ||  sd  >  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURacy)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if  (sd  <  0  ||  sd  >  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURacy)  {	  if    (sd    <    0    ||    sd    >    StandardDeviation.STANDARD_DEVIATION)    {    	non-compiled	[CE]  cannot  find  symbol  StandardDeviation	63	None	replace
129	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);  this.mean  =  mean;  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);  this.mean  =  mean;  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);  this.mean  =  mean;	  super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    sd);    this.mean    =    mean;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
130	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  SQRT2PI);  this.standardDeviation  =  standardDeviation;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  SQRT2PI);  this.standardDeviation  =  standardDeviation;  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  SQRT2PI);  this.standardDeviation  =  standardDeviation;	  super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    SQRT2PI);    this.standardDeviation    =    standardDeviation;    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
131	[BUG]  [BUGGY]  if(sd  <  0  ||  sd  >  inverseCumAccuracy)  {  if(sd  <  0  ||  sd  >  inverseCumAccuracy)  {  [CE]  illegal  start  of  expression  [FE]    NotStrictlyPositiveException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  <  0  ||  sd  >  inverseCumAccuracy)  {  if(sd  <  0  ||  sd  >  inverseCumAccuracy)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd    <    0    ||    sd    >    inverseCumAccuracy)    {    if(sd  <  0  ||  sd  >  inverseCumAccuracy)  {	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
132	[BUG]  [BUGGY]  if(sd  <  0  ||  sd  >  inverseCumAccuracy)  {  If(sd  <  0  ||  sd  >  inverseCumAccuracy)  {  [CE]  ';'  expected  [FE]      NotStrictlyPositiveException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  <  0  ||  sd  >  inverseCumAccuracy)  {  If(sd  <  0  ||  sd  >  inverseCumAccuracy)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd    <    0    ||    sd    >    inverseCumAccuracy)    {    If(sd  <  0  ||  sd  >  inverseCumAccuracy)  {	  	non-compiled	[CE]  ';'  expected	77	None	add
133	[BUG]  [BUGGY]  if(sd  <  0  ||  sd  >  inverseCumAccuracy)  {  if(sd  >=  0  ||  sd  >  inverseCumAccuracy)  {  [CE]  illegal  start  of  expression  [FE]        NotStrictlyPositiveException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  <  0  ||  sd  >  inverseCumAccuracy)  {  if(sd  >=  0  ||  sd  >  inverseCumAccuracy)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd    <    0    ||    sd    >    inverseCumAccuracy)    {    if(sd  >=  0  ||  sd  >  inverseCumAccuracy)  {	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
134	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);	  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
135	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);	  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
136	[BUG]  [BUGGY]  this(null,  null,  sd,  inverseCumAccuracy,  null);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  sd,  inverseCumAccuracy,  null);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  sd,  inverseCumAccuracy,  null);	  this(null,    null,    inverseCumAccuracy,    null);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
137	[BUG]  [BUGGY]  this(null,  null,  mean,  inverseCumAccuracy,  null);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  mean,  inverseCumAccuracy,  null);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  mean,  inverseCumAccuracy,  null);	  this(null,    null,    inverseCumAccuracy,    null);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
138	[BUG]  [BUGGY]  this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy,  null);  [CE]  illegal  start  of  type  [FE]                        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy,  null);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy,  null);	  this(null,    null,    inverseCumAccuracy,    null);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
139	[BUG]  [BUGGY]  this(null,  mean,  sd,  null,  null);  [CE]  illegal  start  of  type  [FE]                          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  mean,  sd,  null,  null);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  mean,  sd,  null,  null);	  this(null,    sd,    null,    null);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
140	[BUG]  [BUGGY]  this(mean,  sd,  null,  null);  [CE]  illegal  start  of  type  [FE]                            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(mean,  sd,  null,  null);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(mean,  sd,  null,  null);	  this(null,    sd,    null,    null);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
141	[BUG]  [BUGGY]  this(null,  sd,  null,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  sd,  null,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  sd,  null,  inverseCumAccuracy);	  this(null,    sd,    null,    null);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
142	[BUG]  [BUGGY]  this(null,  sd,  null,  null,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  sd,  null,  null,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  sd,  null,  null,  inverseCumAccuracy);	  this(null,    sd,    null,    null);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
143	[BUG]  [BUGGY]  this(null,  null,  null,  mean,  sd,  null);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  null,  mean,  sd,  null);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  null,  mean,  sd,  null);	  this(null,    null,    null,    sd,    null);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
144	[BUG]  [BUGGY]  this(null,  null,  null,  mean,  null);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  null,  mean,  null);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  null,  mean,  null);	  this(null,    null,    null,    sd,    null);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
145	[BUG]  [BUGGY]  if(sd  <  0  ||  sd  >  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [CE]  cannot  find  symbol  StandardDistributionImpl  [FE]        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  <  0  ||  sd  >  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  0  ||  sd  >  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {	  if(sd    <    0    ||    sd    >    StandardDistributionImpl.STANDARD_DEVIATION)    {    	non-compiled	[CE]  cannot  find  symbol  StandardDistributionImpl	37	None	replace
146	[BUG]  [BUGGY]  if(sd  <  0  ||  sd  >  NormalDistributionImpl.STANDARD_DEVIATION)  {  [CE]  cannot  find  symbol  STANDARD_DEVIATION  [FE]          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  <  0  ||  sd  >  NormalDistributionImpl.STANDARD_DEVIATION)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  0  ||  sd  >  NormalDistributionImpl.STANDARD_DEVIATION)  {	  if(sd    <    0    ||    sd    >    StandardDistributionImpl.STANDARD_DEVIATION)    {    	non-compiled	[CE]  cannot  find  symbol  STANDARD_DEVIATION	37	None	replace
147	[BUG]  [BUGGY]  if(sd  <  0  ||  sd  >  StandardDistributionImpl.SQRT2PI)  {  [CE]  cannot  find  symbol  StandardDistributionImpl  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  <  0  ||  sd  >  StandardDistributionImpl.SQRT2PI)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  0  ||  sd  >  StandardDistributionImpl.SQRT2PI)  {	  if(sd    <    0    ||    sd    >    StandardDistributionImpl.STANDARD_DEVIATION)    {    	non-compiled	[CE]  cannot  find  symbol  StandardDistributionImpl	37	None	replace
148	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  mean);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  mean);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  sd,  mean);	  super(LocalizedFormats.STANDARD_DEVIATION,    mean,    sd);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
149	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE,  DEFAULT_INVERSE_ACCURACY);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE,  DEFAULT_INVERSE_ACCURACY);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE,  DEFAULT_INVERSE_ACCURACY);	  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE,    DEFAULT_INVERSE_ABSOLUTE);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
150	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE);	  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE,    DEFAULT_INVERSE_ABSOLUTE);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
151	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  inverseCumAccuracy);	  super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    mean);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
152	[BUG]  [BUGGY]  this.standardDeviation  =  sd  +  solverAbsoluteAccuracy;  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this.standardDeviation  =  sd  +  solverAbsoluteAccuracy;  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this.standardDeviation  =  sd  +  solverAbsoluteAccuracy;	  this.standardDeviation    =    sd    +    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
153	[BUG]  [BUGGY]  this.standardDeviation  =  sd  *  inverseCumAccuracy;  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this.standardDeviation  =  sd  *  inverseCumAccuracy;  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this.standardDeviation  =  sd  *  inverseCumAccuracy;	  this.standardDeviation    =    sd    +    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
154	[BUG]  [BUGGY]  this.standardDeviation  =  mean  +  inverseCumAccuracy;  [CE]  illegal  start  of  type  [FE]                        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this.standardDeviation  =  mean  +  inverseCumAccuracy;  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this.standardDeviation  =  mean  +  inverseCumAccuracy;	  this.standardDeviation    =    sd    +    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
155	[BUG]  [BUGGY]  if(sd  <  =  0  ||  sd  >  DEFAULT_STANDARD_DEVIATION)  {  [CE]  illegal  start  of  expression  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  <  =  0  ||  sd  >  DEFAULT_STANDARD_DEVIATION)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  =  0  ||  sd  >  DEFAULT_STANDARD_DEVIATION)  {	  if(sd    <    =    0    ||    sd    >    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
156	[BUG]  [BUGGY]  if(sd  <  MAX_STANDARD_DEVIATION  ||  sd  >  0)  {  [CE]  cannot  find  symbol  MAX_STANDARD_DEVIATION  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  <  MAX_STANDARD_DEVIATION  ||  sd  >  0)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  MAX_STANDARD_DEVIATION  ||  sd  >  0)  {	  if(sd    <    =    MAX_STANDARD_DEVIATION    ||    sd    >    0)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_STANDARD_DEVIATION	69	None	replace
157	[BUG]  [BUGGY]  if(sd  <  =  MAX_STANDARD_DEVIATION  ||  sd  >  1)  {  [CE]  illegal  start  of  expression  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  <  =  MAX_STANDARD_DEVIATION  ||  sd  >  1)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  =  MAX_STANDARD_DEVIATION  ||  sd  >  1)  {	  if(sd    <    =    MAX_STANDARD_DEVIATION    ||    sd    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
158	[BUG]  [BUGGY]  if(sd  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  sd  >  0)  {  [CE]  illegal  start  of  expression  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  sd  >  0)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  sd  >  0)  {	  if(sd    <    =    MAX_STANDARD_DEVIATION    ||    sd    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
159	[BUG]  [BUGGY]  this.mean  =  sd;  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this.mean  =  sd;  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this.mean  =  sd;	  this.mean    =    mean;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
160	[BUG]  [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    mean;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
161	[BUG]  [BUGGY]  this.mean  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this.mean  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY;  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this.mean  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY;	  this.mean    =    mean;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
162	[BUG]  [BUGGY]  this(null,  null,  mean,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  mean,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  mean,  solverAbsoluteAccuracy,  inverseCumAccuracy);	  this(null,    null,    sd,    solverAbsoluteAccuracy,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
163	[BUG]  [BUGGY]  this(null,  null,  mean,  sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  mean,  sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  mean,  sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);	  this(null,    null,    sd,    solverAbsoluteAccuracy,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
164	[BUG]  [BUGGY]  this(mean,  null,  sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(mean,  null,  sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(mean,  null,  sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);	  this(null,    null,    sd,    solverAbsoluteAccuracy,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
165	[BUG]  [BUGGY]  this(null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  inverseCumAccuracy);	  this(null,    null,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
166	[BUG]  [BUGGY]  super(LocalizedFormats.SQRT2PI,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  this.mean  =  mean;  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.SQRT2PI,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  this.mean  =  mean;  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.SQRT2PI,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  this.mean  =  mean;	  super(LocalizedFormats.STANDARD_DEVIATION,    sd,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    this.mean    =    mean;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
167	[BUG]  [BUGGY]  if(sd  <  0  ||  sd  >  StandardDeviation.DEFAULT_STANDARD_DEVIATION)  {  [CE]  cannot  find  symbol  StandardDeviation  [FE]        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  <  0  ||  sd  >  StandardDeviation.DEFAULT_STANDARD_DEVIATION)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  0  ||  sd  >  StandardDeviation.DEFAULT_STANDARD_DEVIATION)  {	  if(sd    <    0    ||    sd    >    StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    	non-compiled	[CE]  cannot  find  symbol  StandardDeviation	64	None	replace
168	[BUG]  [BUGGY]  if(localizedFormats.STANDARD_DEVIATION  ==  null)  {  [CE]  cannot  find  symbol  localizedFormats  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(localizedFormats.STANDARD_DEVIATION  ==  null)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(localizedFormats.STANDARD_DEVIATION  ==  null)  {	  if    (sd    ==    0)    {    if    (sd!=    0)    {    	non-compiled	[CE]  cannot  find  symbol  localizedFormats	24	None	replace
169	[BUG]  [BUGGY]  if(localizedFormats!=  null)  {  [CE]  cannot  find  symbol  localizedFormats  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(localizedFormats!=  null)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(localizedFormats!=  null)  {	  if    (sd    ==    0)    {    if    (sd!=    0)    {    	non-compiled	[CE]  cannot  find  symbol  localizedFormats	24	None	replace
170	[BUG]  [BUGGY]  if(localizedFormats.STANDARD_DEVIATION!=  null)  {  [CE]  cannot  find  symbol  localizedFormats  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(localizedFormats.STANDARD_DEVIATION!=  null)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(localizedFormats.STANDARD_DEVIATION!=  null)  {	  if    (sd    ==    0)    {    if    (sd!=    0)    {    	non-compiled	[CE]  cannot  find  symbol  localizedFormats	24	None	replace
171	[BUG]  [BUGGY]  if(localizedFormats  ==  null)  {  [CE]  cannot  find  symbol  localizedFormats  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(localizedFormats  ==  null)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(localizedFormats  ==  null)  {	  if    (sd    ==    0)    {    if    (sd!=    0)    {    	non-compiled	[CE]  cannot  find  symbol  localizedFormats	24	None	replace
172	[BUG]  [BUGGY]  super(SQRT2PI,  LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_STANDARD_DEVIATION);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(SQRT2PI,  LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_STANDARD_DEVIATION);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(SQRT2PI,  LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_STANDARD_DEVIATION);	  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    DEFAULT_STANDARD_DEVIATION);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
173	[BUG]  [BUGGY]  this(null,  null,  sd,  solverAbsoluteAccuracy,  mean);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  sd,  solverAbsoluteAccuracy,  mean);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  sd,  solverAbsoluteAccuracy,  mean);	  this(null,    null,    sd,    inverseCumAccuracy,    mean);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
174	[BUG]  [BUGGY]  super(LocalizedFormats.SQRT2PI,  mean);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.SQRT2PI,  mean);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.SQRT2PI,  mean);	  super(LocalizedFormats.STANDARD_DEVIATION,    mean);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
175	[BUG]  [BUGGY]  super(Mean,  LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(Mean,  LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(Mean,  LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  inverseCumAccuracy);	  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    mean,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
176	[BUG]  [BUGGY]  this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);	  this(null,    null,    sd,    solverAbsoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
177	[BUG]  [BUGGY]  this(null,  null,  sd,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  sd,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  sd,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  this(null,    null,    sd,    solverAbsoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
178	[BUG]  [BUGGY]  this(null,  null,  sd,  solverAbsoluteAccuracy,  standardDeviation);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  sd,  solverAbsoluteAccuracy,  standardDeviation);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  sd,  solverAbsoluteAccuracy,  standardDeviation);	  this(null,    null,    sd,    solverAbsoluteAccuracy,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
179	[BUG]  [BUGGY]  this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy,  inverseCumAccuracy);	  this(null,    null,    sd,    solverAbsoluteAccuracy,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
180	[BUG]  [BUGGY]  this(null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);	  this(null,    null,    sd,    solverAbsoluteAccuracy,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
181	[BUG]  [BUGGY]  if(localizedFormats!=  null)  {  If  (sd  <  0)  {  [CE]  ';'  expected  [FE]          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(localizedFormats!=  null)  {  If  (sd  <  0)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(localizedFormats!=  null)  {  If  (sd  <  0)  {	  if    (sd    <    0)    {    If    (sd    <    0)    {    	non-compiled	[CE]  ';'  expected	46	None	replace
182	[BUG]  [BUGGY]  super(SQRT2PI,  LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);  this.mean  =  mean;  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(SQRT2PI,  LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);  this.mean  =  mean;  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(SQRT2PI,  LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);  this.mean  =  mean;	  super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    sd);    this.mean    =    mean;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
183	[BUG]  [BUGGY]  this(null,  null,  null,  solverAbsoluteAccuracy,  null);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  null,  solverAbsoluteAccuracy,  null);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  null,  solverAbsoluteAccuracy,  null);	  this(null,    null,    null,    inverseCumAccuracy,    null);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
184	[BUG]  [BUGGY]  this(mean,  null,  null,  inverseCumAccuracy,  null);  [CE]  illegal  start  of  type  [FE]                        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(mean,  null,  null,  inverseCumAccuracy,  null);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(mean,  null,  null,  inverseCumAccuracy,  null);	  this(null,    null,    null,    inverseCumAccuracy,    null);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
185	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  +  1;  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  +  1;  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  +  1;	  this.standardDeviation    =    DEFAULT_INVERSION_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
186	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);	  super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    standardDeviation);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
187	[BUG]  [BUGGY]  if(sd  <  0  ||  sd  >  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  standardDeviation  >  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [CE]  cannot  find  symbol  StandardDeviation  [FE]        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  <  0  ||  sd  >  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  standardDeviation  >  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  0  ||  sd  >  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  standardDeviation  >  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {	  if(sd    <    0    ||    sd    >    StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY    ||    sd    >    StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    	non-compiled	[CE]  cannot  find  symbol  StandardDeviation	67	None	replace
188	[BUG]  [BUGGY]  this.mean  =  inverseCumAccuracy;  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this.mean  =  inverseCumAccuracy;  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this.mean  =  inverseCumAccuracy;	  this.mean    =    mean;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
189	[BUG]  [BUGGY]  this.mean  =  sd  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this.mean  =  sd  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this.mean  =  sd  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    mean;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
190	[BUG]  [BUGGY]  this(null,  null,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  this(null,    null,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    null);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
191	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);  this.mean  =  mean;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);  this.mean  =  mean;  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);  this.mean  =  mean;	  super(LocalizedFormats.STANDARD_DEVIATION,    sd);    this.mean    =    mean;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
192	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;	  this.standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
193	[BUG]  [BUGGY]  if(sd  <  0  ||  sd  >  solverAbsoluteAccuracy)  {  [CE]  variable  solverAbsoluteAccuracy  might  not  have  been  initialized  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  <  0  ||  sd  >  solverAbsoluteAccuracy)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  0  ||  sd  >  solverAbsoluteAccuracy)  {	  if(sd    <    0    ||    sd    >    standardDeviation)    {    	non-compiled	[CE]  variable  solverAbsoluteAccuracy  might  not  have  been  initialized	29	None	replace
194	[BUG]  [BUGGY]  super(localizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(localizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(localizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  super(LocalizedFormats.DEFAULT_INVERSE_ASSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
195	[BUG]  [BUGGY]  super(SQRT2PI,  LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(SQRT2PI,  LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(SQRT2PI,  LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);	  super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    sd);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
196	[BUG]  [BUGGY]  super(sd,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(sd,  solverAbsoluteAccuracy);  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(sd,  solverAbsoluteAccuracy);	  super(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
197	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  this.standardDeviation  =  standardDeviation;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  this.standardDeviation  =  standardDeviation;  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  this.standardDeviation  =  standardDeviation;	  super(LocalizedFormats.STANDARD_DEVIATION,    sd,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    this.standardDeviation    =    standardDeviation;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
198	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  standardDeviation);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  standardDeviation);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  standardDeviation);	  super(LocalizedFormats.STANDARD_DEVIATION,    sd,    standardDeviation);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
199	[BUG]  [BUGGY]  super(LocalizedFormats.SQRT2PI,  sd,  standardDeviation);  [CE]  illegal  start  of  type  [FE]                        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.SQRT2PI,  sd,  standardDeviation);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.SQRT2PI,  sd,  standardDeviation);	  super(LocalizedFormats.STANDARD_DEVIATION,    sd,    standardDeviation);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
200	[BUG]  [BUGGY]  this(null,  null,  null,  sd,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  null,  sd,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  null,  sd,  solverAbsoluteAccuracy);	  this(null,    null,    null,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
201	[BUG]  [BUGGY]  this(null,  null,  sd,  null,  null,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  sd,  null,  null,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  sd,  null,  null,  inverseCumAccuracy);	  this(null,    null,    sd,    null,    null);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
202	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD,  sd,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.STANDARD,  sd,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD,  sd,  solverAbsoluteAccuracy);	  super(LocalizedFormats.STANDARD,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
203	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.STANDARD,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  super(LocalizedFormats.STANDARD,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
204	[BUG]  [BUGGY]  this(null,  mean,  null,  null);  [CE]  illegal  start  of  type  [FE]                          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  mean,  null,  null);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  mean,  null,  null);	  this(null,    sd,    null,    null);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
205	[BUG]  [BUGGY]  if(sd  <  =  MAX_STANDARD_DEVIATION  ||  sd  >  inverseCumAccuracy)  {  [CE]  illegal  start  of  expression  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  <  =  MAX_STANDARD_DEVIATION  ||  sd  >  inverseCumAccuracy)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  =  MAX_STANDARD_DEVIATION  ||  sd  >  inverseCumAccuracy)  {	  if(sd    <    =    MAX_STANDARD_DEVIATION    ||    sd    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
206	[BUG]  [BUGGY]  this(message,  null,  sd,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(message,  null,  sd,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(message,  null,  sd,  solverAbsoluteAccuracy);	  this(message,    null,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
207	[BUG]  [BUGGY]  if  (sd  <  0  ||  sd  ==  StandardDeviation.STANDARD_DEVIATION)  {  [CE]  cannot  find  symbol  StandardDeviation  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if  (sd  <  0  ||  sd  ==  StandardDeviation.STANDARD_DEVIATION)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if  (sd  <  0  ||  sd  ==  StandardDeviation.STANDARD_DEVIATION)  {	  if    (sd    <    =    0    ||    sd    ==    StandardDeviation.STANDARD_DEVIATION)    {    	non-compiled	[CE]  cannot  find  symbol  StandardDeviation	41	None	replace
208	[BUG]  [BUGGY]  if  (sd  <  0  ||  sd  >  StandardDeviation.INTEGER_DEVIATION)  {  [CE]  cannot  find  symbol  StandardDeviation  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if  (sd  <  0  ||  sd  >  StandardDeviation.INTEGER_DEVIATION)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if  (sd  <  0  ||  sd  >  StandardDeviation.INTEGER_DEVIATION)  {	  if    (sd    <    0    ||    sd    >    StandardDeviation.STANDARD_DEVIATION)    {    	non-compiled	[CE]  cannot  find  symbol  StandardDeviation	63	None	replace
209	[BUG]  [BUGGY]  this(null,  null,  null,  null,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  null,  null,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  null,  null,  solverAbsoluteAccuracy);	  this(null,    null,    null,    null,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
210	[BUG]  [BUGGY]  this(null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  null,  null,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  null,  null,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  null,  null,  inverseCumAccuracy);	  this(null,    null,    null,    null,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
211	[BUG]  [BUGGY]  this(null,  null,  null,  null,  inverseCumAccuracy,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  null,  null,  inverseCumAccuracy,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  null,  null,  inverseCumAccuracy,  solverAbsoluteAccuracy);	  this(null,    null,    null,    null,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
212	[BUG]  [BUGGY]  this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy,  null,  null);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy,  null,  null);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy,  null,  null);	  this(null,    null,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    null,    null);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
213	[BUG]  [BUGGY]  if(sd  <  =  0  ||  sd  >=  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [CE]  illegal  start  of  expression  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  <  =  0  ||  sd  >=  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  =  0  ||  sd  >=  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {	  if(sd    <    =    0    ||    sd    >    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
214	[BUG]  [BUGGY]  super(DEFAULT_INVERSE_ABSOLUTE,  DEFAULT_INVERSE_ABSOLUTE);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(DEFAULT_INVERSE_ABSOLUTE,  DEFAULT_INVERSE_ABSOLUTE);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(DEFAULT_INVERSE_ABSOLUTE,  DEFAULT_INVERSE_ABSOLUTE);	  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE,    DEFAULT_INVERSE_ABSOLUTE);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
215	[BUG]  [BUGGY]  if(sd  <  0  ||  sd  >  StandardDeviation.INTEGER_ABSOLUTE_ACCURACY)  {  [CE]  cannot  find  symbol  StandardDeviation  [FE]    NotStrictlyPositiveException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  <  0  ||  sd  >  StandardDeviation.INTEGER_ABSOLUTE_ACCURACY)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  0  ||  sd  >  StandardDeviation.INTEGER_ABSOLUTE_ACCURACY)  {	  if(sd    <    0    ||    sd    >    inverseCumAccuracy)    {    	non-compiled	[CE]  cannot  find  symbol  StandardDeviation	78	None	replace
216	[BUG]  [BUGGY]  this.standardDeviation  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this.standardDeviation  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this.standardDeviation  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;	  this.standardDeviation    =    inverseCumAccuracy    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
217	[BUG]  [BUGGY]  this.standardDeviation  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  SQRT2PI;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this.standardDeviation  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  SQRT2PI;  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this.standardDeviation  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  SQRT2PI;	  this.standardDeviation    =    inverseCumAccuracy    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
218	[BUG]  [BUGGY]  this(null,  null,  null,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  null,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  null,  solverAbsoluteAccuracy);	  this(null,    null,    null,    sd);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
219	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  solverAbsoluteAccuracy);	  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
220	[BUG]  [BUGGY]  super(localizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(localizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(localizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  inverseCumAccuracy);	  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
221	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  mean);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  mean);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  mean);	  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
222	[BUG]  [BUGGY]  this.standardDeviation  =  inverseCumAccuracy  +  sd;  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this.standardDeviation  =  inverseCumAccuracy  +  sd;  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this.standardDeviation  =  inverseCumAccuracy  +  sd;	  this.standardDeviation    =    sd    +    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
223	[BUG]  [BUGGY]  this.standardDeviation  =  sd  /  inverseCumAccuracy;  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this.standardDeviation  =  sd  /  inverseCumAccuracy;  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this.standardDeviation  =  sd  /  inverseCumAccuracy;	  this.standardDeviation    =    sd    +    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
224	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  SQRT2PI);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  SQRT2PI);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  SQRT2PI);	  super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    SQRT2PI);    this.standardDeviation    =    standardDeviation;    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
225	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);	  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
226	[BUG]  [BUGGY]  super(LocalizedFormats.SQRT2PI,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.SQRT2PI,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.SQRT2PI,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);	  super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    mean);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
227	[BUG]  [BUGGY]  super(localizedFormats.STRING_DEVIATION,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(localizedFormats.STRING_DEVIATION,  sd,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(localizedFormats.STRING_DEVIATION,  sd,  inverseCumAccuracy);	  super(LocalizedFormats.STRING_DEVIATION,    sd);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
228	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  this.standardDeviation  =  sd;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  this.standardDeviation  =  sd;  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  this.standardDeviation  =  sd;	  super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    this.standardDeviation    =    sd;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
229	[BUG]  [BUGGY]  super(NumberFormat.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(NumberFormat.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(NumberFormat.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);	  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
230	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  mean,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  mean,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  mean,  inverseCumAccuracy);	  super(LocalizedFormats.STANDARD_DEVIATION,    mean,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
231	[BUG]  [BUGGY]  super(LocalizedFormats.SQRT2PI,  mean,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.SQRT2PI,  mean,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.SQRT2PI,  mean,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  super(LocalizedFormats.STANDARD_DEVIATION,    mean,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
232	[BUG]  [BUGGY]  this(mean,  null,  sd,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(mean,  null,  sd,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(mean,  null,  sd,  solverAbsoluteAccuracy);	  this(mean,    null,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
233	[BUG]  [BUGGY]  if(sd  <  0  ||  sd  ==  standardDeviation)  {  [CE]  variable  standardDeviation  might  not  have  been  initialized  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  <  0  ||  sd  ==  standardDeviation)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  0  ||  sd  ==  standardDeviation)  {	  if(sd    <    =    0    ||    sd    ==    standardDeviation)    {    	non-compiled	[CE]  variable  standardDeviation  might  not  have  been  initialized	30	None	replace
234	[BUG]  [BUGGY]  if(sd  <  =  0  ||  sd  >=  solverAbsoluteAccuracy)  {  [CE]  illegal  start  of  expression  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  <  =  0  ||  sd  >=  solverAbsoluteAccuracy)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  =  0  ||  sd  >=  solverAbsoluteAccuracy)  {	  if(sd    <    =    0    ||    sd    ==    standardDeviation)    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
235	[BUG]  [BUGGY]  if(sd  <  =  0  ||  sd  ==  LAST_INVERSE_ABSOLUTE_ACCURACY)  {  [CE]  illegal  start  of  expression  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  <  =  0  ||  sd  ==  LAST_INVERSE_ABSOLUTE_ACCURACY)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  =  0  ||  sd  ==  LAST_INVERSE_ABSOLUTE_ACCURACY)  {	  if(sd    <    =    0    ||    sd    >    LAST_INVERSE_ABSOLUTE_ACCURACY)    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
236	[BUG]  [BUGGY]  if(sd  <  0  ||  sd  >  StandardDistributionImpl.INSTANCE)  {  [CE]  cannot  find  symbol  StandardDistributionImpl  [FE]        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  <  0  ||  sd  >  StandardDistributionImpl.INSTANCE)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  0  ||  sd  >  StandardDistributionImpl.INSTANCE)  {	  if(sd    <    0    ||    sd    >    StandardDistributionImpl.STANDARD_DEVIATION)    {    	non-compiled	[CE]  cannot  find  symbol  StandardDistributionImpl	37	None	replace
237	[BUG]  [BUGGY]  if(localizedFormats!=  null)  {  If  (sd  ==  0)  {  [CE]  ';'  expected  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(localizedFormats!=  null)  {  If  (sd  ==  0)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(localizedFormats!=  null)  {  If  (sd  ==  0)  {	  if    (sd    ==    0)    {    If    (sd    ==    0)    {    	non-compiled	[CE]  ';'  expected	23	None	replace
238	[BUG]  [BUGGY]  if(localizedFormats  ==  null)  {  If  (sd  ==  0)  {  [CE]  ';'  expected  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(localizedFormats  ==  null)  {  If  (sd  ==  0)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(localizedFormats  ==  null)  {  If  (sd  ==  0)  {	  if    (sd    ==    0)    {    If    (sd    ==    0)    {    	non-compiled	[CE]  ';'  expected	23	None	replace
239	[BUG]  [BUGGY]  this(null,  null,  null,  inverseCumAccuracy,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  null,  inverseCumAccuracy,  solverAbsoluteAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  null,  inverseCumAccuracy,  solverAbsoluteAccuracy);	  this(null,    null,    null,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
240	[BUG]  [BUGGY]  if(localizedFormats.STANDARD_DEVIATION  ==  null  ||  localizedFormats.STANDARD_DEVIATION  ==  null)  {  [CE]  cannot  find  symbol  localizedFormats  [FE]        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(localizedFormats.STANDARD_DEVIATION  ==  null  ||  localizedFormats.STANDARD_DEVIATION  ==  null)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(localizedFormats.STANDARD_DEVIATION  ==  null  ||  localizedFormats.STANDARD_DEVIATION  ==  null)  {	  if    (sd    ==    0)    {    if    (sd    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  localizedFormats	21	None	replace
241	[BUG]  [BUGGY]  this(null,  null,  mean,  solverAbsoluteAccuracy,  sd);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  mean,  solverAbsoluteAccuracy,  sd);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  mean,  solverAbsoluteAccuracy,  sd);	  this(null,    null,    mean,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
242	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  this.standardDeviation  =  standardDeviation;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  this.standardDeviation  =  standardDeviation;  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  this.standardDeviation  =  standardDeviation;	  super(LocalizedFormats.STANDARD_DEVIATION,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    inverseCumAccuracy);    this.standardDeviation    =    standardDeviation;    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
243	[BUG]  [BUGGY]  this(mean,  null,  sd,  inverseCumAccuracy,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(mean,  null,  sd,  inverseCumAccuracy,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(mean,  null,  sd,  inverseCumAccuracy,  inverseCumAccuracy);	  this(null,    null,    sd,    inverseCumAccuracy,    mean);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
244	[BUG]  [BUGGY]  super(DateFormat.DEFAULT_INVERSE_ABSOLUTE,  DEFAULT_INVERSE_ABSOLUTE);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(DateFormat.DEFAULT_INVERSE_ABSOLUTE,  DEFAULT_INVERSE_ABSOLUTE);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(DateFormat.DEFAULT_INVERSE_ABSOLUTE,  DEFAULT_INVERSE_ABSOLUTE);	  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE,    DEFAULT_INVERSE_ABSOLUTE);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
245	[BUG]  [BUGGY]  if(sd  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  sd  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [CE]  illegal  start  of  expression  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  sd  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  sd  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {	  if(sd    <    =    0    ||    sd    >    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
246	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_STANDARD_DEVIATION,  sd);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_STANDARD_DEVIATION,  sd);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_STANDARD_DEVIATION,  sd);	  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    DEFAULT_STANDARD_DEVIATION);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
247	[BUG]  [BUGGY]  if(sd  >  0)  {  If  (sd  ==  0)  {  [CE]  ';'  expected  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  >  0)  {  If  (sd  ==  0)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  >  0)  {  If  (sd  ==  0)  {	  if    (sd    ==    0)    {    If    (sd    ==    0)    {    	non-compiled	[CE]  ';'  expected	23	None	replace
248	[BUG]  [BUGGY]  if(sd!=  0)  {  If  (sd  ==  0)  {  [CE]  ';'  expected  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd!=  0)  {  If  (sd  ==  0)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd!=  0)  {  If  (sd  ==  0)  {	  if    (sd    ==    0)    {    If    (sd    ==    0)    {    	non-compiled	[CE]  ';'  expected	23	None	replace
249	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.DEFAULT_INVERSE,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);	  super(LocalizedFormats.DEFAULT_INVERSE,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
250	[BUG]  [BUGGY]  if(sd  <  0  ||  sd  >  StandardDeviation.DEFAULT_INVERSE_BSOLUTE_ACCURACY)  {  [CE]  cannot  find  symbol  StandardDeviation  [FE]        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  <  0  ||  sd  >  StandardDeviation.DEFAULT_INVERSE_BSOLUTE_ACCURACY)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  0  ||  sd  >  StandardDeviation.DEFAULT_INVERSE_BSOLUTE_ACCURACY)  {	  if(sd    <    0    ||    sd    >    StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    	non-compiled	[CE]  cannot  find  symbol  StandardDeviation	64	None	replace
251	[BUG]  [BUGGY]  this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  null,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  null,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  null,  inverseCumAccuracy);	  this(null,    null,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    null,    null);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
252	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD,  sd,  standardDeviation,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.STANDARD,  sd,  standardDeviation,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD,  sd,  standardDeviation,  inverseCumAccuracy);	  super(LocalizedFormats.STANDARD,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
253	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE,  DEFAULT_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE,  DEFAULT_ABSOLUTE_ACCURACY);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.DEFAULT_INVERSE,  DEFAULT_ABSOLUTE_ACCURACY);	  super(LocalizedFormats.DEFAULT_INVERSE,    sd);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
254	[BUG]  [BUGGY]  [FE]  NotStrictlyPositiveException  [FE]          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  >  inverseCumAccuracy)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	add	if(sd  >  inverseCumAccuracy)  {	  if    (sd    ==    0)    {    if    (sd    >=    0)    {    	compilable	  [FE]  NotStrictlyPositiveException  	22	14	replace
255	[BUG]  [BUGGY]  if(sd  >  inverseCumAccuracy)  {  [FE]  NotStrictlyPositiveException  [FE]          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  >  inverseCumAccuracy)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  >  inverseCumAccuracy)  {	  if    (sd    ==    0)    {    if    (sd    >=    0)    {    	compilable	  [FE]  NotStrictlyPositiveException  	22	14	replace
256	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  mean,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  mean,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd,  mean,  inverseCumAccuracy);	  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
257	[BUG]  [BUGGY]  if(sd  <  0  ||  sd  >  StandardDeviation.DEFAULT_STANDARD_DEVIATION  ||  sd  >  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [CE]  cannot  find  symbol  StandardDeviation  [FE]        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  <  0  ||  sd  >  StandardDeviation.DEFAULT_STANDARD_DEVIATION  ||  sd  >  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  0  ||  sd  >  StandardDeviation.DEFAULT_STANDARD_DEVIATION  ||  sd  >  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {	  if(sd    <    0    ||    sd    >    StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY    ||    sd    >    StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    	non-compiled	[CE]  cannot  find  symbol  StandardDeviation	67	None	replace
258	[BUG]  [BUGGY]  if(sd  <  0  ||  sd  >  StandardDeviation.DEFAULT_INVERSE_BSOLUTE_ACCURACY  ||  sd  >  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [CE]  cannot  find  symbol  StandardDeviation  [FE]          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  <  0  ||  sd  >  StandardDeviation.DEFAULT_INVERSE_BSOLUTE_ACCURACY  ||  sd  >  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  0  ||  sd  >  StandardDeviation.DEFAULT_INVERSE_BSOLUTE_ACCURACY  ||  sd  >  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {	  if(sd    <    0    ||    sd    >    StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY    ||    sd    >    StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    	non-compiled	[CE]  cannot  find  symbol  StandardDeviation	67	None	replace
259	[BUG]  [BUGGY]  super(DateTimeUtils.currentTimeMillis(),  mean,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(DateTimeUtils.currentTimeMillis(),  mean,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(DateTimeUtils.currentTimeMillis(),  mean,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  super(LocalizedFormats.STANDARD_DEVIATION,    mean,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
260	[BUG]  [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  sd;  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  sd;  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  sd;	  this.mean    =    mean;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
261	[BUG]  [BUGGY]  if(sd  <  0  ||  sd  >  StandardDistributionImpl.INTEGER_DEVIATION)  {  [CE]  cannot  find  symbol  StandardDistributionImpl  [FE]        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  <  0  ||  sd  >  StandardDistributionImpl.INTEGER_DEVIATION)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  0  ||  sd  >  StandardDistributionImpl.INTEGER_DEVIATION)  {	  if(sd    <    0    ||    sd    >    StandardDistributionImpl.STANDARD_DEVIATION)    {    	non-compiled	[CE]  cannot  find  symbol  StandardDistributionImpl	37	None	replace
262	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);	  super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
263	[BUG]  [BUGGY]  if(sd  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  sd  >  LAST_INVERSE_ABSOLUTE_ACCURACY)  {  [CE]  illegal  start  of  expression  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  sd  >  LAST_INVERSE_ABSOLUTE_ACCURACY)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  sd  >  LAST_INVERSE_ABSOLUTE_ACCURACY)  {	  if(sd    <    =    0    ||    sd    >    LAST_INVERSE_ABSOLUTE_ACCURACY)    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
264	[BUG]  [BUGGY]  this(null,  null,  sd,  standardDeviation,  null);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  sd,  standardDeviation,  null);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  sd,  standardDeviation,  null);	  this(null,    null,    sd,    null,    null);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
265	[BUG]  [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  solverAbsoluteAccuracy);  this.standardDeviation  =  standardDeviation;  [CE]  illegal  start  of  type  [FE]                        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.STANDARD_DEVIATION,  sd,  solverAbsoluteAccuracy);  this.standardDeviation  =  standardDeviation;  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STANDARD_DEVIATION,  sd,  solverAbsoluteAccuracy);  this.standardDeviation  =  standardDeviation;	  super(LocalizedFormats.STANDARD_DEVIATION,    sd);    this.standardDeviation    =    standardDeviation;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
266	[BUG]  [BUGGY]  if(localizedFormats.STANDARD_DEVIATION  ==  null  ||!localizedFormats.STANDARD_DEVIATION.equals(sd))  {  [CE]  cannot  find  symbol  localizedFormats  [FE]        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(localizedFormats.STANDARD_DEVIATION  ==  null  ||!localizedFormats.STANDARD_DEVIATION.equals(sd))  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(localizedFormats.STANDARD_DEVIATION  ==  null  ||!localizedFormats.STANDARD_DEVIATION.equals(sd))  {	  if    (sd    ==    0)    {    if    (sd    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  localizedFormats	21	None	replace
267	[BUG]  [BUGGY]  this(null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  null,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  null,  sd,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  null,  sd,  inverseCumAccuracy);	  this(null,    null,    null,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
268	[BUG]  [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ASSOLUTE_ACCURACY,  DEFAULT_STANDARD_DEVIATION);  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.DEFAULT_INVERSE_ASSOLUTE_ACCURACY,  DEFAULT_STANDARD_DEVIATION);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.DEFAULT_INVERSE_ASSOLUTE_ACCURACY,  DEFAULT_STANDARD_DEVIATION);	  super(LocalizedFormats.DEFAULT_INVERSE_ASSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
269	[BUG]  [BUGGY]  super(LocalizedFormats.DOUBLE_DEVIATION,  sd);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.DOUBLE_DEVIATION,  sd);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.DOUBLE_DEVIATION,  sd);	  super(LocalizedFormats.STANDARD_DEVIATION,    mean);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
270	[BUG]  [BUGGY]  this(null,  null,  null,  standardDeviation,  sd,  null);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  null,  standardDeviation,  sd,  null);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  null,  standardDeviation,  sd,  null);	  this(null,    null,    null,    sd,    null);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
271	[BUG]  [BUGGY]  this.standardDeviation  =  standardAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this.standardDeviation  =  standardAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this.standardDeviation  =  standardAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    inverseCumAccuracy    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
272	[BUG]  [BUGGY]  super(sd,  inverseCumAccuracy,  standardDeviation);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(sd,  inverseCumAccuracy,  standardDeviation);  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(sd,  inverseCumAccuracy,  standardDeviation);	  super(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
273	[BUG]  [BUGGY]  super(LocalizedFormats.STRING_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.STRING_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STRING_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  super(LocalizedFormats.STRING_DEVIATION,    sd);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
274	[BUG]  [BUGGY]  super(LocalizedFormats.STRING_DEVIATION,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  super(LocalizedFormats.STRING_DEVIATION,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	super(LocalizedFormats.STRING_DEVIATION,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  super(LocalizedFormats.STRING_DEVIATION,    sd);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
275	[BUG]  [BUGGY]  if(sd  <  =  0)  {  If  (sd  <  0)  {  [CE]  illegal  start  of  expression  [FE]          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  <  =  0)  {  If  (sd  <  0)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  =  0)  {  If  (sd  <  0)  {	  if    (sd    <    0)    {    If    (sd    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
276	[BUG]  [BUGGY]  if(sd  >  0)  {  If  (sd  <  0)  {  [CE]  ';'  expected  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  >  0)  {  If  (sd  <  0)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  >  0)  {  If  (sd  <  0)  {	  if    (sd    <    0)    {    If    (sd    <    0)    {    	non-compiled	[CE]  ';'  expected	46	None	replace
277	[BUG]  [BUGGY]  this(null,  sd,  standardDeviation,  null,  null);  [CE]  illegal  start  of  type  [FE]                          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  sd,  standardDeviation,  null,  null);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  sd,  standardDeviation,  null,  null);	  this(null,    sd,    null,    null);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
278	[BUG]  [BUGGY]  this(null,  null,  null,  standardDeviation,  inverseCumAccuracy,  null);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  null,  standardDeviation,  inverseCumAccuracy,  null);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  null,  standardDeviation,  inverseCumAccuracy,  null);	  this(null,    null,    null,    inverseCumAccuracy,    null);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
279	[BUG]  [BUGGY]  this(message,  sd,  null,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(message,  sd,  null,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(message,  sd,  null,  inverseCumAccuracy);	  this(message,    null,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
280	[BUG]  [BUGGY]  this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_STANDARD_DEVIATION);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_STANDARD_DEVIATION);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(null,  null,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_STANDARD_DEVIATION);	  this(null,    null,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    null);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
281	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  <  1)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	add	if(sd  <  1)  {	  if    (sd    <    0)    {    if    (sd    <    0)    {    	compilable	  [FE]  ConvergenceException  	45	2	replace
282	[BUG]  [BUGGY]  if(sd  <  1)  {  [FE]  ConvergenceException  [FE]        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  if(sd  <  1)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  1)  {	  if    (sd    <    0)    {    if    (sd    <    0)    {    	compilable	  [FE]  ConvergenceException  	45	2	replace
283	[BUG]  [BUGGY]  this(mean,  null,  sd,  standardDeviation,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(mean,  null,  sd,  standardDeviation,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(mean,  null,  sd,  standardDeviation,  inverseCumAccuracy);	  this(mean,    null,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
284	[BUG]  [BUGGY]  this(mean,  sd,  standardDeviation,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {      [BUGGY]  this(mean,  sd,  standardDeviation,  inverseCumAccuracy);  [BUGGY]      if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	this(mean,  sd,  standardDeviation,  inverseCumAccuracy);	  this(mean,    null,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
