bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  [BUGGY]  if  (sd  <  0)  {  [BUGGY]  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	add	if  (sd  <  0)  {	if  (sd  <=  0)  {  	compilable	  [FE]  ConvergenceException  	11	2	replace
2	[BUG]  [BUGGY]  if  (sd  <  0)  {  [FE]  ConvergenceException  [FE]    ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  [BUGGY]  if  (sd  <  0)  {  [BUGGY]  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if  (sd  <  0)  {	if  (sd  <=  0)  {  	compilable	  [FE]  ConvergenceException  	11	2	replace
3	[BUG]  [BUGGY]  if(sd  <  =  0  ||  sd  >  standardDeviation)  {  [CE]  illegal  start  of  expression  [FE]      ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  [BUGGY]  if(sd  <  =  0  ||  sd  >  standardDeviation)  {  [BUGGY]  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  =  0  ||  sd  >  standardDeviation)  {	if  (sd  <=  0)  {  	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
4	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  [BUGGY]  if  (sd  ==  0)  {  [BUGGY]  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	add	if  (sd  ==  0)  {	if  (sd  <=  0)  {  	compilable	  [FE]  ConvergenceException  	11	1	replace
5	[BUG]  [BUGGY]  if  (sd  ==  0)  {  [FE]  ConvergenceException  [FE]        ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  [BUGGY]  if  (sd  ==  0)  {  [BUGGY]  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if  (sd  ==  0)  {	if  (sd  <=  0)  {  	compilable	  [FE]  ConvergenceException  	11	1	replace
6	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]          ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  [BUGGY]    [BUGGY]  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	  	if  (sd  <=  0)  {  	non-compiled	[CE]  illegal  start  of  type	11	None	replace
7	[BUG]  [BUGGY]    this.standardDeviation  =  normalDeviation;  [CE]  cannot  find  symbol  normalDeviation  [FE]    ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  [BUGGY]    this.standardDeviation  =  normalDeviation;  [BUGGY]  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	    this.standardDeviation  =  normalDeviation;		non-compiled	[CE]  cannot  find  symbol  normalDeviation	12	None	add
8	[BUG]  [BUGGY]    this(null,  null,  sd,  inverseCumAccuracy);  [CE]  no  suitable  constructor  found  for  NormalDistributionImpl(<null>,<null>,double,double)  [FE]      ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  [BUGGY]    this(null,  null,  sd,  inverseCumAccuracy);  [BUGGY]  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	    this(null,  null,  sd,  inverseCumAccuracy);		non-compiled	[CE]  no  suitable  constructor  found  for  NormalDistributionImpl(<null>,<null>,double,double)	12	None	add
9	[BUG]  [BUGGY]    this.standardDeviation  =  inverseCumAccuracy;  [CE]  variable  standardDeviation  might  already  have  been  assigned  [FE]        ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  [BUGGY]    this.standardDeviation  =  inverseCumAccuracy;  [BUGGY]  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	    this.standardDeviation  =  inverseCumAccuracy;		non-compiled	[CE]  variable  standardDeviation  might  already  have  been  assigned	12	None	add
10	[BUG]  [BUGGY]    this(null,  null,  null,  null);  [CE]  no  suitable  constructor  found  for  NormalDistributionImpl(<null>,<null>,<null>,<null>)  [FE]          ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  [BUGGY]    this(null,  null,  null,  null);  [BUGGY]  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	    this(null,  null,  null,  null);		non-compiled	[CE]  no  suitable  constructor  found  for  NormalDistributionImpl(<null>,<null>,<null>,<null>)	12	None	add
11	[BUG]  [BUGGY]    this(null,  null,  null);  [CE]  no  suitable  constructor  found  for  NormalDistributionImpl(<null>,<null>,<null>)  [FE]            ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  [BUGGY]    this(null,  null,  null);  [BUGGY]  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	    this(null,  null,  null);		non-compiled	[CE]  no  suitable  constructor  found  for  NormalDistributionImpl(<null>,<null>,<null>)	12	None	add
12	[BUG]  [BUGGY]  if  (sd  <  =  0  ||  sd  >  StandardDeviation.STANDARD_DEVIATION)  {  [CE]  illegal  start  of  expression  [FE]    ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  [BUGGY]  if  (sd  <  =  0  ||  sd  >  StandardDeviation.STANDARD_DEVIATION)  {  [BUGGY]  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if  (sd  <  =  0  ||  sd  >  StandardDeviation.STANDARD_DEVIATION)  {	if  (sd  <=  0)  {  	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
13	[BUG]  [BUGGY]    super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  cannot  find  symbol  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  [FE]    ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  [BUGGY]    super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	    super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);		non-compiled	[CE]  cannot  find  symbol  DEFAULT_INVERSE_ABSOLUTE_ACCURACY	12	None	add
14	[BUG]  [BUGGY]    super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);  [CE]  cannot  find  symbol  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  [FE]      ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  [BUGGY]    super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);  [BUGGY]  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	    super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);		non-compiled	[CE]  cannot  find  symbol  DEFAULT_INVERSE_ABSOLUTE_ACCURACY	12	None	add
15	[BUG]  [BUGGY]    super(LocalizedFormats.STANDARD_DEVIATION,  sd);  [CE]  constructor  AbstractContinuousDistribution  in  class  AbstractContinuousDistribution  cannot  be  applied  to  given  types;  [FE]        ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  [BUGGY]    super(LocalizedFormats.STANDARD_DEVIATION,  sd);  [BUGGY]  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	    super(LocalizedFormats.STANDARD_DEVIATION,  sd);		non-compiled	[CE]  constructor  AbstractContinuousDistribution  in  class  AbstractContinuousDistribution  cannot  be  applied  to  given  types;	12	None	add
16	[BUG]  [BUGGY]    super(LocalizedFormats.STANDARD_DEVIATION);  [CE]  constructor  AbstractContinuousDistribution  in  class  AbstractContinuousDistribution  cannot  be  applied  to  given  types;  [FE]          ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  [BUGGY]    super(LocalizedFormats.STANDARD_DEVIATION);  [BUGGY]  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	    super(LocalizedFormats.STANDARD_DEVIATION);		non-compiled	[CE]  constructor  AbstractContinuousDistribution  in  class  AbstractContinuousDistribution  cannot  be  applied  to  given  types;	12	None	add
17	[BUG]  [BUGGY]    super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);  [CE]  cannot  find  symbol  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  [FE]            ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  [BUGGY]    super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);  [BUGGY]  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	    super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);		non-compiled	[CE]  cannot  find  symbol  DEFAULT_INVERSE_ABSOLUTE_ACCURACY	12	None	add
18	[BUG]  [BUGGY]  if(sd  <  =  0  ||  sd  >  MAX_STANDARD_DEVIATION)  {  [CE]  illegal  start  of  expression  [FE]    ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  [BUGGY]  if(sd  <  =  0  ||  sd  >  MAX_STANDARD_DEVIATION)  {  [BUGGY]  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	if(sd  <  =  0  ||  sd  >  MAX_STANDARD_DEVIATION)  {	if  (sd  <=  0)  {  	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
19	[BUG]  [BUGGY]    super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  constructor  AbstractContinuousDistribution  in  class  AbstractContinuousDistribution  cannot  be  applied  to  given  types;  [FE]    ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  [BUGGY]    super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	    super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);		non-compiled	[CE]  constructor  AbstractContinuousDistribution  in  class  AbstractContinuousDistribution  cannot  be  applied  to  given  types;	12	None	add
20	[BUG]  [BUGGY]    super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  cannot  find  symbol  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  [FE]      ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  [BUGGY]    super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	    super(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);		non-compiled	[CE]  cannot  find  symbol  DEFAULT_INVERSE_ABSOLUTE_ACCURACY	12	None	add
21	[BUG]  [BUGGY]    super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  this.mean  =  mean;  [CE]  constructor  AbstractContinuousDistribution  in  class  AbstractContinuousDistribution  cannot  be  applied  to  given  types;  [FE]        ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  [BUGGY]    super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  this.mean  =  mean;  [BUGGY]  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	    super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  this.mean  =  mean;		non-compiled	[CE]  constructor  AbstractContinuousDistribution  in  class  AbstractContinuousDistribution  cannot  be  applied  to  given  types;	12	None	add
22	[BUG]  [BUGGY]    super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  this.standardDeviation  =  standardDeviation;  [CE]  constructor  AbstractContinuousDistribution  in  class  AbstractContinuousDistribution  cannot  be  applied  to  given  types;  [FE]          ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  [BUGGY]    super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  this.standardDeviation  =  standardDeviation;  [BUGGY]  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	74	74	1	replace	    super(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  this.standardDeviation  =  standardDeviation;		non-compiled	[CE]  constructor  AbstractContinuousDistribution  in  class  AbstractContinuousDistribution  cannot  be  applied  to  given  types;	12	None	add
