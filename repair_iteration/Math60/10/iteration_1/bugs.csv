bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  type  [FE]    ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  [BUGGY]    if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	    if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }		non-compiled	[CE]  illegal  start  of  type	20	None	add
2	[BUG]  [BUGGY]    solverAbsoluteAccuracy  =  solverAbsoluteAccuracy;  [CE]  illegal  start  of  type  [FE]      ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  [BUGGY]    solverAbsoluteAccuracy  =  solverAbsoluteAccuracy;  [BUGGY]  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	    solverAbsoluteAccuracy  =  solverAbsoluteAccuracy;		non-compiled	[CE]  illegal  start  of  type	20	None	add
3	[BUG]  [BUGGY]    if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  else  {  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [CE]  illegal  start  of  type  [FE]        ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  [BUGGY]    if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  else  {  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [BUGGY]  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	    if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  else  {  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }		non-compiled	[CE]  illegal  start  of  type	20	None	add
4	[BUG]  [BUGGY]    if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  else  {  solverAbsoluteAccuracy  =  null;  }  [CE]  illegal  start  of  type  [FE]          ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  [BUGGY]    if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  else  {  solverAbsoluteAccuracy  =  null;  }  [BUGGY]  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	    if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  else  {  solverAbsoluteAccuracy  =  null;  }		non-compiled	[CE]  illegal  start  of  type	20	None	add
5	[BUG]  [BUGGY]    if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  else  {  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURAC  [CE]  illegal  start  of  type  [FE]            ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  [BUGGY]    if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  else  {  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURAC  [BUGGY]  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	    if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  else  {  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURAC		non-compiled	[CE]  illegal  start  of  type	20	None	add
6	[BUG]  [BUGGY]  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);  }  [CE]  illegal  start  of  type  [FE]    ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  [BUGGY]  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);  }  [BUGGY]    [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);  }	}  	non-compiled	[CE]  illegal  start  of  type	19	None	replace
7	[BUG]  [BUGGY]  this.standardDeviation  =  solverAbsoluteAccuracy;  [CE]  illegal  start  of  type  [FE]    ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  [BUGGY]  this.standardDeviation  =  solverAbsoluteAccuracy;  [BUGGY]    [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	this.standardDeviation  =  solverAbsoluteAccuracy;	}  	non-compiled	[CE]  illegal  start  of  type	19	None	replace
8	[BUG]  [BUGGY]    if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  }  [CE]  illegal  start  of  type  [FE]    ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  [BUGGY]    if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  }  [BUGGY]  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	    if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  }		non-compiled	[CE]  illegal  start  of  type	20	None	add
9	[BUG]  [BUGGY]    solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]    ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  [BUGGY]    solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	    solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;		non-compiled	[CE]  illegal  start  of  type	20	None	add
10	[BUG]  [BUGGY]    solverAbsoluteAccuracy  =  solverAbsoluteAccuracy.doubleValue();  [CE]  illegal  start  of  type  [FE]      ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  [BUGGY]    solverAbsoluteAccuracy  =  solverAbsoluteAccuracy.doubleValue();  [BUGGY]  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	    solverAbsoluteAccuracy  =  solverAbsoluteAccuracy.doubleValue();		non-compiled	[CE]  illegal  start  of  type	20	None	add
11	[BUG]  [BUGGY]    solverAbsoluteAccuracy  =  solverAbsoluteAccuracy;  this.standardDeviation  =  solverAbsoluteAccuracy;  [CE]  illegal  start  of  type  [FE]        ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  [BUGGY]    solverAbsoluteAccuracy  =  solverAbsoluteAccuracy;  this.standardDeviation  =  solverAbsoluteAccuracy;  [BUGGY]  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	    solverAbsoluteAccuracy  =  solverAbsoluteAccuracy;  this.standardDeviation  =  solverAbsoluteAccuracy;		non-compiled	[CE]  illegal  start  of  type	20	None	add
12	[BUG]  [BUGGY]  this.standardDeviation  =  standardDeviation;  [CE]  illegal  start  of  type  [FE]    ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  [BUGGY]  this.standardDeviation  =  standardDeviation;  [BUGGY]    [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	this.standardDeviation  =  standardDeviation;	}  	non-compiled	[CE]  illegal  start  of  type	19	None	replace
13	[BUG]  [BUGGY]  this.standardDeviation  =  inverseCumAccuracy;  [CE]  illegal  start  of  type  [FE]      ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  [BUGGY]  this.standardDeviation  =  inverseCumAccuracy;  [BUGGY]    [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	this.standardDeviation  =  inverseCumAccuracy;	}  	non-compiled	[CE]  illegal  start  of  type	19	None	replace
