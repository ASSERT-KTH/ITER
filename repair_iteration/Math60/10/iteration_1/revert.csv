projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=solverAbsoluteAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}else{solverAbsoluteAccuracy=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}else{solverAbsoluteAccuracy=null;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}else{solverAbsoluteAccuracy=DEFAULT_INVERSE_ABSOLUTE_ACCURAC
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81this.standardDeviation=solverAbsoluteAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,solverAbsoluteAccuracy);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=solverAbsoluteAccuracy/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=solverAbsoluteAccuracy.doubleValue();
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=solverAbsoluteAccuracy;this.standardDeviation=solverAbsoluteAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81this.standardDeviation=standardDeviation;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81this.standardDeviation=inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY),solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,sd));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeGet(sd){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeGet(sd){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,safeSQRT2PI);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81this.standardDeviation=sd;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81this.standardDeviation=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81this.standardDeviation=StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81this.standardDeviation=StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=newNormalDistributionImpl(sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=newNormalDistributionImpl(this.mean,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=DEFAULT_INVERSE_ABSOLUTE_ACCURACy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=DEFAULT_INVERSE_ABSOLUTE_ACCURAC;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=solverAbsoluteAccuracy*DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=solverAbsoluteAccuracy/DEFAULT_INVERSE_ABSOLUTE_ACCURACY+mean;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=solverAbsoluteAccuracy/DEFAULT_INVERSE_ABSOLUTE_ACCURACY,standardDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=inverseCumAccuracy.doubleValue();
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=solverAbsoluteAccuracy.doubleValue()+1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=solverAbsoluteAccuracy.doubleValue()/2;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=null;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=newNormalDistributionImpl(mean,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAccess(LocalizedFormats.STANDARD_DEVIATION,sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAccess(LocalizedFormats.STANDARD_DEVIATION);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAccess(LocalizedFormats.STANDARD_DEVIATION),sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAccess(LocalizedFormats.STANDARD_DEVIATION,sd));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=MAXIMUM_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=DEFAULT_INVERSE_ABSOLUTE_ACCOURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=inverseCumAccuracy;this.standardDeviation=solverAbsoluteAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=newNormalDistributionImpl(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=newNormalDistributionImpl(sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=newNormalDistributionImpl(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=newNormalDistributionImpl(sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=newNormalDistributionImpl(mean,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=newNormalDistributionImpl(sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=newNormalDistributionImpl();
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}else{solverAbsoluteAccuracy=DEFAULT_INVERSE_ABSOLUTE
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}else{solverAbsoluteAccuracy=DEFAULT_INVERSE_ABSOLUTE_ACC
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;this.standardDeviation=solverAbsoluteAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=DEFAULT_INVERSE_ABSOLUTE_ACCURACE;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81this.standardDeviation=DEFAULT_INVERSION_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=solverAbsoluteAccuracy.doubleValue()-1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81this.standardDeviation=inverseAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=solverAbsoluteAccuracy/DEFAULT_INVERSE_ABSOLUTE_ACCURACY+standardDeviation;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=solverAbsoluteAccuracy/DEFAULT_INVERSE_ABSOLUTE_ACCURACY+1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAdd(sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=null;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=0;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81this.standardDeviation=inverseCumAccuracy+DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=newNormalDistributionImpl(sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81MutableFormats.INVERSE_ABSOLUTE_ACCURACY=solverAbsoluteAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81MutableFormats.INVERSE_ABSOLUTE_ACCURACY,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=DEFAULT_INVERSE_ABSOLUTE_ACCURACY?DEFAULT_INVERSE_ABSOLUTE_ACCURACY:DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81this.standardDeviation=inverseCumAccuracy+1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=DEFAULT_INVERSE_ABSOLUTE_ACCURACY+inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=DEFAULT_INVERSE_ABSOLUTE_ACCURACY+SQRT2PI;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAdd(sd,inverseCumAccuracy){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAdd(sd,inverseCumAccuracy){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAdd(sd,inverseCumAccuracy){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
