bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,  sd);  [CE]  illegal  start  of  type  [FE]        ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,  sd);  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,  sd);	      if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,    solverAbsoluteAccuracy);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
2	[BUG]  [BUGGY]  safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY);	      if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,    solverAbsoluteAccuracy);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
3	[BUG]  [BUGGY]  safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY),  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY),  solverAbsoluteAccuracy);  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY),  solverAbsoluteAccuracy);	      if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,    solverAbsoluteAccuracy);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
4	[BUG]  [BUGGY]  safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,  sd));  [CE]  illegal  start  of  type  [FE]              ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,  sd));  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,  sd));	      if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,    solverAbsoluteAccuracy);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
5	[BUG]  [BUGGY]  safeGet(sd)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  type  [FE]        ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  safeGet(sd)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]      [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeGet(sd)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
6	[BUG]  [BUGGY]  safeGet(sd)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);  }  [CE]  illegal  start  of  type  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  safeGet(sd)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);  }  [BUGGY]      [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeGet(sd)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);  }	  if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
7	[BUG]  [BUGGY]  safeSQRT2PI  =  sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  type  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  safeSQRT2PI  =  sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]      [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeSQRT2PI  =  sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
8	[BUG]  [BUGGY]  safeSQRT2PI  =  sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  safeSQRT2PI);  }  [CE]  illegal  start  of  type  [FE]              ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  safeSQRT2PI  =  sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  safeSQRT2PI);  }  [BUGGY]      [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeSQRT2PI  =  sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  safeSQRT2PI);  }	  if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
9	[BUG]  [BUGGY]  this.standardDeviation  =  sd;  [CE]  illegal  start  of  type  [FE]        ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  this.standardDeviation  =  sd;  [BUGGY]      [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	this.standardDeviation  =  sd;	  this.standardDeviation    =    standardDeviation;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
10	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    standardDeviation;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
11	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    standardDeviation;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
12	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]              ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  this.standardDeviation  =  StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	this.standardDeviation  =  StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    standardDeviation;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
13	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	      if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    else    {    solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
14	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy;  [CE]  illegal  start  of  type  [FE]              ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy;  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  inverseCumAccuracy;	      if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    else    {    solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
15	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  new  NormalDistributionImpl(sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  solverAbsoluteAccuracy  =  new  NormalDistributionImpl(sd,  inverseCumAccuracy);  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  new  NormalDistributionImpl(sd,  inverseCumAccuracy);	      if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    else    {    solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
16	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  new  NormalDistributionImpl(this.mean,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  solverAbsoluteAccuracy  =  new  NormalDistributionImpl(this.mean,  sd,  inverseCumAccuracy);  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  new  NormalDistributionImpl(this.mean,  sd,  inverseCumAccuracy);	      if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    else    {    solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
17	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACy;  [CE]  illegal  start  of  type  [FE]                ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACy;  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACy;	      if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    else    {    solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURAC    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
18	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURAC;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURAC;  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURAC;	      if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    else    {    solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURAC    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
19	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]        ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	      solverAbsoluteAccuracy    =    solverAbsoluteAccuracy    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
20	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  [CE]  illegal  start  of  type  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;	      solverAbsoluteAccuracy    =    solverAbsoluteAccuracy    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
21	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);  [CE]  illegal  start  of  type  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);	      solverAbsoluteAccuracy    =    solverAbsoluteAccuracy    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
22	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy.doubleValue();  [CE]  illegal  start  of  type  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy.doubleValue();  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  inverseCumAccuracy.doubleValue();	      solverAbsoluteAccuracy    =    solverAbsoluteAccuracy.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
23	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy.doubleValue()  +  1;  [CE]  illegal  start  of  type  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy.doubleValue()  +  1;  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  solverAbsoluteAccuracy.doubleValue()  +  1;	      solverAbsoluteAccuracy    =    solverAbsoluteAccuracy.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
24	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy.doubleValue()  /  2;  [CE]  illegal  start  of  type  [FE]              ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy.doubleValue()  /  2;  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  solverAbsoluteAccuracy.doubleValue()  /  2;	      solverAbsoluteAccuracy    =    solverAbsoluteAccuracy.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
25	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  null;  [CE]  illegal  start  of  type  [FE]              ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  solverAbsoluteAccuracy  =  null;  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  null;	      if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    else    {    solverAbsoluteAccuracy    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
26	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  new  NormalDistributionImpl(mean,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  solverAbsoluteAccuracy  =  new  NormalDistributionImpl(mean,  sd,  inverseCumAccuracy);  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  new  NormalDistributionImpl(mean,  sd,  inverseCumAccuracy);	      if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    else    {    solverAbsoluteAccuracy    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
27	[BUG]  [BUGGY]  safeAccess(LocalizedFormats.STANDARD_DEVIATION,  sd);  [CE]  illegal  start  of  type  [FE]        ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  safeAccess(LocalizedFormats.STANDARD_DEVIATION,  sd);  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeAccess(LocalizedFormats.STANDARD_DEVIATION,  sd);	      if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
28	[BUG]  [BUGGY]  safeAccess(LocalizedFormats.STANDARD_DEVIATION);  [CE]  illegal  start  of  type  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  safeAccess(LocalizedFormats.STANDARD_DEVIATION);  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeAccess(LocalizedFormats.STANDARD_DEVIATION);	      if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
29	[BUG]  [BUGGY]  safeAccess(LocalizedFormats.STANDARD_DEVIATION),  sd);  [CE]  illegal  start  of  type  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  safeAccess(LocalizedFormats.STANDARD_DEVIATION),  sd);  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeAccess(LocalizedFormats.STANDARD_DEVIATION),  sd);	      if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
30	[BUG]  [BUGGY]  safeAccess(LocalizedFormats.STANDARD_DEVIATION,  sd));  [CE]  illegal  start  of  type  [FE]              ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  safeAccess(LocalizedFormats.STANDARD_DEVIATION,  sd));  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeAccess(LocalizedFormats.STANDARD_DEVIATION,  sd));	      if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
31	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  MAXIMUM_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  solverAbsoluteAccuracy  =  MAXIMUM_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  MAXIMUM_INVERSE_ABSOLUTE_ACCURACY;	      solverAbsoluteAccuracy    =    solverAbsoluteAccuracy;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
32	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCOURACY;  [CE]  illegal  start  of  type  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCOURACY;  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCOURACY;	      solverAbsoluteAccuracy    =    solverAbsoluteAccuracy;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
33	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy;  this.standardDeviation  =  solverAbsoluteAccuracy;  [CE]  illegal  start  of  type  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy;  this.standardDeviation  =  solverAbsoluteAccuracy;  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  inverseCumAccuracy;  this.standardDeviation  =  solverAbsoluteAccuracy;	      solverAbsoluteAccuracy    =    solverAbsoluteAccuracy;    this.standardDeviation    =    solverAbsoluteAccuracy;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
34	[BUG]  [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]        ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeSQRT2PI  =  new  NormalDistributionImpl(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);	      if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,    solverAbsoluteAccuracy);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
35	[BUG]  [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeSQRT2PI  =  new  NormalDistributionImpl(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);	      if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,    solverAbsoluteAccuracy);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
36	[BUG]  [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);  [CE]  illegal  start  of  type  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeSQRT2PI  =  new  NormalDistributionImpl(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);	      if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,    solverAbsoluteAccuracy);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
37	[BUG]  [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]              ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeSQRT2PI  =  new  NormalDistributionImpl(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	      if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,    solverAbsoluteAccuracy);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
38	[BUG]  [BUGGY]  safeSQRT2PI  =  inverseCumAccuracy;  [CE]  illegal  start  of  type  [FE]        ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  safeSQRT2PI  =  inverseCumAccuracy;  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeSQRT2PI  =  inverseCumAccuracy;	      if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
39	[BUG]  [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl(mean,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl(mean,  sd,  inverseCumAccuracy);  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeSQRT2PI  =  new  NormalDistributionImpl(mean,  sd,  inverseCumAccuracy);	      if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
40	[BUG]  [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl(sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl(sd,  inverseCumAccuracy);  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeSQRT2PI  =  new  NormalDistributionImpl(sd,  inverseCumAccuracy);	      if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
41	[BUG]  [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl();  [CE]  illegal  start  of  type  [FE]              ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl();  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeSQRT2PI  =  new  NormalDistributionImpl();	      if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
42	[BUG]  [BUGGY]  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  else  {  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE  [CE]  illegal  start  of  type  [FE]                ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  else  {  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  else  {  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE	      if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    else    {    solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURAC    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
43	[BUG]  [BUGGY]  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  else  {  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACC  [CE]  illegal  start  of  type  [FE]                  ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  else  {  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACC  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  else  {  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACC	      if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    else    {    solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURAC    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
44	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.standardDeviation  =  solverAbsoluteAccuracy;  [CE]  illegal  start  of  type  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.standardDeviation  =  solverAbsoluteAccuracy;  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.standardDeviation  =  solverAbsoluteAccuracy;	      solverAbsoluteAccuracy    =    solverAbsoluteAccuracy;    this.standardDeviation    =    solverAbsoluteAccuracy;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
45	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACE;  [CE]  illegal  start  of  type  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACE;  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACE;	      solverAbsoluteAccuracy    =    solverAbsoluteAccuracy;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
46	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]        ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY;  [BUGGY]      [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    standardDeviation;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
47	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy.doubleValue()  -  1;  [CE]  illegal  start  of  type  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy.doubleValue()  -  1;  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  solverAbsoluteAccuracy.doubleValue()  -  1;	      solverAbsoluteAccuracy    =    solverAbsoluteAccuracy.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
48	[BUG]  [BUGGY]  this.standardDeviation  =  inverseAccuracy;  [CE]  illegal  start  of  type  [FE]        ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  this.standardDeviation  =  inverseAccuracy;  [BUGGY]      [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	this.standardDeviation  =  inverseAccuracy;	  this.standardDeviation    =    solverAbsoluteAccuracy;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
49	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  standardDeviation;  [CE]  illegal  start  of  type  [FE]        ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  standardDeviation;  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  standardDeviation;	      solverAbsoluteAccuracy    =    solverAbsoluteAccuracy    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
50	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [CE]  illegal  start  of  type  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;	      solverAbsoluteAccuracy    =    solverAbsoluteAccuracy    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
51	[BUG]  [BUGGY]  safeAdd(sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]        ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  safeAdd(sd,  inverseCumAccuracy);  [BUGGY]      [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeAdd(sd,  inverseCumAccuracy);	  if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
52	[BUG]  [BUGGY]  safeSQRT2PI  =  null;  [CE]  illegal  start  of  type  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  safeSQRT2PI  =  null;  [BUGGY]      [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeSQRT2PI  =  null;	  if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
53	[BUG]  [BUGGY]  safeSQRT2PI  =  0;  [CE]  illegal  start  of  type  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  safeSQRT2PI  =  0;  [BUGGY]      [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeSQRT2PI  =  0;	  if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
54	[BUG]  [BUGGY]  this.standardDeviation  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  this.standardDeviation  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	this.standardDeviation  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
55	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  new  NormalDistributionImpl(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]              ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  solverAbsoluteAccuracy  =  new  NormalDistributionImpl(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  new  NormalDistributionImpl(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	      if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    else    {    solverAbsoluteAccuracy    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
56	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]        ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  solverAbsoluteAccuracy  =  LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY;	      if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,    solverAbsoluteAccuracy);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
57	[BUG]  [BUGGY]  MutableFormats.INVERSE_ABSOLUTE_ACCURACY  =  solverAbsoluteAccuracy;  [CE]  illegal  start  of  type  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  MutableFormats.INVERSE_ABSOLUTE_ACCURACY  =  solverAbsoluteAccuracy;  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	MutableFormats.INVERSE_ABSOLUTE_ACCURACY  =  solverAbsoluteAccuracy;	      if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,    solverAbsoluteAccuracy);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
58	[BUG]  [BUGGY]  MutableFormats.INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  MutableFormats.INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	MutableFormats.INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);	      if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,    solverAbsoluteAccuracy);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
59	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	      solverAbsoluteAccuracy    =    solverAbsoluteAccuracy;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
60	[BUG]  [BUGGY]  this.standardDeviation  =  inverseCumAccuracy  +  1;  [CE]  illegal  start  of  type  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  this.standardDeviation  =  inverseCumAccuracy  +  1;  [BUGGY]      [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	this.standardDeviation  =  inverseCumAccuracy  +  1;	  this.standardDeviation    =    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
61	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  inverseCumAccuracy;  [CE]  illegal  start  of  type  [FE]                ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  inverseCumAccuracy;  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  inverseCumAccuracy;	      if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    else    {    solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURAC    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
62	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  SQRT2PI;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  SQRT2PI;  [BUGGY]    }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  SQRT2PI;	      if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    else    {    solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURAC    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
63	[BUG]  [BUGGY]  safeAdd(sd,  inverseCumAccuracy)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  type  [FE]        ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  safeAdd(sd,  inverseCumAccuracy)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]      [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeAdd(sd,  inverseCumAccuracy)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
64	[BUG]  [BUGGY]  safeAdd(sd,  inverseCumAccuracy)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);  }  [CE]  illegal  start  of  type  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  safeAdd(sd,  inverseCumAccuracy)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);  }  [BUGGY]      [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeAdd(sd,  inverseCumAccuracy)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);  }	  if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
65	[BUG]  [BUGGY]  safeAdd(sd,  inverseCumAccuracy)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  [CE]  illegal  start  of  type  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;    [BUGGY]  safeAdd(sd,  inverseCumAccuracy)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  [BUGGY]      [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeAdd(sd,  inverseCumAccuracy)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);	  if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
