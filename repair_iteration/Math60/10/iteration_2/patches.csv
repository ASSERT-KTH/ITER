bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  safeSQRT2PI  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeSQRT2PI  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeSQRT2PI  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  safeSQRT2PI    =    null;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
2	[BUG]  [BUGGY]  safeSQRT2PI  =  SQRT2PI;  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeSQRT2PI  =  SQRT2PI;  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeSQRT2PI  =  SQRT2PI;	  safeSQRT2PI    =    null;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
3	[BUG]  [BUGGY]  safeSQRT2PI  =  new  SQRT2PI(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeSQRT2PI  =  new  SQRT2PI(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeSQRT2PI  =  new  SQRT2PI(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  safeSQRT2PI    =    null;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
4	[BUG]  [BUGGY]  safeSQRT2PI  =  sd;  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeSQRT2PI  =  sd;  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeSQRT2PI  =  sd;	  safeSQRT2PI    =    null;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
5	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  MAXIMUM_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  MAXIMUM_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  MAXIMUM_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  solverAbsoluteAccuracy    =    MAXIMUM_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
6	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  MAXIMUM_INVERSE_ABSOLUTE_ACCURACY  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  MAXIMUM_INVERSE_ABSOLUTE_ACCURACY  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  MAXIMUM_INVERSE_ABSOLUTE_ACCURACY  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  solverAbsoluteAccuracy    =    MAXIMUM_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
7	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  MAXIMUM_INVERSE_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  MAXIMUM_INVERSE_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  MAXIMUM_INVERSE_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  solverAbsoluteAccuracy    =    MAXIMUM_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
8	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  new  NormalDistributionImpl(sd,  standardDeviation,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  new  NormalDistributionImpl(sd,  standardDeviation,  inverseCumAccuracy);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  new  NormalDistributionImpl(sd,  standardDeviation,  inverseCumAccuracy);	  solverAbsoluteAccuracy    =    new    NormalDistributionImpl(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
9	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  new  NormalDistributionImpl(sd,  inverseCumAccuracy,  standardDeviation);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  new  NormalDistributionImpl(sd,  inverseCumAccuracy,  standardDeviation);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  new  NormalDistributionImpl(sd,  inverseCumAccuracy,  standardDeviation);	  solverAbsoluteAccuracy    =    new    NormalDistributionImpl(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
10	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  new  NormalDistributionImpl(sd,  standardDeviation);  [CE]  illegal  start  of  type  [FE]                        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  new  NormalDistributionImpl(sd,  standardDeviation);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  new  NormalDistributionImpl(sd,  standardDeviation);	  solverAbsoluteAccuracy    =    new    NormalDistributionImpl(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
11	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;	  solverAbsoluteAccuracy    =    solverAbsoluteAccuracy    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    1;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
12	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  2;  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  2;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  2;	  solverAbsoluteAccuracy    =    solverAbsoluteAccuracy    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    1;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
13	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  3;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  3;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  3;	  solverAbsoluteAccuracy    =    solverAbsoluteAccuracy    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    1;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
14	[BUG]  [BUGGY]  this.standardDeviation  =  inverseCumAccuracy  +  solverAbsoluteAccuracy;  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  this.standardDeviation  =  inverseCumAccuracy  +  solverAbsoluteAccuracy;  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	this.standardDeviation  =  inverseCumAccuracy  +  solverAbsoluteAccuracy;	  this.standardDeviation    =    inverseCumAccuracy    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
15	[BUG]  [BUGGY]  this.standardDeviation  =  standardDeviation  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  this.standardDeviation  =  standardDeviation  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	this.standardDeviation  =  standardDeviation  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    inverseCumAccuracy    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
16	[BUG]  [BUGGY]  this.standardDeviation  =  sd  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  this.standardDeviation  =  sd  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	this.standardDeviation  =  sd  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    inverseCumAccuracy    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
17	[BUG]  [BUGGY]  safeAdd(sd,  solverAbsoluteAccuracy)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeAdd(sd,  solverAbsoluteAccuracy)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeAdd(sd,  solverAbsoluteAccuracy)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);	  safeAdd(sd,    inverseCumAccuracy)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
18	[BUG]  [BUGGY]  safeAdd(sd,  inverseCumAccuracy)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  mean);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeAdd(sd,  inverseCumAccuracy)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  mean);  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeAdd(sd,  inverseCumAccuracy)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  mean);	  safeAdd(sd,    inverseCumAccuracy)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
19	[BUG]  [BUGGY]  safeAdd(sd,  inverseCumAccuracy)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  standardDeviation);  }  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeAdd(sd,  inverseCumAccuracy)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  standardDeviation);  }  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeAdd(sd,  inverseCumAccuracy)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  standardDeviation);  }	  safeAdd(sd,    inverseCumAccuracy)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
20	[BUG]  [BUGGY]  safeAdd(sd,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeAdd(sd,  solverAbsoluteAccuracy);  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeAdd(sd,  solverAbsoluteAccuracy);	  safeAdd(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
21	[BUG]  [BUGGY]  safeAdd(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeAdd(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy);  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeAdd(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy);	  safeAdd(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
22	[BUG]  [BUGGY]  ensureCapacity(sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  ensureCapacity(sd,  inverseCumAccuracy);  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	ensureCapacity(sd,  inverseCumAccuracy);	  safeAdd(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
23	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  solverAbsoluteAccuracy    =    LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
24	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY  |  LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY  |  LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY  |  LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY;	  solverAbsoluteAccuracy    =    LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
25	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy.doubleValue()  *  2;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy.doubleValue()  *  2;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  solverAbsoluteAccuracy.doubleValue()  *  2;	  solverAbsoluteAccuracy    =    solverAbsoluteAccuracy.doubleValue()    /    2;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
26	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy.doubleValue()  +  2;  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy.doubleValue()  +  2;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  solverAbsoluteAccuracy.doubleValue()  +  2;	  solverAbsoluteAccuracy    =    solverAbsoluteAccuracy.doubleValue()    /    2;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
27	[BUG]  [BUGGY]  safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
28	[BUG]  [BUGGY]  safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,  mean);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,  mean);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,  mean);	  safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
29	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;	  solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
30	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  sd;  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  sd;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  sd;	  solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
31	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  standardDeviation;  [CE]  illegal  start  of  type  [FE]                        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  standardDeviation;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  standardDeviation;	  solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
32	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
33	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  sd.doubleValue();  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  sd.doubleValue();  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  sd.doubleValue();	  solverAbsoluteAccuracy    =    inverseCumAccuracy.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
34	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy.doubleValue()  +  1;  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy.doubleValue()  +  1;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  inverseCumAccuracy.doubleValue()  +  1;	  solverAbsoluteAccuracy    =    inverseCumAccuracy.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
35	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  new  Double(inverseCumAccuracy.doubleValue());  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  new  Double(inverseCumAccuracy.doubleValue());  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  new  Double(inverseCumAccuracy.doubleValue());	  solverAbsoluteAccuracy    =    inverseCumAccuracy.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
36	[BUG]  [BUGGY]  safeSQRT2PI  =  new  SQRT2PI(sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeSQRT2PI  =  new  SQRT2PI(sd,  inverseCumAccuracy);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeSQRT2PI  =  new  SQRT2PI(sd,  inverseCumAccuracy);	  safeSQRT2PI    =    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
37	[BUG]  [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation,  solverAbsoluteAccuracy);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeSQRT2PI  =  new  NormalDistributionImpl(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation,  solverAbsoluteAccuracy);	  safeSQRT2PI    =    new    NormalDistributionImpl(sd,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    solverAbsoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
38	[BUG]  [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  solverAbsoluteAccuracy);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeSQRT2PI  =  new  NormalDistributionImpl(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  solverAbsoluteAccuracy);	  safeSQRT2PI    =    new    NormalDistributionImpl(sd,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    solverAbsoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
39	[BUG]  [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeSQRT2PI  =  new  NormalDistributionImpl(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);	  safeSQRT2PI    =    new    NormalDistributionImpl(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
40	[BUG]  [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  inverseCumAccuracy);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeSQRT2PI  =  new  NormalDistributionImpl(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean,  inverseCumAccuracy);	  safeSQRT2PI    =    new    NormalDistributionImpl(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
41	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
42	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  sd;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  sd;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  sd;	  solverAbsoluteAccuracy    =    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
43	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  new  NormalDistributionImpl(mean,  sd,  standardDeviation,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  new  NormalDistributionImpl(mean,  sd,  standardDeviation,  inverseCumAccuracy);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  new  NormalDistributionImpl(mean,  sd,  standardDeviation,  inverseCumAccuracy);	  solverAbsoluteAccuracy    =    new    NormalDistributionImpl(mean,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
44	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  new  NormalDistributionImpl(mean,  standardDeviation,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  new  NormalDistributionImpl(mean,  standardDeviation,  sd,  inverseCumAccuracy);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  new  NormalDistributionImpl(mean,  standardDeviation,  sd,  inverseCumAccuracy);	  solverAbsoluteAccuracy    =    new    NormalDistributionImpl(mean,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
45	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  new  NormalDistributionImpl(mean,  sd,  standardDeviation);  [CE]  illegal  start  of  type  [FE]                        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  new  NormalDistributionImpl(mean,  sd,  standardDeviation);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  new  NormalDistributionImpl(mean,  sd,  standardDeviation);	  solverAbsoluteAccuracy    =    new    NormalDistributionImpl(mean,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
46	[BUG]  [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl(sd);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl(sd);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeSQRT2PI  =  new  NormalDistributionImpl(sd);	  safeSQRT2PI    =    new    NormalDistributionImpl();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
47	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);	  solverAbsoluteAccuracy    =    solverAbsoluteAccuracy    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    standardDeviation);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
48	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);	  solverAbsoluteAccuracy    =    solverAbsoluteAccuracy    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    standardDeviation);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
49	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation,  solverAbsoluteAccuracy);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation,  solverAbsoluteAccuracy);	  solverAbsoluteAccuracy    =    solverAbsoluteAccuracy    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    standardDeviation);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
50	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACy;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
51	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;	  solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACy;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
52	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY?    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    :    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
53	[BUG]  [BUGGY]  safeSQRT2PI  =  sd  {  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  safeSQRT2PI);  }  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeSQRT2PI  =  sd  {  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  safeSQRT2PI);  }  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeSQRT2PI  =  sd  {  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  safeSQRT2PI);  }	  safeSQRT2PI    =    sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    safeSQRT2PI);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
54	[BUG]  [BUGGY]  safeSQRT2PI  =  sd  >  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  safeSQRT2PI);  }  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeSQRT2PI  =  sd  >  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  safeSQRT2PI);  }  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeSQRT2PI  =  sd  >  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  safeSQRT2PI);  }	  safeSQRT2PI    =    sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    safeSQRT2PI);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
55	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  sd;  this.standardDeviation  =  solverAbsoluteAccuracy;  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  sd;  this.standardDeviation  =  solverAbsoluteAccuracy;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  sd;  this.standardDeviation  =  solverAbsoluteAccuracy;	  solverAbsoluteAccuracy    =    inverseCumAccuracy;    this.standardDeviation    =    solverAbsoluteAccuracy;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
56	[BUG]  [BUGGY]  safeSQRT2PI  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeSQRT2PI  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeSQRT2PI  =  Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY;	  safeSQRT2PI    =    0;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
57	[BUG]  [BUGGY]  safeSQRT2PI  =  Double.POSITIVE_INVERSE_ABSOLUTE;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeSQRT2PI  =  Double.POSITIVE_INVERSE_ABSOLUTE;  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeSQRT2PI  =  Double.POSITIVE_INVERSE_ABSOLUTE;	  safeSQRT2PI    =    0;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
58	[BUG]  [BUGGY]  safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,  standardDeviation),  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,  standardDeviation),  solverAbsoluteAccuracy);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,  standardDeviation),  solverAbsoluteAccuracy);	  safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY),    solverAbsoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
59	[BUG]  [BUGGY]  safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY),  standardDeviation);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY),  standardDeviation);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY),  standardDeviation);	  safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY),    solverAbsoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
60	[BUG]  [BUGGY]  safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);	  safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY),    solverAbsoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
61	[BUG]  [BUGGY]  safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,  standardDeviation));  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,  standardDeviation));  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,  standardDeviation));	  safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY),    solverAbsoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
62	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;	  solverAbsoluteAccuracy    =    solverAbsoluteAccuracy    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    mean;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
63	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  *  mean;  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  *  mean;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  *  mean;	  solverAbsoluteAccuracy    =    solverAbsoluteAccuracy    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    mean;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
64	[BUG]  [BUGGY]  safe(sd)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safe(sd)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safe(sd)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  safeGet(sd)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
65	[BUG]  [BUGGY]  safeAccess(sd)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeAccess(sd)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeAccess(sd)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  safeGet(sd)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
66	[BUG]  [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeSQRT2PI  =  new  NormalDistributionImpl(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);	  safeSQRT2PI    =    new    NormalDistributionImpl(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    sd);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
67	[BUG]  [BUGGY]  MutableFormats.INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy,  standardDeviation);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  MutableFormats.INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy,  standardDeviation);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	MutableFormats.INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy,  standardDeviation);	  MutableFormats.INVERSE_ABSOLUTE_ACCURACY,    solverAbsoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
68	[BUG]  [BUGGY]  MutableFormats.INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  MutableFormats.INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	MutableFormats.INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  MutableFormats.INVERSE_ABSOLUTE_ACCURACY,    solverAbsoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
69	[BUG]  [BUGGY]  MutableFormats.INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy,  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  MutableFormats.INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy,  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	MutableFormats.INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy,  StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  MutableFormats.INVERSE_ABSOLUTE_ACCURACY,    solverAbsoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
70	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  new  NormalDistributionImpl(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  new  NormalDistributionImpl(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  new  NormalDistributionImpl(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);	  solverAbsoluteAccuracy    =    new    NormalDistributionImpl(sd,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
71	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  new  NormalDistributionImpl(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  new  NormalDistributionImpl(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  new  NormalDistributionImpl(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);	  solverAbsoluteAccuracy    =    new    NormalDistributionImpl(sd,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
72	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  new  NormalDistributionImpl(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  new  NormalDistributionImpl(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  new  NormalDistributionImpl(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);	  solverAbsoluteAccuracy    =    new    NormalDistributionImpl(sd,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
73	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  new  NormalDistributionImpl(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  normalDeviation);  [CE]  illegal  start  of  type  [FE]                        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  new  NormalDistributionImpl(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  normalDeviation);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  new  NormalDistributionImpl(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  normalDeviation);	  solverAbsoluteAccuracy    =    new    NormalDistributionImpl(sd,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
74	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  SQRT2PI  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  SQRT2PI  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  SQRT2PI  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    SQRT2PI;    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
75	[BUG]  [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl(mean,  sd,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl(mean,  sd,  solverAbsoluteAccuracy);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeSQRT2PI  =  new  NormalDistributionImpl(mean,  sd,  solverAbsoluteAccuracy);	  safeSQRT2PI    =    new    NormalDistributionImpl(mean,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
76	[BUG]  [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl(sd,  mean,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl(sd,  mean,  inverseCumAccuracy);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeSQRT2PI  =  new  NormalDistributionImpl(sd,  mean,  inverseCumAccuracy);	  safeSQRT2PI    =    new    NormalDistributionImpl(mean,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
77	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy.doubleValue()  *  1;  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy.doubleValue()  *  1;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  solverAbsoluteAccuracy.doubleValue()  *  1;	  solverAbsoluteAccuracy    =    solverAbsoluteAccuracy.doubleValue()    -    1;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
78	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  solvingrAbsoluteAccuracy.doubleValue();  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  solvingrAbsoluteAccuracy.doubleValue();  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  solvingrAbsoluteAccuracy.doubleValue();	  solverAbsoluteAccuracy    =    solverAbsoluteAccuracy.doubleValue()    -    1;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
79	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    DEFAULT_INVERSION_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
80	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    DEFAULT_INVERSION_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
81	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  +  1;  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  +  1;  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  +  1;	  this.standardDeviation    =    DEFAULT_INVERSION_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
82	[BUG]  [BUGGY]  safeAccess(LocalizedFormats.STANDARD_DEVIATION,  sd,  solverAbsoluteAccuracy));  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeAccess(LocalizedFormats.STANDARD_DEVIATION,  sd,  solverAbsoluteAccuracy));  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeAccess(LocalizedFormats.STANDARD_DEVIATION,  sd,  solverAbsoluteAccuracy));	  safeAccess(LocalizedFormats.STANDARD_DEVIATION,    sd));    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
83	[BUG]  [BUGGY]  safeAccess(LocalizedFormats.STANDARD_DEVIATION,  sd),  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeAccess(LocalizedFormats.STANDARD_DEVIATION,  sd),  solverAbsoluteAccuracy);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeAccess(LocalizedFormats.STANDARD_DEVIATION,  sd),  solverAbsoluteAccuracy);	  safeAccess(LocalizedFormats.STANDARD_DEVIATION,    sd));    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
84	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  standardDeviation;  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  standardDeviation;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  standardDeviation;	  solverAbsoluteAccuracy    =    solverAbsoluteAccuracy    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    standardDeviation;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
85	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  *  standardDeviation;  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  *  standardDeviation;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  *  standardDeviation;	  solverAbsoluteAccuracy    =    solverAbsoluteAccuracy    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    standardDeviation;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
86	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURAC;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
87	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  new  NormalDistributionImpl(this.mean,  sd,  standardDeviation,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  new  NormalDistributionImpl(this.mean,  sd,  standardDeviation,  inverseCumAccuracy);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  new  NormalDistributionImpl(this.mean,  sd,  standardDeviation,  inverseCumAccuracy);	  solverAbsoluteAccuracy    =    new    NormalDistributionImpl(this.mean,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
88	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  new  NormalDistributionImpl(this.mean,  standardDeviation,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  new  NormalDistributionImpl(this.mean,  standardDeviation,  sd,  inverseCumAccuracy);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  new  NormalDistributionImpl(this.mean,  standardDeviation,  sd,  inverseCumAccuracy);	  solverAbsoluteAccuracy    =    new    NormalDistributionImpl(this.mean,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
89	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  new  NormalDistributionImpl(sd,  this.mean,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  new  NormalDistributionImpl(sd,  this.mean,  inverseCumAccuracy);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  new  NormalDistributionImpl(sd,  this.mean,  inverseCumAccuracy);	  solverAbsoluteAccuracy    =    new    NormalDistributionImpl(this.mean,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
90	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  new  NormalDistributionImpl(this.mean,  sd,  standardDeviation);  [CE]  illegal  start  of  type  [FE]                            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  new  NormalDistributionImpl(this.mean,  sd,  standardDeviation);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  new  NormalDistributionImpl(this.mean,  sd,  standardDeviation);	  solverAbsoluteAccuracy    =    new    NormalDistributionImpl(this.mean,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
91	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACC  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACC  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACC	  if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    else    {    solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACC    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
92	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACC;  [CE]  illegal  start  of  type  [FE]                        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACC;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACC;	  if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    else    {    solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACC    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
93	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACC);  [CE]  illegal  start  of  type  [FE]                          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACC);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACC);	  if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    else    {    solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACC    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
94	[BUG]  [BUGGY]  safeAccess(LocalizedFormats.STANDARD_DEVIATION,  sd,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeAccess(LocalizedFormats.STANDARD_DEVIATION,  sd,  solverAbsoluteAccuracy);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeAccess(LocalizedFormats.STANDARD_DEVIATION,  sd,  solverAbsoluteAccuracy);	  safeAccess(LocalizedFormats.STANDARD_DEVIATION,    sd);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
95	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy.doubleValue()  /  1;  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy.doubleValue()  /  1;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  solverAbsoluteAccuracy.doubleValue()  /  1;	  solverAbsoluteAccuracy    =    solverAbsoluteAccuracy.doubleValue()    +    1;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
96	[BUG]  [BUGGY]  safeAccess(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeAccess(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeAccess(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  safeAccess(LocalizedFormats.STANDARD_DEVIATION);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
97	[BUG]  [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeSQRT2PI  =  new  NormalDistributionImpl(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);	  safeSQRT2PI    =    new    NormalDistributionImpl(sd,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
98	[BUG]  [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeSQRT2PI  =  new  NormalDistributionImpl(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);	  safeSQRT2PI    =    new    NormalDistributionImpl(sd,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
99	[BUG]  [BUGGY]  safeAdd(sd,  solverAbsoluteAccuracy)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeAdd(sd,  solverAbsoluteAccuracy)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeAdd(sd,  solverAbsoluteAccuracy)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  safeAdd(sd,    inverseCumAccuracy)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
100	[BUG]  [BUGGY]  safeAdd(sd,  solverAbsoluteAccuracy)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);  }  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeAdd(sd,  solverAbsoluteAccuracy)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);  }  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeAdd(sd,  solverAbsoluteAccuracy)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);  }	  safeAdd(sd,    inverseCumAccuracy)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
101	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.standardDeviation  =  inverseCumAccuracy;  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.standardDeviation  =  inverseCumAccuracy;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.standardDeviation  =  inverseCumAccuracy;	  solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    this.standardDeviation    =    solverAbsoluteAccuracy;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
102	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.standardDeviation  =  standardDeviation;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.standardDeviation  =  standardDeviation;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.standardDeviation  =  standardDeviation;	  solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    this.standardDeviation    =    solverAbsoluteAccuracy;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
103	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
104	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;	  this.standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
105	[BUG]  [BUGGY]  this.standardDeviation  =  sd  +  1;  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  this.standardDeviation  =  sd  +  1;  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	this.standardDeviation  =  sd  +  1;	  this.standardDeviation    =    sd;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
106	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE;  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE;	  if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    else    {    solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
107	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE	  if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    else    {    solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
108	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ACCURACY;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ACCURACY;	  if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    else    {    solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
109	[BUG]  [BUGGY]  safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,  sd,  solverAbsoluteAccuracy));  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,  sd,  solverAbsoluteAccuracy));  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,  sd,  solverAbsoluteAccuracy));	  safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,    sd));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
110	[BUG]  [BUGGY]  safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,  sd),  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,  sd),  solverAbsoluteAccuracy);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,  sd),  solverAbsoluteAccuracy);	  safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,    sd));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
111	[BUG]  [BUGGY]  safeGet(sd)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd,  solverAbsoluteAccuracy);  }  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeGet(sd)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd,  solverAbsoluteAccuracy);  }  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeGet(sd)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd,  solverAbsoluteAccuracy);  }	  safeGet(sd)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
112	[BUG]  [BUGGY]  safeGet(sd,  inverseCumAccuracy)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeGet(sd,  inverseCumAccuracy)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeGet(sd,  inverseCumAccuracy)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  safeGet(sd)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
113	[BUG]  [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl(sd,  standardDeviation,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl(sd,  standardDeviation,  inverseCumAccuracy);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeSQRT2PI  =  new  NormalDistributionImpl(sd,  standardDeviation,  inverseCumAccuracy);	  safeSQRT2PI    =    new    NormalDistributionImpl(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
114	[BUG]  [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeSQRT2PI  =  new  NormalDistributionImpl(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy);	  safeSQRT2PI    =    new    NormalDistributionImpl(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
115	[BUG]  [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl(sd,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl(sd,  solverAbsoluteAccuracy);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeSQRT2PI  =  new  NormalDistributionImpl(sd,  solverAbsoluteAccuracy);	  safeSQRT2PI    =    new    NormalDistributionImpl(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
116	[BUG]  [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl(sd,  inverseCumAccuracy,  standardDeviation);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl(sd,  inverseCumAccuracy,  standardDeviation);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeSQRT2PI  =  new  NormalDistributionImpl(sd,  inverseCumAccuracy,  standardDeviation);	  safeSQRT2PI    =    new    NormalDistributionImpl(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
117	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  *  solverAbsoluteAccuracy;  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  *  solverAbsoluteAccuracy;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  *  solverAbsoluteAccuracy;	  solverAbsoluteAccuracy    =    solverAbsoluteAccuracy    *    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
118	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  inverseCumAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  solverAbsoluteAccuracy    =    solverAbsoluteAccuracy    *    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
119	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  new  Double(inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  new  Double(inverseCumAccuracy);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  new  Double(inverseCumAccuracy);	  solverAbsoluteAccuracy    =    null;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
120	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  this.standardDeviation  =  StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	this.standardDeviation  =  StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
121	[BUG]  [BUGGY]  safeAdd(sd,  inverseCumAccuracy)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  mean);  }  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeAdd(sd,  inverseCumAccuracy)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  mean);  }  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeAdd(sd,  inverseCumAccuracy)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  mean);  }	  safeAdd(sd,    inverseCumAccuracy)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
122	[BUG]  [BUGGY]  safeAccess(LocalizedFormats.STANDARD_DEVIATION),  sd,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeAccess(LocalizedFormats.STANDARD_DEVIATION),  sd,  solverAbsoluteAccuracy);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeAccess(LocalizedFormats.STANDARD_DEVIATION),  sd,  solverAbsoluteAccuracy);	  safeAccess(LocalizedFormats.STANDARD_DEVIATION),    sd);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
123	[BUG]  [BUGGY]  safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,  sd,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,  sd,  solverAbsoluteAccuracy);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,  sd,  solverAbsoluteAccuracy);	  safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,    sd);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
124	[BUG]  [BUGGY]  MutableFormats.INVERSE_ABSOLUTE_ACCURACY  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  MutableFormats.INVERSE_ABSOLUTE_ACCURACY  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	MutableFormats.INVERSE_ABSOLUTE_ACCURACY  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  MutableFormats.INVERSE_ABSOLUTE_ACCURACY    =    solverAbsoluteAccuracy;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
125	[BUG]  [BUGGY]  MutableFormats.INVERSE_ABSOLUTE_ACCURACY  =  DEFAULT_INVERSE_ABSOLUTE_ACCURacy;  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  MutableFormats.INVERSE_ABSOLUTE_ACCURACY  =  DEFAULT_INVERSE_ABSOLUTE_ACCURacy;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	MutableFormats.INVERSE_ABSOLUTE_ACCURACY  =  DEFAULT_INVERSE_ABSOLUTE_ACCURacy;	  MutableFormats.INVERSE_ABSOLUTE_ACCURACY    =    solverAbsoluteAccuracy;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
126	[BUG]  [BUGGY]  MutableFormats.INVERSE_ABSOLUTE_ACCURACY  =  inverseCumAccuracy;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  MutableFormats.INVERSE_ABSOLUTE_ACCURACY  =  inverseCumAccuracy;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	MutableFormats.INVERSE_ABSOLUTE_ACCURACY  =  inverseCumAccuracy;	  MutableFormats.INVERSE_ABSOLUTE_ACCURACY    =    solverAbsoluteAccuracy;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
127	[BUG]  [BUGGY]  this.standardDeviation  =  inverseCumAccuracy  +  2;  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  this.standardDeviation  =  inverseCumAccuracy  +  2;  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	this.standardDeviation  =  inverseCumAccuracy  +  2;	  this.standardDeviation    =    inverseCumAccuracy    +    1;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
128	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY;	  solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACE;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
129	[BUG]  [BUGGY]  safeSQRT2PI  =  sd  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeSQRT2PI  =  sd  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeSQRT2PI  =  sd  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  safeSQRT2PI    =    sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
130	[BUG]  [BUGGY]  safeSQRT2PI  =  sd  >  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeSQRT2PI  =  sd  >  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeSQRT2PI  =  sd  >  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  safeSQRT2PI    =    sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
131	[BUG]  [BUGGY]  safeSQRT2PI  =  sd  {  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeSQRT2PI  =  sd  {  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeSQRT2PI  =  sd  {  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  safeSQRT2PI    =    sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
132	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  SQRT2PI  +  standardDeviation;  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  SQRT2PI  +  standardDeviation;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  SQRT2PI  +  standardDeviation;	  solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    SQRT2PI;    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
133	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  DEFAULT_INVERSE_ABSOLUTE_ACCURAY  :  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  DEFAULT_INVERSE_ABSOLUTE_ACCURAY  :  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  DEFAULT_INVERSE_ABSOLUTE_ACCURAY  :  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY?    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    :    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
134	[BUG]  [BUGGY]  this.standardDeviation  =  inverseCumAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  this.standardDeviation  =  inverseCumAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	this.standardDeviation  =  inverseCumAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    inverseCumAccuracy    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
135	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  inverseCumAccuracy;  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  inverseCumAccuracy;  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  inverseCumAccuracy;	  this.standardDeviation    =    inverseCumAccuracy    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
136	[BUG]  [BUGGY]  safeAdd(sd)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeAdd(sd)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeAdd(sd)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  safeAdd(sd,    inverseCumAccuracy)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
137	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  new  NormalDistributionImpl(this.mean,  this.standardDeviation,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  new  NormalDistributionImpl(this.mean,  this.standardDeviation,  sd,  inverseCumAccuracy);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  new  NormalDistributionImpl(this.mean,  this.standardDeviation,  sd,  inverseCumAccuracy);	  solverAbsoluteAccuracy    =    new    NormalDistributionImpl(this.mean,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
138	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  inverseCumAccuracy;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  inverseCumAccuracy;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  inverseCumAccuracy;	  solverAbsoluteAccuracy    =    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
139	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  new  NormalDistributionImpl(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  new  NormalDistributionImpl(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  new  NormalDistributionImpl(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  mean);	  solverAbsoluteAccuracy    =    new    NormalDistributionImpl(sd,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
140	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  new  NormalDistributionImpl(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  new  NormalDistributionImpl(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  new  NormalDistributionImpl(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  solverAbsoluteAccuracy    =    new    NormalDistributionImpl(sd,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
141	[BUG]  [BUGGY]  safeSQRT2PI  =  solverAbsoluteAccuracy;  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeSQRT2PI  =  solverAbsoluteAccuracy;  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeSQRT2PI  =  solverAbsoluteAccuracy;	  safeSQRT2PI    =    null;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
142	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  solverAbsoluteAccuracy;  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  solverAbsoluteAccuracy;  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  solverAbsoluteAccuracy;	  this.standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
143	[BUG]  [BUGGY]  this.standardDeviation  =  inverseCumAccuracy  +  4;  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  this.standardDeviation  =  inverseCumAccuracy  +  4;  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	this.standardDeviation  =  inverseCumAccuracy  +  4;	  this.standardDeviation    =    inverseCumAccuracy    +    1;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
144	[BUG]  [BUGGY]  if(sd  <  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  else  {  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  if(sd  <  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  else  {  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	if(sd  <  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  else  {  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE	  if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    else    {    solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACC    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
145	[BUG]  [BUGGY]  if(sd  <  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  type  [FE]                        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  if(sd  <  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	if(sd  <  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    else    {    solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACC    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
146	[BUG]  [BUGGY]  if(sd  <  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  else  {  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACC  [CE]  illegal  start  of  type  [FE]                          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  if(sd  <  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  else  {  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACC  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	if(sd  <  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  else  {  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACC	  if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    else    {    solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACC    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
147	[BUG]  [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	this.standardDeviation  =  NormalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
148	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;	  this.standardDeviation    =    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
149	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  DEFAULT_INVERSE_ABSOLUTE_ACCURACE;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  DEFAULT_INVERSE_ABSOLUTE_ACCURACE;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  DEFAULT_INVERSE_ABSOLUTE_ACCURACE;	  solverAbsoluteAccuracy    =    null;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
150	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  this.standardDeviation;  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  this.standardDeviation;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  this.standardDeviation;	  solverAbsoluteAccuracy    =    solverAbsoluteAccuracy    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    standardDeviation;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
151	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation  +  1);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation  +  1);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation  +  1);	  solverAbsoluteAccuracy    =    solverAbsoluteAccuracy    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    standardDeviation);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
152	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  inverseCumAccuracy;  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  inverseCumAccuracy;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  inverseCumAccuracy;	  solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
153	[BUG]  [BUGGY]  safeAccess(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY),  sd);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeAccess(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY),  sd);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeAccess(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY),  sd);	  safeAccess(LocalizedFormats.STANDARD_DEVIATION),    sd);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
154	[BUG]  [BUGGY]  safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);	  safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,    sd);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
155	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  new  NormalDistributionImpl(message,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  new  NormalDistributionImpl(message,  sd,  inverseCumAccuracy);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  new  NormalDistributionImpl(message,  sd,  inverseCumAccuracy);	  solverAbsoluteAccuracy    =    new    NormalDistributionImpl(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
156	[BUG]  [BUGGY]  safeAdd(LocalizedFormats.STANDARD_DEVIATION,  sd);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeAdd(LocalizedFormats.STANDARD_DEVIATION,  sd);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeAdd(LocalizedFormats.STANDARD_DEVIATION,  sd);	  safeAccess(LocalizedFormats.STANDARD_DEVIATION);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
157	[BUG]  [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl(inverseCumAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl(inverseCumAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeSQRT2PI  =  new  NormalDistributionImpl(inverseCumAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  safeSQRT2PI    =    new    NormalDistributionImpl(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
158	[BUG]  [BUGGY]  MutableFormats.INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy,  normalDeviation);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  MutableFormats.INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy,  normalDeviation);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	MutableFormats.INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy,  normalDeviation);	  MutableFormats.INVERSE_ABSOLUTE_ACCURACY,    solverAbsoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
159	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  solverAbsoluteAccuracy;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  this.standardDeviation  =  StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  solverAbsoluteAccuracy;  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	this.standardDeviation  =  StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  solverAbsoluteAccuracy;	  this.standardDeviation    =    StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
160	[BUG]  [BUGGY]  this.standardDeviation  =  NormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  this.standardDeviation  =  NormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	this.standardDeviation  =  NormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
161	[BUG]  [BUGGY]  safeSQRT2PI  =  0L;  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeSQRT2PI  =  0L;  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeSQRT2PI  =  0L;	  safeSQRT2PI    =    0;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
162	[BUG]  [BUGGY]  this.standardDeviation  =  inverseAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  this.standardDeviation  =  inverseAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	this.standardDeviation  =  inverseAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    inverseAccuracy;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
163	[BUG]  [BUGGY]  safeAccess(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd));  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeAccess(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd));  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeAccess(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd));	  safeAccess(LocalizedFormats.STANDARD_DEVIATION,    sd));    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
164	[BUG]  [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl(sd,  standardDeviation);  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl(sd,  standardDeviation);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeSQRT2PI  =  new  NormalDistributionImpl(sd,  standardDeviation);	  safeSQRT2PI    =    new    NormalDistributionImpl(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
165	[BUG]  [BUGGY]  safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy));  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy));  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy));	  safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,    sd));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
166	[BUG]  [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl(mean,  standardDeviation,  sd,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl(mean,  standardDeviation,  sd,  inverseCumAccuracy);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeSQRT2PI  =  new  NormalDistributionImpl(mean,  standardDeviation,  sd,  inverseCumAccuracy);	  safeSQRT2PI    =    new    NormalDistributionImpl(mean,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
167	[BUG]  [BUGGY]  safeAccess(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeAccess(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeAccess(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  sd);	  safeAccess(LocalizedFormats.STANDARD_DEVIATION,    sd);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
168	[BUG]  [BUGGY]  safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURacy);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURacy);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURacy);	  safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
169	[BUG]  [BUGGY]  safeSQRT2PI  =  sd  <  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeSQRT2PI  =  sd  <  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeSQRT2PI  =  sd  <  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  safeSQRT2PI    =    sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
170	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1L;  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1L;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1L;	  solverAbsoluteAccuracy    =    solverAbsoluteAccuracy    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    1;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
171	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  normalDeviation;  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  normalDeviation;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  normalDeviation;	  solverAbsoluteAccuracy    =    solverAbsoluteAccuracy    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    mean;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
172	[BUG]  [BUGGY]  MutableFormats.INVERSE_ABSOLUTE_ACCURACY  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACE;  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  MutableFormats.INVERSE_ABSOLUTE_ACCURACY  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACE;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	MutableFormats.INVERSE_ABSOLUTE_ACCURACY  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACE;	  MutableFormats.INVERSE_ABSOLUTE_ACCURACY    =    solverAbsoluteAccuracy;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
173	[BUG]  [BUGGY]  safeGet(sd)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  inverseCumAccuracy);  }  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeGet(sd)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  inverseCumAccuracy);  }  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeGet(sd)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  inverseCumAccuracy);  }	  safeGet(sd)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
174	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACE  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACE  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACE  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACE;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
175	[BUG]  [BUGGY]  SafeAdd(sd,  solverAbsoluteAccuracy);  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  SafeAdd(sd,  solverAbsoluteAccuracy);  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	SafeAdd(sd,  solverAbsoluteAccuracy);	  safeAdd(sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
176	[BUG]  [BUGGY]  safeAdd(sd,  inverseCumAccuracy)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  inverseCumAccuracy);  }  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeAdd(sd,  inverseCumAccuracy)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  inverseCumAccuracy);  }  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeAdd(sd,  inverseCumAccuracy)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  inverseCumAccuracy);  }	  safeAdd(sd,    inverseCumAccuracy)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
177	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy;  this.standardDeviation  =  standardDeviation;  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy;  this.standardDeviation  =  standardDeviation;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  inverseCumAccuracy;  this.standardDeviation  =  standardDeviation;	  solverAbsoluteAccuracy    =    inverseCumAccuracy;    this.standardDeviation    =    solverAbsoluteAccuracy;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
178	[BUG]  [BUGGY]  safeSQRT2PI  =  sd  <  =  1)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  safeSQRT2PI);  }  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeSQRT2PI  =  sd  <  =  1)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  safeSQRT2PI);  }  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeSQRT2PI  =  sd  <  =  1)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  safeSQRT2PI);  }	  safeSQRT2PI    =    sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    safeSQRT2PI);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
179	[BUG]  [BUGGY]  MutableFormats.INVERSE_ABSOLUTE_ACCURACY  =  solverAbsoluteAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  MutableFormats.INVERSE_ABSOLUTE_ACCURACY  =  solverAbsoluteAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	MutableFormats.INVERSE_ABSOLUTE_ACCURACY  =  solverAbsoluteAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  MutableFormats.INVERSE_ABSOLUTE_ACCURACY    =    solverAbsoluteAccuracy;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
180	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  +  SQRT2PI;  [CE]  illegal  start  of  type  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  +  SQRT2PI;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  +  SQRT2PI;	  solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    SQRT2PI;    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
181	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy  +  SQRT2PI;  [CE]  illegal  start  of  type  [FE]                        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy  +  SQRT2PI;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  inverseCumAccuracy  +  SQRT2PI;	  solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    SQRT2PI;    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
182	[BUG]  [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeSQRT2PI  =  new  NormalDistributionImpl(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  standardDeviation);	  safeSQRT2PI    =    new    NormalDistributionImpl(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
183	[BUG]  [BUGGY]  safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,  this.standardDeviation);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,  this.standardDeviation);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,  this.standardDeviation);	  safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
184	[BUG]  [BUGGY]  safeAccess(LocalizedFormats.STANDARD_DEVIATION,  this.standardDeviation);  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeAccess(LocalizedFormats.STANDARD_DEVIATION,  this.standardDeviation);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeAccess(LocalizedFormats.STANDARD_DEVIATION,  this.standardDeviation);	  safeAccess(LocalizedFormats.STANDARD_DEVIATION,    sd);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
185	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  new  NormalDistributionImpl(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  new  NormalDistributionImpl(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  new  NormalDistributionImpl(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);	  solverAbsoluteAccuracy    =    new    NormalDistributionImpl(sd,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
186	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  new  NormalDistributionImpl(mean,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  new  NormalDistributionImpl(mean,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  new  NormalDistributionImpl(mean,  sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  solverAbsoluteAccuracy    =    new    NormalDistributionImpl(sd,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
187	[BUG]  [BUGGY]  safeSQRT2PI  =  sd  <  =  1)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeSQRT2PI  =  sd  <  =  1)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeSQRT2PI  =  sd  <  =  1)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  safeSQRT2PI    =    sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
188	[BUG]  [BUGGY]  this.standardDeviation  =  sd,  solverAbsoluteAccuracy;  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  this.standardDeviation  =  sd,  solverAbsoluteAccuracy;  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	this.standardDeviation  =  sd,  solverAbsoluteAccuracy;	  this.standardDeviation    =    sd;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
189	[BUG]  [BUGGY]  this.standardDeviation  =  standardAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  this.standardDeviation  =  standardAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	this.standardDeviation  =  standardAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    inverseCumAccuracy    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
190	[BUG]  [BUGGY]  this.standardDeviation  =  standardDeviation  +  1;  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  this.standardDeviation  =  standardDeviation  +  1;  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	this.standardDeviation  =  standardDeviation  +  1;	  this.standardDeviation    =    inverseCumAccuracy    +    1;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
191	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  DEFAULT_NON_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  DEFAULT_NON_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  DEFAULT_NON_INVERSE_ABSOLUTE_ACCURACY;	  solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY?    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    :    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
192	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  DEFAULT_ENVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  DEFAULT_ENVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  DEFAULT_ENVERSE_ABSOLUTE_ACCURACY;	  solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY?    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    :    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
193	[BUG]  [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  normalDeviation);  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  normalDeviation);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeSQRT2PI  =  new  NormalDistributionImpl(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  normalDeviation);	  safeSQRT2PI    =    new    NormalDistributionImpl(sd,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
194	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACE;  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACE;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACE;	  solverAbsoluteAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACE;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
195	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  standardDeviation.doubleValue();  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  standardDeviation.doubleValue();  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  standardDeviation.doubleValue();	  solverAbsoluteAccuracy    =    inverseCumAccuracy.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
196	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  this.standardDeviation  =  StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	this.standardDeviation  =  StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
197	[BUG]  [BUGGY]  safeGet(sd)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  this.standardDeviation);  }  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeGet(sd)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  this.standardDeviation);  }  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeGet(sd)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  this.standardDeviation);  }	  safeGet(sd)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
198	[BUG]  [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl(mean,  sd,  standardDeviation,  inverseCumAccuracy);  [CE]  illegal  start  of  type  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  safeSQRT2PI  =  new  NormalDistributionImpl(mean,  sd,  standardDeviation,  inverseCumAccuracy);  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	safeSQRT2PI  =  new  NormalDistributionImpl(mean,  sd,  standardDeviation,  inverseCumAccuracy);	  safeSQRT2PI    =    new    NormalDistributionImpl(mean,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
199	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
200	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSION_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSION_ABSOLUTE_ACCURACY;  [BUGGY]        [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSION_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    DEFAULT_INVERSION_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
201	[BUG]  [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  standardDeviation  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  <identifier>  expected  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;      [BUGGY]  solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  standardDeviation  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	81	81	1	replace	solverAbsoluteAccuracy  =  solverAbsoluteAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  standardDeviation  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  solverAbsoluteAccuracy    =    solverAbsoluteAccuracy    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    standardDeviation;    	non-compiled	[CE]  <identifier>  expected	49	None	replace
