projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=solverAbsoluteAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}else{solverAbsoluteAccuracy=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}else{solverAbsoluteAccuracy=null;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}else{solverAbsoluteAccuracy=DEFAULT_INVERSE_ABSOLUTE_ACCURAC
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81this.standardDeviation=solverAbsoluteAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,solverAbsoluteAccuracy);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=solverAbsoluteAccuracy/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=solverAbsoluteAccuracy.doubleValue();
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=solverAbsoluteAccuracy;this.standardDeviation=solverAbsoluteAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81this.standardDeviation=standardDeviation;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81this.standardDeviation=inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY),solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,sd));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeGet(sd){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeGet(sd){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,safeSQRT2PI);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81this.standardDeviation=sd;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81this.standardDeviation=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81this.standardDeviation=StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81this.standardDeviation=StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=newNormalDistributionImpl(sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=newNormalDistributionImpl(this.mean,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=DEFAULT_INVERSE_ABSOLUTE_ACCURACy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=DEFAULT_INVERSE_ABSOLUTE_ACCURAC;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=solverAbsoluteAccuracy*DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=solverAbsoluteAccuracy/DEFAULT_INVERSE_ABSOLUTE_ACCURACY+mean;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=solverAbsoluteAccuracy/DEFAULT_INVERSE_ABSOLUTE_ACCURACY,standardDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=inverseCumAccuracy.doubleValue();
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=solverAbsoluteAccuracy.doubleValue()+1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=solverAbsoluteAccuracy.doubleValue()/2;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=null;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=newNormalDistributionImpl(mean,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAccess(LocalizedFormats.STANDARD_DEVIATION,sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAccess(LocalizedFormats.STANDARD_DEVIATION);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAccess(LocalizedFormats.STANDARD_DEVIATION),sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAccess(LocalizedFormats.STANDARD_DEVIATION,sd));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=MAXIMUM_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=DEFAULT_INVERSE_ABSOLUTE_ACCOURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=inverseCumAccuracy;this.standardDeviation=solverAbsoluteAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=newNormalDistributionImpl(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=newNormalDistributionImpl(sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=newNormalDistributionImpl(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=newNormalDistributionImpl(sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=newNormalDistributionImpl(mean,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=newNormalDistributionImpl(sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=newNormalDistributionImpl();
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}else{solverAbsoluteAccuracy=DEFAULT_INVERSE_ABSOLUTE
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}else{solverAbsoluteAccuracy=DEFAULT_INVERSE_ABSOLUTE_ACC
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;this.standardDeviation=solverAbsoluteAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=DEFAULT_INVERSE_ABSOLUTE_ACCURACE;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81this.standardDeviation=DEFAULT_INVERSION_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=solverAbsoluteAccuracy.doubleValue()-1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81this.standardDeviation=inverseAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=solverAbsoluteAccuracy/DEFAULT_INVERSE_ABSOLUTE_ACCURACY+standardDeviation;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=solverAbsoluteAccuracy/DEFAULT_INVERSE_ABSOLUTE_ACCURACY+1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAdd(sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=null;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=0;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81this.standardDeviation=inverseCumAccuracy+DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=newNormalDistributionImpl(sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81MutableFormats.INVERSE_ABSOLUTE_ACCURACY=solverAbsoluteAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81MutableFormats.INVERSE_ABSOLUTE_ACCURACY,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=DEFAULT_INVERSE_ABSOLUTE_ACCURACY?DEFAULT_INVERSE_ABSOLUTE_ACCURACY:DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81this.standardDeviation=inverseCumAccuracy+1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=DEFAULT_INVERSE_ABSOLUTE_ACCURACY+inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=DEFAULT_INVERSE_ABSOLUTE_ACCURACY+SQRT2PI;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAdd(sd,inverseCumAccuracy){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAdd(sd,inverseCumAccuracy){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAdd(sd,inverseCumAccuracy){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=SQRT2PI;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=newSQRT2PI(sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=sd;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=MAXIMUM_INVERSE_ABSOLUTE_ACCURACY/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=MAXIMUM_INVERSE_ABSOLUTE_ACCURACY+DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=MAXIMUM_INVERSE_ABSOLUTE_ACCURACY|DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=newNormalDistributionImpl(sd,standardDeviation,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=newNormalDistributionImpl(sd,inverseCumAccuracy,standardDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=newNormalDistributionImpl(sd,standardDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=solverAbsoluteAccuracy*DEFAULT_INVERSE_ABSOLUTE_ACCURACY+1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=solverAbsoluteAccuracy/DEFAULT_INVERSE_ABSOLUTE_ACCURACY+2;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=solverAbsoluteAccuracy/DEFAULT_INVERSE_ABSOLUTE_ACCURACY+3;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81this.standardDeviation=inverseCumAccuracy+solverAbsoluteAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81this.standardDeviation=standardDeviation+DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81this.standardDeviation=sd+DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAdd(sd,solverAbsoluteAccuracy){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAdd(sd,inverseCumAccuracy){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,mean);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAdd(sd,inverseCumAccuracy){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,standardDeviation);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAdd(sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAdd(sd,inverseCumAccuracy,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81ensureCapacity(sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY|LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=solverAbsoluteAccuracy.doubleValue()*2;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=solverAbsoluteAccuracy.doubleValue()+2;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,mean);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=DEFAULT_INVERSE_ABSOLUTE_ACCURACY+mean;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=DEFAULT_INVERSE_ABSOLUTE_ACCURACY+sd;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=DEFAULT_INVERSE_ABSOLUTE_ACCURACY+standardDeviation;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=inverseCumAccuracy+DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=sd.doubleValue();
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=inverseCumAccuracy.doubleValue()+1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=newDouble(inverseCumAccuracy.doubleValue());
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=newSQRT2PI(sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=newNormalDistributionImpl(sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,standardDeviation,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=newNormalDistributionImpl(sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,mean,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=newNormalDistributionImpl(sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=newNormalDistributionImpl(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,mean,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81this.standardDeviation=StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=sd;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=newNormalDistributionImpl(mean,sd,standardDeviation,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=newNormalDistributionImpl(mean,standardDeviation,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=newNormalDistributionImpl(mean,sd,standardDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=newNormalDistributionImpl(sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=solverAbsoluteAccuracy*DEFAULT_INVERSE_ABSOLUTE_ACCURACY,standardDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=solverAbsoluteAccuracy/DEFAULT_INVERSE_ABSOLUTE_ACCURACY,mean);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=solverAbsoluteAccuracy/DEFAULT_INVERSE_ABSOLUTE_ACCURACY,standardDeviation,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=DEFAULT_INVERSE_ABSOLUTE_ACCURACY|DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=DEFAULT_INVERSE_ABSOLUTE_ACCURACY+1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=DEFAULT_INVERSE_ABSOLUTE_ACCURACY|DEFAULT_INVERSE_ABSOLUTE_ACCURACY:DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=sd{0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,safeSQRT2PI);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=sd>0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,safeSQRT2PI);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=sd;this.standardDeviation=solverAbsoluteAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=Double.POSITIVE_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=Double.POSITIVE_INVERSE_ABSOLUTE;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,standardDeviation),solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY),standardDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,standardDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,standardDeviation));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=solverAbsoluteAccuracy*DEFAULT_INVERSE_ABSOLUTE_ACCURACY+mean;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=solverAbsoluteAccuracy/DEFAULT_INVERSE_ABSOLUTE_ACCURACY*mean;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safe(sd){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAccess(sd){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=newNormalDistributionImpl(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,mean);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81MutableFormats.INVERSE_ABSOLUTE_ACCURACY,solverAbsoluteAccuracy,standardDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81MutableFormats.INVERSE_ABSOLUTE_ACCURACY,solverAbsoluteAccuracy,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81MutableFormats.INVERSE_ABSOLUTE_ACCURACY,solverAbsoluteAccuracy,StandardDeviation.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=newNormalDistributionImpl(sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,standardDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=newNormalDistributionImpl(sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,mean);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=newNormalDistributionImpl(sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=newNormalDistributionImpl(sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,normalDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=SQRT2PI+DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=newNormalDistributionImpl(mean,sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=newNormalDistributionImpl(sd,mean,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=solverAbsoluteAccuracy.doubleValue()*1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=solvingrAbsoluteAccuracy.doubleValue();
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81this.standardDeviation=DEFAULT_INVERSION_ABSOLUTE_ACCURACY|DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81this.standardDeviation=DEFAULT_INVERSION_ABSOLUTE_ACCURACY/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81this.standardDeviation=DEFAULT_INVERSION_ABSOLUTE_ACCURACY+1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAccess(LocalizedFormats.STANDARD_DEVIATION,sd,solverAbsoluteAccuracy));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAccess(LocalizedFormats.STANDARD_DEVIATION,sd),solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=solverAbsoluteAccuracy*DEFAULT_INVERSE_ABSOLUTE_ACCURACY+standardDeviation;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=solverAbsoluteAccuracy/DEFAULT_INVERSE_ABSOLUTE_ACCURACY*standardDeviation;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=DEFAULT_INVERSE_ABSOLUTE_ACCURACY/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=newNormalDistributionImpl(this.mean,sd,standardDeviation,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=newNormalDistributionImpl(this.mean,standardDeviation,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=newNormalDistributionImpl(sd,this.mean,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=newNormalDistributionImpl(this.mean,sd,standardDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=DEFAULT_INVERSE_ABSOLUTE_ACC
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=DEFAULT_INVERSE_ABSOLUTE_ACC;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=DEFAULT_INVERSE_ABSOLUTE_ACC);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAccess(LocalizedFormats.STANDARD_DEVIATION,sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=solverAbsoluteAccuracy.doubleValue()/1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAccess(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=newNormalDistributionImpl(sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,mean);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=newNormalDistributionImpl(sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,standardDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAdd(sd,solverAbsoluteAccuracy){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAdd(sd,solverAbsoluteAccuracy){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;this.standardDeviation=inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;this.standardDeviation=standardDeviation;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81this.standardDeviation=DEFAULT_INVERSE_ABSOLUTE_ACCURACY|DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81this.standardDeviation=DEFAULT_INVERSE_ABSOLUTE_ACCURACY+1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81this.standardDeviation=sd+1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=DEFAULT_INVERSE_ABSOLUTE;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=DEFAULT_INVERSE_ABSOLUTE
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=DEFAULT_INVERSE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,sd,solverAbsoluteAccuracy));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,sd),solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeGet(sd){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd,solverAbsoluteAccuracy);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeGet(sd,inverseCumAccuracy){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=newNormalDistributionImpl(sd,standardDeviation,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=newNormalDistributionImpl(sd,inverseCumAccuracy,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=newNormalDistributionImpl(sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=newNormalDistributionImpl(sd,inverseCumAccuracy,standardDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=DEFAULT_INVERSE_ABSOLUTE_ACCURACY*solverAbsoluteAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=inverseCumAccuracy*DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=newDouble(inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81this.standardDeviation=StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAdd(sd,inverseCumAccuracy){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,mean);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAccess(LocalizedFormats.STANDARD_DEVIATION),sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81MutableFormats.INVERSE_ABSOLUTE_ACCURACY=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81MutableFormats.INVERSE_ABSOLUTE_ACCURACY=DEFAULT_INVERSE_ABSOLUTE_ACCURacy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81MutableFormats.INVERSE_ABSOLUTE_ACCURACY=inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81this.standardDeviation=inverseCumAccuracy+2;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=DEFAULT_INVERSION_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=sd<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=sd>0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=sd{0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=DEFAULT_INVERSE_ABSOLUTE_ACCURACY+SQRT2PI+standardDeviation;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=DEFAULT_INVERSE_ABSOLUTE_ACCURACY?DEFAULT_INVERSE_ABSOLUTE_ACCURAY:DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81this.standardDeviation=inverseCumAccuracy*DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81this.standardDeviation=DEFAULT_INVERSE_ABSOLUTE_ACCURACY+inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAdd(sd){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=newNormalDistributionImpl(this.mean,this.standardDeviation,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=DEFAULT_INVERSE_ABSOLUTE_ACCURACY?DEFAULT_INVERSE_ABSOLUTE_ACCURACY:inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=newNormalDistributionImpl(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,mean);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=newNormalDistributionImpl(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=solverAbsoluteAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81this.standardDeviation=DEFAULT_INVERSE_ABSOLUTE_ACCURACY+solverAbsoluteAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81this.standardDeviation=inverseCumAccuracy+4;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81if(sd<0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}else{solverAbsoluteAccuracy=DEFAULT_INVERSE_ABSOLUTE
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81if(sd<0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81if(sd<0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}else{solverAbsoluteAccuracy=DEFAULT_INVERSE_ABSOLUTE_ACC
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81this.standardDeviation=NormalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81this.standardDeviation=StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY+1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=DEFAULT_INVERSE_ABSOLUTE_ACCURACY?DEFAULT_INVERSE_ABSOLUTE_ACCURACY:DEFAULT_INVERSE_ABSOLUTE_ACCURACE;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=solverAbsoluteAccuracy/DEFAULT_INVERSE_ABSOLUTE_ACCURACY+this.standardDeviation;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=solverAbsoluteAccuracy/DEFAULT_INVERSE_ABSOLUTE_ACCURACY,standardDeviation+1);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=DEFAULT_INVERSE_ABSOLUTE_ACCURACY/inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAccess(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY),sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=newNormalDistributionImpl(message,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAdd(LocalizedFormats.STANDARD_DEVIATION,sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=newNormalDistributionImpl(inverseCumAccuracy,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81MutableFormats.INVERSE_ABSOLUTE_ACCURACY,solverAbsoluteAccuracy,normalDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81this.standardDeviation=StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY+solverAbsoluteAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81this.standardDeviation=NormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=0L;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81this.standardDeviation=inverseAccuracy+DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAccess(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,sd));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=newNormalDistributionImpl(sd,standardDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,solverAbsoluteAccuracy));
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=newNormalDistributionImpl(mean,standardDeviation,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAccess(LocalizedFormats.DEFAULT_INVERSE_ABSOLUTE_ACCURACY,sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,DEFAULT_INVERSE_ABSOLUTE_ACCURacy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=sd<0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=solverAbsoluteAccuracy/DEFAULT_INVERSE_ABSOLUTE_ACCURACY+1L;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=solverAbsoluteAccuracy/DEFAULT_INVERSE_ABSOLUTE_ACCURACY+normalDeviation;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81MutableFormats.INVERSE_ABSOLUTE_ACCURACY=DEFAULT_INVERSE_ABSOLUTE_ACCURACE;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeGet(sd){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,inverseCumAccuracy);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=DEFAULT_INVERSE_ABSOLUTE_ACCURACE|DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81SafeAdd(sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAdd(sd,inverseCumAccuracy){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,inverseCumAccuracy);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=inverseCumAccuracy;this.standardDeviation=standardDeviation;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=sd<=1){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,safeSQRT2PI);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81MutableFormats.INVERSE_ABSOLUTE_ACCURACY=solverAbsoluteAccuracy+DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=solverAbsoluteAccuracy+SQRT2PI;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=inverseCumAccuracy+SQRT2PI;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=newNormalDistributionImpl(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,standardDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAccess(LocalizedFormats.INVERSE_ABSOLUTE_ACCURACY,this.standardDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeAccess(LocalizedFormats.STANDARD_DEVIATION,this.standardDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=newNormalDistributionImpl(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=newNormalDistributionImpl(mean,sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=sd<=1){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81this.standardDeviation=sd,solverAbsoluteAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81this.standardDeviation=standardAccuracy+DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81this.standardDeviation=standardDeviation+1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=DEFAULT_INVERSE_ABSOLUTE_ACCURACY?DEFAULT_INVERSE_ABSOLUTE_ACCURACY:DEFAULT_NON_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=DEFAULT_INVERSE_ABSOLUTE_ACCURACY?DEFAULT_INVERSE_ABSOLUTE_ACCURACY:DEFAULT_ENVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=newNormalDistributionImpl(sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,normalDeviation);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=inverseCumAccuracy+DEFAULT_INVERSE_ABSOLUTE_ACCURACE;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=standardDeviation.doubleValue();
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81this.standardDeviation=StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY|StandardDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeGet(sd){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,this.standardDeviation);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81safeSQRT2PI=newNormalDistributionImpl(mean,sd,standardDeviation,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81this.standardDeviation=StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY|StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81this.standardDeviation=StandardDistributionImpl.DEFAULT_INVERSION_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java81solverAbsoluteAccuracy=solverAbsoluteAccuracy/DEFAULT_INVERSE_ABSOLUTE_ACCURACY+standardDeviation*DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
