projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=normalDeviation;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=StandardDistributionImpl.create(sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=StandardDistributionImpl.newInstance(sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=sd;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSION_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=standardDeviation;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=newDouble(sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.sd=sd;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=sd;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;if(sd<=0){this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}else{this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;This.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;sd=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;if(sd<=0){this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}else{mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=SQRT2PI;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSION_ABSOLUTE_ACCURACY|DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSION_ABSOLUTE_ACCURACY+mean;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=inverseCumAccuracy;this.mean=inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=inverseCumAccuracy;if(sd<=0){this.mean=inverseCumAccuracy;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=inverseCumAccuracy;if(sd<=0){this.mean=inverseCumAccuracy;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=inverseCumAccuracy;if(sd<=0){this.mean=inverseCumAccuracy;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,SQRT2PI);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=inverseCumAccuracy;if(sd<=0){this.mean=inverseCumAccuracy;}else{this.mean=inverseCumAccuracy;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=sd+1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.sd=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.sd=mean;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.sd=DEFAULT_INVERSE_ABSOLUTE_ACCOURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=StandardDistributionImpl.newInstance(sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=StandardDistributionImpl.newInstance(sd,inverseCumAccuracy,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=NormalDistributionImpl.newInstance(sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=NormalDistributionImpl.newInstance(sd,inverseCumAccuracy,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean+sd;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;if(mean<=0){this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}else{this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;This.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;if(mean<=0){this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=StandardDistributionImpl.create(sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=StandardDistributionImpl.create(sd,inverseCumAccuracy,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=NormalDistributionImpl.create(sd,inverseCumAccuracy,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=NormalDistributionImpl.create(sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=sd,inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=sd+inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=newDouble(sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=newDouble(sd+1);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=newDouble(sd-1);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY+mean;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean+DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=sd/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY+1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean*DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=SQRT2PI.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=NormalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=sd;this.mean=sd;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=sd;if(sd<=0){this.mean=sd;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=sd;if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}else{this.mean=sd;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=sd;if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=sd;if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}this.mean=sd;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;sd=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;this.mean=mean%DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=StandardDistributionImpl.newInstance(resolverAbsoluteAccuracy,sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=sd;This.mean=sd;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=sd;this.message=sd;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=sd;this.mesan=sd;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean+DEFAULT_INVERSION_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.sd=DELETE_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.sd=DEFAULT_INVERSE_ABSOLUTE;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;inverseCumAccuracy=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean/sd;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean?DEFAULT_INVERSE_ABSOLUTE_ACCURACY:DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=inverseCumAccuracy/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=inverseCumAccuracy;if(inverseCumAccuracy>MAX_INVERSE_ABSOLUTE_ACCURACY){this.mean=inverseCumAccuracy;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVI
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=inverseCumAccuracy;if(inverseCumAccuracy>MAX_INVERSE_ABSOLUTE_ACCURACY){this.mean=inverseCumAccuracy;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=inverseCumAccuracy;if(inverseCumAccuracy>MAX_INVERSE_ABSOLUTE_ACCURACY){this.mean=inverseCumAccuracy;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=inverseCumAccuracy;if(inverseCumAccuracy>MAX_INVERSE_ABSOLUTE_ACCURACY){this.mean=inverseCumAccuracy;}else{this.mean=inverseCumAccuracy;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY+1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=DEFAULT_INVERSION_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean+inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=inverseCumAccuracy+DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=inverseCumAccuracy;This.mean=inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=inverseCumAccuracy;super();this.mean=inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=inverseCumAccuracy;this.mean=inverseAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.sd=DESC_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.sd=sd,inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=solverAbsoluteAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;sd=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;this.mean=deFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=sd;if(mean<=0){this.mean=sd;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=sd;if(mean<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}else{this.mean=sd;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=sd;if(mean<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}this.mean=sd;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=sd;if(mean<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=StandardDistributionImpl.newInstance(mean,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=StandardDistributionImpl.newInstance(message,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;if(sd<=0){this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}else{this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;sd=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean-DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean/DEFAULT_INVERSION_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.sd=DEFAULT_INVERSE_ABSOLUTE_ACCURACY?DEFAULT_INVERSE_ABSOLUTE_ACCURACY:DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.message=mean;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean;this.mesan=sd;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=sd+DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78n=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=StandardDistributionImpl.newInstance(mean,sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=NormalDistributionImpl.newInstance(mean,sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY+2;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=DEFAULT_INVERSE_ABSOLUTE_ACCURACY+1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY+sd;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.sd=DEFAULT_INVERSE_ABSOLUTE_ACCOURACY|DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.sd=DEFAULT_INVERSE_ABSOLUTE_ACCOURACY+1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=inverseCumAccuracy/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;this.mean=inverseCumAccuracy/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=inverseCumAccuracy/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;if(inverseCumAccuracy>DEFAULT_INVERSE_ABSOLUTE_ACCURACY){this.mean=inverseCumAccuracy/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=inverseCumAccuracy/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;if(inverseCumAccuracy>DEFAULT_INVERSE_ABSOLUTE_ACCURACY){this.mean=inverseCumAccuracy/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=inverseCumAccuracy/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;if(inverseCumAccuracy>DEFAULT_INVERSE_ABSOLUTE_ACCURACY){this.mean=inverseCumAccuracy/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=inverseCumAccuracy/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;This.mean=inverseCumAccuracy/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=sd,solverAbsoluteAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=mean,inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=sd+1,inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean/sd;this.mean=mean/sd;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean/sd;This.mean=mean/sd;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean/sd;this.mesan=mean/sd;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean/sd;this.mean=mean/sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=mean;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean*sd;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=DEFAULT_INVERSE_ABSOLUTE_ACCURACY|DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY?DEFAULT_INVERSE_ABSOLUTE_ACCURACY:DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY?mean:DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean;sd=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=sd;sd=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78sd=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=sd/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;this.mean=sd/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=sd/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;if(sd>DEFAULT_INVERSE_ABSOLUTE_ACCURACY){this.mean=sd/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVI
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=sd/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;if(sd>DEFAULT_INVERSE_ABSOLUTE_ACCURACY){this.mean=sd/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=sd/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;if(sd>DEFAULT_INVERSE_ABSOLUTE_ACCURACY){this.mean=sd/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=sd/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;This.mean=sd/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean;This.mean=inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean;this.mean=inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78This.mean=inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=NormalDistributionImpl.create(sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=NormalDistributionImpl.create(sd,solverAbsoluteAccuracy,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=NormalDistributionImpl.create(sd,solverAbsoluteAccuracy,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=NormalDistributionImpl.create(sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78This.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=NormalDistributionImpl.newInstance(sd,solverAbsoluteAccuracy,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=NormalDistributionImpl.newInstance(sd,inverseCumAccuracy,solverAbsoluteAccuracy,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=NormalDistributionImpl.newInstance(sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY+mean*DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY+mean+1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=NormalDistributionImpl.create(sd,inverseCumAccuracy,solverAbsoluteAccuracy,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=NormalDistributionImpl.create(sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=newDouble(sd/1);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=newDouble(sd-2);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY+mean;this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY+mean;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY+mean;This.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY+mean;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY+mean;sd=DEFAULT_INVERSE_ABSOLUTE_ACCURACY+mean;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY+mean;this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY+Mean;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78This.mean=mean;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean/inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=sd+inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean+sd;this.mean=mean+sd;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean+sd;This.mean=mean+sd;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean+sd;this.mesan=mean+sd;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean+sd;this.mean=mean+sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean;if(sd<=0){this.mean=inverseCumAccuracy;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78if(mean<=0){this.mean=inverseCumAccuracy;if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78if(mean<=0){this.mean=inverseCumAccuracy;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean;if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.sd=DEFAULT_INVERSE_ABSOLUTE_ACCURACY|DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.sd=DEFAULT_INVERSE_ABSOLUTE_ACCURACY+1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=StandardDistributionImpl.newInstance(null,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=sd+solverAbsoluteAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=sd+DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=sd*inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=newDouble(sd+2);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=newDouble(sd+3);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean;if(mean<=0){this.mean=sd;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=mean;if(mean<=0){this.mean=sd;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=mean;if(sd<=0){this.mean=sd;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean;if(sd<=0){this.mean=sd;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean;if(inverseCumAccuracy>MAX_INVERSE_ABSOLUTE_ACCURACY){this.mean=inverseCumAccuracy;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean;if(inverseCumAccuracy>MAX_INVERSE_ABSOLUTE_ACCURACY){this.mean=inverseCumAccuracy;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STAND
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean;if(inverseCumAccuracy>MAX_INVERSE_ABSOLUTE_ACCURACY){this.mean=inverseCumAccuracy;}else{thrownewNotStrictlyPositiveException(LocalizedFormats
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean;if(inverseCumAccuracy>MAX_INVERSE_ABSOLUTE_ACCURACY){this.mean=inverseCumAccuracy;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;if(sd<=0){this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}else{this.mean=DEFAUL
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;if(sd<=0){this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}else{this.mean=DEFA
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;if(sd<=0){this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=StandardDistributionImpl.newInstance(inverseCumAccuracy,sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=StandardDistributionImpl.newInstance(null,sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=inverseCumAccuracy*DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=StandardDistributionImpl.newInstance(sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=StandardDistributionImpl.newInstance(sd,inverseCumAccuracy,solverAbsoluteAccuracy,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=StandardDistributionImpl.newInstance(sd,solverAbsoluteAccuracy,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=normalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=NormalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY|inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=StandardDistributionImpl.create(sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=StandardDistributionImpl.create(sd,inverseCumAccuracy,solverAbsoluteAccuracy,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean*DEFAULT_INVERSE_ABSOLUTE_ACCURACY;if(mean<=0){this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean;this.message=sd;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78if(mean<=0){this.mean=sd;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean*DEFAULT_INVERSE_ABSOLUTE_ACCURACY;this.mean=mean*DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean*DEFAULT_INVERSE_ABSOLUTE_ACCURACY;This.mean=mean*DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean*DEFAULT_INVERSE_ABSOLUTE_ACCURACY;this.mean=mean*DEFAULT_INVERSE_ABSOLUTE_ACCURACY;inverseCumAccuracy=inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean*DEFAULT_INVERSE_ABSOLUTE_ACCURACY;this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.sd=DEFAULT_INVERSE_ABSOLUTE|DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;if(sd<=0){this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}else{mean=DEFAULT_
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;if(sd<=0){this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}else{mean=DEFAUL
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_STANDARD_DEVIATION;if(sd<=0){this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}else{mean=DEFAULT_INVERSE_
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSION_ABSOLUTE_ACCURACY&DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSION_ABSOLUTE_ACCURACY|mean;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean|DEFAULT_INVERSION_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=DEFAULT_INVERSE_ABSOLUTE_ACCURACY?SQRT2PI:DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=SQRT2PI+DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;if(mean<=0){this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean*DEFAULT_INVERSE_ABSOLUTE_ACCURACY;if(sd<=0){this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=sd/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;if(sd<=0){this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean;if(sd<=0){this.mean=inverseCumAccuracy;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,SQRT2PI);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78if(sd<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY){this.mean=inverseCumAccuracy;if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVI
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78if(sd<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY){this.mean=inverseCumAccuracy;if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,s
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSION_ABSOLUTE_ACCURACY+mean/2;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=NormalDistributionImpl.newInstance(sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=NormalDistributionImpl.newInstance(sd,solverAbsoluteAccuracy,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=sd/DEFAULT_INVERSE_ABSOLUTE_ACCURACY+mean;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=inverseCumAccuracy;if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean%DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78if(sd<=0){this.mean=inverseCumAccuracy;}else{this.mean=inverseCumAccuracy;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78if(sd<=0){this.mean=inverseCumAccuracy;if(sd<=0){this.mean=inverseCumAccuracy;}else{this.mean=inverseCumAccuracy;}}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean*DEFAULT_INVERSE_ABSOLUTE_ACCURACY+1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=sd/DEFAULT_INVERSE_ABSOLUTE_ACCURACY+1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean+DEFAULT_INVERSE_ABSOLUTE_ACCURACY;this.mean=mean+DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean+DEFAULT_INVERSE_ABSOLUTE_ACCURACY;This.mean=mean+DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean+DEFAULT_INVERSE_ABSOLUTE_ACCURACY;this.mean=mean+DEFAULT_INVERSE_ABSOLUTE_ACCURACY;inverseCumAccuracy=inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean+DEFAULT_INVERSE_ABSOLUTE_ACCURACY;this.mean=mean-DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=SQRT2PI.DEFAULT_INVERSE_ABSOLUTE_ACCURACY|SQRT2PI.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=sd-DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY-mean;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78This.mean=sd;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean;this.mean=sd;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean;This.mean=sd;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean*DEFAULT_INVERSION_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78sd=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY|DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_SQRT2PI;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.sd=mean,inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.sd=sd,inverseCumAccuracy+1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78if(mean<=0){this.mean=sd;if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=sd+2;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=sd+3;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=sd+1L;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean-DEFAULT_INVERSE_ABSOLUTE_ACCURACY;this.mean=mean-DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean-DEFAULT_INVERSE_ABSOLUTE_ACCURACY;This.mean=mean-DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean-DEFAULT_INVERSE_ABSOLUTE_ACCURACY;this.mean=mean+DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean-DEFAULT_INVERSE_ABSOLUTE_ACCURACY;this.mean=mean-DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=sd*DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78if(sd<=0){this.mean=sd;if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=mean;if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=sd/mean;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean/sd*DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78if(sd<=0){this.mean=inverseCumAccuracy;super();this.mean=inverseCumAccuracy;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78if(sd<=0){this.mean=inverseCumAccuracy;super();this.mean=inverseCumAccuracy;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;inverseCumAccuracy=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78inverseCumAccuracy=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78n=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;inverseCumAccuracy=DEFAULT_INVERSE_ABSOLUTE_ACC
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78n=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;inverseCumAccuracy=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=StandardDistributionImpl.newInstance(sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=StandardDistributionImpl.newInstance(sd,solverAbsoluteAccuracy,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78inverseCumAccuracy;if(inverseCumAccuracy>MAX_INVERSE_ABSOLUTE_ACCURACY){this.mean=inverseCumAccuracy;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STAND
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78inverseCumAccuracy;if(inverseCumAccuracy>MAX_INVERSE_ABSOLUTE_ACCURACY){this.mean=inverseCumAccuracy;}else{thrownewNotStrictlyPositiveException(LocalizedFormats
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78inverseCumAccuracy;if(inverseCumAccuracy>MAX_INVERSE_ABSOLUTE_ACCURACY){this.mean=inverseCumAccuracy;}else{thrownewNotStrictlyPositiveException(Lo
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78inverseCumAccuracy;if(inverseCumAccuracy>MAX_INVERSE_ABSOLUTE_ACCURACY){this.mean=inverseCumAccuracy;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean;if(sd<=0){this.mean=inverseCumAccuracy;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78if(sd<=0){this.mean=inverseCumAccuracy;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=sd/DEFAULT_INVERSION_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean/DEFAULT_INVERSION_ABSOLUTE_ACCURACY+1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=inverseCumAccuracy*DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=DEFAULT_INVERSE_ABSOLUTE_ACCURACY+inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=newDouble(sd,inverseCumAccuracy,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=newDouble(sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=newDouble(mean,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=newDouble(message,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean;if(mean<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=mean;if(mean<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78if(mean<=0){this.mean=sd;if(mean<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=StandardDistributionImpl.create(sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=StandardDistributionImpl.create(sd,solverAbsoluteAccuracy,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=DEFAULT_INVERSION_ABSOLUTE_ACCURACY|DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=DEFAULT_INVERSION_ABSOLUTE_ACCURACY+1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78sd=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;this.mean=sd/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.sd=sd+DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean;if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}else{this.mean=sd;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY+1;this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY+1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY+1;This.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY+1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY+1;this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY+2;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY+1;this.mean=mean*DEFAULT_INVERSE_ABSOLUTE_ACCURACY+1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean;if(mean<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}else{this.mean=sd;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=mean;if(mean<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}else{this.mean=sd;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78This.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=sd/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;sd=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=sd/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;sd=sd/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;sd=sd/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78sd=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean+inverseCumAccuracy;this.mean=mean+inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean+inverseCumAccuracy;This.mean=mean+inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean+inverseCumAccuracy;this.mean=mean-inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean+inverseCumAccuracy;this.mesan=mean+inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=StandardDistributionImpl.newInstance(inverseAccumAccuracy,sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=StandardDistributionImpl.newInstance(inverseAccuracy,sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78if(mean<=0){this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;if(sd<=0){this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78if(mean<=0){this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;if(sd<=0){this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}else{this.me
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78if(mean<0){this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;if(sd<=0){this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78if(mean<=0){this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;if(sd<=0){this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}else{this
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=DEFAULT_INVERSE_ABSOLUTE_ACCURacy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean/sd;this.mean=mean%sd;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78if(sd<=0){this.mean=inverseCumAccuracy;if(inverseCumAccuracy>MAX_INVERSE_ABSOLUTE_ACCURACY){this.mean=inverseCumAccuracy;}else{thrownewNot
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78if(sd<=0){this.mean=inverseCumAccuracy;if(inverseCumAccuracy>MAX_INVERSE_ABSOLUTE_ACCURACY){this.mean=inverseCumAccuracy;}else{thrownewNotStrictly
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78if(sd<=0){this.mean=inverseCumAccuracy;if(inverseCumAccuracy>MAX_INVERSE_ABSOLUTE_ACCURACY){this.mean=inverseCumAccuracy;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78if(sd<=0){this.mean=inverseCumAccuracy;if(inverseCumAccuracy>MAX_INVERSE_ABSOLUTE_ACCURACY){this.mean=inverseCumAccuracy;}else{thrownewNotStric
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=inverseCumAccuracy+sd;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=solverAbsoluteAccuracy+inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY+inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78AssertionFailedErrort=newAssertionFailedError(Math.abs(mean),inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78AssertionFailedErrort=newAssertionFailedError(message,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78AssertionFailedErrort=newAssertionFailedError(mean,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78if(mean<=0){this.mean=inverseCumAccuracy;super();this.mean=inverseCumAccuracy;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVI
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78if(mean<=0){this.mean=inverseCumAccuracy;super();this.mean=inverseCumAccuracy;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78if(mean<=0){this.mean=inverseCumAccuracy;if(sd<=0){this.mean=inverseCumAccuracy;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean;if(sd<=0){this.mean=inverseCumAccuracy;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;if(inverseCumAccuracy>DEFAULT_INVERSE_ABSOLUTE_ACCURACY){this.mean=inverseCumAccuracy;}else{this.me
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean;if(inverseCumAccuracy>MAX_INVERSE_ABSOLUTE_ACCURACY){this.mean=inverseCumAccuracy;}else{this.mean=inverseCumAccuracy;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;if(inverseCumAccuracy>DEFAULT_INVERSE_ABSOLUTE_ACCURACY){this.mean=inverseCumAccuracy;}else{
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY+inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY+3;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.sd=inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean+inverseCumAccuracy;this.sean=mean+inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean+inverseCumAccuracy;this.sqrt=inverseCumAccuracy+sd;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=SQRT2PI.DEFAULT_INVERSE_ABSOLUTE_ACCURACY+DEFAULT_INVERSE_ABSOLUTE_ACCURacy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=inverseCumAccuracy.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean&DEFAULT_INVERSION_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.sd=DEFAULT_INVERSE_ABSOLUTE_ACCURACY+inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean;if(sd<=0){this.mean=inverseCumAccuracy;}else{this.mean=inverseCumAccuracy;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean;if(sd<=0){this.mean=inverseAccumAccuracy;}else{this.mean=inverseAccumAccuracy;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean;if(sd<=0){this.mean=inverseAccuracy;}else{this.mean=inverseAccuracy;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.sd=DEFAULT_INVERSE_ABSOLUTE_ACCOURY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.sd=DEFAULT_INVERSE_ABSOLUTE_ACCOURY+1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=inverseCumAccuracy/DEFAULT_INVERSE_ABSOLUTE_ACCURACY+1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78if(inverseCumAccuracy>0){this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;inverseCumAccuracy=DEFAUL
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78if(inverseCumAccuracy>0){this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;inverseCumAccuracy=DEFA
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_STANDARD_DEVIATION;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=NormalDistributionImpl.newInstance(inverseCumAccuracy,sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=NormalDistributionImpl.newInstance(resolverAbsoluteAccuracy,inverseCumAccuracy,sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=inverseCumAccuracy/DEFAULT_INVERSE_ABSOLUTE_ACCURACY+mean;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.symbol=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78if(mean<=0){this.mean=inverseCumAccuracy;if(sd<=0){this.mean=inverseCumAccuracy;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVI
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=StandardDistributionImpl.newInstance(sd,inverseCumAccuracy,sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=StandardDistributionImpl.newInstance(resolverAbsoluteAccuracy,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=StandardDistributionImpl.newInstance(inverseCumAccuracy,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=newDouble(sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=inverseCumAccuracy/DEFAULT_INVERSION_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY+mean;this.mesan=DEFAULT_INVERSE_ABSOLUTE_ACCURACY+mean;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY+mean;this.sqrt2PI=DEFAULT_INVERSE_ABSOLUTE_ACCURACY+mean;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY+mean;this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY+means;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=inverseCumAccuracy/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;if(mean<=0){this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78if(mean<=0){this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean/sd+1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.sd=DEFAULT_INVERSE_ABSOLUTE_ACCURITY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=inverseCumAccuracy/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;if(inverseCumAccuracy>DEFAULT_INVERSE_ABSOLUTE_ACCURACY){this.mean=inverseCumAccuracy/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}else{this.mean=inverseCumAccuracy/DEFA
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean;if(sd<=0){this.mean=inverseCumAccuracy;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,SQRT2PI
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean;if(sd<=0){this.mean=inverseCumAccuracy;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,SQRT
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;this.mean=inverseAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78This.mean=mean;this.mean=inverseAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78if(mean<=0){this.mean=sd;if(inverseCumAccuracy<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78if(mean<=0){this.mean=mean;if(mean<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean-DEFAULT_INVERSE_ABSOLUTE_ACCURACY;this.mesan=mean-DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean-DEFAULT_INVERSE_ABSOLUTE_ACCURACY;this.sqrt2PI=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=inverseCumAccuracy+mean;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean+inverseCumAccuracy+DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.sd=sd,solverAbsoluteAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=inverseCumAccuracy/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;if(sd<=0){this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=inverseCumAccuracy/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;if(sd<=0){this.mean=mean/DEFAULT_INVERSE_ABSOLUTE
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean+sd;this.standardDeviation=mean+sd;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean+sd;this.sean=mean+sd;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=inverseCumAccuracy+DEFAULT_INVERSE_ABSOLUTE_ACCURACY+SQRT2PI;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.message=mean;if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean+1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean*DEFAULT_INVERSE_ABSOLUTE_ACCURACY;if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean*DEFAULT_INVERSE_ABSOLUTE_ACCURACY;this.sqrt2PI=inverseCumAccuracy*DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean*DEFAULT_INVERSE_ABSOLUTE_ACCURACY;if(mean<=0){this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}else{thrownewNotStrictlyP
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean;if(sd<=0){this.mean=sd;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,s
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean;if(sd<=0){this.mean=sd;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean+DEFAULT_INVERSE_ABSOLUTE_ACCURACY+1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=inverseCumAccuracy;sd=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=inverseCumAccuracy-DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean-DEFAULT_INVERSE_ABSOLUTE_ACCURACY+1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY?DEFAULT_INVERSE_ABSOLUTE_ACCURACY:mean;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=sd/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;if(sd>DEFAULT_INVERSE_ABSOLUTE_ACCURACY){this.mean=sd/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}else{this.mean=sd/DEFA
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=sd/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;if(sd>DEFAULT_INVERSE_ABSOLUTE_ACCURACY){this.mean=sd/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}else{this.mean=sd/DEFAUL
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY+1;sd=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY+1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=DEFAULT_INVERSE_ABSOLUTE_ACCURACY,inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean+DEFAULT_INVERSE_ABSOLUTE_ACCURACY;this.mesan=mean+DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean+DEFAULT_INVERSE_ABSOLUTE_ACCURACY;this.sean=mean+DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean+DEFAULT_INVERSE_ABSOLUTE_ACCURACY;this.sqrt2PI=mean+DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=NormalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY+inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=sd+4;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean*DEFAULT_INVERSE_ABSOLUTE_ACCURACY;if(sd<=0){this.mean=mean*DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}else{this.mean=mean*DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean*DEFAULT_INVERSE_ABSOLUTE_ACCURACY;if(sd<=0){this.mean=mean*DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean*DEFAULT_INVERSE_ABSOLUTE_ACCURACY;if(sd<=0){this.mean=mean*DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}else{this.standardDeviation=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=newDouble(sd,DEFAULT_INVERSE_ABSOLUTE_ACCURACY,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean/sd;if(mean<=0){this.mean=mean/sd;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean/sd;if(mean<=0){this.mean=mean/sd;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean/sd;if(mean<=0){this.mean=mean/sd;}else{this.standardDeviation=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean/sd;if(mean<=0){this.mean=mean/sd;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,DEFAULT_INVERSE_ABSOLUTE_ACCURACY
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78if(sd<=0){this.mean=inverseCumAccuracy;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,SQRT2PI);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.sd=DEFAULT_INVERSE_ABSOLUTE_ACCURACY+DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.sd=DESC_INVERSE_ABSOLUTE_ACCURACY+DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.sd=deFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=newDouble(sd+1,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=mean;if(sd<=0){this.mean=inverseCumAccuracy;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=sd+inverseCumAccuracy+DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=sd,inverseCumAccuracy+1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=sd.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=sd,SQRT2PI.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=sd/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;if(mean<=0){this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78if(sd<=0){this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;sd=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;this.mean=DEFAULT_INVERS
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78if(sd<=0){this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;sd=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;this.mean=DEFAULT_INVERSE_
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=StandardDistributionImpl.newInstance(sd,inverseCumAccuracy,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean/SQRT2PI;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=sd/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;this.mean=sd/DEFAULT_INVERSE_BSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.message=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78if(mean<=DEFAULT_INVERSE_ABSOLUTE_ACCURACY){this.mean=inverseCumAccuracy;super();this.mean=inverseCumAccuracy;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78if(mean<=0){this.mean=sd;if(mean<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}else{this.mean=s
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=mean;if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}else{this.mean=sd;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78if(mean<=0){this.mean=sd;if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}else{this.mean=s
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean;this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;inverseCumAccuracy=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78if(sd<=0){this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;inverseCumAccuracy=DEFAULT_INVERS
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78if(sd<=0){this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;inverseCumAccuracy=DEFAULT_IN
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78if(mean<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78if(mean<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}this.mean=sd;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=sd+mean;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=mean;if(inverseCumAccuracy>MAX_INVERSE_ABSOLUTE_ACCURACY){this.mean=inverseCumAccuracy;}else{thrownewNotStrictlyPositiveException(LocalizedFormats
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=StandardDistributionImpl.create(sd,solverAbsoluteAccuracy,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSION_ABSOLUTE_ACCURACY/mean;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean|DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78if(mean<=0){this.mean=inverseCumAccuracy;}else{this.mean=inverseCumAccuracy;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78if(sd<=0){this.mean=inverseCumAccuracy;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78if(mean<=MAX_INVERSE_ABSOLUTE_ACCURACY){this.mean=inverseCumAccuracy;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78if(mean<=MAX_INVERSE_ABSOLUTE_ACCURACY){this.mean=inverseCumAccuracy;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVI
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78if(mean<=0){this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}else{this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78if(sd<=0){this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}else{this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78if(sd<=0){this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean-DEFAULT_INVERSE_ABSOLUTE_ACCURACY;sd=mean-DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;if(mean<=0){this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}else{thrownewNotStrictly
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78if(mean<=0){this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;if(mean<=0){this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY+2;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean*DEFAULT_INVERSE_ABSOLUTE_ACCURACY;This.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.sd=deFAULT_INVERSE_ABSOLUTE;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=StandardDistributionImpl.create(sd,inverseCumAccuracy,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY+mean;this.mean=deFAULT_INVERSE_ABSOLUTE_ACCURACY+mean;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=newDouble(mean);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY/mean;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78sd=sd/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78if(sd<=0){this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}else{mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78if(mean<=0){this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}else{mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78if(sd<=0||mean>DEFAULT_INVERSE_ABSOLUTE_ACCURACY){this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}else{mean=DEFAULT_INVERSE_
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.sd=sd,inverseCumAccuracy+2;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=inverseCumAccuracy/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;sd=inverseCumAccuracy/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;this.mean=inverseCumAccuracy/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=inverseCumAccuracy/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;if(inverseCumAccuracy>DEFAULT_INVERSE_ABSOLUTE_ACCURACY){this.mean=inverseCumAccuracy/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}else{this.mean=inverseCumAcc
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean;if(inverseCumAccuracy>DEFAULT_INVERSE_ABSOLUTE_ACCURACY||inverseCumAccuracy>DEFAULT_INVERSE_ABSOLUTE_ACCURACY){this.mean=inverseCum
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean;if(inverseCumAccuracy>DEFAULT_INVERSE_ABSOLUTE_ACCURACY){this.mean=inverseCumAccuracy;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean;if(inverseCumAccuracy>DEFAULT_INVERSE_ABSOLUTE_ACCURACY||inverseCumAccuracy>DEFAULT_INVERSE_ABSOLUTE_ACCURACY){this.mean=inverseCumAccuracy;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.sd=defULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean*inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean;inverseCumAccuracy=inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78sd=sd/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean;if(inverseCumAccuracy>DEFAULT_INVERSE_ABSOLUTE_ACCURACY){this.mean=inverseCumAccuracy;}else{this.mean=inverseCumAccuracy;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=mean;if(inverseCumAccuracy>DEFAULT_INVERSE_ABSOLUTE_ACCURACY){this.mean=inverseCumAccuracy;}else{this.mean=inverseCumAccuracy;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78if(sd<=0){this.mean=sd;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY+DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
