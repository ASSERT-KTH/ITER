bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  StandardDistributionImpl  [FE]    ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]    this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	    this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;		non-compiled	[CE]  cannot  find  symbol  StandardDistributionImpl	14	None	add
2	[BUG]  [BUGGY]    this.standardDeviation  =  inverseCumAccuracy;  [CE]  variable  standardDeviation  might  already  have  been  assigned  [FE]      ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]    this.standardDeviation  =  inverseCumAccuracy;  [BUGGY]  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	    this.standardDeviation  =  inverseCumAccuracy;		non-compiled	[CE]  variable  standardDeviation  might  already  have  been  assigned	14	None	add
3	[BUG]  [BUGGY]    this.standardDeviation  =  normalDeviation;  [CE]  cannot  find  symbol  normalDeviation  [FE]        ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]    this.standardDeviation  =  normalDeviation;  [BUGGY]  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	    this.standardDeviation  =  normalDeviation;		non-compiled	[CE]  cannot  find  symbol  normalDeviation	14	None	add
4	[BUG]  [BUGGY]    this.standardDeviation  =  StandardDistributionImpl.create(sd,  inverseCumAccuracy);  [CE]  cannot  find  symbol  StandardDistributionImpl  [FE]          ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]    this.standardDeviation  =  StandardDistributionImpl.create(sd,  inverseCumAccuracy);  [BUGGY]  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	    this.standardDeviation  =  StandardDistributionImpl.create(sd,  inverseCumAccuracy);		non-compiled	[CE]  cannot  find  symbol  StandardDistributionImpl	14	None	add
5	[BUG]  [BUGGY]    this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  inverseCumAccuracy);  [CE]  cannot  find  symbol  StandardDistributionImpl  [FE]            ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]    this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  inverseCumAccuracy);  [BUGGY]  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	    this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  inverseCumAccuracy);		non-compiled	[CE]  cannot  find  symbol  StandardDistributionImpl	14	None	add
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]  this.mean  =  sd;  [BUGGY]  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  sd;	this.mean  =  mean;  	compilable	  [FE]  AssertionFailedError  	13	7	replace
7	[BUG]  [BUGGY]  this.mean  =  sd;  [FE]  AssertionFailedError  [FE]    ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]  this.mean  =  sd;  [BUGGY]  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  sd;	this.mean  =  mean;  	compilable	  [FE]  AssertionFailedError  	13	7	replace
8	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	this.mean  =  mean;  	compilable	  [FE]  ConvergenceException  	13	7	replace
9	[BUG]  [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [FE]  ConvergenceException  [FE]      ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	this.mean  =  mean;  	compilable	  [FE]  ConvergenceException  	13	7	replace
10	[BUG]  [BUGGY]  this.mean  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  [FE]        ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]  this.mean  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY;  [BUGGY]  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY;	this.mean  =  mean;  	non-compiled	[CE]  cannot  find  symbol  DEFAULT_INVERSION_ABSOLUTE_ACCURACY	13	None	replace
11	[BUG]  [BUGGY]    this.standardDeviation  =  standardDeviation;  [CE]  variable  standardDeviation  might  not  have  been  initialized  [FE]    ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]    this.standardDeviation  =  standardDeviation;  [BUGGY]  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	    this.standardDeviation  =  standardDeviation;		non-compiled	[CE]  variable  standardDeviation  might  not  have  been  initialized	14	None	add
12	[BUG]  [BUGGY]    this.standardDeviation  =  new  Double(sd);  [CE]  variable  standardDeviation  might  already  have  been  assigned  [FE]      ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]    this.standardDeviation  =  new  Double(sd);  [BUGGY]  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	    this.standardDeviation  =  new  Double(sd);		non-compiled	[CE]  variable  standardDeviation  might  already  have  been  assigned	14	None	add
13	[BUG]  [BUGGY]    this.sd  =  sd;  [CE]  cannot  find  symbol  sd  [FE]        ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]    this.sd  =  sd;  [BUGGY]  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	    this.sd  =  sd;		non-compiled	[CE]  cannot  find  symbol  sd	14	None	add
14	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]  this.mean  =  inverseCumAccuracy;  [BUGGY]  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  inverseCumAccuracy;	this.mean  =  mean;  	compilable	  [FE]  ConvergenceException  	13	7	replace
15	[BUG]  [BUGGY]  this.mean  =  inverseCumAccuracy;  [FE]  ConvergenceException  [FE]    ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]  this.mean  =  inverseCumAccuracy;  [BUGGY]  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  inverseCumAccuracy;	this.mean  =  mean;  	compilable	  [FE]  ConvergenceException  	13	7	replace
16	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	this.mean  =  mean;  	compilable	  [FE]  ConvergenceException  	13	7	replace
17	[BUG]  [BUGGY]  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [FE]  ConvergenceException  [FE]    ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	this.mean  =  mean;  	compilable	  [FE]  ConvergenceException  	13	7	replace
18	[BUG]  [BUGGY]    this.standardDeviation  =  sd;  [CE]  variable  standardDeviation  might  already  have  been  assigned  [FE]    ConvergenceException  [CONTEXT]  public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]    this.standardDeviation  =  sd;  [BUGGY]  this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	    this.standardDeviation  =  sd;		non-compiled	[CE]  variable  standardDeviation  might  already  have  been  assigned	14	None	add
