projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=normalDeviation;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=StandardDistributionImpl.create(sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=StandardDistributionImpl.newInstance(sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=sd;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSION_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=standardDeviation;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=newDouble(sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.sd=sd;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=sd;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;if(sd<=0){this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}else{this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;This.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;sd=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;if(sd<=0){this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}else{mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=SQRT2PI;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSION_ABSOLUTE_ACCURACY|DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSION_ABSOLUTE_ACCURACY+mean;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=inverseCumAccuracy;this.mean=inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=inverseCumAccuracy;if(sd<=0){this.mean=inverseCumAccuracy;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=inverseCumAccuracy;if(sd<=0){this.mean=inverseCumAccuracy;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=inverseCumAccuracy;if(sd<=0){this.mean=inverseCumAccuracy;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,SQRT2PI);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=inverseCumAccuracy;if(sd<=0){this.mean=inverseCumAccuracy;}else{this.mean=inverseCumAccuracy;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=sd+1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.sd=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.sd=mean;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.sd=DEFAULT_INVERSE_ABSOLUTE_ACCOURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=StandardDistributionImpl.newInstance(sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=StandardDistributionImpl.newInstance(sd,inverseCumAccuracy,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=NormalDistributionImpl.newInstance(sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=NormalDistributionImpl.newInstance(sd,inverseCumAccuracy,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean+sd;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;if(mean<=0){this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}else{this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;This.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;if(mean<=0){this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=StandardDistributionImpl.create(sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=StandardDistributionImpl.create(sd,inverseCumAccuracy,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=NormalDistributionImpl.create(sd,inverseCumAccuracy,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=NormalDistributionImpl.create(sd,solverAbsoluteAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=sd,inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=sd+inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=newDouble(sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=newDouble(sd+1);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=newDouble(sd-1);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY+mean;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean+DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=sd/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY+1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean*DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=SQRT2PI.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=NormalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=sd;this.mean=sd;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=sd;if(sd<=0){this.mean=sd;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=sd;if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}else{this.mean=sd;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=sd;if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=sd;if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}this.mean=sd;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;sd=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;this.mean=mean%DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=StandardDistributionImpl.newInstance(resolverAbsoluteAccuracy,sd);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=sd;This.mean=sd;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=sd;this.message=sd;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=sd;this.mesan=sd;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean+DEFAULT_INVERSION_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.sd=DELETE_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.sd=DEFAULT_INVERSE_ABSOLUTE;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;if(sd<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;inverseCumAccuracy=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean/sd;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean?DEFAULT_INVERSE_ABSOLUTE_ACCURACY:DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=inverseCumAccuracy/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=inverseCumAccuracy;if(inverseCumAccuracy>MAX_INVERSE_ABSOLUTE_ACCURACY){this.mean=inverseCumAccuracy;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVI
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=inverseCumAccuracy;if(inverseCumAccuracy>MAX_INVERSE_ABSOLUTE_ACCURACY){this.mean=inverseCumAccuracy;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=inverseCumAccuracy;if(inverseCumAccuracy>MAX_INVERSE_ABSOLUTE_ACCURACY){this.mean=inverseCumAccuracy;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=inverseCumAccuracy;if(inverseCumAccuracy>MAX_INVERSE_ABSOLUTE_ACCURACY){this.mean=inverseCumAccuracy;}else{this.mean=inverseCumAccuracy;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY+1;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=DEFAULT_INVERSION_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean+inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=inverseCumAccuracy+DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=inverseCumAccuracy;This.mean=inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=inverseCumAccuracy;super();this.mean=inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=inverseCumAccuracy;this.mean=inverseAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.sd=DESC_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.sd=sd,inverseCumAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=solverAbsoluteAccuracy;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;sd=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=DEFAULT_INVERSE_ABSOLUTE_ACCURACY;this.mean=deFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=sd;if(mean<=0){this.mean=sd;}else{thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=sd;if(mean<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}else{this.mean=sd;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=sd;if(mean<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}this.mean=sd;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=sd;if(mean<=0){thrownewNotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,sd);}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=StandardDistributionImpl.newInstance(mean,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.standardDeviation=StandardDistributionImpl.newInstance(message,sd,inverseCumAccuracy);
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;if(sd<=0){this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}else{this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;}
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;sd=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;this.mean=mean/DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean-DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java78this.mean=mean/DEFAULT_INVERSION_ABSOLUTE_ACCURACY;
