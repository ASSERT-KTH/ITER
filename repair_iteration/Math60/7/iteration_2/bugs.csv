bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  variable  mean  might  already  have  been  assigned  [FE]    ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  	non-compiled	[CE]  variable  mean  might  already  have  been  assigned	8	None	add
2	[BUG]  [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [CE]  illegal  start  of  expression  [FE]      ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
3	[BUG]  [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  This.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  This  [FE]        ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  This.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    This.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  	non-compiled	[CE]  cannot  find  symbol  This	8	None	add
4	[BUG]  [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  variable  mean  might  already  have  been  assigned  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  	non-compiled	[CE]  variable  mean  might  already  have  been  assigned	8	None	add
5	[BUG]  [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [CE]  illegal  start  of  expression  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
6	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  variable  standardDeviation  might  already  have  been  assigned  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	      this.standardDeviation    =    normalDeviation;    	non-compiled	[CE]  variable  standardDeviation  might  already  have  been  assigned	3	None	replace
7	[BUG]  [BUGGY]  this.standardDeviation  =  SQRT2PI;  [CE]  variable  standardDeviation  might  already  have  been  assigned  [FE]              ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.standardDeviation  =  SQRT2PI;  [BUGGY]    this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  SQRT2PI;	      this.standardDeviation    =    normalDeviation;    	non-compiled	[CE]  variable  standardDeviation  might  already  have  been  assigned	3	None	replace
8	[BUG]  [BUGGY]  this.mean  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    DEFAULT_INVERSION_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_INVERSION_ABSOLUTE_ACCURACY	10	None	replace
9	[BUG]  [BUGGY]  this.mean  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  +  mean;  [CE]  cannot  find  symbol  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  [FE]              ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  +  mean;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  +  mean;	  this.mean    =    DEFAULT_INVERSION_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_INVERSION_ABSOLUTE_ACCURACY	10	None	replace
10	[BUG]  [BUGGY]  this.mean  =  inverseCumAccuracy;  this.mean  =  inverseCumAccuracy;  [CE]  variable  mean  might  already  have  been  assigned  [FE]    ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  inverseCumAccuracy;  this.mean  =  inverseCumAccuracy;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    inverseCumAccuracy;    this.mean  =  inverseCumAccuracy;	  	non-compiled	[CE]  variable  mean  might  already  have  been  assigned	14	None	add
11	[BUG]  [BUGGY]  this.mean  =  inverseCumAccuracy;  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  expression  [FE]      ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  inverseCumAccuracy;  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    inverseCumAccuracy;    if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
12	[BUG]  [BUGGY]  this.mean  =  inverseCumAccuracy;  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);  }  [CE]  illegal  start  of  expression  [FE]        ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  inverseCumAccuracy;  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);  }  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    inverseCumAccuracy;    if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);  }	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
13	[BUG]  [BUGGY]  this.mean  =  inverseCumAccuracy;  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  SQRT2PI);  }  [CE]  illegal  start  of  expression  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  inverseCumAccuracy;  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  SQRT2PI);  }  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    inverseCumAccuracy;    if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  SQRT2PI);  }	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
14	[BUG]  [BUGGY]  this.mean  =  inverseCumAccuracy;  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  this.mean  =  inverseCumAccuracy;  }  [CE]  illegal  start  of  expression  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  inverseCumAccuracy;  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  this.mean  =  inverseCumAccuracy;  }  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    inverseCumAccuracy;    if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  this.mean  =  inverseCumAccuracy;  }	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
15	[BUG]  [BUGGY]  this.standardDeviation  =  sd  +  1;  [CE]  variable  standardDeviation  might  already  have  been  assigned  [FE]        ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.standardDeviation  =  sd  +  1;  [BUGGY]    this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  sd  +  1;	      this.standardDeviation    =    sd;    	non-compiled	[CE]  variable  standardDeviation  might  already  have  been  assigned	18	None	replace
16	[BUG]  [BUGGY]  this.sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  sd  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	      this.sd    =    sd;    	non-compiled	[CE]  cannot  find  symbol  sd	13	None	replace
17	[BUG]  [BUGGY]  this.sd  =  mean;  [CE]  cannot  find  symbol  sd  [FE]              ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.sd  =  mean;  [BUGGY]    this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.sd  =  mean;	      this.sd    =    sd;    	non-compiled	[CE]  cannot  find  symbol  sd	13	None	replace
18	[BUG]  [BUGGY]  this.sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCOURACY;  [CE]  cannot  find  symbol  sd  [FE]                ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCOURACY;  [BUGGY]    this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCOURACY;	      this.sd    =    sd;    	non-compiled	[CE]  cannot  find  symbol  sd	13	None	replace
19	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  solverAbsoluteAccuracy);  [CE]  cannot  find  symbol  StandardDistributionImpl  [FE]                ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  solverAbsoluteAccuracy);  [BUGGY]    this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  solverAbsoluteAccuracy);	      this.standardDeviation    =    StandardDistributionImpl.newInstance(sd,    inverseCumAccuracy);    	non-compiled	[CE]  cannot  find  symbol  StandardDistributionImpl	5	None	replace
20	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy);  [CE]  cannot  find  symbol  StandardDistributionImpl  [FE]                  ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy);  [BUGGY]    this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy);	      this.standardDeviation    =    StandardDistributionImpl.newInstance(sd,    inverseCumAccuracy);    	non-compiled	[CE]  cannot  find  symbol  StandardDistributionImpl	5	None	replace
21	[BUG]  [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.newInstance(sd,  solverAbsoluteAccuracy);  [CE]  cannot  find  symbol  [FE]                    ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.newInstance(sd,  solverAbsoluteAccuracy);  [BUGGY]    this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  NormalDistributionImpl.newInstance(sd,  solverAbsoluteAccuracy);	      this.standardDeviation    =    StandardDistributionImpl.newInstance(sd,    inverseCumAccuracy);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
22	[BUG]  [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.newInstance(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy);  [CE]  cannot  find  symbol  [FE]                      ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.newInstance(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy);  [BUGGY]    this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  NormalDistributionImpl.newInstance(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy);	      this.standardDeviation    =    StandardDistributionImpl.newInstance(sd,    inverseCumAccuracy);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
23	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  mean  +  sd;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  mean  +  sd;	  this.mean    =    sd;    	compilable	  [FE]  AssertionFailedError  	7	7	replace
24	[BUG]  [BUGGY]  this.mean  =  mean  +  sd;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  mean  +  sd;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean  +  sd;	  this.mean    =    sd;    	compilable	  [FE]  AssertionFailedError  	7	7	replace
25	[BUG]  [BUGGY]  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  variable  mean  might  already  have  been  assigned  [FE]    ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  	non-compiled	[CE]  variable  mean  might  already  have  been  assigned	16	None	add
26	[BUG]  [BUGGY]  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(mean  <  =  0)  {  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [CE]  illegal  start  of  expression  [FE]      ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(mean  <  =  0)  {  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    if(mean  <  =  0)  {  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
27	[BUG]  [BUGGY]  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  This.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  This  [FE]        ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  This.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    This.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  	non-compiled	[CE]  cannot  find  symbol  This	16	None	add
28	[BUG]  [BUGGY]  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(mean  <  =  0)  {  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);  }  [CE]  illegal  start  of  expression  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(mean  <  =  0)  {  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);  }  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    if(mean  <  =  0)  {  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);  }	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
29	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(sd,  solverAbsoluteAccuracy);  [CE]  cannot  find  symbol  StandardDistributionImpl  [FE]              ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(sd,  solverAbsoluteAccuracy);  [BUGGY]    this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  StandardDistributionImpl.create(sd,  solverAbsoluteAccuracy);	      this.standardDeviation    =    StandardDistributionImpl.create(sd,    inverseCumAccuracy);    	non-compiled	[CE]  cannot  find  symbol  StandardDistributionImpl	4	None	replace
30	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy);  [CE]  cannot  find  symbol  StandardDistributionImpl  [FE]                ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy);  [BUGGY]    this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  StandardDistributionImpl.create(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy);	      this.standardDeviation    =    StandardDistributionImpl.create(sd,    inverseCumAccuracy);    	non-compiled	[CE]  cannot  find  symbol  StandardDistributionImpl	4	None	replace
31	[BUG]  [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.create(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy);  [CE]  cannot  find  symbol  [FE]                  ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.create(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy);  [BUGGY]    this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  NormalDistributionImpl.create(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy);	      this.standardDeviation    =    StandardDistributionImpl.create(sd,    inverseCumAccuracy);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
32	[BUG]  [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.create(sd,  solverAbsoluteAccuracy);  [CE]  cannot  find  symbol  [FE]                    ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.create(sd,  solverAbsoluteAccuracy);  [BUGGY]    this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  NormalDistributionImpl.create(sd,  solverAbsoluteAccuracy);	      this.standardDeviation    =    StandardDistributionImpl.create(sd,    inverseCumAccuracy);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
33	[BUG]  [BUGGY]  this.standardDeviation  =  sd,  inverseCumAccuracy;  [CE]  ';'  expected  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.standardDeviation  =  sd,  inverseCumAccuracy;  [BUGGY]    this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  sd,  inverseCumAccuracy;	      this.standardDeviation    =    inverseCumAccuracy;    	non-compiled	[CE]  ';'  expected	2	None	replace
34	[BUG]  [BUGGY]  this.standardDeviation  =  sd  +  inverseCumAccuracy;  [CE]  variable  standardDeviation  might  already  have  been  assigned  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.standardDeviation  =  sd  +  inverseCumAccuracy;  [BUGGY]    this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  sd  +  inverseCumAccuracy;	      this.standardDeviation    =    inverseCumAccuracy;    	non-compiled	[CE]  variable  standardDeviation  might  already  have  been  assigned	2	None	replace
35	[BUG]  [BUGGY]  this.standardDeviation  =  new  Double(sd,  inverseCumAccuracy);  [CE]  no  suitable  constructor  found  for  Double(double,double)  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.standardDeviation  =  new  Double(sd,  inverseCumAccuracy);  [BUGGY]    this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  new  Double(sd,  inverseCumAccuracy);	      this.standardDeviation    =    new    Double(sd);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(double,double)	12	None	replace
36	[BUG]  [BUGGY]  this.standardDeviation  =  new  Double(sd  +  1);  [CE]  variable  standardDeviation  might  already  have  been  assigned  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.standardDeviation  =  new  Double(sd  +  1);  [BUGGY]    this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  new  Double(sd  +  1);	      this.standardDeviation    =    new    Double(sd);    	non-compiled	[CE]  variable  standardDeviation  might  already  have  been  assigned	12	None	replace
37	[BUG]  [BUGGY]  this.standardDeviation  =  new  Double(sd  -  1);  [CE]  variable  standardDeviation  might  already  have  been  assigned  [FE]              ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.standardDeviation  =  new  Double(sd  -  1);  [BUGGY]    this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  new  Double(sd  -  1);	      this.standardDeviation    =    new    Double(sd);    	non-compiled	[CE]  variable  standardDeviation  might  already  have  been  assigned	12	None	replace
38	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  ConvergenceException  	9	4	replace
39	[BUG]  [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  ConvergenceException  	9	4	replace
40	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  ConvergenceException  	9	4	replace
41	[BUG]  [BUGGY]  this.mean  =  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  ConvergenceException  	9	4	replace
42	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  AssertionFailedError  	17	8	replace
43	[BUG]  [BUGGY]  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [FE]  AssertionFailedError  [FE]    ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  AssertionFailedError  	17	8	replace
44	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;	  this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  AssertionFailedError  	17	8	replace
45	[BUG]  [BUGGY]  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [FE]  AssertionFailedError  [FE]      ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;	  this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  AssertionFailedError  	17	8	replace
46	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  ConvergenceException  	17	6	replace
47	[BUG]  [BUGGY]  this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [FE]  ConvergenceException  [FE]        ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  ConvergenceException  	17	6	replace
48	[BUG]  [BUGGY]  this.standardDeviation  =  SQRT2PI.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  double  cannot  be  dereferenced  [FE]        ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.standardDeviation  =  SQRT2PI.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  SQRT2PI.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	      this.standardDeviation    =    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  double  cannot  be  dereferenced	1	None	replace
49	[BUG]  [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  variable  standardDeviation  might  already  have  been  assigned  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  NormalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	      this.standardDeviation    =    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  variable  standardDeviation  might  already  have  been  assigned	1	None	replace
50	[BUG]  [BUGGY]  this.mean  =  sd;  this.mean  =  sd;  [CE]  variable  mean  might  already  have  been  assigned  [FE]    AssertionFailedError    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  sd;  this.mean  =  sd;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    sd;    this.mean  =  sd;	  	non-compiled	[CE]  variable  mean  might  already  have  been  assigned	6	None	add
51	[BUG]  [BUGGY]  this.mean  =  sd;  if(sd  <  =  0)  {  this.mean  =  sd;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  sd;  if(sd  <  =  0)  {  this.mean  =  sd;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    sd;    if(sd  <  =  0)  {  this.mean  =  sd;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
52	[BUG]  [BUGGY]  this.mean  =  sd;  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  else  {  this.mean  =  sd;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  sd;  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  else  {  this.mean  =  sd;  }  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    sd;    if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  else  {  this.mean  =  sd;  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
53	[BUG]  [BUGGY]  this.mean  =  sd;  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  sd;  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    sd;    if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
54	[BUG]  [BUGGY]  this.mean  =  sd;  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  sd;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  sd;  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  sd;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    sd;    if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  sd;	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
55	[BUG]  [BUGGY]  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  sd  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  variable  mean  might  already  have  been  assigned  [FE]    ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  sd  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    sd  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  	non-compiled	[CE]  variable  mean  might  already  have  been  assigned	16	None	add
56	[BUG]  [BUGGY]  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  mean  %  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  variable  mean  might  already  have  been  assigned  [FE]      ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  mean  %  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    this.mean  =  mean  %  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  	non-compiled	[CE]  variable  mean  might  already  have  been  assigned	16	None	add
57	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(resolverAbsoluteAccuracy,  sd);  [CE]  cannot  find  symbol  resolverAbsoluteAccuracy  [FE]                ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(resolverAbsoluteAccuracy,  sd);  [BUGGY]    this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  StandardDistributionImpl.newInstance(resolverAbsoluteAccuracy,  sd);	      this.standardDeviation    =    StandardDistributionImpl.newInstance(sd,    inverseCumAccuracy);    	non-compiled	[CE]  cannot  find  symbol  resolverAbsoluteAccuracy	5	None	replace
58	[BUG]  [BUGGY]  this.mean  =  sd;  This.mean  =  sd;  [CE]  cannot  find  symbol  This  [FE]    AssertionFailedError    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  sd;  This.mean  =  sd;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    sd;    This.mean  =  sd;	  	non-compiled	[CE]  cannot  find  symbol  This	6	None	add
59	[BUG]  [BUGGY]  this.mean  =  sd;  this.message  =  sd;  [CE]  cannot  find  symbol  message  [FE]      AssertionFailedError    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  sd;  this.message  =  sd;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    sd;    this.message  =  sd;	  	non-compiled	[CE]  cannot  find  symbol  message	6	None	add
60	[BUG]  [BUGGY]  this.mean  =  sd;  this.mesan  =  sd;  [CE]  cannot  find  symbol  mesan  [FE]        AssertionFailedError    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  sd;  this.mesan  =  sd;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    sd;    this.mesan  =  sd;	  	non-compiled	[CE]  cannot  find  symbol  mesan	6	None	add
61	[BUG]  [BUGGY]  this.mean  =  mean  +  DEFAULT_INVERSION_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  mean  +  DEFAULT_INVERSION_ABSOLUTE_ACCURACY;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean  +  DEFAULT_INVERSION_ABSOLUTE_ACCURACY;	  this.mean    =    DEFAULT_INVERSION_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_INVERSION_ABSOLUTE_ACCURACY	10	None	replace
62	[BUG]  [BUGGY]  this.sd  =  DELETE_INVERSE_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  sd  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.sd  =  DELETE_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.sd  =  DELETE_INVERSE_ABSOLUTE_ACCURACY;	      this.sd    =    sd;    	non-compiled	[CE]  cannot  find  symbol  sd	13	None	replace
63	[BUG]  [BUGGY]  this.sd  =  DEFAULT_INVERSE_ABSOLUTE;  [CE]  cannot  find  symbol  sd  [FE]              ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.sd  =  DEFAULT_INVERSE_ABSOLUTE;  [BUGGY]    this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.sd  =  DEFAULT_INVERSE_ABSOLUTE;	      this.sd    =    sd;    	non-compiled	[CE]  cannot  find  symbol  sd	13	None	replace
64	[BUG]  [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  expression  [FE]    ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
65	[BUG]  [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  inverseCumAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  variable  mean  might  already  have  been  assigned  [FE]      ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  inverseCumAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  inverseCumAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  	non-compiled	[CE]  variable  mean  might  already  have  been  assigned	8	None	add
66	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionFailedError    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  mean  /  sd;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  mean  /  sd;	  this.mean    =    sd;    	compilable	  [FE]  ConvergenceException  	7	5	replace
67	[BUG]  [BUGGY]  this.mean  =  mean  /  sd;  [FE]  ConvergenceException  [FE]    AssertionFailedError    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  mean  /  sd;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean  /  sd;	  this.mean    =    sd;    	compilable	  [FE]  ConvergenceException  	7	5	replace
68	[BUG]  [BUGGY]  this.mean  =  mean?  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  incompatible  types  [FE]    ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  mean?  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean?  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  incompatible  types	9	None	replace
69	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  AssertionFailedError  	17	7	replace
70	[BUG]  [BUGGY]  this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [FE]  AssertionFailedError  [FE]    ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  AssertionFailedError  	17	7	replace
71	[BUG]  [BUGGY]  this.mean  =  inverseCumAccuracy;  if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVI  [CE]  ')'  expected  [FE]    ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  inverseCumAccuracy;  if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVI  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    inverseCumAccuracy;    if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVI	  	non-compiled	[CE]  ')'  expected	14	None	add
72	[BUG]  [BUGGY]  this.mean  =  inverseCumAccuracy;  if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION  [CE]  ')'  expected  [FE]      ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  inverseCumAccuracy;  if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    inverseCumAccuracy;    if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION	  	non-compiled	[CE]  ')'  expected	14	None	add
73	[BUG]  [BUGGY]  this.mean  =  inverseCumAccuracy;  if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  [CE]  ')'  expected  [FE]        ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  inverseCumAccuracy;  if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    inverseCumAccuracy;    if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,	  	non-compiled	[CE]  ')'  expected	14	None	add
74	[BUG]  [BUGGY]  this.mean  =  inverseCumAccuracy;  if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  this.mean  =  inverseCumAccuracy;  }  [CE]  cannot  find  symbol  MAX_INVERSE_ABSOLUTE_ACCURACY  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  inverseCumAccuracy;  if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  this.mean  =  inverseCumAccuracy;  }  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    inverseCumAccuracy;    if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  this.mean  =  inverseCumAccuracy;  }	  	non-compiled	[CE]  cannot  find  symbol  MAX_INVERSE_ABSOLUTE_ACCURACY	14	None	add
75	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [CE]  cannot  find  symbol  StandardDistributionImpl  [FE]        ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]    this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;	      this.standardDeviation    =    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  cannot  find  symbol  StandardDistributionImpl	1	None	replace
76	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  [FE]        ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY;  [BUGGY]    this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY;	      this.standardDeviation    =    standardDeviation;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_INVERSION_ABSOLUTE_ACCURACY	11	None	replace
77	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  mean  +  inverseCumAccuracy;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  mean  +  inverseCumAccuracy;	  this.mean    =    inverseCumAccuracy;    	compilable	  [FE]  ConvergenceException  	15	4	replace
78	[BUG]  [BUGGY]  this.mean  =  mean  +  inverseCumAccuracy;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  mean  +  inverseCumAccuracy;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean  +  inverseCumAccuracy;	  this.mean    =    inverseCumAccuracy;    	compilable	  [FE]  ConvergenceException  	15	4	replace
79	[BUG]  [BUGGY]  this.standardDeviation  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  variable  standardDeviation  might  already  have  been  assigned  [FE]          ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.standardDeviation  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	      this.standardDeviation    =    inverseCumAccuracy;    	non-compiled	[CE]  variable  standardDeviation  might  already  have  been  assigned	2	None	replace
80	[BUG]  [BUGGY]  this.mean  =  inverseCumAccuracy;  This.mean  =  inverseCumAccuracy;  [CE]  cannot  find  symbol  This  [FE]    ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  inverseCumAccuracy;  This.mean  =  inverseCumAccuracy;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    inverseCumAccuracy;    This.mean  =  inverseCumAccuracy;	  	non-compiled	[CE]  cannot  find  symbol  This	14	None	add
81	[BUG]  [BUGGY]  this.mean  =  inverseCumAccuracy;  super();  this.mean  =  inverseCumAccuracy;  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]      ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  inverseCumAccuracy;  super();  this.mean  =  inverseCumAccuracy;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    inverseCumAccuracy;    super();  this.mean  =  inverseCumAccuracy;	  	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	14	None	add
82	[BUG]  [BUGGY]  this.mean  =  inverseCumAccuracy;  this.mean  =  inverseAccuracy;  [CE]  cannot  find  symbol  inverseAccuracy  [FE]        ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  inverseCumAccuracy;  this.mean  =  inverseAccuracy;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    inverseCumAccuracy;    this.mean  =  inverseAccuracy;	  	non-compiled	[CE]  cannot  find  symbol  inverseAccuracy	14	None	add
83	[BUG]  [BUGGY]  this.sd  =  DESC_INVERSE_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  sd  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.sd  =  DESC_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.sd  =  DESC_INVERSE_ABSOLUTE_ACCURACY;	      this.sd    =    sd;    	non-compiled	[CE]  cannot  find  symbol  sd	13	None	replace
84	[BUG]  [BUGGY]  this.sd  =  sd,  inverseCumAccuracy;  [CE]  ';'  expected  [FE]              ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.sd  =  sd,  inverseCumAccuracy;  [BUGGY]    this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.sd  =  sd,  inverseCumAccuracy;	      this.sd    =    sd;    	non-compiled	[CE]  ';'  expected	13	None	replace
85	[BUG]  [BUGGY]  this.standardDeviation  =  solverAbsoluteAccuracy;  [CE]  variable  solverAbsoluteAccuracy  might  not  have  been  initialized  [FE]        ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.standardDeviation  =  solverAbsoluteAccuracy;  [BUGGY]    this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  solverAbsoluteAccuracy;	      this.standardDeviation    =    standardDeviation;    	non-compiled	[CE]  variable  solverAbsoluteAccuracy  might  not  have  been  initialized	11	None	replace
86	[BUG]  [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  variable  mean  might  already  have  been  assigned  [FE]    ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  	non-compiled	[CE]  variable  mean  might  already  have  been  assigned	8	None	add
87	[BUG]  [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  deFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  deFAULT_INVERSE_ABSOLUTE_ACCURACY  [FE]      ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  deFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    this.mean  =  deFAULT_INVERSE_ABSOLUTE_ACCURACY;	  	non-compiled	[CE]  cannot  find  symbol  deFAULT_INVERSE_ABSOLUTE_ACCURACY	8	None	add
88	[BUG]  [BUGGY]  this.mean  =  sd;  if(mean  <  =  0)  {  this.mean  =  sd;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  sd;  if(mean  <  =  0)  {  this.mean  =  sd;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    sd;    if(mean  <  =  0)  {  this.mean  =  sd;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
89	[BUG]  [BUGGY]  this.mean  =  sd;  if(mean  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  else  {  this.mean  =  sd;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  sd;  if(mean  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  else  {  this.mean  =  sd;  }  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    sd;    if(mean  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  else  {  this.mean  =  sd;  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
90	[BUG]  [BUGGY]  this.mean  =  sd;  if(mean  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  sd;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  sd;  if(mean  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  sd;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    sd;    if(mean  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  sd;	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
91	[BUG]  [BUGGY]  this.mean  =  sd;  if(mean  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  sd;  if(mean  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    sd;    if(mean  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
92	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(mean,  sd,  inverseCumAccuracy);  [CE]  cannot  find  symbol  StandardDistributionImpl  [FE]                ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(mean,  sd,  inverseCumAccuracy);  [BUGGY]    this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  StandardDistributionImpl.newInstance(mean,  sd,  inverseCumAccuracy);	      this.standardDeviation    =    StandardDistributionImpl.newInstance(sd,    inverseCumAccuracy);    	non-compiled	[CE]  cannot  find  symbol  StandardDistributionImpl	5	None	replace
93	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(message,  sd,  inverseCumAccuracy);  [CE]  cannot  find  symbol  message  [FE]                  ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(message,  sd,  inverseCumAccuracy);  [BUGGY]    this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  StandardDistributionImpl.newInstance(message,  sd,  inverseCumAccuracy);	      this.standardDeviation    =    StandardDistributionImpl.newInstance(sd,    inverseCumAccuracy);    	non-compiled	[CE]  cannot  find  symbol  message	5	None	replace
94	[BUG]  [BUGGY]  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [CE]  illegal  start  of  expression  [FE]    ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    if(sd  <  =  0)  {  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
95	[BUG]  [BUGGY]  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  sd  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  variable  mean  might  already  have  been  assigned  [FE]      ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  sd  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    sd  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  	non-compiled	[CE]  variable  mean  might  already  have  been  assigned	16	None	add
96	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  mean  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  mean  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  ConvergenceException  	9	4	replace
97	[BUG]  [BUGGY]  this.mean  =  mean  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  mean  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  ConvergenceException  	9	4	replace
98	[BUG]  [BUGGY]  this.mean  =  mean  /  DEFAULT_INVERSION_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  [FE]            ConvergenceException    [CONTEXT]    public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }    [BUGGY]  this.mean  =  mean  /  DEFAULT_INVERSION_ABSOLUTE_ACCURACY;  [BUGGY]    standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean  /  DEFAULT_INVERSION_ABSOLUTE_ACCURACY;	  this.mean    =    DEFAULT_INVERSION_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_INVERSION_ABSOLUTE_ACCURACY	10	None	replace
