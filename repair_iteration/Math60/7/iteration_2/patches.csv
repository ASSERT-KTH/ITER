bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  this.sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  sd  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.sd    =    DESC_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  cannot  find  symbol  sd	83	None	replace
2	[BUG]  [BUGGY]  this.message  =  mean;  [CE]  cannot  find  symbol  message  [FE]            AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.message  =  mean;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.message  =  mean;	  this.mean    =    sd;    this.mesan    =    sd;    	non-compiled	[CE]  cannot  find  symbol  message	60	None	replace
3	[BUG]  [BUGGY]  this.mean  =  mean;  this.mesan  =  sd;  [CE]  cannot  find  symbol  mesan  [FE]              AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean;  this.mesan  =  sd;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean;  this.mesan  =  sd;	  this.mean    =    sd;    this.mesan    =    sd;    	non-compiled	[CE]  cannot  find  symbol  mesan	60	None	replace
4	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  sd  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  sd  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    mean    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  AssertionFailedError  	41	7	replace
5	[BUG]  [BUGGY]  this.mean  =  sd  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [FE]  AssertionFailedError  [FE]    ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  sd  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  sd  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    mean    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  AssertionFailedError  	41	7	replace
6	[BUG]  [BUGGY]  n  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  n  [FE]          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  n  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	n  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    this.mean    =    deFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  cannot  find  symbol  n	87	None	replace
7	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(mean,  sd,  solverAbsoluteAccuracy);  [CE]  cannot  find  symbol  StandardDistributionImpl  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(mean,  sd,  solverAbsoluteAccuracy);  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  StandardDistributionImpl.newInstance(mean,  sd,  solverAbsoluteAccuracy);	  this.standardDeviation    =    StandardDistributionImpl.newInstance(mean,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  cannot  find  symbol  StandardDistributionImpl	92	None	replace
8	[BUG]  [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.newInstance(mean,  sd,  solverAbsoluteAccuracy);  [CE]  cannot  find  symbol  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.newInstance(mean,  sd,  solverAbsoluteAccuracy);  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  NormalDistributionImpl.newInstance(mean,  sd,  solverAbsoluteAccuracy);	  this.standardDeviation    =    StandardDistributionImpl.newInstance(mean,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
9	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  2;  [CE]  cannot  find  symbol  StandardDistributionImpl  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  2;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  2;	  this.standardDeviation    =    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    1;    	non-compiled	[CE]  cannot  find  symbol  StandardDistributionImpl	75	None	replace
10	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [CE]  variable  standardDeviation  might  already  have  been  assigned  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;	  this.standardDeviation    =    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    1;    	non-compiled	[CE]  variable  standardDeviation  might  already  have  been  assigned	75	None	replace
11	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  sd;  [CE]  cannot  find  symbol  StandardDistributionImpl  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  sd;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  sd;	  this.standardDeviation    =    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    1;    	non-compiled	[CE]  cannot  find  symbol  StandardDistributionImpl	75	None	replace
12	[BUG]  [BUGGY]  this.sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCOURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  sd  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCOURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCOURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.sd    =    DEFAULT_INVERSE_ABSOLUTE_ACCOURACY;    	non-compiled	[CE]  cannot  find  symbol  sd	18	None	replace
13	[BUG]  [BUGGY]  this.sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCOURACY  +  1;  [CE]  cannot  find  symbol  sd  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCOURACY  +  1;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCOURACY  +  1;	  this.sd    =    DEFAULT_INVERSE_ABSOLUTE_ACCOURACY;    	non-compiled	[CE]  cannot  find  symbol  sd	18	None	replace
14	[BUG]  [BUGGY]  this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  variable  mean  might  already  have  been  assigned  [FE]    AssertionFailedError    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    inverseCumAccuracy    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  	non-compiled	[CE]  variable  mean  might  already  have  been  assigned	69	None	add
15	[BUG]  [BUGGY]  this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(inverseCumAccuracy  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [CE]  variable  mean  might  already  have  been  assigned  [FE]      AssertionFailedError    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(inverseCumAccuracy  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    inverseCumAccuracy    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    if(inverseCumAccuracy  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }	  	non-compiled	[CE]  variable  mean  might  already  have  been  assigned	69	None	add
16	[BUG]  [BUGGY]  this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(inverseCumAccuracy  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(inverseCumAccuracy  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    inverseCumAccuracy    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    if(inverseCumAccuracy  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD	  	non-compiled	[CE]  ')'  expected	69	None	add
17	[BUG]  [BUGGY]  this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(inverseCumAccuracy  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(inverseCumAccuracy  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    inverseCumAccuracy    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    if(inverseCumAccuracy  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_	  	non-compiled	[CE]  ')'  expected	69	None	add
18	[BUG]  [BUGGY]  this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  This.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  This  [FE]            AssertionFailedError    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  This.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    inverseCumAccuracy    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    This.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  	non-compiled	[CE]  cannot  find  symbol  This	69	None	add
19	[BUG]  [BUGGY]  this.standardDeviation  =  sd,  solverAbsoluteAccuracy;  [CE]  ';'  expected  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  sd,  solverAbsoluteAccuracy;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  sd,  solverAbsoluteAccuracy;	  this.standardDeviation    =    sd,    inverseCumAccuracy;    	non-compiled	[CE]  ';'  expected	33	None	replace
20	[BUG]  [BUGGY]  this.standardDeviation  =  mean,  inverseCumAccuracy;  [CE]  ';'  expected  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  mean,  inverseCumAccuracy;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  mean,  inverseCumAccuracy;	  this.standardDeviation    =    sd,    inverseCumAccuracy;    	non-compiled	[CE]  ';'  expected	33	None	replace
21	[BUG]  [BUGGY]  this.standardDeviation  =  sd  +  1,  inverseCumAccuracy;  [CE]  ';'  expected  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  sd  +  1,  inverseCumAccuracy;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  sd  +  1,  inverseCumAccuracy;	  this.standardDeviation    =    sd,    inverseCumAccuracy;    	non-compiled	[CE]  ';'  expected	33	None	replace
22	[BUG]  [BUGGY]  this.mean  =  mean  /  sd;  this.mean  =  mean  /  sd;  [CE]  variable  mean  might  already  have  been  assigned  [FE]    ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  /  sd;  this.mean  =  mean  /  sd;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    /    sd;    this.mean  =  mean  /  sd;	  	non-compiled	[CE]  variable  mean  might  already  have  been  assigned	66	None	add
23	[BUG]  [BUGGY]  this.mean  =  mean  /  sd;  This.mean  =  mean  /  sd;  [CE]  cannot  find  symbol  This  [FE]      ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  /  sd;  This.mean  =  mean  /  sd;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    /    sd;    This.mean  =  mean  /  sd;	  	non-compiled	[CE]  cannot  find  symbol  This	66	None	add
24	[BUG]  [BUGGY]  this.mean  =  mean  /  sd;  this.mesan  =  mean  /  sd;  [CE]  cannot  find  symbol  mesan  [FE]        ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  /  sd;  this.mesan  =  mean  /  sd;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    /    sd;    this.mesan  =  mean  /  sd;	  	non-compiled	[CE]  cannot  find  symbol  mesan	66	None	add
25	[BUG]  [BUGGY]  this.mean  =  mean  /  sd;  this.mean  =  mean  /  sd);  [CE]  ';'  expected  [FE]          ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  /  sd;  this.mean  =  mean  /  sd);  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    /    sd;    this.mean  =  mean  /  sd);	  	non-compiled	[CE]  ';'  expected	66	None	add
26	[BUG]  [BUGGY]  this.standardDeviation  =  mean;  [CE]  variable  standardDeviation  might  already  have  been  assigned  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  mean;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  mean;	  this.mean    =    inverseCumAccuracy;    if(inverseCumAccuracy    >    MAX_INVERSE_ABSOLUTE_ACCURACY)    {    this.mean    =    inverseCumAccuracy;    }    else    {    this.mean    =    inverseCumAccuracy;    }    	non-compiled	[CE]  variable  standardDeviation  might  already  have  been  assigned	74	None	replace
27	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionFailedError    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  *  sd;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  mean  *  sd;	  this.mean    =    mean    +    sd;    	compilable	  [FE]  ConvergenceException  	24	5	replace
28	[BUG]  [BUGGY]  this.mean  =  mean  *  sd;  [FE]  ConvergenceException  [FE]    AssertionFailedError    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  *  sd;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean  *  sd;	  this.mean    =    mean    +    sd;    	compilable	  [FE]  ConvergenceException  	24	5	replace
29	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  bad  operand  types  for  binary  operator  '|'  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '|'	6	None	replace
30	[BUG]  [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  incompatible  types  [FE]        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    mean?    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    :    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  incompatible  types	68	None	replace
31	[BUG]  [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  mean  :  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  incompatible  types  [FE]          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  mean  :  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  mean  :  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    mean?    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    :    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  incompatible  types	68	None	replace
32	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean;  sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  mean;  sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    sd    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  AssertionFailedError  	86	9	replace
33	[BUG]  [BUGGY]  this.mean  =  mean;  sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [FE]  AssertionFailedError  [FE]        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean;  sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean;  sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    sd    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  AssertionFailedError  	86	9	replace
34	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  sd;  sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  sd;  sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    sd    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  AssertionFailedError  	86	10	replace
35	[BUG]  [BUGGY]  this.mean  =  sd;  sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [FE]  AssertionFailedError  [FE]          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  sd;  sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  sd;  sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    sd    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  AssertionFailedError  	86	10	replace
36	[BUG]  [BUGGY]  sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  variable  mean  might  not  have  been  initialized  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    sd    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  variable  mean  might  not  have  been  initialized	86	None	replace
37	[BUG]  [BUGGY]  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  variable  mean  might  already  have  been  assigned  [FE]    AssertionFailedError    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    sd    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  	non-compiled	[CE]  variable  mean  might  already  have  been  assigned	42	None	add
38	[BUG]  [BUGGY]  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVI  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVI  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    sd    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    if(sd  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVI	  	non-compiled	[CE]  ')'  expected	42	None	add
39	[BUG]  [BUGGY]  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [CE]  variable  mean  might  already  have  been  assigned  [FE]        AssertionFailedError    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    sd    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    if(sd  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }	  	non-compiled	[CE]  variable  mean  might  already  have  been  assigned	42	None	add
40	[BUG]  [BUGGY]  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    sd    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    if(sd  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,	  	non-compiled	[CE]  ')'  expected	42	None	add
41	[BUG]  [BUGGY]  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  This.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  This  [FE]            AssertionFailedError    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  This.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    sd    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    This.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  	non-compiled	[CE]  cannot  find  symbol  This	42	None	add
42	[BUG]  [BUGGY]  this.mean  =  mean;  This.mean  =  inverseCumAccuracy;  [CE]  cannot  find  symbol  This  [FE]        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean;  This.mean  =  inverseCumAccuracy;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean;  This.mean  =  inverseCumAccuracy;	  this.mean    =    inverseCumAccuracy;    This.mean    =    inverseCumAccuracy;    	non-compiled	[CE]  cannot  find  symbol  This	80	None	replace
43	[BUG]  [BUGGY]  this.mean  =  mean;  this.mean  =  inverseCumAccuracy;  [CE]  variable  mean  might  already  have  been  assigned  [FE]          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean;  this.mean  =  inverseCumAccuracy;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean;  this.mean  =  inverseCumAccuracy;	  this.mean    =    inverseCumAccuracy;    This.mean    =    inverseCumAccuracy;    	non-compiled	[CE]  variable  mean  might  already  have  been  assigned	80	None	replace
44	[BUG]  [BUGGY]  This.mean  =  inverseCumAccuracy;  [CE]  cannot  find  symbol  This  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  This.mean  =  inverseCumAccuracy;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	This.mean  =  inverseCumAccuracy;	  this.mean    =    inverseCumAccuracy;    This.mean    =    inverseCumAccuracy;    	non-compiled	[CE]  cannot  find  symbol  This	80	None	replace
45	[BUG]  [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.create(sd,  inverseCumAccuracy);  [CE]  cannot  find  symbol  [FE]                        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.create(sd,  inverseCumAccuracy);  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  NormalDistributionImpl.create(sd,  inverseCumAccuracy);	  this.standardDeviation    =    NormalDistributionImpl.create(sd,    solverAbsoluteAccuracy);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
46	[BUG]  [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.create(sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [CE]  cannot  find  symbol  [FE]                          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.create(sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  NormalDistributionImpl.create(sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);	  this.standardDeviation    =    NormalDistributionImpl.create(sd,    solverAbsoluteAccuracy);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
47	[BUG]  [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.create(sd,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  cannot  find  symbol  [FE]                            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.create(sd,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  NormalDistributionImpl.create(sd,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  this.standardDeviation    =    NormalDistributionImpl.create(sd,    solverAbsoluteAccuracy);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
48	[BUG]  [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.create(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  cannot  find  symbol  [FE]                              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.create(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  NormalDistributionImpl.create(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  this.standardDeviation    =    NormalDistributionImpl.create(sd,    solverAbsoluteAccuracy);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
49	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    This.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  AssertionFailedError  	27	7	replace
50	[BUG]  [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [FE]  AssertionFailedError  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    This.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  AssertionFailedError  	27	7	replace
51	[BUG]  [BUGGY]  This.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  This  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  This.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	This.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    This.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  cannot  find  symbol  This	27	None	replace
52	[BUG]  [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.newInstance(sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [CE]  cannot  find  symbol  [FE]                          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.newInstance(sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  NormalDistributionImpl.newInstance(sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);	  this.standardDeviation    =    NormalDistributionImpl.newInstance(sd,    inverseCumAccuracy,    solverAbsoluteAccuracy);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
53	[BUG]  [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.newInstance(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  cannot  find  symbol  [FE]                            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.newInstance(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  NormalDistributionImpl.newInstance(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  this.standardDeviation    =    NormalDistributionImpl.newInstance(sd,    inverseCumAccuracy,    solverAbsoluteAccuracy);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
54	[BUG]  [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.newInstance(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [CE]  cannot  find  symbol  [FE]                              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.newInstance(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  NormalDistributionImpl.newInstance(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);	  this.standardDeviation    =    NormalDistributionImpl.newInstance(sd,    inverseCumAccuracy,    solverAbsoluteAccuracy);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
55	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    mean;    	compilable	  [FE]  ConvergenceException  	39	7	replace
56	[BUG]  [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    mean;    	compilable	  [FE]  ConvergenceException  	39	7	replace
57	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean  +  1;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean  +  1;	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    mean;    	compilable	  [FE]  AssertionFailedError  	39	7	replace
58	[BUG]  [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean  +  1;  [FE]  AssertionFailedError  [FE]      ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean  +  1;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean  +  1;	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    mean;    	compilable	  [FE]  AssertionFailedError  	39	7	replace
59	[BUG]  [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.create(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  cannot  find  symbol  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.create(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  NormalDistributionImpl.create(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  this.standardDeviation    =    NormalDistributionImpl.create(sd,    inverseCumAccuracy,    solverAbsoluteAccuracy);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
60	[BUG]  [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.create(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [CE]  cannot  find  symbol  [FE]                        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.create(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  NormalDistributionImpl.create(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);	  this.standardDeviation    =    NormalDistributionImpl.create(sd,    inverseCumAccuracy,    solverAbsoluteAccuracy);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
61	[BUG]  [BUGGY]  this.standardDeviation  =  new  Double(sd  /  1);  [CE]  variable  standardDeviation  might  already  have  been  assigned  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  new  Double(sd  /  1);  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  new  Double(sd  /  1);	  this.standardDeviation    =    new    Double(sd    -    1);    	non-compiled	[CE]  variable  standardDeviation  might  already  have  been  assigned	37	None	replace
62	[BUG]  [BUGGY]  this.standardDeviation  =  new  Double(sd  -  2);  [CE]  variable  standardDeviation  might  already  have  been  assigned  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  new  Double(sd  -  2);  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  new  Double(sd  -  2);	  this.standardDeviation    =    new    Double(sd    -    1);    	non-compiled	[CE]  variable  standardDeviation  might  already  have  been  assigned	37	None	replace
63	[BUG]  [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  [CE]  variable  mean  might  already  have  been  assigned  [FE]    ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    mean;    this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;	  	non-compiled	[CE]  variable  mean  might  already  have  been  assigned	38	None	add
64	[BUG]  [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  This.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  [CE]  cannot  find  symbol  This  [FE]      ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  This.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    mean;    This.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;	  	non-compiled	[CE]  cannot  find  symbol  This	38	None	add
65	[BUG]  [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  [CE]  variable  mean  might  already  have  been  assigned  [FE]        ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    mean;    sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;	  	non-compiled	[CE]  variable  mean  might  already  have  been  assigned	38	None	add
66	[BUG]  [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  Mean;  [CE]  cannot  find  symbol  Mean  [FE]          ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  Mean;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    mean;    this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  Mean;	  	non-compiled	[CE]  cannot  find  symbol  Mean	38	None	add
67	[BUG]  [BUGGY]  This.mean  =  mean;  [CE]  cannot  find  symbol  This  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  This.mean  =  mean;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	This.mean  =  mean;	  this.mean    =    inverseCumAccuracy;    this.mean    =    inverseAccuracy;    	non-compiled	[CE]  cannot  find  symbol  This	82	None	replace
68	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  /  inverseCumAccuracy;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  mean  /  inverseCumAccuracy;	  this.mean    =    mean    +    inverseCumAccuracy;    	compilable	  [FE]  ConvergenceException  	78	7	replace
69	[BUG]  [BUGGY]  this.mean  =  mean  /  inverseCumAccuracy;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  /  inverseCumAccuracy;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean  /  inverseCumAccuracy;	  this.mean    =    mean    +    inverseCumAccuracy;    	compilable	  [FE]  ConvergenceException  	78	7	replace
70	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  sd  +  inverseCumAccuracy;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  sd  +  inverseCumAccuracy;	  this.mean    =    mean    +    inverseCumAccuracy;    	compilable	  [FE]  AssertionFailedError  	78	7	replace
71	[BUG]  [BUGGY]  this.mean  =  sd  +  inverseCumAccuracy;  [FE]  AssertionFailedError  [FE]      ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  sd  +  inverseCumAccuracy;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  sd  +  inverseCumAccuracy;	  this.mean    =    mean    +    inverseCumAccuracy;    	compilable	  [FE]  AssertionFailedError  	78	7	replace
72	[BUG]  [BUGGY]  this.mean  =  mean  +  sd;  this.mean  =  mean  +  sd;  [CE]  variable  mean  might  already  have  been  assigned  [FE]    AssertionFailedError    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  +  sd;  this.mean  =  mean  +  sd;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    +    sd;    this.mean  =  mean  +  sd;	  	non-compiled	[CE]  variable  mean  might  already  have  been  assigned	23	None	add
73	[BUG]  [BUGGY]  this.mean  =  mean  +  sd;  This.mean  =  mean  +  sd;  [CE]  cannot  find  symbol  This  [FE]      AssertionFailedError    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  +  sd;  This.mean  =  mean  +  sd;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    +    sd;    This.mean  =  mean  +  sd;	  	non-compiled	[CE]  cannot  find  symbol  This	23	None	add
74	[BUG]  [BUGGY]  this.mean  =  mean  +  sd;  this.mesan  =  mean  +  sd;  [CE]  cannot  find  symbol  mesan  [FE]        AssertionFailedError    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  +  sd;  this.mesan  =  mean  +  sd;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    +    sd;    this.mesan  =  mean  +  sd;	  	non-compiled	[CE]  cannot  find  symbol  mesan	23	None	add
75	[BUG]  [BUGGY]  this.mean  =  mean  +  sd;  this.mean  =  mean  +  sd);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  +  sd;  this.mean  =  mean  +  sd);  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    +    sd;    this.mean  =  mean  +  sd);	  	non-compiled	[CE]  ';'  expected	23	None	add
76	[BUG]  [BUGGY]  this.mean  =  mean;  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  expression  [FE]          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean;  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean;  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  this.mean    =    inverseCumAccuracy;    if(sd    <    =    0)    {    this.mean    =    inverseCumAccuracy;    }    else    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
77	[BUG]  [BUGGY]  if(mean  <  =  0)  {  this.mean  =  inverseCumAccuracy;  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  expression  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  if(mean  <  =  0)  {  this.mean  =  inverseCumAccuracy;  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	if(mean  <  =  0)  {  this.mean  =  inverseCumAccuracy;  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  this.mean    =    inverseCumAccuracy;    if(sd    <    =    0)    {    this.mean    =    inverseCumAccuracy;    }    else    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
78	[BUG]  [BUGGY]  if(mean  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  expression  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  if(mean  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	if(mean  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  this.mean    =    inverseCumAccuracy;    if(sd    <    =    0)    {    this.mean    =    inverseCumAccuracy;    }    else    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
79	[BUG]  [BUGGY]  this.mean  =  mean;  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  expression  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean;  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean;  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  this.mean    =    inverseCumAccuracy;    if(sd    <    =    0)    {    this.mean    =    inverseCumAccuracy;    }    else    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
80	[BUG]  [BUGGY]  this.sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  sd  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.sd    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  cannot  find  symbol  sd	16	None	replace
81	[BUG]  [BUGGY]  this.sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [CE]  cannot  find  symbol  sd  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;	  this.sd    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  cannot  find  symbol  sd	16	None	replace
82	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(null,  sd,  inverseCumAccuracy);  [CE]  cannot  find  symbol  StandardDistributionImpl  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(null,  sd,  inverseCumAccuracy);  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  StandardDistributionImpl.newInstance(null,  sd,  inverseCumAccuracy);	  this.standardDeviation    =    StandardDistributionImpl.newInstance(message,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  cannot  find  symbol  StandardDistributionImpl	93	None	replace
83	[BUG]  [BUGGY]  this.standardDeviation  =  sd  +  solverAbsoluteAccuracy;  [CE]  variable  solverAbsoluteAccuracy  might  not  have  been  initialized  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  sd  +  solverAbsoluteAccuracy;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  sd  +  solverAbsoluteAccuracy;	  this.standardDeviation    =    sd    +    inverseCumAccuracy;    	non-compiled	[CE]  variable  solverAbsoluteAccuracy  might  not  have  been  initialized	34	None	replace
84	[BUG]  [BUGGY]  this.standardDeviation  =  sd  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  variable  standardDeviation  might  already  have  been  assigned  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  sd  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  sd  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    sd    +    inverseCumAccuracy;    	non-compiled	[CE]  variable  standardDeviation  might  already  have  been  assigned	34	None	replace
85	[BUG]  [BUGGY]  this.standardDeviation  =  sd  *  inverseCumAccuracy;  [CE]  variable  standardDeviation  might  already  have  been  assigned  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  sd  *  inverseCumAccuracy;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  sd  *  inverseCumAccuracy;	  this.standardDeviation    =    sd    +    inverseCumAccuracy;    	non-compiled	[CE]  variable  standardDeviation  might  already  have  been  assigned	34	None	replace
86	[BUG]  [BUGGY]  this.standardDeviation  =  new  Double(sd  +  2);  [CE]  variable  standardDeviation  might  already  have  been  assigned  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  new  Double(sd  +  2);  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  new  Double(sd  +  2);	  this.standardDeviation    =    new    Double(sd    +    1);    	non-compiled	[CE]  variable  standardDeviation  might  already  have  been  assigned	36	None	replace
87	[BUG]  [BUGGY]  this.standardDeviation  =  new  Double(sd  +  3);  [CE]  variable  standardDeviation  might  already  have  been  assigned  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  new  Double(sd  +  3);  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  new  Double(sd  +  3);	  this.standardDeviation    =    new    Double(sd    +    1);    	non-compiled	[CE]  variable  standardDeviation  might  already  have  been  assigned	36	None	replace
88	[BUG]  [BUGGY]  this.mean  =  mean;  if(mean  <  =  0)  {  this.mean  =  sd;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean;  if(mean  <  =  0)  {  this.mean  =  sd;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean;  if(mean  <  =  0)  {  this.mean  =  sd;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  this.mean    =    sd;    if(mean    <    =    0)    {    this.mean    =    sd;    }    else    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
89	[BUG]  [BUGGY]  this.standardDeviation  =  mean;  if(mean  <  =  0)  {  this.mean  =  sd;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  mean;  if(mean  <  =  0)  {  this.mean  =  sd;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  mean;  if(mean  <  =  0)  {  this.mean  =  sd;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  this.mean    =    sd;    if(mean    <    =    0)    {    this.mean    =    sd;    }    else    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
90	[BUG]  [BUGGY]  this.standardDeviation  =  mean;  if(sd  <  =  0)  {  this.mean  =  sd;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  mean;  if(sd  <  =  0)  {  this.mean  =  sd;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  mean;  if(sd  <  =  0)  {  this.mean  =  sd;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  this.mean    =    sd;    if(mean    <    =    0)    {    this.mean    =    sd;    }    else    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
91	[BUG]  [BUGGY]  this.mean  =  mean;  if(sd  <  =  0)  {  this.mean  =  sd;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean;  if(sd  <  =  0)  {  this.mean  =  sd;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean;  if(sd  <  =  0)  {  this.mean  =  sd;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  this.mean    =    sd;    if(mean    <    =    0)    {    this.mean    =    sd;    }    else    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
92	[BUG]  [BUGGY]  this.mean  =  mean;  if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD  [CE]  ')'  expected  [FE]        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean;  if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean;  if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD	  this.mean    =    inverseCumAccuracy;    if(inverseCumAccuracy    >    MAX_INVERSE_ABSOLUTE_ACCURACY)    {    this.mean    =    inverseCumAccuracy;    }    else    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVI    	non-compiled	[CE]  ')'  expected	71	None	replace
93	[BUG]  [BUGGY]  this.mean  =  mean;  if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STAND  [CE]  ')'  expected  [FE]          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean;  if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STAND  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean;  if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STAND	  this.mean    =    inverseCumAccuracy;    if(inverseCumAccuracy    >    MAX_INVERSE_ABSOLUTE_ACCURACY)    {    this.mean    =    inverseCumAccuracy;    }    else    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVI    	non-compiled	[CE]  ')'  expected	71	None	replace
94	[BUG]  [BUGGY]  this.mean  =  mean;  if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats  [CE]  ')'  expected  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean;  if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean;  if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats	  this.mean    =    inverseCumAccuracy;    if(inverseCumAccuracy    >    MAX_INVERSE_ABSOLUTE_ACCURACY)    {    this.mean    =    inverseCumAccuracy;    }    else    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVI    	non-compiled	[CE]  ')'  expected	71	None	replace
95	[BUG]  [BUGGY]  this.mean  =  mean;  if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  [CE]  cannot  find  symbol  MAX_INVERSE_ABSOLUTE_ACCURACY  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean;  if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean;  if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }	  this.mean    =    inverseCumAccuracy;    if(inverseCumAccuracy    >    MAX_INVERSE_ABSOLUTE_ACCURACY)    {    this.mean    =    inverseCumAccuracy;    }    else    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVI    	non-compiled	[CE]  cannot  find  symbol  MAX_INVERSE_ABSOLUTE_ACCURACY	71	None	replace
96	[BUG]  [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  this.mean  =  DEFAUL  [CE]  illegal  start  of  expression  [FE]          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  this.mean  =  DEFAUL  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  this.mean  =  DEFAUL	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    if(sd    <    =    0)    {    this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    else    {    this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
97	[BUG]  [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  this.mean  =  DEFA  [CE]  illegal  start  of  expression  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  this.mean  =  DEFA  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  this.mean  =  DEFA	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    if(sd    <    =    0)    {    this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    else    {    this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
98	[BUG]  [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [CE]  illegal  start  of  expression  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    if(sd    <    =    0)    {    this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    else    {    this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
99	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(inverseCumAccuracy,  sd);  [CE]  cannot  find  symbol  StandardDistributionImpl  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(inverseCumAccuracy,  sd);  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  StandardDistributionImpl.newInstance(inverseCumAccuracy,  sd);	  this.standardDeviation    =    StandardDistributionImpl.newInstance(resolverAbsoluteAccuracy,    sd);    	non-compiled	[CE]  cannot  find  symbol  StandardDistributionImpl	57	None	replace
100	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(null,  sd);  [CE]  cannot  find  symbol  StandardDistributionImpl  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(null,  sd);  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  StandardDistributionImpl.newInstance(null,  sd);	  this.standardDeviation    =    StandardDistributionImpl.newInstance(resolverAbsoluteAccuracy,    sd);    	non-compiled	[CE]  cannot  find  symbol  StandardDistributionImpl	57	None	replace
101	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionFailedError    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  inverseCumAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  inverseCumAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    inverseCumAccuracy    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  ConvergenceException  	70	6	replace
102	[BUG]  [BUGGY]  this.mean  =  inverseCumAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [FE]  ConvergenceException  [FE]    AssertionFailedError    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  inverseCumAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  inverseCumAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    inverseCumAccuracy    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  ConvergenceException  	70	6	replace
103	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [CE]  cannot  find  symbol  StandardDistributionImpl  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);	  this.standardDeviation    =    StandardDistributionImpl.newInstance(sd,    inverseCumAccuracy,    solverAbsoluteAccuracy);    	non-compiled	[CE]  cannot  find  symbol  StandardDistributionImpl	20	None	replace
104	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  cannot  find  symbol  StandardDistributionImpl  [FE]                        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  this.standardDeviation    =    StandardDistributionImpl.newInstance(sd,    inverseCumAccuracy,    solverAbsoluteAccuracy);    	non-compiled	[CE]  cannot  find  symbol  StandardDistributionImpl	20	None	replace
105	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [CE]  cannot  find  symbol  StandardDistributionImpl  [FE]                          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);	  this.standardDeviation    =    StandardDistributionImpl.newInstance(sd,    inverseCumAccuracy,    solverAbsoluteAccuracy);    	non-compiled	[CE]  cannot  find  symbol  StandardDistributionImpl	20	None	replace
106	[BUG]  [BUGGY]  this.standardDeviation  =  normalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  normalDistributionImpl  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  normalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  normalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    NormalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  cannot  find  symbol  normalDistributionImpl	49	None	replace
107	[BUG]  [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  inverseCumAccuracy;  [CE]  bad  operand  types  for  binary  operator  '|'  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  inverseCumAccuracy;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  NormalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  inverseCumAccuracy;	  this.standardDeviation    =    NormalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '|'	49	None	replace
108	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [CE]  cannot  find  symbol  StandardDistributionImpl  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  StandardDistributionImpl.create(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  solverAbsoluteAccuracy);	  this.standardDeviation    =    StandardDistributionImpl.create(sd,    inverseCumAccuracy,    solverAbsoluteAccuracy);    	non-compiled	[CE]  cannot  find  symbol  StandardDistributionImpl	30	None	replace
109	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  cannot  find  symbol  StandardDistributionImpl  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  StandardDistributionImpl.create(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  this.standardDeviation    =    StandardDistributionImpl.create(sd,    inverseCumAccuracy,    solverAbsoluteAccuracy);    	non-compiled	[CE]  cannot  find  symbol  StandardDistributionImpl	30	None	replace
110	[BUG]  [BUGGY]  this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(mean  <  =  0)  {  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [CE]  illegal  start  of  expression  [FE]          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(mean  <  =  0)  {  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(mean  <  =  0)  {  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }	  this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    if(mean    <    =    0)    {    this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    else    {    this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
111	[BUG]  [BUGGY]  this.mean  =  mean;  this.message  =  sd;  [CE]  cannot  find  symbol  message  [FE]          AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean;  this.message  =  sd;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean;  this.message  =  sd;	  this.mean    =    sd;    this.message    =    sd;    	non-compiled	[CE]  cannot  find  symbol  message	59	None	replace
112	[BUG]  [BUGGY]  if(mean  <  =  0)  {  this.mean  =  sd;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  if(mean  <  =  0)  {  this.mean  =  sd;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	if(mean  <  =  0)  {  this.mean  =  sd;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  this.mean    =    sd;    if(sd    <    =    0)    {    this.mean    =    sd;    }    else    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
113	[BUG]  [BUGGY]  this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  variable  mean  might  already  have  been  assigned  [FE]    ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    *    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  	non-compiled	[CE]  variable  mean  might  already  have  been  assigned	46	None	add
114	[BUG]  [BUGGY]  this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  This.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  This  [FE]      ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  This.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    *    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    This.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  	non-compiled	[CE]  cannot  find  symbol  This	46	None	add
115	[BUG]  [BUGGY]  this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  inverseCumAccuracy  =  inverseCumAccuracy;  [CE]  variable  mean  might  already  have  been  assigned  [FE]        ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  inverseCumAccuracy  =  inverseCumAccuracy;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    *    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  inverseCumAccuracy  =  inverseCumAccuracy;	  	non-compiled	[CE]  variable  mean  might  already  have  been  assigned	46	None	add
116	[BUG]  [BUGGY]  this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  variable  mean  might  already  have  been  assigned  [FE]          ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    *    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  	non-compiled	[CE]  variable  mean  might  already  have  been  assigned	46	None	add
117	[BUG]  [BUGGY]  this.sd  =  DEFAULT_INVERSE_ABSOLUTE  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  sd  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.sd  =  DEFAULT_INVERSE_ABSOLUTE  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.sd  =  DEFAULT_INVERSE_ABSOLUTE  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.sd    =    DEFAULT_INVERSE_ABSOLUTE;    	non-compiled	[CE]  cannot  find  symbol  sd	63	None	replace
118	[BUG]  [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  mean  =  DEFAULT_  [CE]  illegal  start  of  expression  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  mean  =  DEFAULT_  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  mean  =  DEFAULT_	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    if(sd    <    =    0)    {    this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    else    {    mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
119	[BUG]  [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  mean  =  DEFAUL  [CE]  illegal  start  of  expression  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  mean  =  DEFAUL  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  mean  =  DEFAUL	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    if(sd    <    =    0)    {    this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    else    {    mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
120	[BUG]  [BUGGY]  this.mean  =  DEFAULT_STANDARD_DEVIATION;  if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  mean  =  DEFAULT_INVERSE_  [CE]  illegal  start  of  expression  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  DEFAULT_STANDARD_DEVIATION;  if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  mean  =  DEFAULT_INVERSE_  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  DEFAULT_STANDARD_DEVIATION;  if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  mean  =  DEFAULT_INVERSE_	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    if(sd    <    =    0)    {    this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    else    {    mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
121	[BUG]  [BUGGY]  this.mean  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  &  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  &  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  &  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    DEFAULT_INVERSION_ABSOLUTE_ACCURACY    |    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_INVERSION_ABSOLUTE_ACCURACY	8	None	replace
122	[BUG]  [BUGGY]  this.mean  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  |  mean;  [CE]  cannot  find  symbol  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  |  mean;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  |  mean;	  this.mean    =    DEFAULT_INVERSION_ABSOLUTE_ACCURACY    |    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_INVERSION_ABSOLUTE_ACCURACY	8	None	replace
123	[BUG]  [BUGGY]  this.mean  =  mean  |  DEFAULT_INVERSION_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  |  DEFAULT_INVERSION_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean  |  DEFAULT_INVERSION_ABSOLUTE_ACCURACY;	  this.mean    =    DEFAULT_INVERSION_ABSOLUTE_ACCURACY    |    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_INVERSION_ABSOLUTE_ACCURACY	8	None	replace
124	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  SQRT2PI  :  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  incompatible  types  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  SQRT2PI  :  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  SQRT2PI  :  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    SQRT2PI;    	non-compiled	[CE]  incompatible  types	7	None	replace
125	[BUG]  [BUGGY]  this.standardDeviation  =  SQRT2PI  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  variable  standardDeviation  might  already  have  been  assigned  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  SQRT2PI  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  SQRT2PI  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    SQRT2PI;    	non-compiled	[CE]  variable  standardDeviation  might  already  have  been  assigned	7	None	replace
126	[BUG]  [BUGGY]  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(mean  <  =  0)  {  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [CE]  illegal  start  of  expression  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(mean  <  =  0)  {  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(mean  <  =  0)  {  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }	  this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    if(mean    <    =    0)    {    this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    else    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
127	[BUG]  [BUGGY]  this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [CE]  illegal  start  of  expression  [FE]        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }	  this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    if(sd    <    =    0)    {    this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    else    {    this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
128	[BUG]  [BUGGY]  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [CE]  illegal  start  of  expression  [FE]          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }	  this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    if(sd    <    =    0)    {    this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    else    {    this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
129	[BUG]  [BUGGY]  this.mean  =  mean;  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  SQRT2PI);  }  [CE]  illegal  start  of  expression  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean;  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  SQRT2PI);  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean;  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  SQRT2PI);  }	  this.mean    =    inverseCumAccuracy;    if(sd    <    =    0)    {    this.mean    =    inverseCumAccuracy;    }    else    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    SQRT2PI);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
130	[BUG]  [BUGGY]  if(sd  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVI  [CE]  illegal  start  of  expression  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  if(sd  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVI  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	if(sd  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVI	  this.mean    =    inverseCumAccuracy;    if(sd    <    =    0)    {    this.mean    =    inverseCumAccuracy;    }    else    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    SQRT2PI);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
131	[BUG]  [BUGGY]  if(sd  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  s  [CE]  illegal  start  of  expression  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  if(sd  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  s  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	if(sd  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  s	  this.mean    =    inverseCumAccuracy;    if(sd    <    =    0)    {    this.mean    =    inverseCumAccuracy;    }    else    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    SQRT2PI);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
132	[BUG]  [BUGGY]  this.mean  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  +  mean  /  2;  [CE]  cannot  find  symbol  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  +  mean  /  2;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  +  mean  /  2;	  this.mean    =    DEFAULT_INVERSION_ABSOLUTE_ACCURACY    +    mean;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_INVERSION_ABSOLUTE_ACCURACY	9	None	replace
133	[BUG]  [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.newInstance(sd,  inverseCumAccuracy);  [CE]  cannot  find  symbol  [FE]                        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.newInstance(sd,  inverseCumAccuracy);  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  NormalDistributionImpl.newInstance(sd,  inverseCumAccuracy);	  this.standardDeviation    =    NormalDistributionImpl.newInstance(sd,    solverAbsoluteAccuracy);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
134	[BUG]  [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.newInstance(sd,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  cannot  find  symbol  [FE]                          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.newInstance(sd,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  NormalDistributionImpl.newInstance(sd,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  this.standardDeviation    =    NormalDistributionImpl.newInstance(sd,    solverAbsoluteAccuracy);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
135	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;	  this.mean    =    sd    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  AssertionFailedError  	43	8	replace
136	[BUG]  [BUGGY]  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;	  this.mean    =    sd    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  AssertionFailedError  	43	8	replace
137	[BUG]  [BUGGY]  this.mean  =  inverseCumAccuracy;  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  expression  [FE]        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  inverseCumAccuracy;  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  inverseCumAccuracy;  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
138	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  %  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  mean  %  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    this.mean    =    mean    %    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  ConvergenceException  	56	6	replace
139	[BUG]  [BUGGY]  this.mean  =  mean  %  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [FE]  ConvergenceException  [FE]          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  %  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean  %  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    this.mean    =    mean    %    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  ConvergenceException  	56	6	replace
140	[BUG]  [BUGGY]  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  this.mean  =  inverseCumAccuracy;  }  [CE]  illegal  start  of  expression  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  this.mean  =  inverseCumAccuracy;  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  this.mean  =  inverseCumAccuracy;  }	  this.mean    =    inverseCumAccuracy;    if(sd    <    =    0)    {    this.mean    =    inverseCumAccuracy;    }    else    {    this.mean    =    inverseCumAccuracy;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
141	[BUG]  [BUGGY]  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  this.mean  =  inverseCumAccuracy;  }  }  [CE]  illegal  start  of  expression  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  this.mean  =  inverseCumAccuracy;  }  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  this.mean  =  inverseCumAccuracy;  }  }	  this.mean    =    inverseCumAccuracy;    if(sd    <    =    0)    {    this.mean    =    inverseCumAccuracy;    }    else    {    this.mean    =    inverseCumAccuracy;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
142	[BUG]  [BUGGY]  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  expression  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  this.mean    =    inverseCumAccuracy;    if(sd    <    =    0)    {    this.mean    =    inverseCumAccuracy;    }    else    {    this.mean    =    inverseCumAccuracy;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
143	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;	  this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    1;    	compilable	  [FE]  AssertionFailedError  	45	7	replace
144	[BUG]  [BUGGY]  this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;	  this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    1;    	compilable	  [FE]  AssertionFailedError  	45	7	replace
145	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;	  this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    1;    	compilable	  [FE]  AssertionFailedError  	45	8	replace
146	[BUG]  [BUGGY]  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;	  this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    1;    	compilable	  [FE]  AssertionFailedError  	45	8	replace
147	[BUG]  [BUGGY]  this.mean  =  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  variable  mean  might  already  have  been  assigned  [FE]    ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    this.mean  =  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  	non-compiled	[CE]  variable  mean  might  already  have  been  assigned	40	None	add
148	[BUG]  [BUGGY]  this.mean  =  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  This.mean  =  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  This  [FE]      ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  This.mean  =  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    This.mean  =  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  	non-compiled	[CE]  cannot  find  symbol  This	40	None	add
149	[BUG]  [BUGGY]  this.mean  =  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  inverseCumAccuracy  =  inverseCumAccuracy;  [CE]  variable  mean  might  already  have  been  assigned  [FE]        ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  inverseCumAccuracy  =  inverseCumAccuracy;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    this.mean  =  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  inverseCumAccuracy  =  inverseCumAccuracy;	  	non-compiled	[CE]  variable  mean  might  already  have  been  assigned	40	None	add
150	[BUG]  [BUGGY]  this.mean  =  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  mean  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  variable  mean  might  already  have  been  assigned  [FE]          ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  mean  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    this.mean  =  mean  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  	non-compiled	[CE]  variable  mean  might  already  have  been  assigned	40	None	add
151	[BUG]  [BUGGY]  this.standardDeviation  =  SQRT2PI.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  SQRT2PI.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  double  cannot  be  dereferenced  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  SQRT2PI.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  SQRT2PI.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  SQRT2PI.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  SQRT2PI.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    SQRT2PI.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  double  cannot  be  dereferenced	48	None	replace
152	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  sd  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  sd  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    mean    -    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  AssertionFailedError  	97	7	replace
153	[BUG]  [BUGGY]  this.mean  =  sd  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [FE]  AssertionFailedError  [FE]    ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  sd  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  sd  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    mean    -    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  AssertionFailedError  	97	7	replace
154	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  -  mean;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  -  mean;	  this.mean    =    mean    -    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  ConvergenceException  	97	7	replace
155	[BUG]  [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  -  mean;  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  -  mean;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  -  mean;	  this.mean    =    mean    -    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  ConvergenceException  	97	7	replace
156	[BUG]  [BUGGY]  This.mean  =  sd;  [CE]  cannot  find  symbol  This  [FE]        AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  This.mean  =  sd;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	This.mean  =  sd;	  this.mean    =    sd;    This.mean    =    sd;    	non-compiled	[CE]  cannot  find  symbol  This	58	None	replace
157	[BUG]  [BUGGY]  this.mean  =  mean;  this.mean  =  sd;  [CE]  variable  mean  might  already  have  been  assigned  [FE]          AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean;  this.mean  =  sd;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean;  this.mean  =  sd;	  this.mean    =    sd;    This.mean    =    sd;    	non-compiled	[CE]  variable  mean  might  already  have  been  assigned	58	None	replace
158	[BUG]  [BUGGY]  this.mean  =  mean;  This.mean  =  sd;  [CE]  cannot  find  symbol  This  [FE]            AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean;  This.mean  =  sd;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean;  This.mean  =  sd;	  this.mean    =    sd;    This.mean    =    sd;    	non-compiled	[CE]  cannot  find  symbol  This	58	None	replace
159	[BUG]  [BUGGY]  this.mean  =  mean  *  DEFAULT_INVERSION_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  *  DEFAULT_INVERSION_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean  *  DEFAULT_INVERSION_ABSOLUTE_ACCURACY;	  this.mean    =    mean    +    DEFAULT_INVERSION_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_INVERSION_ABSOLUTE_ACCURACY	61	None	replace
160	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    sd    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  AssertionFailedError  	4	10	replace
161	[BUG]  [BUGGY]  sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [FE]  AssertionFailedError  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    sd    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  AssertionFailedError  	4	10	replace
162	[BUG]  [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  bad  operand  types  for  binary  operator  '|'  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    sd    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '|'	4	None	replace
163	[BUG]  [BUGGY]  this.mean  =  DEFAULT_SQRT2PI;  [CE]  cannot  find  symbol  DEFAULT_SQRT2PI  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  DEFAULT_SQRT2PI;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  DEFAULT_SQRT2PI;	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    sd    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_SQRT2PI	4	None	replace
164	[BUG]  [BUGGY]  this.sd  =  mean,  inverseCumAccuracy;  [CE]  ';'  expected  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.sd  =  mean,  inverseCumAccuracy;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.sd  =  mean,  inverseCumAccuracy;	  this.sd    =    sd,    inverseCumAccuracy;    	non-compiled	[CE]  ';'  expected	84	None	replace
165	[BUG]  [BUGGY]  this.sd  =  sd,  inverseCumAccuracy  +  1;  [CE]  ';'  expected  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.sd  =  sd,  inverseCumAccuracy  +  1;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.sd  =  sd,  inverseCumAccuracy  +  1;	  this.sd    =    sd,    inverseCumAccuracy;    	non-compiled	[CE]  ';'  expected	84	None	replace
166	[BUG]  [BUGGY]  if(mean  <  =  0)  {  this.mean  =  sd;  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  if(mean  <  =  0)  {  this.mean  =  sd;  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	if(mean  <  =  0)  {  this.mean  =  sd;  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  this.mean    =    sd;    if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
167	[BUG]  [BUGGY]  this.standardDeviation  =  sd  +  2;  [CE]  variable  standardDeviation  might  already  have  been  assigned  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  sd  +  2;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  sd  +  2;	  this.standardDeviation    =    sd    +    1;    	non-compiled	[CE]  variable  standardDeviation  might  already  have  been  assigned	15	None	replace
168	[BUG]  [BUGGY]  this.standardDeviation  =  sd  +  3;  [CE]  variable  standardDeviation  might  already  have  been  assigned  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  sd  +  3;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  sd  +  3;	  this.standardDeviation    =    sd    +    1;    	non-compiled	[CE]  variable  standardDeviation  might  already  have  been  assigned	15	None	replace
169	[BUG]  [BUGGY]  this.standardDeviation  =  sd  +  1L;  [CE]  variable  standardDeviation  might  already  have  been  assigned  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  sd  +  1L;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  sd  +  1L;	  this.standardDeviation    =    sd    +    1;    	non-compiled	[CE]  variable  standardDeviation  might  already  have  been  assigned	15	None	replace
170	[BUG]  [BUGGY]  this.mean  =  mean  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  mean  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  variable  mean  might  already  have  been  assigned  [FE]    ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  mean  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    -    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    this.mean  =  mean  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  	non-compiled	[CE]  variable  mean  might  already  have  been  assigned	96	None	add
171	[BUG]  [BUGGY]  this.mean  =  mean  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  This.mean  =  mean  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  This  [FE]      ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  This.mean  =  mean  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    -    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    This.mean  =  mean  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  	non-compiled	[CE]  cannot  find  symbol  This	96	None	add
172	[BUG]  [BUGGY]  this.mean  =  mean  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  variable  mean  might  already  have  been  assigned  [FE]        ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    -    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    this.mean  =  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  	non-compiled	[CE]  variable  mean  might  already  have  been  assigned	96	None	add
173	[BUG]  [BUGGY]  this.mean  =  mean  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  mean  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  ';'  expected  [FE]          ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  mean  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    -    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    this.mean  =  mean  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  	non-compiled	[CE]  ';'  expected	96	None	add
174	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  sd  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  sd  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    mean    *    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  ConvergenceException  	47	7	replace
175	[BUG]  [BUGGY]  this.mean  =  sd  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  sd  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  sd  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    mean    *    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  ConvergenceException  	47	7	replace
176	[BUG]  [BUGGY]  if(sd  <  =  0)  {  this.mean  =  sd;  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  if(sd  <  =  0)  {  this.mean  =  sd;  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	if(sd  <  =  0)  {  this.mean  =  sd;  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  this.mean    =    sd;    if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    this.mean    =    sd;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
177	[BUG]  [BUGGY]  this.standardDeviation  =  mean;  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  mean;  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  mean;  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  this.mean    =    sd;    if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    this.mean    =    sd;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
178	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  sd  /  mean;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  sd  /  mean;	  this.mean    =    mean    /    sd;    	compilable	  [FE]  ConvergenceException  	67	8	replace
179	[BUG]  [BUGGY]  this.mean  =  sd  /  mean;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  sd  /  mean;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  sd  /  mean;	  this.mean    =    mean    /    sd;    	compilable	  [FE]  ConvergenceException  	67	8	replace
180	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  /  sd  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  mean  /  sd  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    mean    /    sd;    	compilable	  [FE]  ConvergenceException  	67	6	replace
181	[BUG]  [BUGGY]  this.mean  =  mean  /  sd  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  /  sd  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean  /  sd  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    mean    /    sd;    	compilable	  [FE]  ConvergenceException  	67	6	replace
182	[BUG]  [BUGGY]  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  super();  this.mean  =  inverseCumAccuracy;  }  [CE]  illegal  start  of  expression  [FE]          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  super();  this.mean  =  inverseCumAccuracy;  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  super();  this.mean  =  inverseCumAccuracy;  }	  this.mean    =    inverseCumAccuracy;    super();    this.mean    =    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
183	[BUG]  [BUGGY]  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  super();  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  expression  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  super();  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  super();  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  this.mean    =    inverseCumAccuracy;    super();    this.mean    =    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
184	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  inverseCumAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  inverseCumAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    inverseCumAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  ConvergenceException  	65	7	replace
185	[BUG]  [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  inverseCumAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [FE]  ConvergenceException  [FE]          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  inverseCumAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  inverseCumAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    inverseCumAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  ConvergenceException  	65	7	replace
186	[BUG]  [BUGGY]  inverseCumAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  variable  mean  might  not  have  been  initialized  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  inverseCumAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	inverseCumAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    inverseCumAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  variable  mean  might  not  have  been  initialized	65	None	replace
187	[BUG]  [BUGGY]  n  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  inverseCumAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACC  [CE]  ';'  expected  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  n  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  inverseCumAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACC  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	n  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  inverseCumAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACC	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    inverseCumAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  ';'  expected	65	None	replace
188	[BUG]  [BUGGY]  n  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  inverseCumAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  n  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  n  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  inverseCumAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	n  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  inverseCumAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    inverseCumAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  cannot  find  symbol  n	65	None	replace
189	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  cannot  find  symbol  StandardDistributionImpl  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  this.standardDeviation    =    StandardDistributionImpl.newInstance(sd,    solverAbsoluteAccuracy);    	non-compiled	[CE]  cannot  find  symbol  StandardDistributionImpl	19	None	replace
190	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  cannot  find  symbol  StandardDistributionImpl  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  this.standardDeviation    =    StandardDistributionImpl.newInstance(sd,    solverAbsoluteAccuracy);    	non-compiled	[CE]  cannot  find  symbol  StandardDistributionImpl	19	None	replace
191	[BUG]  [BUGGY]  inverseCumAccuracy;  if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STAND  [CE]  not  a  statement  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  inverseCumAccuracy;  if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STAND  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	inverseCumAccuracy;  if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STAND	  this.mean    =    inverseCumAccuracy;    if(inverseCumAccuracy    >    MAX_INVERSE_ABSOLUTE_ACCURACY)    {    this.mean    =    inverseCumAccuracy;    }    else    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    	non-compiled	[CE]  not  a  statement	73	None	replace
192	[BUG]  [BUGGY]  inverseCumAccuracy;  if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats  [CE]  not  a  statement  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  inverseCumAccuracy;  if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	inverseCumAccuracy;  if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats	  this.mean    =    inverseCumAccuracy;    if(inverseCumAccuracy    >    MAX_INVERSE_ABSOLUTE_ACCURACY)    {    this.mean    =    inverseCumAccuracy;    }    else    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    	non-compiled	[CE]  not  a  statement	73	None	replace
193	[BUG]  [BUGGY]  inverseCumAccuracy;  if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(Lo  [CE]  not  a  statement  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  inverseCumAccuracy;  if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(Lo  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	inverseCumAccuracy;  if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(Lo	  this.mean    =    inverseCumAccuracy;    if(inverseCumAccuracy    >    MAX_INVERSE_ABSOLUTE_ACCURACY)    {    this.mean    =    inverseCumAccuracy;    }    else    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    	non-compiled	[CE]  not  a  statement	73	None	replace
194	[BUG]  [BUGGY]  inverseCumAccuracy;  if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD  [CE]  not  a  statement  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  inverseCumAccuracy;  if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	inverseCumAccuracy;  if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD	  this.mean    =    inverseCumAccuracy;    if(inverseCumAccuracy    >    MAX_INVERSE_ABSOLUTE_ACCURACY)    {    this.mean    =    inverseCumAccuracy;    }    else    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    	non-compiled	[CE]  not  a  statement	73	None	replace
195	[BUG]  [BUGGY]  this.mean  =  mean;  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);  }  [CE]  illegal  start  of  expression  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean;  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean;  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);  }	  this.mean    =    inverseCumAccuracy;    if(sd    <    =    0)    {    this.mean    =    inverseCumAccuracy;    }    else    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
196	[BUG]  [BUGGY]  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  expression  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  this.mean    =    inverseCumAccuracy;    if(sd    <    =    0)    {    this.mean    =    inverseCumAccuracy;    }    else    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
197	[BUG]  [BUGGY]  this.mean  =  sd  /  DEFAULT_INVERSION_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  sd  /  DEFAULT_INVERSION_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  sd  /  DEFAULT_INVERSION_ABSOLUTE_ACCURACY;	  this.mean    =    mean    /    DEFAULT_INVERSION_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_INVERSION_ABSOLUTE_ACCURACY	98	None	replace
198	[BUG]  [BUGGY]  this.mean  =  mean  /  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  +  1;  [CE]  cannot  find  symbol  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  /  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  +  1;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean  /  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  +  1;	  this.mean    =    mean    /    DEFAULT_INVERSION_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_INVERSION_ABSOLUTE_ACCURACY	98	None	replace
199	[BUG]  [BUGGY]  this.standardDeviation  =  inverseCumAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  variable  standardDeviation  might  already  have  been  assigned  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  inverseCumAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  inverseCumAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    inverseCumAccuracy    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  variable  standardDeviation  might  already  have  been  assigned	79	None	replace
200	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  inverseCumAccuracy;  [CE]  variable  standardDeviation  might  already  have  been  assigned  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  inverseCumAccuracy;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  inverseCumAccuracy;	  this.standardDeviation    =    inverseCumAccuracy    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  variable  standardDeviation  might  already  have  been  assigned	79	None	replace
201	[BUG]  [BUGGY]  this.standardDeviation  =  new  Double(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy);  [CE]  no  suitable  constructor  found  for  Double(double,double,double)  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  new  Double(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy);  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  new  Double(sd,  inverseCumAccuracy,  solverAbsoluteAccuracy);	  this.standardDeviation    =    new    Double(sd,    inverseCumAccuracy);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(double,double,double)	35	None	replace
202	[BUG]  [BUGGY]  this.standardDeviation  =  new  Double(sd,  solverAbsoluteAccuracy);  [CE]  no  suitable  constructor  found  for  Double(double,double)  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  new  Double(sd,  solverAbsoluteAccuracy);  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  new  Double(sd,  solverAbsoluteAccuracy);	  this.standardDeviation    =    new    Double(sd,    inverseCumAccuracy);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(double,double)	35	None	replace
203	[BUG]  [BUGGY]  this.standardDeviation  =  new  Double(mean,  sd,  inverseCumAccuracy);  [CE]  no  suitable  constructor  found  for  Double(double,double,double)  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  new  Double(mean,  sd,  inverseCumAccuracy);  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  new  Double(mean,  sd,  inverseCumAccuracy);	  this.standardDeviation    =    new    Double(sd,    inverseCumAccuracy);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(double,double,double)	35	None	replace
204	[BUG]  [BUGGY]  this.standardDeviation  =  new  Double(message,  sd,  inverseCumAccuracy);  [CE]  cannot  find  symbol  message  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  new  Double(message,  sd,  inverseCumAccuracy);  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  new  Double(message,  sd,  inverseCumAccuracy);	  this.standardDeviation    =    new    Double(sd,    inverseCumAccuracy);    	non-compiled	[CE]  cannot  find  symbol  message	35	None	replace
205	[BUG]  [BUGGY]  this.mean  =  mean;  if(mean  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean;  if(mean  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean;  if(mean  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  this.mean    =    sd;    if(mean    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
206	[BUG]  [BUGGY]  this.standardDeviation  =  mean;  if(mean  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  mean;  if(mean  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  mean;  if(mean  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  this.mean    =    sd;    if(mean    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    this.mean    =    sd;    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
207	[BUG]  [BUGGY]  if(mean  <  =  0)  {  this.mean  =  sd;  if(mean  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  if(mean  <  =  0)  {  this.mean  =  sd;  if(mean  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	if(mean  <  =  0)  {  this.mean  =  sd;  if(mean  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  this.mean    =    sd;    if(mean    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    this.mean    =    sd;    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
208	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  cannot  find  symbol  StandardDistributionImpl  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  StandardDistributionImpl.create(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  this.standardDeviation    =    StandardDistributionImpl.create(sd,    solverAbsoluteAccuracy);    	non-compiled	[CE]  cannot  find  symbol  StandardDistributionImpl	29	None	replace
209	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [CE]  cannot  find  symbol  StandardDistributionImpl  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  StandardDistributionImpl.create(sd,  solverAbsoluteAccuracy,  inverseCumAccuracy);	  this.standardDeviation    =    StandardDistributionImpl.create(sd,    solverAbsoluteAccuracy);    	non-compiled	[CE]  cannot  find  symbol  StandardDistributionImpl	29	None	replace
210	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    DEFAULT_INVERSION_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_INVERSION_ABSOLUTE_ACCURACY	76	None	replace
211	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  +  1;  [CE]  cannot  find  symbol  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  +  1;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  +  1;	  this.standardDeviation    =    DEFAULT_INVERSION_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_INVERSION_ABSOLUTE_ACCURACY	76	None	replace
212	[BUG]  [BUGGY]  timeout  [FE]          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  sd  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	sd  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    sd    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	timeout	95	1	replace
213	[BUG]  [BUGGY]  sd  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  timeout  [FE]          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  sd  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	sd  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    sd    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	timeout	95	1	replace
214	[BUG]  [BUGGY]  this.sd  =  sd  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  sd  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.sd  =  sd  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.sd  =  sd  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.sd    =    mean;    	non-compiled	[CE]  cannot  find  symbol  sd	17	None	replace
215	[BUG]  [BUGGY]  this.mean  =  mean;  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  else  {  this.mean  =  sd;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean;  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  else  {  this.mean  =  sd;  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean;  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  else  {  this.mean  =  sd;  }	  this.mean    =    sd;    if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    else    {    this.mean    =    sd;    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
216	[BUG]  [BUGGY]  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [CE]  variable  mean  might  already  have  been  assigned  [FE]    AssertionFailedError    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    1;    this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;	  	non-compiled	[CE]  variable  mean  might  already  have  been  assigned	44	None	add
217	[BUG]  [BUGGY]  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  This.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [CE]  cannot  find  symbol  This  [FE]      AssertionFailedError    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  This.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    1;    This.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;	  	non-compiled	[CE]  cannot  find  symbol  This	44	None	add
218	[BUG]  [BUGGY]  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  2;  [CE]  variable  mean  might  already  have  been  assigned  [FE]        AssertionFailedError    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  2;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    1;    this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  2;	  	non-compiled	[CE]  variable  mean  might  already  have  been  assigned	44	None	add
219	[BUG]  [BUGGY]  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [CE]  variable  mean  might  already  have  been  assigned  [FE]          AssertionFailedError    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    1;    this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;	  	non-compiled	[CE]  variable  mean  might  already  have  been  assigned	44	None	add
220	[BUG]  [BUGGY]  this.mean  =  mean;  if(mean  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  else  {  this.mean  =  sd;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean;  if(mean  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  else  {  this.mean  =  sd;  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean;  if(mean  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  else  {  this.mean  =  sd;  }	  this.mean    =    sd;    if(mean    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    else    {    this.mean    =    sd;    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
221	[BUG]  [BUGGY]  this.standardDeviation  =  mean;  if(mean  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  else  {  this.mean  =  sd;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  mean;  if(mean  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  else  {  this.mean  =  sd;  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  mean;  if(mean  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  else  {  this.mean  =  sd;  }	  this.mean    =    sd;    if(mean    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    else    {    this.mean    =    sd;    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
222	[BUG]  [BUGGY]  This.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  This  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  This.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	This.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    This.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  cannot  find  symbol  This	3	None	replace
223	[BUG]  [BUGGY]  timeout  [FE]        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  sd  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  sd  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    sd    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	timeout	55	1	replace
224	[BUG]  [BUGGY]  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  sd  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  timeout  [FE]        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  sd  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  sd  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    sd    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	timeout	55	1	replace
225	[BUG]  [BUGGY]  timeout  [FE]          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  sd  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  sd  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    sd    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	timeout	55	1	replace
226	[BUG]  [BUGGY]  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  sd  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  timeout  [FE]          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  sd  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  sd  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    sd    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	timeout	55	1	replace
227	[BUG]  [BUGGY]  timeout  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  sd  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  sd  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    sd    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	timeout	55	1	replace
228	[BUG]  [BUGGY]  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  sd  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  timeout  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  sd  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  sd  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    sd    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	timeout	55	1	replace
229	[BUG]  [BUGGY]  sd  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  variable  mean  might  not  have  been  initialized  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  sd  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	sd  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    sd    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  variable  mean  might  not  have  been  initialized	55	None	replace
230	[BUG]  [BUGGY]  this.mean  =  mean  +  inverseCumAccuracy;  this.mean  =  mean  +  inverseCumAccuracy;  [CE]  variable  mean  might  already  have  been  assigned  [FE]    ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  +  inverseCumAccuracy;  this.mean  =  mean  +  inverseCumAccuracy;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    +    inverseCumAccuracy;    this.mean  =  mean  +  inverseCumAccuracy;	  	non-compiled	[CE]  variable  mean  might  already  have  been  assigned	77	None	add
231	[BUG]  [BUGGY]  this.mean  =  mean  +  inverseCumAccuracy;  This.mean  =  mean  +  inverseCumAccuracy;  [CE]  cannot  find  symbol  This  [FE]      ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  +  inverseCumAccuracy;  This.mean  =  mean  +  inverseCumAccuracy;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    +    inverseCumAccuracy;    This.mean  =  mean  +  inverseCumAccuracy;	  	non-compiled	[CE]  cannot  find  symbol  This	77	None	add
232	[BUG]  [BUGGY]  this.mean  =  mean  +  inverseCumAccuracy;  this.mean  =  mean  -  inverseCumAccuracy;  [CE]  variable  mean  might  already  have  been  assigned  [FE]        ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  +  inverseCumAccuracy;  this.mean  =  mean  -  inverseCumAccuracy;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    +    inverseCumAccuracy;    this.mean  =  mean  -  inverseCumAccuracy;	  	non-compiled	[CE]  variable  mean  might  already  have  been  assigned	77	None	add
233	[BUG]  [BUGGY]  this.mean  =  mean  +  inverseCumAccuracy;  this.mesan  =  mean  +  inverseCumAccuracy;  [CE]  cannot  find  symbol  mesan  [FE]          ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  +  inverseCumAccuracy;  this.mesan  =  mean  +  inverseCumAccuracy;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    +    inverseCumAccuracy;    this.mesan  =  mean  +  inverseCumAccuracy;	  	non-compiled	[CE]  cannot  find  symbol  mesan	77	None	add
234	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(inverseAccumAccuracy,  sd);  [CE]  cannot  find  symbol  inverseAccumAccuracy  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(inverseAccumAccuracy,  sd);  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  StandardDistributionImpl.newInstance(inverseAccumAccuracy,  sd);	  this.standardDeviation    =    StandardDistributionImpl.newInstance(resolverAbsoluteAccuracy,    sd);    	non-compiled	[CE]  cannot  find  symbol  inverseAccumAccuracy	57	None	replace
235	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(inverseAccuracy,  sd);  [CE]  cannot  find  symbol  inverseAccuracy  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(inverseAccuracy,  sd);  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  StandardDistributionImpl.newInstance(inverseAccuracy,  sd);	  this.standardDeviation    =    StandardDistributionImpl.newInstance(resolverAbsoluteAccuracy,    sd);    	non-compiled	[CE]  cannot  find  symbol  inverseAccuracy	57	None	replace
236	[BUG]  [BUGGY]  if(mean  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [CE]  illegal  start  of  expression  [FE]          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  if(mean  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	if(mean  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    if(sd    <    =    0)    {    this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    else    {    this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
237	[BUG]  [BUGGY]  if(mean  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  this.me  [CE]  illegal  start  of  expression  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  if(mean  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  this.me  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	if(mean  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  this.me	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    if(sd    <    =    0)    {    this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    else    {    this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
238	[BUG]  [BUGGY]  if(mean  <  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [CE]  illegal  start  of  expression  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  if(mean  <  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	if(mean  <  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    if(sd    <    =    0)    {    this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    else    {    this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
239	[BUG]  [BUGGY]  if(mean  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  this  [CE]  illegal  start  of  expression  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  if(mean  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  this  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	if(mean  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  this	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    if(sd    <    =    0)    {    this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    else    {    this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
240	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURacy;  [CE]  cannot  find  symbol  DEFAULT_INVERSE_ABSOLUTE_ACCURacy  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURacy;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURacy;	  this.standardDeviation    =    solverAbsoluteAccuracy;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_INVERSE_ABSOLUTE_ACCURacy	85	None	replace
241	[BUG]  [BUGGY]  this.mean  =  mean  /  sd;  this.mean  =  mean  %  sd;  [CE]  variable  mean  might  already  have  been  assigned  [FE]    ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  /  sd;  this.mean  =  mean  %  sd;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    /    sd;    this.mean  =  mean  %  sd;	  	non-compiled	[CE]  variable  mean  might  already  have  been  assigned	66	None	add
242	[BUG]  [BUGGY]  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  Not  [CE]  illegal  start  of  expression  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  Not  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  Not	  this.mean    =    inverseCumAccuracy;    if(inverseCumAccuracy    >    MAX_INVERSE_ABSOLUTE_ACCURACY)    {    this.mean    =    inverseCumAccuracy;    }    else    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
243	[BUG]  [BUGGY]  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictly  [CE]  illegal  start  of  expression  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictly  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictly	  this.mean    =    inverseCumAccuracy;    if(inverseCumAccuracy    >    MAX_INVERSE_ABSOLUTE_ACCURACY)    {    this.mean    =    inverseCumAccuracy;    }    else    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
244	[BUG]  [BUGGY]  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  [CE]  illegal  start  of  expression  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }	  this.mean    =    inverseCumAccuracy;    if(inverseCumAccuracy    >    MAX_INVERSE_ABSOLUTE_ACCURACY)    {    this.mean    =    inverseCumAccuracy;    }    else    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
245	[BUG]  [BUGGY]  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStric  [CE]  illegal  start  of  expression  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStric  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStric	  this.mean    =    inverseCumAccuracy;    if(inverseCumAccuracy    >    MAX_INVERSE_ABSOLUTE_ACCURACY)    {    this.mean    =    inverseCumAccuracy;    }    else    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
246	[BUG]  [BUGGY]  this.standardDeviation  =  inverseCumAccuracy  +  sd;  [CE]  variable  standardDeviation  might  already  have  been  assigned  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  inverseCumAccuracy  +  sd;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  inverseCumAccuracy  +  sd;	  this.standardDeviation    =    sd    +    inverseCumAccuracy;    	non-compiled	[CE]  variable  standardDeviation  might  already  have  been  assigned	34	None	replace
247	[BUG]  [BUGGY]  this.standardDeviation  =  solverAbsoluteAccuracy  +  inverseCumAccuracy;  [CE]  variable  solverAbsoluteAccuracy  might  not  have  been  initialized  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  solverAbsoluteAccuracy  +  inverseCumAccuracy;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  solverAbsoluteAccuracy  +  inverseCumAccuracy;	  this.standardDeviation    =    sd    +    inverseCumAccuracy;    	non-compiled	[CE]  variable  solverAbsoluteAccuracy  might  not  have  been  initialized	34	None	replace
248	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  inverseCumAccuracy;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  inverseCumAccuracy;	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    mean;    	compilable	  [FE]  ConvergenceException  	39	7	replace
249	[BUG]  [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  inverseCumAccuracy;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  inverseCumAccuracy;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  inverseCumAccuracy;	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    mean;    	compilable	  [FE]  ConvergenceException  	39	7	replace
250	[BUG]  [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(Math.abs(mean),  inverseCumAccuracy);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(Math.abs(mean),  inverseCumAccuracy);  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	AssertionFailedError  t  =  new  AssertionFailedError(Math.abs(mean),  inverseCumAccuracy);	  this.mean    =    sd;    if(mean    <    =    0)    {    this.mean    =    sd;    }    else    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
251	[BUG]  [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(message,  sd,  inverseCumAccuracy);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(message,  sd,  inverseCumAccuracy);  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	AssertionFailedError  t  =  new  AssertionFailedError(message,  sd,  inverseCumAccuracy);	  this.mean    =    sd;    if(mean    <    =    0)    {    this.mean    =    sd;    }    else    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
252	[BUG]  [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(mean,  inverseCumAccuracy);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(mean,  inverseCumAccuracy);  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	AssertionFailedError  t  =  new  AssertionFailedError(mean,  inverseCumAccuracy);	  this.mean    =    sd;    if(mean    <    =    0)    {    this.mean    =    sd;    }    else    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
253	[BUG]  [BUGGY]  if(mean  <  =  0)  {  this.mean  =  inverseCumAccuracy;  super();  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVI  [CE]  illegal  start  of  expression  [FE]          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  if(mean  <  =  0)  {  this.mean  =  inverseCumAccuracy;  super();  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVI  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	if(mean  <  =  0)  {  this.mean  =  inverseCumAccuracy;  super();  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVI	  this.mean    =    inverseCumAccuracy;    super();    this.mean    =    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
254	[BUG]  [BUGGY]  if(mean  <  =  0)  {  this.mean  =  inverseCumAccuracy;  super();  this.mean  =  inverseCumAccuracy;  }  [CE]  illegal  start  of  expression  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  if(mean  <  =  0)  {  this.mean  =  inverseCumAccuracy;  super();  this.mean  =  inverseCumAccuracy;  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	if(mean  <  =  0)  {  this.mean  =  inverseCumAccuracy;  super();  this.mean  =  inverseCumAccuracy;  }	  this.mean    =    inverseCumAccuracy;    super();    this.mean    =    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
255	[BUG]  [BUGGY]  if(mean  <  =  0)  {  this.mean  =  inverseCumAccuracy;  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD  [CE]  illegal  start  of  expression  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  if(mean  <  =  0)  {  this.mean  =  inverseCumAccuracy;  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	if(mean  <  =  0)  {  this.mean  =  inverseCumAccuracy;  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD	  this.mean    =    inverseCumAccuracy;    if(sd    <    =    0)    {    this.mean    =    inverseCumAccuracy;    }    else    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
256	[BUG]  [BUGGY]  this.mean  =  mean;  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION  [CE]  illegal  start  of  expression  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean;  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean;  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION	  this.mean    =    inverseCumAccuracy;    if(sd    <    =    0)    {    this.mean    =    inverseCumAccuracy;    }    else    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
257	[BUG]  [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(inverseCumAccuracy  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  this.me  [CE]  not  a  statement  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(inverseCumAccuracy  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  this.me  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(inverseCumAccuracy  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  this.me	  this.mean    =    inverseCumAccuracy;    if(inverseCumAccuracy    >    MAX_INVERSE_ABSOLUTE_ACCURACY)    {    this.mean    =    inverseCumAccuracy;    }    else    {    this.mean    =    inverseCumAccuracy;    }    	non-compiled	[CE]  not  a  statement	74	None	replace
258	[BUG]  [BUGGY]  this.mean  =  mean;  if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  this.mean  =  inverseCumAccuracy;  }  [CE]  cannot  find  symbol  MAX_INVERSE_ABSOLUTE_ACCURACY  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean;  if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  this.mean  =  inverseCumAccuracy;  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean;  if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  this.mean  =  inverseCumAccuracy;  }	  this.mean    =    inverseCumAccuracy;    if(inverseCumAccuracy    >    MAX_INVERSE_ABSOLUTE_ACCURACY)    {    this.mean    =    inverseCumAccuracy;    }    else    {    this.mean    =    inverseCumAccuracy;    }    	non-compiled	[CE]  cannot  find  symbol  MAX_INVERSE_ABSOLUTE_ACCURACY	74	None	replace
259	[BUG]  [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(inverseCumAccuracy  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  [CE]  illegal  start  of  expression  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(inverseCumAccuracy  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(inverseCumAccuracy  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {	  this.mean    =    inverseCumAccuracy;    if(inverseCumAccuracy    >    MAX_INVERSE_ABSOLUTE_ACCURACY)    {    this.mean    =    inverseCumAccuracy;    }    else    {    this.mean    =    inverseCumAccuracy;    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
260	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  inverseCumAccuracy;  [CE]  cannot  find  symbol  StandardDistributionImpl  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  inverseCumAccuracy;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  inverseCumAccuracy;	  this.standardDeviation    =    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    1;    	non-compiled	[CE]  cannot  find  symbol  StandardDistributionImpl	75	None	replace
261	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  3;  [CE]  cannot  find  symbol  StandardDistributionImpl  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  3;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  3;	  this.standardDeviation    =    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    1;    	non-compiled	[CE]  cannot  find  symbol  StandardDistributionImpl	75	None	replace
262	[BUG]  [BUGGY]  this.sd  =  inverseCumAccuracy;  [CE]  cannot  find  symbol  sd  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.sd  =  inverseCumAccuracy;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.sd  =  inverseCumAccuracy;	  this.sd    =    DEFAULT_INVERSE_ABSOLUTE;    	non-compiled	[CE]  cannot  find  symbol  sd	63	None	replace
263	[BUG]  [BUGGY]  this.mean  =  mean  +  inverseCumAccuracy;  this.sean  =  mean  +  inverseCumAccuracy;  [CE]  cannot  find  symbol  sean  [FE]    ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  +  inverseCumAccuracy;  this.sean  =  mean  +  inverseCumAccuracy;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    +    inverseCumAccuracy;    this.sean  =  mean  +  inverseCumAccuracy;	  	non-compiled	[CE]  cannot  find  symbol  sean	77	None	add
264	[BUG]  [BUGGY]  this.mean  =  mean  +  inverseCumAccuracy;  this.sqrt  =  inverseCumAccuracy  +  sd;  [CE]  cannot  find  symbol  sqrt  [FE]      ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  +  inverseCumAccuracy;  this.sqrt  =  inverseCumAccuracy  +  sd;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    +    inverseCumAccuracy;    this.sqrt  =  inverseCumAccuracy  +  sd;	  	non-compiled	[CE]  cannot  find  symbol  sqrt	77	None	add
265	[BUG]  [BUGGY]  this.standardDeviation  =  SQRT2PI.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  DEFAULT_INVERSE_ABSOLUTE_ACCURacy;  [CE]  double  cannot  be  dereferenced  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  SQRT2PI.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  DEFAULT_INVERSE_ABSOLUTE_ACCURacy;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  SQRT2PI.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  DEFAULT_INVERSE_ABSOLUTE_ACCURacy;	  this.standardDeviation    =    SQRT2PI.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  double  cannot  be  dereferenced	48	None	replace
266	[BUG]  [BUGGY]  this.standardDeviation  =  inverseCumAccuracy.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  double  cannot  be  dereferenced  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  inverseCumAccuracy.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  inverseCumAccuracy.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    SQRT2PI.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  double  cannot  be  dereferenced	48	None	replace
267	[BUG]  [BUGGY]  this.mean  =  mean  &  DEFAULT_INVERSION_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  &  DEFAULT_INVERSION_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean  &  DEFAULT_INVERSION_ABSOLUTE_ACCURACY;	  this.mean    =    DEFAULT_INVERSION_ABSOLUTE_ACCURACY    |    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_INVERSION_ABSOLUTE_ACCURACY	8	None	replace
268	[BUG]  [BUGGY]  this.sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  inverseCumAccuracy;  [CE]  cannot  find  symbol  sd  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  inverseCumAccuracy;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  inverseCumAccuracy;	  this.sd    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  cannot  find  symbol  sd	16	None	replace
269	[BUG]  [BUGGY]  this.mean  =  mean;  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  this.mean  =  inverseCumAccuracy;  }  [CE]  illegal  start  of  expression  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean;  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  this.mean  =  inverseCumAccuracy;  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean;  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  this.mean  =  inverseCumAccuracy;  }	  this.mean    =    inverseCumAccuracy;    if(sd    <    =    0)    {    this.mean    =    inverseCumAccuracy;    }    else    {    this.mean    =    inverseCumAccuracy;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
270	[BUG]  [BUGGY]  this.mean  =  mean;  if(sd  <  =  0)  {  this.mean  =  inverseAccumAccuracy;  }  else  {  this.mean  =  inverseAccumAccuracy;  }  [CE]  illegal  start  of  expression  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean;  if(sd  <  =  0)  {  this.mean  =  inverseAccumAccuracy;  }  else  {  this.mean  =  inverseAccumAccuracy;  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean;  if(sd  <  =  0)  {  this.mean  =  inverseAccumAccuracy;  }  else  {  this.mean  =  inverseAccumAccuracy;  }	  this.mean    =    inverseCumAccuracy;    if(sd    <    =    0)    {    this.mean    =    inverseCumAccuracy;    }    else    {    this.mean    =    inverseCumAccuracy;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
271	[BUG]  [BUGGY]  this.mean  =  mean;  if(sd  <  =  0)  {  this.mean  =  inverseAccuracy;  }  else  {  this.mean  =  inverseAccuracy;  }  [CE]  illegal  start  of  expression  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean;  if(sd  <  =  0)  {  this.mean  =  inverseAccuracy;  }  else  {  this.mean  =  inverseAccuracy;  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean;  if(sd  <  =  0)  {  this.mean  =  inverseAccuracy;  }  else  {  this.mean  =  inverseAccuracy;  }	  this.mean    =    inverseCumAccuracy;    if(sd    <    =    0)    {    this.mean    =    inverseCumAccuracy;    }    else    {    this.mean    =    inverseCumAccuracy;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
272	[BUG]  [BUGGY]  this.sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCOURY;  [CE]  cannot  find  symbol  sd  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCOURY;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCOURY;	  this.sd    =    DEFAULT_INVERSE_ABSOLUTE_ACCOURACY;    	non-compiled	[CE]  cannot  find  symbol  sd	18	None	replace
273	[BUG]  [BUGGY]  this.sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCOURY  +  1;  [CE]  cannot  find  symbol  sd  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCOURY  +  1;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCOURY  +  1;	  this.sd    =    DEFAULT_INVERSE_ABSOLUTE_ACCOURACY;    	non-compiled	[CE]  cannot  find  symbol  sd	18	None	replace
274	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;	  this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    1;    	compilable	  [FE]  AssertionFailedError  	45	7	replace
275	[BUG]  [BUGGY]  this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;	  this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    1;    	compilable	  [FE]  AssertionFailedError  	45	7	replace
276	[BUG]  [BUGGY]  if(inverseCumAccuracy  >  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  inverseCumAccuracy  =  DEFAUL  [CE]  ';'  expected  [FE]          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  if(inverseCumAccuracy  >  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  inverseCumAccuracy  =  DEFAUL  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	if(inverseCumAccuracy  >  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  inverseCumAccuracy  =  DEFAUL	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    inverseCumAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  ';'  expected	65	None	replace
277	[BUG]  [BUGGY]  if(inverseCumAccuracy  >  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  inverseCumAccuracy  =  DEFA  [CE]  ';'  expected  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  if(inverseCumAccuracy  >  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  inverseCumAccuracy  =  DEFA  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	if(inverseCumAccuracy  >  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  inverseCumAccuracy  =  DEFA	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    inverseCumAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  ';'  expected	65	None	replace
278	[BUG]  [BUGGY]  this.mean  =  DEFAULT_STANDARD_DEVIATION;  [CE]  cannot  find  symbol  DEFAULT_STANDARD_DEVIATION  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  DEFAULT_STANDARD_DEVIATION;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  DEFAULT_STANDARD_DEVIATION;	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    sd    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_STANDARD_DEVIATION	4	None	replace
279	[BUG]  [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.newInstance(inverseCumAccuracy,  sd,  solverAbsoluteAccuracy);  [CE]  cannot  find  symbol  [FE]                          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.newInstance(inverseCumAccuracy,  sd,  solverAbsoluteAccuracy);  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  NormalDistributionImpl.newInstance(inverseCumAccuracy,  sd,  solverAbsoluteAccuracy);	  this.standardDeviation    =    NormalDistributionImpl.newInstance(sd,    inverseCumAccuracy,    solverAbsoluteAccuracy);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
280	[BUG]  [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.newInstance(resolverAbsoluteAccuracy,  inverseCumAccuracy,  sd);  [CE]  cannot  find  symbol  resolverAbsoluteAccuracy  [FE]                            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.newInstance(resolverAbsoluteAccuracy,  inverseCumAccuracy,  sd);  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  NormalDistributionImpl.newInstance(resolverAbsoluteAccuracy,  inverseCumAccuracy,  sd);	  this.standardDeviation    =    NormalDistributionImpl.newInstance(sd,    inverseCumAccuracy,    solverAbsoluteAccuracy);    	non-compiled	[CE]  cannot  find  symbol  resolverAbsoluteAccuracy	22	None	replace
281	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;	  this.mean    =    inverseCumAccuracy    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  AssertionFailedError  	70	7	replace
282	[BUG]  [BUGGY]  this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;	  this.mean    =    inverseCumAccuracy    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  AssertionFailedError  	70	7	replace
283	[BUG]  [BUGGY]  this.symbol  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  symbol  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.symbol  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.symbol  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.sd    =    mean;    	non-compiled	[CE]  cannot  find  symbol  symbol	17	None	replace
284	[BUG]  [BUGGY]  if(mean  <  =  0)  {  this.mean  =  inverseCumAccuracy;  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVI  [CE]  illegal  start  of  expression  [FE]          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  if(mean  <  =  0)  {  this.mean  =  inverseCumAccuracy;  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVI  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	if(mean  <  =  0)  {  this.mean  =  inverseCumAccuracy;  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVI	  this.mean    =    inverseCumAccuracy;    if(sd    <    =    0)    {    this.mean    =    inverseCumAccuracy;    }    else    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
285	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  inverseCumAccuracy,  sd);  [CE]  cannot  find  symbol  StandardDistributionImpl  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  inverseCumAccuracy,  sd);  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  inverseCumAccuracy,  sd);	  this.standardDeviation    =    StandardDistributionImpl.newInstance(message,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  cannot  find  symbol  StandardDistributionImpl	93	None	replace
286	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(resolverAbsoluteAccuracy,  sd,  inverseCumAccuracy);  [CE]  cannot  find  symbol  resolverAbsoluteAccuracy  [FE]                        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(resolverAbsoluteAccuracy,  sd,  inverseCumAccuracy);  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  StandardDistributionImpl.newInstance(resolverAbsoluteAccuracy,  sd,  inverseCumAccuracy);	  this.standardDeviation    =    StandardDistributionImpl.newInstance(message,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  cannot  find  symbol  resolverAbsoluteAccuracy	93	None	replace
287	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(inverseCumAccuracy,  sd,  inverseCumAccuracy);  [CE]  cannot  find  symbol  StandardDistributionImpl  [FE]                          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(inverseCumAccuracy,  sd,  inverseCumAccuracy);  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  StandardDistributionImpl.newInstance(inverseCumAccuracy,  sd,  inverseCumAccuracy);	  this.standardDeviation    =    StandardDistributionImpl.newInstance(message,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  cannot  find  symbol  StandardDistributionImpl	93	None	replace
288	[BUG]  [BUGGY]  this.standardDeviation  =  new  Double(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  no  suitable  constructor  found  for  Double(double,double)  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  new  Double(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  new  Double(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  this.standardDeviation    =    new    Double(sd,    inverseCumAccuracy);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(double,double)	35	None	replace
289	[BUG]  [BUGGY]  this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSION_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSION_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSION_ABSOLUTE_ACCURACY;	  this.mean    =    mean    /    DEFAULT_INVERSION_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_INVERSION_ABSOLUTE_ACCURACY	98	None	replace
290	[BUG]  [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  this.mesan  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  [CE]  cannot  find  symbol  mesan  [FE]    ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  this.mesan  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    mean;    this.mesan  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;	  	non-compiled	[CE]  cannot  find  symbol  mesan	38	None	add
291	[BUG]  [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  this.sqrt2PI  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  [CE]  cannot  find  symbol  sqrt2PI  [FE]      ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  this.sqrt2PI  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    mean;    this.sqrt2PI  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;	  	non-compiled	[CE]  cannot  find  symbol  sqrt2PI	38	None	add
292	[BUG]  [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  means;  [CE]  cannot  find  symbol  means  [FE]        ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  means;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    mean;    this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  means;	  	non-compiled	[CE]  cannot  find  symbol  means	38	None	add
293	[BUG]  [BUGGY]  this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(mean  <  =  0)  {  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [CE]  illegal  start  of  expression  [FE]          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(mean  <  =  0)  {  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(mean  <  =  0)  {  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }	  this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    if(mean    <    =    0)    {    this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    else    {    this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
294	[BUG]  [BUGGY]  if(mean  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  expression  [FE]        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  if(mean  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	if(mean  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
295	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  /  sd  +  1;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  mean  /  sd  +  1;	  this.mean    =    mean    /    sd;    	compilable	  [FE]  AssertionFailedError  	67	7	replace
296	[BUG]  [BUGGY]  this.mean  =  mean  /  sd  +  1;  [FE]  AssertionFailedError  [FE]    ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  /  sd  +  1;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean  /  sd  +  1;	  this.mean    =    mean    /    sd;    	compilable	  [FE]  AssertionFailedError  	67	7	replace
297	[BUG]  [BUGGY]  this.sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURITY;  [CE]  cannot  find  symbol  sd  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURITY;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURITY;	  this.sd    =    DELETE_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  cannot  find  symbol  sd	62	None	replace
298	[BUG]  [BUGGY]  this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(inverseCumAccuracy  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  this.mean  =  inverseCumAccuracy  /  DEFA  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(inverseCumAccuracy  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  this.mean  =  inverseCumAccuracy  /  DEFA  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    inverseCumAccuracy    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    if(inverseCumAccuracy  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  this.mean  =  inverseCumAccuracy  /  DEFA	  	non-compiled	[CE]  ';'  expected	69	None	add
299	[BUG]  [BUGGY]  this.mean  =  mean;  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  SQRT2PI  [CE]  illegal  start  of  expression  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean;  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  SQRT2PI  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean;  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  SQRT2PI	  this.mean    =    inverseCumAccuracy;    if(sd    <    =    0)    {    this.mean    =    inverseCumAccuracy;    }    else    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    SQRT2PI);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
300	[BUG]  [BUGGY]  this.mean  =  mean;  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  SQRT  [CE]  illegal  start  of  expression  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean;  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  SQRT  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean;  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  SQRT	  this.mean    =    inverseCumAccuracy;    if(sd    <    =    0)    {    this.mean    =    inverseCumAccuracy;    }    else    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    SQRT2PI);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
301	[BUG]  [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  inverseAccuracy;  [CE]  cannot  find  symbol  inverseAccuracy  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  inverseAccuracy;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  inverseAccuracy;	  this.mean    =    inverseCumAccuracy;    this.mean    =    inverseAccuracy;    	non-compiled	[CE]  cannot  find  symbol  inverseAccuracy	82	None	replace
302	[BUG]  [BUGGY]  This.mean  =  mean;  this.mean  =  inverseAccuracy;  [CE]  cannot  find  symbol  This  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  This.mean  =  mean;  this.mean  =  inverseAccuracy;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	This.mean  =  mean;  this.mean  =  inverseAccuracy;	  this.mean    =    inverseCumAccuracy;    this.mean    =    inverseAccuracy;    	non-compiled	[CE]  cannot  find  symbol  This	82	None	replace
303	[BUG]  [BUGGY]  if(mean  <  =  0)  {  this.mean  =  sd;  if(inverseCumAccuracy  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  if(mean  <  =  0)  {  this.mean  =  sd;  if(inverseCumAccuracy  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	if(mean  <  =  0)  {  this.mean  =  sd;  if(inverseCumAccuracy  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  this.mean    =    sd;    if(mean    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    this.mean    =    sd;    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
304	[BUG]  [BUGGY]  if(mean  <  =  0)  {  this.mean  =  mean;  if(mean  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  if(mean  <  =  0)  {  this.mean  =  mean;  if(mean  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	if(mean  <  =  0)  {  this.mean  =  mean;  if(mean  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  this.mean    =    sd;    if(mean    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    this.mean    =    sd;    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
305	[BUG]  [BUGGY]  this.mean  =  mean  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mesan  =  mean  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  mesan  [FE]    ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mesan  =  mean  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    -    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    this.mesan  =  mean  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  	non-compiled	[CE]  cannot  find  symbol  mesan	96	None	add
306	[BUG]  [BUGGY]  this.mean  =  mean  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.sqrt2PI  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  sqrt2PI  [FE]      ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.sqrt2PI  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    -    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    this.sqrt2PI  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  	non-compiled	[CE]  cannot  find  symbol  sqrt2PI	96	None	add
307	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  inverseCumAccuracy  +  mean;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  inverseCumAccuracy  +  mean;	  this.mean    =    mean    +    inverseCumAccuracy;    	compilable	  [FE]  ConvergenceException  	78	4	replace
308	[BUG]  [BUGGY]  this.mean  =  inverseCumAccuracy  +  mean;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  inverseCumAccuracy  +  mean;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  inverseCumAccuracy  +  mean;	  this.mean    =    mean    +    inverseCumAccuracy;    	compilable	  [FE]  ConvergenceException  	78	4	replace
309	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  +  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  mean  +  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    mean    +    inverseCumAccuracy;    	compilable	  [FE]  ConvergenceException  	78	4	replace
310	[BUG]  [BUGGY]  this.mean  =  mean  +  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  +  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean  +  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    mean    +    inverseCumAccuracy;    	compilable	  [FE]  ConvergenceException  	78	4	replace
311	[BUG]  [BUGGY]  this.sd  =  sd,  solverAbsoluteAccuracy;  [CE]  ';'  expected  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.sd  =  sd,  solverAbsoluteAccuracy;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.sd  =  sd,  solverAbsoluteAccuracy;	  this.sd    =    sd,    inverseCumAccuracy;    	non-compiled	[CE]  ';'  expected	84	None	replace
312	[BUG]  [BUGGY]  this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [CE]  illegal  start  of  expression  [FE]        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }	  this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    if(sd    <    =    0)    {    this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    else    {    this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
313	[BUG]  [BUGGY]  this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE  [CE]  illegal  start  of  expression  [FE]          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE	  this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    if(sd    <    =    0)    {    this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    else    {    this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
314	[BUG]  [BUGGY]  this.mean  =  mean  +  sd;  this.standardDeviation  =  mean  +  sd;  [CE]  variable  mean  might  already  have  been  assigned  [FE]    AssertionFailedError    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  +  sd;  this.standardDeviation  =  mean  +  sd;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    +    sd;    this.standardDeviation  =  mean  +  sd;	  	non-compiled	[CE]  variable  mean  might  already  have  been  assigned	23	None	add
315	[BUG]  [BUGGY]  this.mean  =  mean  +  sd;  this.sean  =  mean  +  sd;  [CE]  cannot  find  symbol  sean  [FE]      AssertionFailedError    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  +  sd;  this.sean  =  mean  +  sd;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    +    sd;    this.sean  =  mean  +  sd;	  	non-compiled	[CE]  cannot  find  symbol  sean	23	None	add
316	[BUG]  [BUGGY]  this.standardDeviation  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  SQRT2PI;  [CE]  variable  standardDeviation  might  already  have  been  assigned  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  SQRT2PI;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  SQRT2PI;	  this.standardDeviation    =    inverseCumAccuracy    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  variable  standardDeviation  might  already  have  been  assigned	79	None	replace
317	[BUG]  [BUGGY]  this.message  =  mean;  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.message  =  mean;  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.message  =  mean;  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  this.mean    =    sd;    if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    this.mean    =    sd;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
318	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  +  1;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  mean  +  1;	  this.mean    =    mean    +    sd;    	compilable	  [FE]  AssertionFailedError  	24	7	replace
319	[BUG]  [BUGGY]  this.mean  =  mean  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  +  1;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean  +  1;	  this.mean    =    mean    +    sd;    	compilable	  [FE]  AssertionFailedError  	24	7	replace
320	[BUG]  [BUGGY]  this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  expression  [FE]    ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    *    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
321	[BUG]  [BUGGY]  this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.sqrt2PI  =  inverseCumAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  sqrt2PI  [FE]      ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.sqrt2PI  =  inverseCumAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    *    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    this.sqrt2PI  =  inverseCumAccuracy  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  	non-compiled	[CE]  cannot  find  symbol  sqrt2PI	46	None	add
322	[BUG]  [BUGGY]  this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(mean  <  =  0)  {  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  throw  new  NotStrictlyP  [CE]  illegal  start  of  expression  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(mean  <  =  0)  {  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  throw  new  NotStrictlyP  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(mean  <  =  0)  {  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  throw  new  NotStrictlyP	  this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    if(mean    <    =    0)    {    this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    else    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
323	[BUG]  [BUGGY]  this.mean  =  mean;  if(sd  <  =  0)  {  this.mean  =  sd;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  s  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean;  if(sd  <  =  0)  {  this.mean  =  sd;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  s  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean;  if(sd  <  =  0)  {  this.mean  =  sd;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  s	  this.mean    =    sd;    if(sd    <    =    0)    {    this.mean    =    sd;    }    else    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
324	[BUG]  [BUGGY]  this.mean  =  mean;  if(sd  <  =  0)  {  this.mean  =  sd;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean;  if(sd  <  =  0)  {  this.mean  =  sd;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean;  if(sd  <  =  0)  {  this.mean  =  sd;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION	  this.mean    =    sd;    if(sd    <    =    0)    {    this.mean    =    sd;    }    else    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
325	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;	  this.mean    =    mean    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  AssertionFailedError  	41	7	replace
326	[BUG]  [BUGGY]  this.mean  =  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [FE]  AssertionFailedError  [FE]    ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;	  this.mean    =    mean    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  AssertionFailedError  	41	7	replace
327	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  inverseCumAccuracy;  sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  inverseCumAccuracy;  sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    sd    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  AssertionFailedError  	86	10	replace
328	[BUG]  [BUGGY]  this.mean  =  inverseCumAccuracy;  sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [FE]  AssertionFailedError  [FE]        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  inverseCumAccuracy;  sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  inverseCumAccuracy;  sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    sd    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  AssertionFailedError  	86	10	replace
329	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  inverseCumAccuracy  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  inverseCumAccuracy  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    mean    -    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  ConvergenceException  	97	6	replace
330	[BUG]  [BUGGY]  this.mean  =  inverseCumAccuracy  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  inverseCumAccuracy  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  inverseCumAccuracy  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    mean    -    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  ConvergenceException  	97	6	replace
331	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  mean  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;	  this.mean    =    mean    -    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  AssertionFailedError  	97	7	replace
332	[BUG]  [BUGGY]  this.mean  =  mean  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [FE]  AssertionFailedError  [FE]      ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;	  this.mean    =    mean    -    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	  [FE]  AssertionFailedError  	97	7	replace
333	[BUG]  [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  mean;  [CE]  incompatible  types  [FE]        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  mean;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY?  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  :  mean;	  this.mean    =    mean?    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    :    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  incompatible  types	68	None	replace
334	[BUG]  [BUGGY]  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  this.mean  =  sd  /  DEFA  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  this.mean  =  sd  /  DEFA  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    sd    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    if(sd  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  this.mean  =  sd  /  DEFA	  	non-compiled	[CE]  ';'  expected	42	None	add
335	[BUG]  [BUGGY]  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  this.mean  =  sd  /  DEFAUL  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  this.mean  =  sd  /  DEFAUL  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    sd    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    if(sd  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  this.mean  =  sd  /  DEFAUL	  	non-compiled	[CE]  ';'  expected	42	None	add
336	[BUG]  [BUGGY]  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  sd  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [CE]  variable  mean  might  already  have  been  assigned  [FE]    AssertionFailedError    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  sd  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    1;    sd  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  1;	  	non-compiled	[CE]  variable  mean  might  already  have  been  assigned	44	None	add
337	[BUG]  [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy;  [CE]  ';'  expected  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy;	  this.standardDeviation    =    sd,    inverseCumAccuracy;    	non-compiled	[CE]  ';'  expected	33	None	replace
338	[BUG]  [BUGGY]  this.mean  =  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mesan  =  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  mesan  [FE]    ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mesan  =  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    this.mesan  =  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  	non-compiled	[CE]  cannot  find  symbol  mesan	40	None	add
339	[BUG]  [BUGGY]  this.mean  =  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.sean  =  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  sean  [FE]      ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.sean  =  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    this.sean  =  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  	non-compiled	[CE]  cannot  find  symbol  sean	40	None	add
340	[BUG]  [BUGGY]  this.mean  =  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.sqrt2PI  =  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  sqrt2PI  [FE]        ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.sqrt2PI  =  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    +    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    this.sqrt2PI  =  mean  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  	non-compiled	[CE]  cannot  find  symbol  sqrt2PI	40	None	add
341	[BUG]  [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  inverseCumAccuracy;  [CE]  variable  standardDeviation  might  already  have  been  assigned  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  NormalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  inverseCumAccuracy;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  NormalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  inverseCumAccuracy;	  this.standardDeviation    =    NormalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  variable  standardDeviation  might  already  have  been  assigned	49	None	replace
342	[BUG]  [BUGGY]  this.standardDeviation  =  sd  +  4;  [CE]  variable  standardDeviation  might  already  have  been  assigned  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  sd  +  4;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  sd  +  4;	  this.standardDeviation    =    sd    +    1;    	non-compiled	[CE]  variable  standardDeviation  might  already  have  been  assigned	15	None	replace
343	[BUG]  [BUGGY]  this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [CE]  illegal  start  of  expression  [FE]    ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    *    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    if(sd  <  =  0)  {  this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
344	[BUG]  [BUGGY]  this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  expression  [FE]      ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    *    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    if(sd  <  =  0)  {  this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
345	[BUG]  [BUGGY]  this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [CE]  illegal  start  of  expression  [FE]        ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(sd  <  =  0)  {  this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    *    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    if(sd  <  =  0)  {  this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
346	[BUG]  [BUGGY]  this.standardDeviation  =  new  Double(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [CE]  no  suitable  constructor  found  for  Double(double,double,double)  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  new  Double(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  new  Double(sd,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  inverseCumAccuracy);	  this.standardDeviation    =    new    Double(sd,    inverseCumAccuracy);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(double,double,double)	35	None	replace
347	[BUG]  [BUGGY]  this.mean  =  mean  /  sd;  if(mean  <  =  0)  {  this.mean  =  mean  /  sd;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  }  [CE]  illegal  start  of  expression  [FE]    ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  /  sd;  if(mean  <  =  0)  {  this.mean  =  mean  /  sd;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    /    sd;    if(mean  <  =  0)  {  this.mean  =  mean  /  sd;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  }	  	non-compiled	[CE]  illegal  start  of  expression	66	None	add
348	[BUG]  [BUGGY]  this.mean  =  mean  /  sd;  if(mean  <  =  0)  {  this.mean  =  mean  /  sd;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  expression  [FE]      ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  /  sd;  if(mean  <  =  0)  {  this.mean  =  mean  /  sd;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    /    sd;    if(mean  <  =  0)  {  this.mean  =  mean  /  sd;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  	non-compiled	[CE]  illegal  start  of  expression	66	None	add
349	[BUG]  [BUGGY]  this.mean  =  mean  /  sd;  if(mean  <  =  0)  {  this.mean  =  mean  /  sd;  }  else  {  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [CE]  illegal  start  of  expression  [FE]        ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  /  sd;  if(mean  <  =  0)  {  this.mean  =  mean  /  sd;  }  else  {  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    /    sd;    if(mean  <  =  0)  {  this.mean  =  mean  /  sd;  }  else  {  this.standardDeviation  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }	  	non-compiled	[CE]  illegal  start  of  expression	66	None	add
350	[BUG]  [BUGGY]  this.mean  =  mean  /  sd;  if(mean  <  =  0)  {  this.mean  =  mean  /  sd;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  [CE]  illegal  start  of  expression  [FE]          ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  /  sd;  if(mean  <  =  0)  {  this.mean  =  mean  /  sd;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    /    sd;    if(mean  <  =  0)  {  this.mean  =  mean  /  sd;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY	  	non-compiled	[CE]  illegal  start  of  expression	66	None	add
351	[BUG]  [BUGGY]  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  SQRT2PI);  }  [CE]  illegal  start  of  expression  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  SQRT2PI);  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  SQRT2PI);  }	  this.mean    =    inverseCumAccuracy;    if(sd    <    =    0)    {    this.mean    =    inverseCumAccuracy;    }    else    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    SQRT2PI);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
352	[BUG]  [BUGGY]  this.sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  sd  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.sd    =    DESC_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  cannot  find  symbol  sd	83	None	replace
353	[BUG]  [BUGGY]  this.sd  =  DESC_INVERSE_ABSOLUTE_ACCURACY  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  sd  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.sd  =  DESC_INVERSE_ABSOLUTE_ACCURACY  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.sd  =  DESC_INVERSE_ABSOLUTE_ACCURACY  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.sd    =    DESC_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  cannot  find  symbol  sd	83	None	replace
354	[BUG]  [BUGGY]  this.sd  =  deFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  sd  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.sd  =  deFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.sd  =  deFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.sd    =    DEFAULT_INVERSE_ABSOLUTE_ACCOURACY;    	non-compiled	[CE]  cannot  find  symbol  sd	18	None	replace
355	[BUG]  [BUGGY]  this.standardDeviation  =  new  Double(sd  +  1,  inverseCumAccuracy);  [CE]  no  suitable  constructor  found  for  Double(double,double)  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  new  Double(sd  +  1,  inverseCumAccuracy);  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  new  Double(sd  +  1,  inverseCumAccuracy);	  this.standardDeviation    =    new    Double(sd    +    1);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(double,double)	36	None	replace
356	[BUG]  [BUGGY]  this.standardDeviation  =  mean;  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  expression  [FE]          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  mean;  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  mean;  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  this.mean    =    inverseCumAccuracy;    if(sd    <    =    0)    {    this.mean    =    inverseCumAccuracy;    }    else    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
357	[BUG]  [BUGGY]  this.standardDeviation  =  sd  +  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  variable  standardDeviation  might  already  have  been  assigned  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  sd  +  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  sd  +  inverseCumAccuracy  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    sd    +    inverseCumAccuracy;    	non-compiled	[CE]  variable  standardDeviation  might  already  have  been  assigned	34	None	replace
358	[BUG]  [BUGGY]  this.standardDeviation  =  sd,  inverseCumAccuracy  +  1;  [CE]  ';'  expected  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  sd,  inverseCumAccuracy  +  1;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  sd,  inverseCumAccuracy  +  1;	  this.standardDeviation    =    sd,    inverseCumAccuracy;    	non-compiled	[CE]  ';'  expected	33	None	replace
359	[BUG]  [BUGGY]  this.standardDeviation  =  sd.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  double  cannot  be  dereferenced  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  sd.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  sd.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    SQRT2PI.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  double  cannot  be  dereferenced	48	None	replace
360	[BUG]  [BUGGY]  this.standardDeviation  =  sd,  SQRT2PI.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  ';'  expected  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  sd,  SQRT2PI.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  sd,  SQRT2PI.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    SQRT2PI.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  ';'  expected	48	None	replace
361	[BUG]  [BUGGY]  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(mean  <  =  0)  {  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [CE]  illegal  start  of  expression  [FE]          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(mean  <  =  0)  {  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(mean  <  =  0)  {  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }	  this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    if(mean    <    =    0)    {    this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    else    {    this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
362	[BUG]  [BUGGY]  if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  DEFAULT_INVERS  [CE]  illegal  start  of  expression  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  DEFAULT_INVERS  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  DEFAULT_INVERS	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    sd    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
363	[BUG]  [BUGGY]  if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  DEFAULT_INVERSE_  [CE]  illegal  start  of  expression  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  DEFAULT_INVERSE_  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  sd  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  DEFAULT_INVERSE_	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    sd    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
364	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  inverseCumAccuracy,  inverseCumAccuracy);  [CE]  cannot  find  symbol  StandardDistributionImpl  [FE]                      ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  inverseCumAccuracy,  inverseCumAccuracy);  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  StandardDistributionImpl.newInstance(sd,  inverseCumAccuracy,  inverseCumAccuracy);	  this.standardDeviation    =    StandardDistributionImpl.newInstance(message,    sd,    inverseCumAccuracy);    	non-compiled	[CE]  cannot  find  symbol  StandardDistributionImpl	93	None	replace
365	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  /  SQRT2PI;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  mean  /  SQRT2PI;	  this.mean    =    mean    /    sd;    	compilable	  [FE]  ConvergenceException  	67	6	replace
366	[BUG]  [BUGGY]  this.mean  =  mean  /  SQRT2PI;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  /  SQRT2PI;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean  /  SQRT2PI;	  this.mean    =    mean    /    sd;    	compilable	  [FE]  ConvergenceException  	67	6	replace
367	[BUG]  [BUGGY]  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  sd  /  DEFAULT_INVERSE_BSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  DEFAULT_INVERSE_BSOLUTE_ACCURACY  [FE]    AssertionFailedError    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  sd  /  DEFAULT_INVERSE_BSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    sd    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    this.mean  =  sd  /  DEFAULT_INVERSE_BSOLUTE_ACCURACY;	  	non-compiled	[CE]  cannot  find  symbol  DEFAULT_INVERSE_BSOLUTE_ACCURACY	42	None	add
368	[BUG]  [BUGGY]  this.message  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  message  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.message  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.message  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.sd    =    mean;    	non-compiled	[CE]  cannot  find  symbol  message	17	None	replace
369	[BUG]  [BUGGY]  if(mean  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  super();  this.mean  =  inverseCumAccuracy;  }  [CE]  illegal  start  of  expression  [FE]          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  if(mean  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  super();  this.mean  =  inverseCumAccuracy;  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	if(mean  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  super();  this.mean  =  inverseCumAccuracy;  }	  this.mean    =    inverseCumAccuracy;    super();    this.mean    =    inverseCumAccuracy;    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
370	[BUG]  [BUGGY]  if(mean  <  =  0)  {  this.mean  =  sd;  if(mean  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  else  {  this.mean  =  s  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  if(mean  <  =  0)  {  this.mean  =  sd;  if(mean  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  else  {  this.mean  =  s  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	if(mean  <  =  0)  {  this.mean  =  sd;  if(mean  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  else  {  this.mean  =  s	  this.mean    =    sd;    if(mean    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    else    {    this.mean    =    sd;    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
371	[BUG]  [BUGGY]  this.standardDeviation  =  mean;  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  else  {  this.mean  =  sd;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  mean;  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  else  {  this.mean  =  sd;  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  mean;  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  else  {  this.mean  =  sd;  }	  this.mean    =    sd;    if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    else    {    this.mean    =    sd;    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
372	[BUG]  [BUGGY]  if(mean  <  =  0)  {  this.mean  =  sd;  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  else  {  this.mean  =  s  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  if(mean  <  =  0)  {  this.mean  =  sd;  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  else  {  this.mean  =  s  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	if(mean  <  =  0)  {  this.mean  =  sd;  if(sd  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  else  {  this.mean  =  s	  this.mean    =    sd;    if(sd    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    else    {    this.mean    =    sd;    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
373	[BUG]  [BUGGY]  this.mean  =  mean;  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  inverseCumAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  variable  mean  might  already  have  been  assigned  [FE]          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean;  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  inverseCumAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean;  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  inverseCumAccuracy  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    inverseCumAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  variable  mean  might  already  have  been  assigned	65	None	replace
374	[BUG]  [BUGGY]  if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  inverseCumAccuracy  =  DEFAULT_INVERS  [CE]  illegal  start  of  expression  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  inverseCumAccuracy  =  DEFAULT_INVERS  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  inverseCumAccuracy  =  DEFAULT_INVERS	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    inverseCumAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
375	[BUG]  [BUGGY]  if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  inverseCumAccuracy  =  DEFAULT_IN  [CE]  illegal  start  of  expression  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  inverseCumAccuracy  =  DEFAULT_IN  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  inverseCumAccuracy  =  DEFAULT_IN	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    inverseCumAccuracy    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
376	[BUG]  [BUGGY]  if(mean  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  if(mean  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	if(mean  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  this.mean    =    sd;    if(mean    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    this.mean    =    sd;    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
377	[BUG]  [BUGGY]  if(mean  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  sd;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  if(mean  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  sd;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	if(mean  <  =  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  this.mean  =  sd;	  this.mean    =    sd;    if(mean    <    =    0)    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    this.mean    =    sd;    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
378	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  sd  +  mean;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  sd  +  mean;	  this.mean    =    mean    +    sd;    	compilable	  [FE]  AssertionFailedError  	24	7	replace
379	[BUG]  [BUGGY]  this.mean  =  sd  +  mean;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  sd  +  mean;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  sd  +  mean;	  this.mean    =    mean    +    sd;    	compilable	  [FE]  AssertionFailedError  	24	7	replace
380	[BUG]  [BUGGY]  this.standardDeviation  =  mean;  if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats  [CE]  ')'  expected  [FE]        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  mean;  if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  mean;  if(inverseCumAccuracy  >  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats	  this.mean    =    inverseCumAccuracy;    if(inverseCumAccuracy    >    MAX_INVERSE_ABSOLUTE_ACCURACY)    {    this.mean    =    inverseCumAccuracy;    }    else    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVI    	non-compiled	[CE]  ')'  expected	71	None	replace
381	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(sd,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  cannot  find  symbol  StandardDistributionImpl  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(sd,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  StandardDistributionImpl.create(sd,  solverAbsoluteAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  this.standardDeviation    =    StandardDistributionImpl.create(sd,    solverAbsoluteAccuracy);    	non-compiled	[CE]  cannot  find  symbol  StandardDistributionImpl	29	None	replace
382	[BUG]  [BUGGY]  this.mean  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  /  mean;  [CE]  cannot  find  symbol  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  /  mean;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  DEFAULT_INVERSION_ABSOLUTE_ACCURACY  /  mean;	  this.mean    =    DEFAULT_INVERSION_ABSOLUTE_ACCURACY    +    mean;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_INVERSION_ABSOLUTE_ACCURACY	9	None	replace
383	[BUG]  [BUGGY]  this.mean  =  mean  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  bad  operand  types  for  binary  operator  '|'  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean  |  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    DEFAULT_INVERSION_ABSOLUTE_ACCURACY    |    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '|'	8	None	replace
384	[BUG]  [BUGGY]  if(mean  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  this.mean  =  inverseCumAccuracy;  }  [CE]  illegal  start  of  expression  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  if(mean  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  this.mean  =  inverseCumAccuracy;  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	if(mean  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  else  {  this.mean  =  inverseCumAccuracy;  }	  this.mean    =    inverseCumAccuracy;    if(sd    <    =    0)    {    this.mean    =    inverseCumAccuracy;    }    else    {    this.mean    =    inverseCumAccuracy;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
385	[BUG]  [BUGGY]  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  [CE]  illegal  start  of  expression  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	if(sd  <  =  0)  {  this.mean  =  inverseCumAccuracy;  }	  this.mean    =    inverseCumAccuracy;    if(sd    <    =    0)    {    this.mean    =    inverseCumAccuracy;    }    else    {    this.mean    =    inverseCumAccuracy;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
386	[BUG]  [BUGGY]  if(mean  <  =  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  [CE]  illegal  start  of  expression  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  if(mean  <  =  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	if(mean  <  =  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,	  this.mean    =    inverseCumAccuracy;    if(inverseCumAccuracy    >    MAX_INVERSE_ABSOLUTE_ACCURACY)    {    this.mean    =    inverseCumAccuracy;    }    else    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
387	[BUG]  [BUGGY]  if(mean  <  =  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVI  [CE]  illegal  start  of  expression  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  if(mean  <  =  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVI  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	if(mean  <  =  MAX_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVI	  this.mean    =    inverseCumAccuracy;    if(inverseCumAccuracy    >    MAX_INVERSE_ABSOLUTE_ACCURACY)    {    this.mean    =    inverseCumAccuracy;    }    else    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
388	[BUG]  [BUGGY]  if(mean  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [CE]  illegal  start  of  expression  [FE]          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  if(mean  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	if(mean  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    if(sd    <    =    0)    {    this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    else    {    this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
389	[BUG]  [BUGGY]  if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [CE]  illegal  start  of  expression  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    if(sd    <    =    0)    {    this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    else    {    this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
390	[BUG]  [BUGGY]  if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [CE]  illegal  start  of  expression  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    if(sd    <    =    0)    {    this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    else    {    this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
391	[BUG]  [BUGGY]  this.mean  =  mean  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  sd  =  mean  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  variable  mean  might  already  have  been  assigned  [FE]    ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  sd  =  mean  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    mean    -    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    sd  =  mean  -  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  	non-compiled	[CE]  variable  mean  might  already  have  been  assigned	96	None	add
392	[BUG]  [BUGGY]  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(mean  <  =  0)  {  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  throw  new  NotStrictly  [CE]  illegal  start  of  expression  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(mean  <  =  0)  {  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  throw  new  NotStrictly  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(mean  <  =  0)  {  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  throw  new  NotStrictly	  this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    if(mean    <    =    0)    {    this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    else    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
393	[BUG]  [BUGGY]  if(mean  <  =  0)  {  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(mean  <  =  0)  {  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [CE]  illegal  start  of  expression  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  if(mean  <  =  0)  {  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(mean  <  =  0)  {  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	if(mean  <  =  0)  {  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(mean  <  =  0)  {  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }	  this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    if(mean    <    =    0)    {    this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    else    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
394	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  2;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  2;	  this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    1;    	compilable	  [FE]  AssertionFailedError  	45	8	replace
395	[BUG]  [BUGGY]  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  2;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  2;	  this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    1;    	compilable	  [FE]  AssertionFailedError  	45	8	replace
396	[BUG]  [BUGGY]  this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  This.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  This  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  This.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean  *  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  This.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    This.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  cannot  find  symbol  This	27	None	replace
397	[BUG]  [BUGGY]  this.sd  =  deFAULT_INVERSE_ABSOLUTE;  [CE]  cannot  find  symbol  sd  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.sd  =  deFAULT_INVERSE_ABSOLUTE;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.sd  =  deFAULT_INVERSE_ABSOLUTE;	  this.sd    =    DEFAULT_INVERSE_ABSOLUTE;    	non-compiled	[CE]  cannot  find  symbol  sd	63	None	replace
398	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(sd,  inverseCumAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  cannot  find  symbol  StandardDistributionImpl  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.create(sd,  inverseCumAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  StandardDistributionImpl.create(sd,  inverseCumAccuracy,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  this.standardDeviation    =    StandardDistributionImpl.create(sd,    inverseCumAccuracy,    solverAbsoluteAccuracy);    	non-compiled	[CE]  cannot  find  symbol  StandardDistributionImpl	30	None	replace
399	[BUG]  [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  this.mean  =  deFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  [CE]  cannot  find  symbol  deFAULT_INVERSE_ABSOLUTE_ACCURACY  [FE]    ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  this.mean  =  deFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    mean;    this.mean  =  deFAULT_INVERSE_ABSOLUTE_ACCURACY  +  mean;	  	non-compiled	[CE]  cannot  find  symbol  deFAULT_INVERSE_ABSOLUTE_ACCURACY	38	None	add
400	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  new  Double(mean);  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  new  Double(mean);	  this.mean    =    sd;    this.mean    =    sd;    	compilable	  [FE]  ConvergenceException  	50	1	replace
401	[BUG]  [BUGGY]  this.mean  =  new  Double(mean);  [FE]  ConvergenceException  [FE]        AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  new  Double(mean);  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  new  Double(mean);	  this.mean    =    sd;    this.mean    =    sd;    	compilable	  [FE]  ConvergenceException  	50	1	replace
402	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  mean;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  mean;	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    mean;    	compilable	  [FE]  ConvergenceException  	39	8	replace
403	[BUG]  [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  mean;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  mean;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  /  mean;	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    mean;    	compilable	  [FE]  ConvergenceException  	39	8	replace
404	[BUG]  [BUGGY]  timeout  [FE]          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  sd  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	sd  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    sd    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	timeout	95	1	replace
405	[BUG]  [BUGGY]  sd  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  timeout  [FE]          ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  sd  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	sd  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  mean  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    sd    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	compilable	timeout	95	1	replace
406	[BUG]  [BUGGY]  if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [CE]  illegal  start  of  expression  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	if(sd  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    if(sd    <    =    0)    {    this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    else    {    mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
407	[BUG]  [BUGGY]  if(mean  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [CE]  illegal  start  of  expression  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  if(mean  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	if(mean  <  =  0)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    if(sd    <    =    0)    {    this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    else    {    mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
408	[BUG]  [BUGGY]  if(sd  <  =  0  ||  mean  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  mean  =  DEFAULT_INVERSE_  [CE]  illegal  start  of  expression  [FE]                    ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  if(sd  <  =  0  ||  mean  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  mean  =  DEFAULT_INVERSE_  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	if(sd  <  =  0  ||  mean  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  mean  =  DEFAULT_INVERSE_	  this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    if(sd    <    =    0)    {    this.mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    else    {    mean    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
409	[BUG]  [BUGGY]  this.sd  =  sd,  inverseCumAccuracy  +  2;  [CE]  ';'  expected  [FE]                  ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.sd  =  sd,  inverseCumAccuracy  +  2;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.sd  =  sd,  inverseCumAccuracy  +  2;	  this.sd    =    sd,    inverseCumAccuracy;    	non-compiled	[CE]  ';'  expected	84	None	replace
410	[BUG]  [BUGGY]  this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  sd  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  variable  mean  might  already  have  been  assigned  [FE]    AssertionFailedError    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  sd  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    inverseCumAccuracy    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    sd  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  	non-compiled	[CE]  variable  mean  might  already  have  been  assigned	69	None	add
411	[BUG]  [BUGGY]  this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(inverseCumAccuracy  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  this.mean  =  inverseCumAcc  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  if(inverseCumAccuracy  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  this.mean  =  inverseCumAcc  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean    =    inverseCumAccuracy    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    if(inverseCumAccuracy  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  }  else  {  this.mean  =  inverseCumAcc	  	non-compiled	[CE]  ';'  expected	69	None	add
412	[BUG]  [BUGGY]  this.mean  =  mean;  if(inverseCumAccuracy  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  inverseCumAccuracy  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCum  [CE]  ';'  expected  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean;  if(inverseCumAccuracy  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  inverseCumAccuracy  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCum  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean;  if(inverseCumAccuracy  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  inverseCumAccuracy  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCum	  this.mean    =    inverseCumAccuracy;    this.mean    =    inverseAccuracy;    	non-compiled	[CE]  ';'  expected	82	None	replace
413	[BUG]  [BUGGY]  this.mean  =  mean;  if(inverseCumAccuracy  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  [CE]  variable  mean  might  already  have  been  assigned  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean;  if(inverseCumAccuracy  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean;  if(inverseCumAccuracy  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }	  this.mean    =    inverseCumAccuracy;    this.mean    =    inverseAccuracy;    	non-compiled	[CE]  variable  mean  might  already  have  been  assigned	82	None	replace
414	[BUG]  [BUGGY]  this.mean  =  mean;  if(inverseCumAccuracy  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  inverseCumAccuracy  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  [CE]  variable  mean  might  already  have  been  assigned  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean;  if(inverseCumAccuracy  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  inverseCumAccuracy  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean;  if(inverseCumAccuracy  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  inverseCumAccuracy  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }	  this.mean    =    inverseCumAccuracy;    this.mean    =    inverseAccuracy;    	non-compiled	[CE]  variable  mean  might  already  have  been  assigned	82	None	replace
415	[BUG]  [BUGGY]  this.sd  =  defULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  sd  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.sd  =  defULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.sd  =  defULT_INVERSE_ABSOLUTE_ACCURACY;	  this.sd    =    DELETE_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  cannot  find  symbol  sd	62	None	replace
416	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  *  inverseCumAccuracy;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  mean  *  inverseCumAccuracy;	  this.mean    =    mean    +    inverseCumAccuracy;    	compilable	  [FE]  ConvergenceException  	78	6	replace
417	[BUG]  [BUGGY]  this.mean  =  mean  *  inverseCumAccuracy;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean  *  inverseCumAccuracy;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean  *  inverseCumAccuracy;	  this.mean    =    mean    +    inverseCumAccuracy;    	compilable	  [FE]  ConvergenceException  	78	6	replace
418	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean;  inverseCumAccuracy  =  inverseCumAccuracy;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	add	this.mean  =  mean;  inverseCumAccuracy  =  inverseCumAccuracy;	  this.mean    =    inverseCumAccuracy;    this.mean    =    inverseCumAccuracy;    	compilable	  [FE]  ConvergenceException  	10	1	replace
419	[BUG]  [BUGGY]  this.mean  =  mean;  inverseCumAccuracy  =  inverseCumAccuracy;  [FE]  ConvergenceException  [FE]        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean;  inverseCumAccuracy  =  inverseCumAccuracy;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean;  inverseCumAccuracy  =  inverseCumAccuracy;	  this.mean    =    inverseCumAccuracy;    this.mean    =    inverseCumAccuracy;    	compilable	  [FE]  ConvergenceException  	10	1	replace
420	[BUG]  [BUGGY]  sd  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  variable  mean  might  not  have  been  initialized  [FE]        ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  sd  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	sd  =  sd  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.mean    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    sd    =    mean    /    DEFAULT_INVERSE_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  variable  mean  might  not  have  been  initialized	55	None	replace
421	[BUG]  [BUGGY]  this.mean  =  mean;  if(inverseCumAccuracy  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  this.mean  =  inverseCumAccuracy;  }  [CE]  variable  mean  might  already  have  been  assigned  [FE]              ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.mean  =  mean;  if(inverseCumAccuracy  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  this.mean  =  inverseCumAccuracy;  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.mean  =  mean;  if(inverseCumAccuracy  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  this.mean  =  inverseCumAccuracy;  }	  this.mean    =    inverseCumAccuracy;    if(inverseCumAccuracy    >    MAX_INVERSE_ABSOLUTE_ACCURACY)    {    this.mean    =    inverseCumAccuracy;    }    else    {    this.mean    =    inverseCumAccuracy;    }    	non-compiled	[CE]  variable  mean  might  already  have  been  assigned	74	None	replace
422	[BUG]  [BUGGY]  this.standardDeviation  =  mean;  if(inverseCumAccuracy  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  this.mean  =  inverseCumAccuracy;  }  [CE]  variable  standardDeviation  might  already  have  been  assigned  [FE]                ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  mean;  if(inverseCumAccuracy  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  this.mean  =  inverseCumAccuracy;  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  mean;  if(inverseCumAccuracy  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  this.mean  =  inverseCumAccuracy;  }  else  {  this.mean  =  inverseCumAccuracy;  }	  this.mean    =    inverseCumAccuracy;    if(inverseCumAccuracy    >    MAX_INVERSE_ABSOLUTE_ACCURACY)    {    this.mean    =    inverseCumAccuracy;    }    else    {    this.mean    =    inverseCumAccuracy;    }    	non-compiled	[CE]  variable  standardDeviation  might  already  have  been  assigned	74	None	replace
423	[BUG]  [BUGGY]  if(sd  <  =  0)  {  this.mean  =  sd;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  if(sd  <  =  0)  {  this.mean  =  sd;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }  [BUGGY]      standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	if(sd  <  =  0)  {  this.mean  =  sd;  }  else  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }	  this.mean    =    sd;    if(sd    <    =    0)    {    this.mean    =    sd;    }    else    {    throw    new    NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,    sd);    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
424	[BUG]  [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  StandardDistributionImpl  [FE]            ConvergenceException      [CONTEXT]      public  NormalDistributionImpl(double  mean,  double  sd,  double  inverseCumAccuracy)  {  if  (sd  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION,  sd);  }      [BUGGY]  this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]      this.mean  =  mean;  standardDeviation  =  sd;  solverAbsoluteAccuracy  =  inverseCumAccuracy;  }  [CLASS]  NormalDistributionImpl  [METHOD]  <init>  [RETURN_TYPE]  NormalDistributionImpl(double,double,double)  double  mean  double  sd  double  inverseCumAccuracy  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  SQRT2PI  inverseCumAccuracy  mean  sd  solverAbsoluteAccuracy  standardDeviation  long  serialVersionUID  boolean  	projects/Math60/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.2672612419124244	78	78	1	replace	this.standardDeviation  =  StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	  this.standardDeviation    =    StandardDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY    +    1;    	non-compiled	[CE]  cannot  find  symbol  StandardDistributionImpl	75	None	replace
